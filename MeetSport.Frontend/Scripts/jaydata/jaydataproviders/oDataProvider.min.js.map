{"version":3,"sources":["oDataProvider.js","src/Types/StorageProviders/oData/index.js","src/Types/StorageProviders/oData/oDataCompiler.js","src/Types/StorageProviders/oData/src/Types/StorageProviders/oData/oDataConverter.js","src/Types/StorageProviders/oData/oDataOrderCompiler.js","src/Types/StorageProviders/oData/oDataPagingCompiler.js","src/Types/StorageProviders/oData/oDataProjectionCompiler.js","src/Types/StorageProviders/oData/src/Types/StorageProviders/oData/oDataProvider.js","src/Types/StorageProviders/oData/oDataWhereCompiler.js"],"names":["interopDefine","define","amd","deps","callback","f","exports","module","g","window","global","self","this","$data","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_core","_core2","_oDataConverter","_oDataProvider","_oDataCompiler","_oDataWhereCompiler","_oDataOrderCompiler","_oDataPagingCompiler","_oDataProjectionCompiler","./oDataCompiler.js","./oDataConverter.js","./oDataOrderCompiler.js","./oDataPagingCompiler.js","./oDataProjectionCompiler.js","./oDataProvider.js","./oDataWhereCompiler.js","jaydata/core",2,"$C","Expressions","EntityExpressionVisitor","constructor","context","provider","includes","mainEntitySet","compile","query","storageProvider","defaultType","getEntitySetFromElementType","queryFragments","urlText","Visit","expression","modelBinderConfig","modelBinder","Container","createModelBinderConfigCompiler","queryText","addAmp","name","postData","result","withInlineCount","method","isBatchExecuteQuery","_isBatchExecuteQuery","subQueries","_subQueries","params","_getComplitedData","VisitOrderExpression","source","orderCompiler","createoDataOrderCompiler","VisitPagingExpression","pagingCompiler","createoDataPagingCompiler","VisitIncludeExpression","selector","replace","includeFragment","split","tempData","storageModel","entityContext","_storageModel","getStorageModel","createNew","association","Associations","some","include","push","type","ToType","Guard","raise","Exception","VisitFindExpression","subMember","memberName","param","typeName","resolveName","converter","fieldConverter","toDb","escape","VisitProjectionExpression","projectionCompiler","createoDataProjectionCompiler","VisitFilterExpression","filterCompiler","createoDataWhereCompiler","data","VisitInlineCountExpression","providerConfiguration","maxDataServiceVersion","VisitEntitySetExpression","instance","tableName","VisitServiceOperationExpression","boundItem","entitySet","Entity","getEntityKeysValue","cfg","namespace","serviceName","VisitBatchDeleteExpression","VisitConstantExpression","fullName","undefined","VisitCountExpression","VisitBatchExecuteQueryExpression","__batchRequests","members","queryable","compiler","storageProviders","oData","oDataCompiler","compiled","requestUri","headers",3,"_atob","_atob2","defaults","oDataWebApi","oDataConverter","fromDb","$data.Enum","v","enumType","convertTo","$data.Byte","proxyConverter","$data.SByte","$data.Decimal","Decimal","$data.Float","$data.Int16","$data.Int64","Int64","$data.ObjectID","$data.Integer","$data.Int32","$data.Number","$data.Date","dbData","Date","substring","parseInt","substr","indexOf","match","$data.DateTimeOffset","$data.Time","Time","$data.Day","$data.Duration","$data.String","$data.Boolean","$data.Blob","$data.Object","JSON","parse","$data.Array","Array","$data.GeographyPoint","GeographyPoint","$data.GeographyLineString","GeographyLineString","$data.GeographyPolygon","GeographyPolygon","$data.GeographyMultiPoint","GeographyMultiPoint","$data.GeographyMultiLineString","GeographyMultiLineString","$data.GeographyMultiPolygon","GeographyMultiPolygon","$data.GeographyCollection","GeographyCollection","$data.GeometryPoint","GeometryPoint","$data.GeometryLineString","GeometryLineString","$data.GeometryPolygon","GeometryPolygon","$data.GeometryMultiPoint","GeometryMultiPoint","$data.GeometryMultiLineString","GeometryMultiLineString","$data.GeometryMultiPolygon","GeometryMultiPolygon","$data.GeometryCollection","GeometryCollection","$data.Guid","guid","toString","$data.Entity","toISOString","Blob","toBase64","stringify","d","encodeURIComponent","date","text","bool","b","GeographyBase","stringifyToUrl","GeometryBase","unescape","c","config","resolveType","converters","toLowerCase","lastIndexOf","test","slice","parseGuid","elementType","isAssignableTo","isArray","DateTimeOffset","Day","Duration","createFromHexString","parseFromString","xmlEscape","simple",4,"oDataWhereCompiler","orderContext","nodeType","ExpressionType","OrderByDescending","VisitParametricQueryExpression","VisitEntityFieldExpression","VisitComplexTypeExpression","AssociationInfoExpression","VisitAssociationInfoExpression","associationInfo","FromPropertyName","VisitEntityExpression","VisitMemberInfoExpression","VisitEntityFieldOperationExpression","requireType","operation","MemberInfoExpression","opDef","memberDefinition","opName","mapTo","paramCounter","parameters","args","map","item","index","forEach","arg","VisitEntityFunctionOperationExpression","ConstantExpression","VisitContextFunctionOperationExpression",5,"pagingContext","amount","Skip","Take",6,"hasObjectLiteral","ObjectLiteralPath","modelBinderMapping","mapping","EntityExpression","EntitySetExpression","ComplexTypeExpression","m","pop","join","VisitObjectLiteralExpression","tempObjectLiteralPath","member","VisitObjectFieldExpression","fieldName",7,"_datajsPatch","_typeof","Symbol","iterator","_jaydataOdatajs","_jaydataOdatajs2","OData","__global","datajs","jsonHandler","version","Trace","log","oldread","defaultHandler","read","p","contentType","dataServiceVersion","apply","arguments","oldwrite","write","StorageProviderBase","ctx","SqlCommands","typeSystem","extend","dbCreation","DbCreationType","DropTableIfChanged","oDataServiceHost","serviceUrl","user","password","withCredentials","UpdateMethod","_buildDbType_generateConvertToFunction","buildDbType_generateConvertToFunction","_buildDbType_modifyInstanceDefinition","buildDbType_modifyInstanceDefinition","fixkDataServiceVersions","setDataServiceVersionToMax","initializeStore","callBack","createCallbackSetting","DropAllExistingTables","that","requestData","success","error","appendBasicAuth","prepareRequest","request","logicalEntity","convertedItems","dbInstance","PhysicalType","entityState","memberDefinitions","getPublicMappedProperties","property","initData","FromMultiplicity","ToMultiplicity","refValue","rv","EntityState","Modified","sMod","getType","tblName","TableName","pk","__metadata","uri","contentId","ComplexTypes","cmpType","executeQuery","sql","_compile","countProperty","textStatus","jqXHR","body","processSuccess","rawDataList","cnt","Integer","__count","Number","valueOf","__batchResponses","resp","parseError","batchHandler","enableJSONP","enableJsonpCallback","useJsonLight","saveChanges","changedItems","independentBlocks","buildIndependentBlocks","saveInternal","index2","disableBatch","_saveRestMany","_saveBatch","_saveRest","convertedItem","Unchanged","Added","save_getInitData","save_addConcurrencyHeader","Deleted","response","statusCode","ETag","Etag","etag","filter","memDef","concurrencyMode","ConcurrencyMode","Fixed","reload_fromResponse","batchRequests","Content-Id","__changeRequests","__changeResponses","errors","propType","computed","key","inverseProperty","aeType","arrayProperty","ap","aitem","isNullOrUndefined","etypeName","econverter","isComplex","isDeep","physicalData","serializableObject","asArray","memdef","kind","MemberTypes","complexProperty","navProperty","notMapped","changedProperties","def","getTraceString","supportedDataTypes","String","Boolean","Guid","Byte","SByte","Float","Int16","Int32","writable","supportedBinaryOperators","equal","dataType","allowedIn","FilterExpression","OrderExpression","notEqual","equalTyped","notEqualTyped","greaterThan","greaterThanOrEqual","lessThan","lessThenOrEqual","or","and","add","divide","multiply","subtract","modulo","in","supportedUnaryOperators","not","supportedFieldOperations","contains","startsWith","endsWith","allowedType","ProjectionExpression","fixedDataType","strLength","baseIndex","optional","toUpperCase","trim","concat","day","hour","minute","month","second","year","round","floor","ceiling","distance","intersects","enumerable","supportedSetOperations","toArray","single","invokable","frameType","SomeExpression","every","EveryExpression","take","skip","orderBy","orderByDescending","first","batchDelete","find","supportedContextOperation","batchExecuteQuery","resolveTypeOperations","entityType","getMemberDefinition","IsSideEffecting","returnType","resolveSetOperations","esDef","ContextType","ItemName","actions","MemberDefinition","translateDefinition","prototype","resolveContextOperations","entity","keyValue","memDefs","getKeyProperties","field","getFieldUrl","keyPart","servicehost","message","errorObj","Authorization","__encodeBase64","val","chr1","chr2","enc1","enc2","enc3","b64array","input","base64","chr3","enc4","charCodeAt","isNaN","charAt","registerProvider","oDataProvider",8,"lambdaPrefix","VisitUnaryExpression","resolution","operand","VisitSimpleBinaryExpression","paramValue","right","orResolution","eqResolution","idValue","idCheck","createSimpleBinaryExpression","left","Equal","Or","temp","VisitQueryParameterExpression","lambda","VisitFrameOperationExpression","Queryable","frameExpression","preparator","createQueryExpressionCreator","prep_expression","frameContext"],"mappings":"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","file":"oDataProvider.min.js","sourcesContent":["﻿// JayData 1.5.0 CTP\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(){\r\n\tvar interopDefine;\r\n\tif (typeof define != 'function' || (typeof define == 'function' && !define.amd)){\r\n\t\tinteropDefine = function(deps, callback){\r\n\t\t\tcallback();\r\n\t\t};\r\n\t}else interopDefine = define;\r\n\r\n\tinteropDefine(['jaydata'], function(){\r\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.$data = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _oDataConverter = require('./oDataConverter.js');\n\nvar _oDataConverter2 = _interopRequireDefault(_oDataConverter);\n\nvar _oDataProvider = require('./oDataProvider.js');\n\nvar _oDataProvider2 = _interopRequireDefault(_oDataProvider);\n\nvar _oDataCompiler = require('./oDataCompiler.js');\n\nvar _oDataCompiler2 = _interopRequireDefault(_oDataCompiler);\n\nvar _oDataWhereCompiler = require('./oDataWhereCompiler.js');\n\nvar _oDataWhereCompiler2 = _interopRequireDefault(_oDataWhereCompiler);\n\nvar _oDataOrderCompiler = require('./oDataOrderCompiler.js');\n\nvar _oDataOrderCompiler2 = _interopRequireDefault(_oDataOrderCompiler);\n\nvar _oDataPagingCompiler = require('./oDataPagingCompiler.js');\n\nvar _oDataPagingCompiler2 = _interopRequireDefault(_oDataPagingCompiler);\n\nvar _oDataProjectionCompiler = require('./oDataProjectionCompiler.js');\n\nvar _oDataProjectionCompiler2 = _interopRequireDefault(_oDataProjectionCompiler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n\n},{\"./oDataCompiler.js\":2,\"./oDataConverter.js\":3,\"./oDataOrderCompiler.js\":4,\"./oDataPagingCompiler.js\":5,\"./oDataProjectionCompiler.js\":6,\"./oDataProvider.js\":7,\"./oDataWhereCompiler.js\":8,\"jaydata/core\":\"jaydata/core\"}],2:[function(require,module,exports){\n'use strict';\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oData.oDataCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor() {\n        this.context = {};\n        this.provider = {};\n        //this.logicalType = null;\n        this.includes = null;\n        this.mainEntitySet = null;\n    },\n    compile: function compile(query) {\n\n        this.provider = query.context.storageProvider;\n        this.context = query.context;\n\n        if (query.defaultType) {\n            this.mainEntitySet = query.context.getEntitySetFromElementType(query.defaultType);\n        }\n\n        var queryFragments = { urlText: \"\" };\n\n        this.Visit(query.expression, queryFragments);\n\n        query.modelBinderConfig = {};\n        var modelBinder = _core.Container.createModelBinderConfigCompiler(query, this.includes, true);\n        modelBinder.Visit(query.expression);\n\n        var queryText = queryFragments.urlText;\n        var addAmp = false;\n        for (var name in queryFragments) {\n            if (name != \"urlText\" && name != \"actionPack\" && name != \"data\" && name != \"lambda\" && name != \"method\" && name != \"postData\" && name != \"_isBatchExecuteQuery\" && name != \"_subQueries\" && queryFragments[name] != \"\") {\n\n                if (addAmp) {\n                    queryText += \"&\";\n                } else {\n                    queryText += \"?\";\n                }\n                addAmp = true;\n                if (name != \"$urlParams\") {\n                    queryText += name + '=' + queryFragments[name];\n                } else {\n                    queryText += queryFragments[name];\n                }\n            }\n        }\n        query.queryText = queryText;\n        query.postData = queryFragments.postData;\n        var result = {\n            queryText: queryText,\n            withInlineCount: '$inlinecount' in queryFragments || '$count' in queryFragments,\n            method: queryFragments.method || 'GET',\n            postData: queryFragments.postData,\n            isBatchExecuteQuery: queryFragments._isBatchExecuteQuery,\n            subQueries: queryFragments._subQueries,\n            params: []\n        };\n\n        query._getComplitedData = function () {\n            return result;\n        };\n\n        return result;\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var orderCompiler = _core.Container.createoDataOrderCompiler(this.provider);\n        orderCompiler.compile(expression, context);\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var pagingCompiler = _core.Container.createoDataPagingCompiler(this.provider);\n        pagingCompiler.compile(expression, context);\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (!context['$select']) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += expression.selector.value.replace(/\\./g, '/');\n\n            this.includes = this.includes || [];\n            var includeFragment = expression.selector.value.split('.');\n            var tempData = null;\n            var storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(this.mainEntitySet.createNew);\n            for (var i = 0; i < includeFragment.length; i++) {\n                if (tempData) {\n                    tempData += '.' + includeFragment[i];\n                } else {\n                    tempData = includeFragment[i];\n                }\n                var association = storageModel.Associations[includeFragment[i]];\n                if (association) {\n                    if (!this.includes.some(function (include) {\n                        return include.name == tempData;\n                    }, this)) {\n                        this.includes.push({ name: tempData, type: association.ToType });\n                    }\n                } else {\n                    _core.Guard.raise(new _core.Exception(\"The given include path is invalid: \" + expression.selector.value + \", invalid point: \" + tempData));\n                }\n                storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(association.ToType);\n            }\n        }\n    },\n    VisitFindExpression: function VisitFindExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        if (expression.subMember) {\n            context.urlText += \"/\" + expression.subMember.memberName;\n        }\n\n        context.urlText += '(';\n        if (expression.params.length === 1) {\n            var param = expression.params[0];\n            var typeName = _core.Container.resolveName(param.type);\n\n            var converter = this.provider.fieldConverter.toDb[typeName];\n            var value = converter ? converter(param.value) : param.value;\n\n            converter = this.provider.fieldConverter.escape[typeName];\n            value = converter ? converter(param.value) : param.value;\n            context.urlText += value;\n        } else {\n            for (var i = 0; i < expression.params.length; i++) {\n                var param = expression.params[i];\n                var typeName = _core.Container.resolveName(param.type);\n\n                var converter = this.provider.fieldConverter.toDb[typeName];\n                var value = converter ? converter(param.value) : param.value;\n\n                converter = this.provider.fieldConverter.escape[typeName];\n                value = converter ? converter(param.value) : param.value;\n\n                if (i > 0) context.urlText += ',';\n                context.urlText += param.name + '=' + value;\n            }\n        }\n        context.urlText += ')';\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var projectionCompiler = _core.Container.createoDataProjectionCompiler(this.context);\n        projectionCompiler.compile(expression, context);\n    },\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.FilterExpression\" />\n\n        this.Visit(expression.source, context);\n\n        var filterCompiler = _core.Container.createoDataWhereCompiler(this.provider);\n        context.data = \"\";\n        filterCompiler.compile(expression.selector, context);\n        context[\"$filter\"] = context.data;\n        context.data = \"\";\n    },\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (this.provider.providerConfiguration.maxDataServiceVersion === \"4.0\") {\n            context[\"$count\"] = expression.selector.value === 'allpages';\n        } else {\n            context[\"$inlinecount\"] = expression.selector.value;\n        }\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        context.urlText += \"/\" + expression.instance.tableName;\n        //this.logicalType = expression.instance.elementType;\n        if (expression.params) {\n            for (var i = 0; i < expression.params.length; i++) {\n                this.Visit(expression.params[i], context);\n            }\n        }\n    },\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression, context) {\n        if (expression.boundItem) {\n            context.urlText += \"/\" + expression.boundItem.entitySet.tableName;\n            if (expression.boundItem.data instanceof _core2.default.Entity) {\n                context.urlText += '(' + this.provider.getEntityKeysValue(expression.boundItem) + ')';\n            }\n        }\n        context.urlText += \"/\" + (expression.cfg.namespace ? expression.cfg.namespace + \".\" + expression.cfg.serviceName : expression.cfg.serviceName);\n        context.method = context.method || expression.cfg.method;\n\n        //this.logicalType = expression.returnType;\n        if (expression.params) {\n            for (var i = 0; i < expression.params.length; i++) {\n                this.Visit(expression.params[i], context);\n            }\n        }\n    },\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.urlText += '/$batchDelete';\n        context.method = 'DELETE';\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        var typeName = _core.Container.resolveName(expression.type);\n        if (expression.value instanceof _core2.default.Entity) typeName = _core2.default.Entity.fullName;\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        if (context.method === 'GET' || !context.method) {\n            converter = this.provider.fieldConverter.escape[typeName];\n            value = converter ? converter(value) : value;\n\n            if (value !== undefined) {\n                if (context['$urlParams']) {\n                    context['$urlParams'] += '&';\n                } else {\n                    context['$urlParams'] = '';\n                }\n                context['$urlParams'] += expression.name + '=' + value;\n            }\n        } else {\n            context.postData = context.postData || {};\n            context.postData[expression.name] = value;\n        }\n    },\n    //    VisitConstantExpression: function (expression, context) {\n    //        if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\n    //\n    //\n    //        var valueType = Container.getTypeName(expression.value);\n    //\n    //\n    //\n    //        context['$urlParams'] += expression.name + '=' + this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(valueType))](expression.value);\n    //    },\n\n    VisitCountExpression: function VisitCountExpression(expression, context) {\n        this.Visit(expression.source, context);\n        context.urlText += '/$count';\n    },\n\n    VisitBatchExecuteQueryExpression: function VisitBatchExecuteQueryExpression(expression, context) {\n        context.urlText += '/$batch';\n        context.method = 'POST';\n        context.postData = { __batchRequests: [] };\n        context._isBatchExecuteQuery = true;\n        context._subQueries = expression.members;\n\n        for (var i = 0; i < expression.members.length; i++) {\n            var queryable = expression.members[i];\n            var compiler = new _core2.default.storageProviders.oData.oDataCompiler();\n            var compiled = compiler.compile(queryable);\n            context.postData.__batchRequests.push({\n                requestUri: compiled.queryText,\n                method: compiled.method,\n                data: compiled.data,\n                headers: compiled.headers\n            });\n        }\n    }\n}, {});\n\n},{\"jaydata/core\":\"jaydata/core\"}],3:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _atob = (typeof window !== \"undefined\" ? window['atob'] : typeof global !== \"undefined\" ? global['atob'] : null);\n\nvar _atob2 = _interopRequireDefault(_atob);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.defaults = _core2.default.defaults || {};\n_core2.default.defaults.oDataWebApi = false;\n\n_core2.default.oDataConverter = {\n    fromDb: {\n        '$data.Enum': function $dataEnum(v, enumType) {\n            return _core2.default.Container.convertTo(v, enumType);\n        },\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': function $dataDecimal(v) {\n            return _core2.default.Container.convertTo(v, _core2.default.Decimal);\n        },\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': function $dataInt64(v) {\n            return _core2.default.Container.convertTo(v, _core2.default.Int64);\n        },\n        '$data.ObjectID': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter, //function (number) { return (typeof number === 'string' && /^\\d+$/.test(number)) ? parseInt(number) : number; },\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': function $dataDate(dbData) {\n            if (dbData) {\n                if (dbData instanceof Date) {\n                    return dbData;\n                } else if (dbData.substring(0, 6) === '/Date(') {\n                    return new Date(parseInt(dbData.substr(6)));\n                } else {\n                    //ISODate without Z? Safari compatible with Z\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]')) dbData += 'Z';\n                    return new Date(dbData);\n                }\n            } else {\n                return dbData;\n            }\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(dbData) {\n            if (dbData) {\n                if (dbData instanceof Date) {\n                    return dbData;\n                } else if (dbData.substring(0, 6) === '/Date(') {\n                    return new Date(parseInt(dbData.substr(6)));\n                } else {\n                    //ISODate without Z? Safari compatible with Z\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]')) dbData += 'Z';\n                    return new Date(dbData);\n                }\n            } else {\n                return dbData;\n            }\n        },\n        '$data.Time': function $dataTime(v) {\n            return _core2.default.Container.convertTo(v, _core2.default.Time);\n        },\n        '$data.Day': _core2.default.Container.proxyConverter,\n        '$data.Duration': _core2.default.Container.proxyConverter,\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': function $dataBlob(v) {\n            if (typeof v == 'string') {\n                try {\n                    return _core2.default.Container.convertTo((0, _atob2.default)(v), '$data.Blob');\n                } catch (e) {\n                    return v;\n                }\n            } else return v;\n        },\n        '$data.Object': function $dataObject(o) {\n            if (o === undefined) {\n                return new _core2.default.Object();\n            } else if (typeof o === 'string') {\n                return JSON.parse(o);\n            }return o;\n        },\n        '$data.Array': function $dataArray(o) {\n            if (o === undefined) {\n                return new _core2.default.Array();\n            } else if (o instanceof _core2.default.Array) {\n                return o;\n            }return JSON.parse(o);\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyPoint(g);\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyLineString(g);\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyPolygon(g);\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPoint(g);\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiLineString(g);\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeographyMultiPolygon(g);\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return new _core2.default.GeographyCollection(g);\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryPoint(g);\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryLineString(g);\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryPolygon(g);\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPoint(g);\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiLineString(g);\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return new _core2.default.GeometryMultiPolygon(g);\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return new _core2.default.GeometryCollection(g);\n            }return g;\n        },\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? guid.toString() : guid;\n        }\n    },\n    toDb: {\n        '$data.Enum': _core2.default.Container.proxyConverter,\n        '$data.Entity': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': _core2.default.Container.proxyConverter, //function (v) { return v ? parseFloat(v) : v },\n        '$data.Float': _core2.default.Container.proxyConverter,\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Int64': _core2.default.Container.proxyConverter, //function (v) { return v ? parseInt(v) : v },\n        '$data.ObjectID': _core2.default.Container.proxyConverter,\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': _core2.default.Container.proxyConverter,\n        '$data.Date': function $dataDate(e) {\n            return e ? e.toISOString().replace('Z', '') : e;\n        },\n        '$data.Time': _core2.default.Container.proxyConverter,\n        '$data.Day': _core2.default.Container.proxyConverter,\n        '$data.Duration': _core2.default.Container.proxyConverter,\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            return v ? v.toISOString() : v;\n        },\n        '$data.String': _core2.default.Container.proxyConverter,\n        '$data.Boolean': _core2.default.Container.proxyConverter,\n        '$data.Blob': function $dataBlob(v) {\n            return v ? _core2.default.Blob.toBase64(v) : v;\n        },\n        '$data.Object': _core2.default.Container.proxyConverter,\n        '$data.Array': _core2.default.Container.proxyConverter,\n        '$data.GeographyPoint': _core2.default.Container.proxyConverter,\n        '$data.GeographyLineString': _core2.default.Container.proxyConverter,\n        '$data.GeographyPolygon': _core2.default.Container.proxyConverter,\n        '$data.GeographyMultiPoint': _core2.default.Container.proxyConverter,\n        '$data.GeographyMultiLineString': _core2.default.Container.proxyConverter,\n        '$data.GeographyMultiPolygon': _core2.default.Container.proxyConverter,\n        '$data.GeographyCollection': _core2.default.Container.proxyConverter,\n        '$data.GeometryPoint': _core2.default.Container.proxyConverter,\n        '$data.GeometryLineString': _core2.default.Container.proxyConverter,\n        '$data.GeometryPolygon': _core2.default.Container.proxyConverter,\n        '$data.GeometryMultiPoint': _core2.default.Container.proxyConverter,\n        '$data.GeometryMultiLineString': _core2.default.Container.proxyConverter,\n        '$data.GeometryMultiPolygon': _core2.default.Container.proxyConverter,\n        '$data.GeometryCollection': _core2.default.Container.proxyConverter,\n        '$data.Guid': _core2.default.Container.proxyConverter\n    },\n    escape: {\n        '$data.Enum': function $dataEnum(e, enumType) {\n            return e !== null && e !== undefined ? (enumType ? enumType.fullName : \"\") + \"'\" + e + \"'\" : e;\n        },\n        '$data.Entity': function $dataEntity(e) {\n            return JSON.stringify(e);\n        },\n        '$data.Integer': _core2.default.Container.proxyConverter,\n        '$data.Int32': _core2.default.Container.proxyConverter,\n        '$data.Number': function $dataNumber(v) {\n            return v && _core2.default.defaults.oDataWebApi ? v + 'd' : v;\n        },\n        '$data.Int16': _core2.default.Container.proxyConverter,\n        '$data.Byte': _core2.default.Container.proxyConverter,\n        '$data.SByte': _core2.default.Container.proxyConverter,\n        '$data.Decimal': function $dataDecimal(v) {\n            return v && _core2.default.defaults.oDataWebApi ? v + 'm' : v;\n        },\n        '$data.Float': function $dataFloat(v) {\n            return v && _core2.default.defaults.oDataWebApi ? v + 'f' : v;\n        },\n        '$data.Int64': _core2.default.Container.proxyConverter,\n        '$data.Time': _core2.default.Container.proxyConverter,\n        '$data.Day': _core2.default.Container.proxyConverter,\n        '$data.Duration': function $dataDuration(v) {\n            return v ? \"duration'\" + v + \"'\" : v;\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(d) {\n            return d ? encodeURIComponent(d) : d;\n        },\n        '$data.Date': function $dataDate(date) {\n            return date ? \"datetime'\" + date + \"'\" : date;\n        },\n        '$data.String': function $dataString(text) {\n            return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text;\n        },\n        '$data.ObjectID': function $dataObjectID(text) {\n            return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text;\n        },\n        '$data.Boolean': function $dataBoolean(bool) {\n            return typeof bool === 'boolean' ? bool.toString() : bool;\n        },\n        '$data.Blob': function $dataBlob(b) {\n            return b ? \"binary'\" + b + \"'\" : b;\n        },\n        '$data.Object': function $dataObject(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Array': function $dataArray(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(g) {\n            if (g) {\n                return _core2.default.GeographyBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(g) {\n            if (g) {\n                return _core2.default.GeometryBase.stringifyToUrl(g);\n            }return g;\n        },\n        '$data.Guid': function $dataGuid(guid) {\n            return guid ? \"\" + guid.toString() + \"\" : guid;\n        }\n    },\n    unescape: {\n        '$data.Entity': function $dataEntity(v, c) {\n            var config = c || {};\n            var value = JSON.parse(v);\n            if (value && config.type) {\n                var type = _core.Container.resolveType(config.type);\n                /*Todo converter*/\n                return new type(value, { converters: undefined });\n            }\n            return value;\n        },\n        '$data.Number': function $dataNumber(v) {\n            return JSON.parse(v);\n        },\n        '$data.Integer': function $dataInteger(v) {\n            return JSON.parse(v);\n        },\n        '$data.Int32': function $dataInt32(v) {\n            return JSON.parse(v);\n        },\n        '$data.Byte': function $dataByte(v) {\n            return JSON.parse(v);\n        },\n        '$data.SByte': function $dataSByte(v) {\n            return JSON.parse(v);\n        },\n        '$data.Decimal': function $dataDecimal(v) {\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('m') === v.length - 1) {\n                return v.substr(0, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.Float': function $dataFloat(v) {\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('f') === v.length - 1) {\n                return v.substr(0, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.Int16': function $dataInt16(v) {\n            return JSON.parse(v);\n        },\n        '$data.Int64': function $dataInt64(v) {\n            return v;\n        },\n        '$data.Boolean': function $dataBoolean(v) {\n            return JSON.parse(v);\n        },\n        '$data.Date': function $dataDate(v) {\n            if (typeof v === 'string' && /^datetime'/.test(v)) {\n                return v.slice(9, v.length - 1);\n            }\n            return v;\n        },\n        '$data.String': function $dataString(v) {\n            if (typeof v === 'string' && v.indexOf(\"'\") === 0 && v.lastIndexOf(\"'\") === v.length - 1) {\n                return v.slice(1, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.ObjectID': function $dataObjectID(v) {\n            if (typeof v === 'string' && v.indexOf(\"'\") === 0 && v.lastIndexOf(\"'\") === v.length - 1) {\n                return v.slice(1, v.length - 1);\n            } else {\n                return v;\n            }\n        },\n        '$data.Guid': function $dataGuid(v) {\n            if (/^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$/.test(v)) {\n                var data = v.slice(5, v.length - 1);\n                return _core2.default.parseGuid(data).toString();\n            }\n            return v;\n        },\n        '$data.Array': function $dataArray(v, c) {\n            var config = c || {};\n\n            var value = JSON.parse(v) || [];\n            if (value && config.elementType) {\n                var type = _core.Container.resolveType(config.elementType);\n                var typeName = _core.Container.resolveName(type);\n                if (type && type.isAssignableTo && type.isAssignableTo(_core2.default.Entity)) {\n                    typeName = _core2.default.Entity.fullName;\n                }\n\n                if (Array.isArray(value)) {\n                    var converter = _core2.default.oDataConverter.unescape[typeName];\n                    for (var i = 0; i < value.length; i++) {\n                        value[i] = converter ? converter(value[i]) : value[i];\n                    }\n                }\n                return value;\n            }\n            return value;\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            if (typeof v === 'string') {\n                return _core2.default.Container.convertTo(v, _core2.default.DateTimeOffset);\n            }\n            return v;\n        },\n        '$data.Time': function $dataTime(v) {\n            if (typeof v === 'string' && /^time'/.test(v)) {\n                return _core2.default.Container.convertTo(v.slice(5, v.length - 1), _core2.default.Time);\n            }\n            return v;\n        },\n        '$data.Day': function $dataDay(v) {\n            if (typeof v === 'string' && /^date'/.test(v)) {\n                return _core2.default.Container.convertTo(v.slice(5, v.length - 1), _core2.default.Day);\n            }\n            return v;\n        },\n        '$data.Duration': function $dataDuration(v) {\n            if (typeof v === 'string' && /^duration'/.test(v)) {\n                return _core2.default.Container.convertTo(v.slice(9, v.length - 1), _core2.default.Duration);\n            }\n            return v;\n        },\n        '$data.Blob': function $dataBlob(v) {\n            if (typeof v === 'string') {\n                if (/^X'/.test(v)) {\n                    return _core2.default.Blob.createFromHexString(v.slice(2, v.length - 1));\n                } else if (/^binary'/.test(v)) {\n                    return _core2.default.Blob.createFromHexString(v.slice(7, v.length - 1));\n                }\n            }\n            return v;\n        },\n        '$data.Object': function $dataObject(v) {\n            return JSON.parse(v);\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(v) {\n            if (/^geography'POINT\\(/i.test(v)) {\n                var data = v.slice(10, v.length - 1);\n                return _core2.default.GeographyBase.parseFromString(data);\n            }\n            return v;\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(v) {\n            if (/^geography'POLYGON\\(/i.test(v)) {\n                var data = v.slice(10, v.length - 1);\n                return _core2.default.GeographyBase.parseFromString(data);\n            }\n            return v;\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(v) {\n            if (/^geometry'POINT\\(/i.test(v)) {\n                var data = v.slice(9, v.length - 1);\n                return _core2.default.GeometryBase.parseFromString(data);\n            }\n            return v;\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(v) {\n            if (/^geometry'POLYGON\\(/i.test(v)) {\n                var data = v.slice(9, v.length - 1);\n                return _core2.default.GeometryBase.parseFromString(data);\n            }\n            return v;\n        }\n    },\n    xmlEscape: {\n        '$data.Byte': function $dataByte(v) {\n            return v.toString();\n        },\n        '$data.SByte': function $dataSByte(v) {\n            return v.toString();\n        },\n        '$data.Decimal': function $dataDecimal(v) {\n            return v.toString();\n        },\n        '$data.Float': function $dataFloat(v) {\n            return v.toString();\n        },\n        '$data.Int16': function $dataInt16(v) {\n            return v.toString();\n        },\n        '$data.Int64': function $dataInt64(v) {\n            return v.toString();\n        },\n        '$data.Integer': function $dataInteger(v) {\n            return v.toString();\n        },\n        '$data.Int32': function $dataInt32(v) {\n            return v.toString();\n        },\n        '$data.Boolean': function $dataBoolean(v) {\n            return v.toString();\n        },\n        '$data.Blob': function $dataBlob(v) {\n            return _core2.default.Blob.toBase64(v);\n        },\n        '$data.Date': function $dataDate(v) {\n            return v.toISOString().replace('Z', '');\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            return v.toISOString();\n        },\n        '$data.Time': function $dataTime(v) {\n            return v.toString();\n        },\n        '$data.Day': function $dataDay(v) {\n            return v.toString();\n        },\n        '$data.Duration': function $dataDuration(v) {\n            return v.toString();\n        },\n        '$data.Number': function $dataNumber(v) {\n            return v.toString();\n        },\n        '$data.String': function $dataString(v) {\n            return v.toString();\n        },\n        '$data.ObjectID': function $dataObjectID(v) {\n            return v.toString();\n        },\n        '$data.Object': function $dataObject(v) {\n            return JSON.stringify(v);\n        },\n        '$data.Guid': function $dataGuid(v) {\n            return v.toString();\n        } /*,\r\n          '$data.GeographyPoint': function (v) { return this._buildSpatialPoint(v, 'http://www.opengis.net/def/crs/EPSG/0/4326'); },\r\n          '$data.GeometryPoint': function (v) { return this._buildSpatialPoint(v, 'http://www.opengis.net/def/crs/EPSG/0/0'); },\r\n          '$data.GeographyLineString': function (v) { return this._buildSpatialLineString(v, 'http://www.opengis.net/def/crs/EPSG/0/4326'); },\r\n          '$data.GeometryLineString': function (v) { return this._buildSpatialLineString(v, 'http://www.opengis.net/def/crs/EPSG/0/0'); }*/\n    },\n    simple: { //$value, $count\n        '$data.Byte': function $dataByte(v) {\n            return v.toString();\n        },\n        '$data.SByte': function $dataSByte(v) {\n            return v.toString();\n        },\n        '$data.Decimal': function $dataDecimal(v) {\n            return v.toString();\n        },\n        '$data.Float': function $dataFloat(v) {\n            return v.toString();\n        },\n        '$data.Int16': function $dataInt16(v) {\n            return v.toString();\n        },\n        '$data.Int64': function $dataInt64(v) {\n            return v.toString();\n        },\n        '$data.ObjectID': function $dataObjectID(o) {\n            return o.toString();\n        },\n        '$data.Integer': function $dataInteger(o) {\n            return o.toString();\n        },\n        '$data.Int32': function $dataInt32(o) {\n            return o.toString();\n        },\n        '$data.Number': function $dataNumber(o) {\n            return o.toString();\n        },\n        '$data.Date': function $dataDate(o) {\n            return o instanceof _core2.default.Date ? o.toISOString().replace('Z', '') : o.toString();\n        },\n        '$data.DateTimeOffset': function $dataDateTimeOffset(v) {\n            return v ? v.toISOString() : v;\n        },\n        '$data.Time': function $dataTime(o) {\n            return o.toString();\n        },\n        '$data.Day': function $dataDay(o) {\n            return o.toString();\n        },\n        '$data.Duration': function $dataDuration(o) {\n            return o.toString();\n        },\n        '$data.String': function $dataString(o) {\n            return o.toString();\n        },\n        '$data.Boolean': function $dataBoolean(o) {\n            return o.toString();\n        },\n        '$data.Blob': function $dataBlob(o) {\n            return o;\n        },\n        '$data.Object': function $dataObject(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Array': function $dataArray(o) {\n            return JSON.stringify(o);\n        },\n        '$data.Guid': function $dataGuid(o) {\n            return o.toString();\n        },\n        '$data.GeographyPoint': function $dataGeographyPoint(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryPoint': function $dataGeometryPoint(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyLineString': function $dataGeographyLineString(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyPolygon': function $dataGeographyPolygon(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyMultiPoint': function $dataGeographyMultiPoint(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyMultiLineString': function $dataGeographyMultiLineString(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyMultiPolygon': function $dataGeographyMultiPolygon(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeographyCollection': function $dataGeographyCollection(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryLineString': function $dataGeometryLineString(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryPolygon': function $dataGeometryPolygon(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryMultiPoint': function $dataGeometryMultiPoint(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryMultiLineString': function $dataGeometryMultiLineString(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryMultiPolygon': function $dataGeometryMultiPolygon(o) {\n            return JSON.stringify(o);\n        },\n        '$data.GeometryCollection': function $dataGeometryCollection(o) {\n            return JSON.stringify(o);\n        }\n    }\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"jaydata/core\":\"jaydata/core\"}],4:[function(require,module,exports){\n'use strict';\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oData.oDataOrderCompiler', _core2.default.storageProviders.oData.oDataWhereCompiler, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var orderContext = { data: \"\" };\n        this.Visit(expression.selector, orderContext);\n        if (context['$orderby']) {\n            context['$orderby'] += ',';\n        } else {\n            context['$orderby'] = '';\n        }\n        context['$orderby'] += orderContext.data + (expression.nodeType == _core2.default.Expressions.ExpressionType.OrderByDescending ? \" desc\" : \"\");\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n    },\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n        context.data += \"/\";\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.source, context);\n            this.Visit(expression.selector, context);\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        context.data += expression.associationInfo.FromPropertyName + '/';\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        context.data += expression.memberName;\n    },\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.parameters || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        args.forEach(function (arg, index) {\n            if (index > 0) {\n                context.data += \",\";\n            };\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n    VisitEntityFunctionOperationExpression: function VisitEntityFunctionOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n        this.Visit(expression.source, context);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.method.params || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        var i = 0;\n        args.forEach(function (arg, index) {\n            if (arg === undefined || arg instanceof _core2.default.Expressions.ConstantExpression && typeof arg.value === 'undefined') return;\n\n            if (i > 0) {\n                context.data += \",\";\n            };\n            i++;\n            context.data += params[index].name + '=';\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n    VisitContextFunctionOperationExpression: function VisitContextFunctionOperationExpression(expression, context) {\n        return this.VisitEntityFunctionOperationExpression(expression, context);\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],5:[function(require,module,exports){\n'use strict';\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oData.oDataPagingCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider) {\n        this.provider = provider;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        var pagingContext = { data: \"\" };\n        this.Visit(expression.amount, pagingContext);\n        switch (expression.nodeType) {\n            case _core2.default.Expressions.ExpressionType.Skip:\n                context['$skip'] = pagingContext.data;break;\n            case _core2.default.Expressions.ExpressionType.Take:\n                context['$top'] = pagingContext.data;break;\n            default:\n                _core.Guard.raise(\"Not supported nodeType\");break;\n        }\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        var typeName = _core.Container.resolveName(expression.type);\n        var converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(expression.value) : expression.value;\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],6:[function(require,module,exports){\n'use strict';\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oData.oDataProjectionCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(entityContext) {\n        this.entityContext = entityContext;\n        this.hasObjectLiteral = false;\n        this.ObjectLiteralPath = \"\";\n        this.modelBinderMapping = [];\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ProjectionExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        context.data = \"\";\n        this.mapping = \"\";\n\n        this.Visit(expression.selector, context);\n        if (context['$select']) {\n            context['$select'] += ',';\n        } else {\n            context['$select'] = '';\n        }\n        context[\"$select\"] += context.data;\n        context.data = \"\";\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression || expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += this.mapping.replace(/\\./g, '/');\n        }if (expression.expression instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        } else {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        }\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ObjectLiteralExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        var tempObjectLiteralPath = this.ObjectLiteralPath;\n        this.hasObjectLiteral = true;\n        expression.members.forEach(function (member, index) {\n            this.Visit(member, context);\n            if (index < expression.members.length - 1) {\n                context.data += ',';\n            }\n            this.mapping = '';\n        }, this);\n        this.ObjectLiteralPath = tempObjectLiteralPath;\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n\n        if (this.ObjectLiteralPath) {\n            this.ObjectLiteralPath += '.' + expression.fieldName;\n        } else {\n            this.ObjectLiteralPath = expression.fieldName;\n        }\n        this.Visit(expression.expression, context);\n\n        if (expression.expression instanceof _core2.default.Expressions.EntityExpression || expression.expression instanceof _core2.default.Expressions.EntitySetExpression) {\n            if (context['$expand']) {\n                context['$expand'] += ',';\n            } else {\n                context['$expand'] = '';\n            }\n            context['$expand'] += this.mapping.replace(/\\./g, '/');\n        } else {\n            var m = this.mapping.split('.');\n            m.pop();\n            if (m.length > 0) {\n                if (context['$expand']) {\n                    context['$expand'] += ',';\n                } else {\n                    context['$expand'] = '';\n                }\n                context['$expand'] += m.join('/');\n            }\n        }\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        this.Visit(expression.selector, context);\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.EntityExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        this.Visit(expression.source, context);\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\" mayBeNull=\"false\"></param>\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\n        if (expression.source instanceof _core2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, context);\n        }\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.selector, context);\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') {\n            context.data += '/';\n        }\n        context.data += expression.associationInfo.FromPropertyName;\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.associationInfo.FromPropertyName;\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') {\n            context.data += '/';\n        }\n        context.data += expression.memberName;\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.memberName;\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        //Guard.raise(new Exception('Constant value is not supported in Projection.', 'Not supported!'));\n        //context.data += expression.value;\n        context.data = context.data.slice(0, context.data.length - 1);\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}],7:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _jaydataOdatajs = (typeof window !== \"undefined\" ? window['odatajs'] : typeof global !== \"undefined\" ? global['odatajs'] : null);\n\nvar _jaydataOdatajs2 = _interopRequireDefault(_jaydataOdatajs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OData = _core2.default.__global['OData'];\nvar datajs = _core2.default.__global['datajs'];\n\nvar _datajsPatch;\n_datajsPatch = function datajsPatch(OData) {\n    // just datajs-1.1.0\n    if (OData && OData.jsonHandler && 'useJsonLight' in OData.jsonHandler && (typeof datajs === 'undefined' ? 'undefined' : _typeof(datajs)) === 'object' && !datajs.version) {\n        _core2.default.Trace.log('!!!!!!! - patch datajs 1.1.0');\n        var oldread = OData.defaultHandler.read;\n        OData.defaultHandler.read = function (p, context) {\n            delete context.contentType;\n            delete context.dataServiceVersion;\n\n            oldread.apply(this, arguments);\n        };\n        var oldwrite = OData.defaultHandler.write;\n        OData.defaultHandler.write = function (p, context) {\n            delete context.contentType;\n            delete context.dataServiceVersion;\n\n            oldwrite.apply(this, arguments);\n        };\n    }\n    _datajsPatch = function datajsPatch() {};\n};\n\n(0, _core.$C)('$data.storageProviders.oData.oDataProvider', _core2.default.StorageProviderBase, null, {\n    constructor: function constructor(cfg, ctx) {\n        this.SqlCommands = [];\n        this.context = ctx;\n        this.providerConfiguration = _core2.default.typeSystem.extend({\n            dbCreation: _core2.default.storageProviders.DbCreationType.DropTableIfChanged,\n            oDataServiceHost: \"/odata.svc\",\n            serviceUrl: \"\",\n            maxDataServiceVersion: '4.0',\n            dataServiceVersion: undefined,\n            user: null,\n            password: null,\n            withCredentials: false,\n            //enableJSONP: undefined,\n            //useJsonLight: undefined\n            //disableBatch: undefined\n            UpdateMethod: 'PATCH'\n        }, cfg);\n\n        if (this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\n            if (typeof _jaydataOdatajs2.default === 'undefined' || typeof _jaydataOdatajs2.default.oData === 'undefined') {\n                _core.Guard.raise(new _core.Exception('odatajs is required', 'Not Found!'));\n            } else {\n                this.oData = _jaydataOdatajs2.default.oData;\n            }\n        } else {\n            if (typeof OData === 'undefined') {\n                _core.Guard.raise(new _core.Exception('datajs is required', 'Not Found!'));\n            } else {\n                this.oData = OData;\n                _datajsPatch(this.oData);\n            }\n        }\n\n        //this.fixkDataServiceVersions(cfg);\n\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\n        }\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\n        }\n    },\n    fixkDataServiceVersions: function fixkDataServiceVersions(cfg) {\n        if (this.providerConfiguration.dataServiceVersion > this.providerConfiguration.maxDataServiceVersion) {\n            this.providerConfiguration.dataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n        }\n\n        if (this.providerConfiguration.setDataServiceVersionToMax === true) {\n            this.providerConfiguration.dataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\n        }\n\n        if (cfg && !cfg.UpdateMethod && this.providerConfiguration.dataServiceVersion < '3.0' || !this.providerConfiguration.dataServiceVersion) {\n            this.providerConfiguration.UpdateMethod = 'MERGE';\n        }\n    },\n    initializeStore: function initializeStore(callBack) {\n        callBack = _core2.default.typeSystem.createCallbackSetting(callBack);\n        switch (this.providerConfiguration.dbCreation) {\n            case _core2.default.storageProviders.DbCreationType.DropAllExistingTables:\n                var that = this;\n                if (this.providerConfiguration.serviceUrl) {\n\n                    var requestData = [{\n                        requestUri: that.providerConfiguration.serviceUrl + \"/Delete\",\n                        method: 'POST'\n                    }, function (d) {\n                        //console.log(\"RESET oData database\");\n                        callBack.success(that.context);\n                    }, function (error) {\n                        callBack.success(that.context);\n                    }];\n\n                    this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n                    //if (this.providerConfiguration.user) {\n                    //    requestData[0].user = this.providerConfiguration.user;\n                    //    requestData[0].password = this.providerConfiguration.password || \"\";\n                    //}\n\n                    this.context.prepareRequest.call(this, requestData);\n                    this.oData.request.apply(this, requestData);\n                } else {\n                    callBack.success(that.context);\n                }\n                break;\n            default:\n                callBack.success(this.context);\n                break;\n        }\n    },\n    buildDbType_generateConvertToFunction: function buildDbType_generateConvertToFunction(storageModel, context) {\n        return function (logicalEntity, convertedItems) {\n            var dbInstance = new storageModel.PhysicalType();\n            dbInstance.entityState = logicalEntity.entityState;\n\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\n                dbInstance.initData[property.name] = logicalEntity[property.name];\n            }, this);\n\n            if (storageModel.Associations) {\n                storageModel.Associations.forEach(function (association) {\n                    if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\" || association.FromMultiplicity == '$$unbound') {\n                        var refValue = logicalEntity[association.FromPropertyName];\n                        if ( /*refValue !== null &&*/refValue !== undefined) {\n                            if (refValue instanceof _core2.default.Array) {\n                                dbInstance.initData[association.FromPropertyName] = dbInstance[association.FromPropertyName] || [];\n                                refValue.forEach(function (rv) {\n                                    if (rv.entityState == _core2.default.EntityState.Modified || convertedItems.indexOf(rv) < 0) {\n                                        var sMod = context._storageModel.getStorageModel(rv.getType());\n                                        var tblName = sMod.TableName;\n                                        var pk = '(' + context.storageProvider.getEntityKeysValue({ data: rv, entitySet: context.getEntitySetFromElementType(rv.getType()) }) + ')';\n                                        dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: tblName + pk } });\n                                    } else {\n                                        var contentId = convertedItems.indexOf(rv);\n                                        if (contentId < 0) {\n                                            _core.Guard.raise(\"Dependency graph error\");\n                                        }\n                                        dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: \"$\" + (contentId + 1) } });\n                                    }\n                                }, this);\n                            } else if (refValue === null) {\n                                dbInstance.initData[association.FromPropertyName] = null;\n                            } else {\n                                if (refValue.entityState == _core2.default.EntityState.Modified || convertedItems.indexOf(refValue) < 0) {\n                                    var sMod = context._storageModel.getStorageModel(refValue.getType());\n                                    var tblName = sMod.TableName;\n                                    var pk = '(' + context.storageProvider.getEntityKeysValue({ data: refValue, entitySet: context.getEntitySetFromElementType(refValue.getType()) }) + ')';\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: tblName + pk } };\n                                } else {\n                                    var contentId = convertedItems.indexOf(refValue);\n                                    if (contentId < 0) {\n                                        _core.Guard.raise(\"Dependency graph error\");\n                                    }\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: \"$\" + (contentId + 1) } };\n                                }\n                            }\n                        }\n                    }\n                }, this);\n            }\n            if (storageModel.ComplexTypes) {\n                storageModel.ComplexTypes.forEach(function (cmpType) {\n                    dbInstance.initData[cmpType.FromPropertyName] = logicalEntity[cmpType.FromPropertyName];\n                }, this);\n            }\n            return dbInstance;\n        };\n    },\n    buildDbType_modifyInstanceDefinition: function buildDbType_modifyInstanceDefinition() {\n        return;\n    },\n    executeQuery: function executeQuery(query, callBack) {\n        callBack = _core2.default.typeSystem.createCallbackSetting(callBack);\n\n        var sql = {};\n        try {\n            sql = this._compile(query);\n        } catch (e) {\n            callBack.error(e);\n            return;\n        }\n        var schema = this.context;\n\n        var that = this;\n        var countProperty = \"@odata.count\";\n\n        var requestData = [{\n            requestUri: this.providerConfiguration.oDataServiceHost + sql.queryText,\n            method: sql.method,\n            data: sql.postData,\n            headers: {}\n        }, function (data, textStatus, jqXHR) {\n\n            if (!data && textStatus.body && !sql.isBatchExecuteQuery) data = JSON.parse(textStatus.body);\n            if (callBack.success) {\n                var processSuccess = function processSuccess(query, data, sql) {\n                    query.rawDataList = typeof data === 'string' ? [{ cnt: _core.Container.convertTo(data, _core2.default.Integer) }] : data;\n                    if (sql.withInlineCount && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && (typeof data[countProperty] !== 'undefined' || 'd' in data && typeof data.d[countProperty] !== 'undefined')) {\n                        query.__count = new Number(typeof data[countProperty] !== 'undefined' ? data[countProperty] : data.d[countProperty]).valueOf();\n                    }\n                };\n\n                if (sql.isBatchExecuteQuery) {\n                    query.rawDataList = sql.subQueries;\n                    for (var i = 0; i < data.__batchResponses.length; i++) {\n                        var resp = data.__batchResponses[i];\n\n                        if (!resp.data) {\n                            if (resp.body) {\n                                resp.data = JSON.parse(resp.body);\n                            } else {\n                                callBack.error(that.parseError(resp, arguments));\n                                return;\n                            }\n                        }\n\n                        processSuccess(sql.subQueries[i], resp.data, sql.subQueries[i]._getComplitedData());\n                    }\n                } else {\n                    processSuccess(query, data, sql);\n                }\n\n                callBack.success(query);\n            }\n        }, function (error) {\n            callBack.error(that.parseError(error, arguments));\n        }, sql.isBatchExecuteQuery ? this.oData.batchHandler : undefined];\n\n        if (typeof this.providerConfiguration.enableJSONP !== 'undefined') {\n            requestData[0].enableJsonpCallback = this.providerConfiguration.enableJSONP;\n        }\n        if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\n            requestData[0].useJsonLight = this.providerConfiguration.useJsonLight;\n        }\n\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n        //if (this.providerConfiguration.user) {\n        //    requestData[0].user = this.providerConfiguration.user;\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\n        //}\n\n        this.context.prepareRequest.call(this, requestData);\n        //$data.ajax(requestData);\n        //OData.request(requestData, requestData.success, requestData.error);\n        this.oData.request.apply(this, requestData);\n    },\n    _compile: function _compile(queryable, params) {\n        var compiler = new _core2.default.storageProviders.oData.oDataCompiler();\n        var compiled = compiler.compile(queryable);\n        return compiled;\n    },\n    saveChanges: function saveChanges(callBack, changedItems) {\n        if (changedItems.length > 0) {\n            var independentBlocks = this.buildIndependentBlocks(changedItems);\n            this.saveInternal(independentBlocks, 0, callBack);\n        } else {\n            callBack.success(0);\n        }\n    },\n    saveInternal: function saveInternal(independentBlocks, index2, callBack) {\n        if ((this.providerConfiguration.disableBatch === true || _typeof(_core2.default.defaults) === 'object' && _core2.default.defaults.disableBatch === true) && typeof this._saveRestMany === 'function') {\n            this._saveRestMany(independentBlocks, index2, callBack);\n        } else {\n            if (independentBlocks.length > 1 || independentBlocks.length == 1 && independentBlocks[0].length > 1) {\n                this._saveBatch(independentBlocks, index2, callBack);\n            } else {\n                this._saveRest(independentBlocks, index2, callBack);\n            }\n        }\n    },\n    _saveRest: function _saveRest(independentBlocks, index2, callBack) {\n        var batchRequests = [];\n        var convertedItem = [];\n        var request;\n        for (var index = 0; index < independentBlocks.length; index++) {\n            for (var i = 0; i < independentBlocks[index].length; i++) {\n                convertedItem.push(independentBlocks[index][i].data);\n                request = {\n                    requestUri: this.providerConfiguration.oDataServiceHost + '/',\n                    headers: {}\n                };\n\n                if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\n                    request.useJsonLight = this.providerConfiguration.useJsonLight;\n                }\n\n                //request.headers = { \"Content-Id\": convertedItem.length };\n                switch (independentBlocks[index][i].data.entityState) {\n                    case _core2.default.EntityState.Unchanged:\n                        continue;break;\n                    case _core2.default.EntityState.Added:\n                        request.method = \"POST\";\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Modified:\n                        request.method = this.providerConfiguration.UpdateMethod;\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Deleted:\n                        request.method = \"DELETE\";\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        break;\n                    default:\n                        _core.Guard.raise(new _core.Exception(\"Not supported Entity state\"));\n                }\n                //batchRequests.push(request);\n            }\n        }\n        var that = this;\n\n        var requestData = [request, function (data, response) {\n            if (response.statusCode >= 200 && response.statusCode < 300) {\n                var item = convertedItem[0];\n                if (response.statusCode == 204) {\n                    if (response.headers.ETag || response.headers.Etag || response.headers.etag) {\n                        var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                            return memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed;\n                        });\n                        if (property && property[0]) {\n                            item[property[0].name] = response.headers.ETag || response.headers.Etag || response.headers.etag;\n                        }\n                    }\n                } else {\n                    that.reload_fromResponse(item, data, response);\n                }\n\n                if (callBack.success) {\n                    callBack.success(convertedItem.length);\n                }\n            } else {\n                callBack.error(that.parseError(response));\n            }\n        }, function (e) {\n            callBack.error(that.parseError(e));\n        }];\n\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n        //if (this.providerConfiguration.user) {\n        //    requestData[0].user = this.providerConfiguration.user;\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\n        //}\n\n        this.context.prepareRequest.call(this, requestData);\n        this.oData.request.apply(this, requestData);\n    },\n    _saveBatch: function _saveBatch(independentBlocks, index2, callBack) {\n        var batchRequests = [];\n        var convertedItem = [];\n        for (var index = 0; index < independentBlocks.length; index++) {\n            for (var i = 0; i < independentBlocks[index].length; i++) {\n                convertedItem.push(independentBlocks[index][i].data);\n                var request = {};\n                request.headers = {\n                    \"Content-Id\": convertedItem.length\n                };\n\n                switch (independentBlocks[index][i].data.entityState) {\n                    case _core2.default.EntityState.Unchanged:\n                        continue;break;\n                    case _core2.default.EntityState.Added:\n                        request.method = \"POST\";\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Modified:\n                        request.method = this.providerConfiguration.UpdateMethod;\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\n                        break;\n                    case _core2.default.EntityState.Deleted:\n                        request.method = \"DELETE\";\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\n                        break;\n                    default:\n                        _core.Guard.raise(new _core.Exception(\"Not supported Entity state\"));\n                }\n\n                batchRequests.push(request);\n            }\n        }\n        var that = this;\n\n        var requestData = [{\n            requestUri: this.providerConfiguration.oDataServiceHost + \"/$batch\",\n            method: \"POST\",\n            data: {\n                __batchRequests: [{ __changeRequests: batchRequests }]\n            },\n            headers: {}\n        }, function (data, response) {\n            if (response.statusCode == 202) {\n                var result = data.__batchResponses[0].__changeResponses;\n                var errors = [];\n\n                for (var i = 0; i < result.length; i++) {\n                    if (result[i].statusCode >= 200 && result[i].statusCode < 300) {\n                        var item = convertedItem[i];\n                        if (result[i].statusCode == 204) {\n                            if (result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag) {\n                                var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                                    return memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed;\n                                });\n                                if (property && property[0]) {\n                                    item[property[0].name] = result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag;\n                                }\n                            }\n                            continue;\n                        }\n\n                        that.reload_fromResponse(item, result[i].data, result[i]);\n                    } else {\n                        errors.push(that.parseError(result[i]));\n                    }\n                }\n                if (errors.length > 0) {\n                    if (errors.length === 1) {\n                        callBack.error(errors[0]);\n                    } else {\n                        callBack.error(new _core.Exception('See inner exceptions', 'Batch failed', errors));\n                    }\n                } else if (callBack.success) {\n                    callBack.success(convertedItem.length);\n                }\n            } else {\n                callBack.error(that.parseError(response));\n            }\n        }, function (e) {\n            callBack.error(that.parseError(e));\n        }, this.oData.batchHandler];\n\n        if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\n            requestData[0].useJsonLight = this.providerConfiguration.useJsonLight;\n        }\n\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\n        //if (this.providerConfiguration.user) {\n        //    requestData[0].user = this.providerConfiguration.user;\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\n        //}\n\n        this.context.prepareRequest.call(this, requestData);\n        this.oData.request.apply(this, requestData);\n    },\n    reload_fromResponse: function reload_fromResponse(item, data, response) {\n        var that = this;\n        item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            var propType = _core.Container.resolveType(memDef.type);\n            if (memDef.computed || memDef.key || !memDef.inverseProperty) {\n                if (memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed) {\n                    //unescape?\n                    item[memDef.name] = response.headers.ETag || response.headers.Etag || response.headers.etag;\n                } else if (memDef.isAssignableTo) {\n                    if (data[memDef.name]) {\n                        item[memDef.name] = new propType(data[memDef.name], { converters: that.fieldConverter.fromDb });\n                    } else {\n                        item[memDef.name] = data[memDef.name];\n                    }\n                } else if (propType === _core2.default.Array && memDef.elementType) {\n                    var aeType = _core.Container.resolveType(memDef.elementType);\n                    if (data[memDef.name] && Array.isArray(data[memDef.name])) {\n                        var arrayProperty = [];\n                        for (var ap = 0; ap < data[memDef.name].length; ap++) {\n                            var aitem = data[memDef.name][ap];\n                            if (aeType.isAssignableTo && !Object.isNullOrUndefined(aitem)) {\n                                arrayProperty.push(new aeType(aitem, { converters: that.fieldConverter.fromDb }));\n                            } else {\n                                var etypeName = _core.Container.resolveName(aeType);\n                                var econverter = that.fieldConverter.fromDb[etypeName];\n\n                                arrayProperty.push(econverter ? econverter(aitem) : aitem);\n                            }\n                        }\n                        item[memDef.name] = arrayProperty;\n                    } else if (!data[memDef.name]) {\n                        item[memDef.name] = data[memDef.name];\n                    }\n                } else {\n                    var typeName = _core.Container.resolveName(memDef.type);\n                    var converter = that.fieldConverter.fromDb[typeName];\n\n                    item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\n                }\n            }\n        }, this);\n    },\n\n    //save_getInitData: function (item, convertedItems) {\n    //    var self = this;\n    //    item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\n    //    var serializableObject = {}\n    //    item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\n    //        if (memdef.kind == $data.MemberTypes.navProperty || memdef.kind == $data.MemberTypes.complexProperty || (memdef.kind == $data.MemberTypes.property && !memdef.notMapped)) {\n    //            if (typeof memdef.concurrencyMode === 'undefined' && (memdef.key === true || item.data.entityState === $data.EntityState.Added || item.data.changedProperties.some(function (def) { return def.name === memdef.name; }))) {\n    //                var typeName = Container.resolveName(memdef.type);\n    //                var converter = self.fieldConverter.toDb[typeName];\n    //                serializableObject[memdef.name] = converter ? converter(item.physicalData[memdef.name]) : item.physicalData[memdef.name];\n    //            }\n    //        }\n    //    }, this);\n    //    return serializableObject;\n    //},\n    save_getInitData: function save_getInitData(item, convertedItems, isComplex, isDeep) {\n        var self = this;\n        if (!isComplex) {\n            item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\n        } else {\n            item.physicalData = item.data;\n        }\n        var serializableObject = {};\n        item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\n            if (memdef.kind == _core2.default.MemberTypes.complexProperty && item.physicalData[memdef.name]) {\n                serializableObject[memdef.name] = self.save_getInitData({ data: item.physicalData[memdef.name] }, convertedItems, true, true);\n            } else if (memdef.kind == _core2.default.MemberTypes.navProperty || memdef.kind == _core2.default.MemberTypes.property && !memdef.notMapped) {\n                if (isDeep || typeof memdef.concurrencyMode === 'undefined' && (memdef.key === true || item.data.entityState === _core2.default.EntityState.Added || item.data.changedProperties && item.data.changedProperties.some(function (def) {\n                    return def.name === memdef.name;\n                }))) {\n\n                    if (memdef.kind == _core2.default.MemberTypes.navProperty && item.physicalData[memdef.name] && this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\n                        serializableObject[memdef.name + \"@odata.bind\"] = item.physicalData[memdef.name].__metadata.uri;\n                    } else {\n                        var typeName = _core.Container.resolveName(memdef.type);\n                        var converter = self.fieldConverter.toDb[typeName];\n                        serializableObject[memdef.name] = converter ? converter(item.physicalData[memdef.name]) : item.physicalData[memdef.name];\n                    }\n                }\n            }\n        }, this);\n        return serializableObject;\n    },\n    save_addConcurrencyHeader: function save_addConcurrencyHeader(item, headers) {\n        var property = item.data.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n            return memDef.concurrencyMode === _core2.default.ConcurrencyMode.Fixed;\n        });\n        if (property && property[0]) {\n            headers['If-Match'] = item.data[property[0].name];\n            //item.data[property[0].name] = \"\";\n        }\n    },\n    getTraceString: function getTraceString(queryable) {\n        var sqlText = this._compile(queryable);\n        return queryable;\n    },\n    supportedDataTypes: {\n        value: [_core2.default.Array, _core2.default.Integer, _core2.default.String, _core2.default.Number, _core2.default.Blob, _core2.default.Boolean, _core2.default.Date, _core2.default.Object, _core2.default.GeographyPoint, _core2.default.Guid, _core2.default.GeographyLineString, _core2.default.GeographyPolygon, _core2.default.GeographyMultiPoint, _core2.default.GeographyMultiLineString, _core2.default.GeographyMultiPolygon, _core2.default.GeographyCollection, _core2.default.GeometryPoint, _core2.default.GeometryLineString, _core2.default.GeometryPolygon, _core2.default.GeometryMultiPoint, _core2.default.GeometryMultiLineString, _core2.default.GeometryMultiPolygon, _core2.default.GeometryCollection, _core2.default.Byte, _core2.default.SByte, _core2.default.Decimal, _core2.default.Float, _core2.default.Int16, _core2.default.Int32, _core2.default.Int64, _core2.default.Time, _core2.default.Day, _core2.default.DateTimeOffset, _core2.default.Duration],\n        writable: false\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            notEqual: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            equalTyped: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            notEqualTyped: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            greaterThan: { mapTo: 'gt', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            greaterThanOrEqual: { mapTo: 'ge', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            lessThan: { mapTo: 'lt', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            lessThenOrEqual: { mapTo: 'le', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            or: { mapTo: 'or', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            and: { mapTo: 'and', dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            add: { mapTo: 'add', dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            divide: { mapTo: 'div', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            multiply: { mapTo: 'mul', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            subtract: { mapTo: 'sub', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n            modulo: { mapTo: 'mod', allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] },\n\n            \"in\": { mapTo: \"in\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression] }\n        }\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' }\n        }\n    },\n\n    supportedFieldOperations: {\n        value: {\n            /* string functions */\n\n            contains: {\n                mapTo: \"substringof\",\n                dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"substring\", dataType: \"string\" }, { name: \"@expression\" }]\n            },\n\n            startsWith: {\n                mapTo: \"startswith\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            endsWith: {\n                mapTo: \"endswith\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            length: [{\n                allowedType: 'string',\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            }, {\n                allowedType: 'GeographyLineString',\n                mapTo: \"geo.length\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: ['GeographyLineString'] }],\n                fixedDataType: 'decimal'\n            }, {\n                allowedType: 'GeometryLineString',\n                mapTo: \"geo.length\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeometryLineString' }],\n                fixedDataType: 'decimal'\n            }],\n\n            strLength: {\n                mapTo: \"length\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.ProjectionExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            indexOf: {\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                mapTo: \"indexof\",\n                baseIndex: 1,\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFragment', dataType: 'string' }]\n            },\n\n            replace: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFrom', dataType: 'string' }, { name: 'strTo', dataType: 'string' }]\n            },\n\n            substr: {\n                mapTo: \"substring\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\", optional: \"true\" }]\n            },\n\n            toLowerCase: {\n                mapTo: \"tolower\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            toUpperCase: {\n                mapTo: \"toupper\",\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n\n            },\n\n            trim: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\n            },\n\n            concat: {\n                dataType: \"string\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\n            },\n\n            /* data functions */\n\n            day: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            hour: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            minute: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            month: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            second: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            year: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n\n            /* number functions */\n            round: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            floor: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n            ceiling: {\n                allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\n            },\n\n            /* geo functions */\n            distance: [{\n                allowedType: 'GeographyPoint',\n                mapTo: \"geo.distance\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeographyPoint' }, { name: \"to\", dataType: 'GeographyPoint' }],\n                fixedDataType: 'decimal'\n            }, {\n                allowedType: 'GeometryPoint',\n                mapTo: \"geo.distance\",\n                dataType: \"number\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeometryPoint' }, { name: \"to\", dataType: 'GeometryPoint' }],\n                fixedDataType: 'decimal'\n            }],\n\n            intersects: [{\n                allowedType: 'GeographyPoint',\n                mapTo: \"geo.intersects\",\n                dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeographyPoint' }, { name: \"in\", dataType: 'GeographyPolygon' }]\n\n            }, {\n                allowedType: 'GeometryPoint',\n                mapTo: \"geo.intersects\",\n                dataType: \"boolean\", allowedIn: [_core2.default.Expressions.FilterExpression, _core2.default.Expressions.OrderExpression],\n                parameters: [{ name: \"@expression\", dataType: 'GeometryPoint' }, { name: \"in\", dataType: 'GeometryPolygon' }]\n\n            }]\n        },\n        enumerable: true,\n        writable: true\n    },\n    supportedSetOperations: {\n        value: {\n            filter: {},\n            map: {},\n            length: {},\n            forEach: {},\n            toArray: {},\n            single: {},\n            some: {\n                invokable: false,\n                allowedIn: [_core2.default.Expressions.FilterExpression],\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\n                mapTo: 'any',\n                frameType: _core2.default.Expressions.SomeExpression\n            },\n            every: {\n                invokable: false,\n                allowedIn: [_core2.default.Expressions.FilterExpression],\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\n                mapTo: 'all',\n                frameType: _core2.default.Expressions.EveryExpression\n            },\n            take: {},\n            skip: {},\n            orderBy: {},\n            orderByDescending: {},\n            first: {},\n            include: {},\n            batchDelete: {},\n            withInlineCount: {},\n            find: {}\n        },\n        enumerable: true,\n        writable: true\n    },\n    supportedContextOperation: {\n        value: {\n            batchExecuteQuery: true\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    fieldConverter: { value: _core2.default.oDataConverter },\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        var memDef = expression.entityType.getMemberDefinition(operation);\n        if (!memDef || !memDef.method || memDef.method.IsSideEffecting !== false || !memDef.method.returnType || !(frameType === _core2.default.Expressions.FilterExpression || frameType === _core2.default.Expressions.OrderExpression)) {\n            _core.Guard.raise(new _core.Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n        }\n\n        return memDef;\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        if (expression) {\n            var esDef = expression.storageModel.ContextType.getMemberDefinition(expression.storageModel.ItemName);\n            if (esDef && esDef.actions && esDef.actions[operation]) {\n                var memDef = _core2.default.MemberDefinition.translateDefinition(esDef.actions[operation], operation, this.getType());\n                if (!memDef || !memDef.method || memDef.method.IsSideEffecting !== false || !memDef.method.returnType || !(frameType === _core2.default.Expressions.FilterExpression || frameType === _core2.default.Expressions.OrderExpression)) {\n\n                    _core.Guard.raise(new _core.Exception(\"Collection '\" + expression.storageModel.ItemName + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n                }\n\n                return memDef;\n            }\n        }\n        return _core2.default.StorageProviderBase.prototype.resolveSetOperations.apply(this, arguments);\n    },\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        var memDef = this.context.getType().getMemberDefinition(operation);\n        if (!memDef || !memDef.method || memDef.method.IsSideEffecting !== false || !memDef.method.returnType || !(frameType === _core2.default.Expressions.FilterExpression || frameType === _core2.default.Expressions.OrderExpression)) {\n            _core.Guard.raise(new _core.Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n        }\n        return memDef;\n    },\n\n    getEntityKeysValue: function getEntityKeysValue(entity) {\n        var result = [];\n        var keyValue = undefined;\n        var memDefs = entity.data.getType().memberDefinitions.getKeyProperties();\n        for (var i = 0, l = memDefs.length; i < l; i++) {\n            var field = memDefs[i];\n            if (field.key) {\n                keyValue = entity.data[field.name];\n                var typeName = _core.Container.resolveName(field.type);\n\n                var converter = this.fieldConverter.toDb[typeName];\n                keyValue = converter ? converter(keyValue) : keyValue;\n\n                converter = this.fieldConverter.escape[typeName];\n                keyValue = converter ? converter(keyValue) : keyValue;\n\n                result.push(field.name + \"=\" + keyValue);\n            }\n        }\n        if (result.length > 1) {\n            return result.join(\",\");\n        }\n        return keyValue;\n    },\n    getFieldUrl: function getFieldUrl(entity, fieldName, entitySet) {\n        var keyPart = this.getEntityKeysValue({ data: entity });\n        var servicehost = this.providerConfiguration.oDataServiceHost;\n        if (servicehost.lastIndexOf('/') === servicehost.length) servicehost = servicehost.substring(0, servicehost.length - 1);\n\n        return servicehost + '/' + entitySet.tableName + '(' + keyPart + ')/' + fieldName + '/$value';\n    }, /*\r\n       getServiceMetadata: function () {\r\n         $data.ajax(this._setAjaxAuthHeader({\r\n             url: this.providerConfiguration.oDataServiceHost + \"/$metadata\",\r\n             dataType: \"xml\",\r\n             success: function (d) {\r\n                 console.log(\"OK\");\r\n                 console.dir(d);\r\n                 console.log(typeof d);\r\n                 window[\"s\"] = d;\r\n                 window[\"k\"] = this.nsResolver;\r\n                 //s.evaluate(\"edmx:Edmx/edmx:DataServices/Schema\", s, $data.storageProviders.oData.oDataProvider.prototype.nsResolver, XPathResult.ANY_TYPE, null).iterateNext()\r\n               },\r\n             error: function (error) {\r\n                 console.log(\"error:\");\r\n                 console.dir(error);\r\n             }\r\n         }));\r\n       },\r\n       nsResolver: function (sPrefix) {\r\n         switch (sPrefix) {\r\n             case \"edmx\":\r\n                 return \"http://schemas.microsoft.com/ado/2007/06/edmx\";\r\n                 break;\r\n             case \"m\":\r\n                 return \"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\";\r\n                 break;\r\n             case \"d\":\r\n                 return \"http://schemas.microsoft.com/ado/2007/08/dataservices\";\r\n                 break;\r\n             default:\r\n                 return \"http://schemas.microsoft.com/ado/2008/09/edm\";\r\n                 break;\r\n         }\r\n       }\r\n       */\n    parseError: function parseError(error, data) {\n\n        var message = (error.response || error || {}).body || '';\n        try {\n            if (message.indexOf('{') === 0) {\n                var errorObj = JSON.parse(message);\n                errorObj = errorObj['odata.error'] || errorObj.error || errorObj;\n                if (errorObj.message) {\n                    message = errorObj.message.value || errorObj.message;\n                }\n            }\n        } catch (e) {}\n\n        return new _core.Exception(message, error.message, data || error);\n    },\n    appendBasicAuth: function appendBasicAuth(request, user, password, withCredentials) {\n        request.headers = request.headers || {};\n        if (!request.headers.Authorization && user && password) {\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\n        }\n        if (withCredentials) {\n            request.withCredentials = withCredentials;\n        }\n    },\n    __encodeBase64: function __encodeBase64(val) {\n        var b64array = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\" + \"wxyz0123456789+/\" + \"=\";\n\n        var input = val;\n        var base64 = \"\";\n        var hex = \"\";\n        var chr1,\n            chr2,\n            chr3 = \"\";\n        var enc1,\n            enc2,\n            enc3,\n            enc4 = \"\";\n        var i = 0;\n\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n\n            base64 = base64 + b64array.charAt(enc1) + b64array.charAt(enc2) + b64array.charAt(enc3) + b64array.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return base64;\n    }\n}, null);\n\n_core2.default.StorageProviderBase.registerProvider(\"oData\", _core2.default.storageProviders.oData.oDataProvider);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"jaydata/core\":\"jaydata/core\"}],8:[function(require,module,exports){\n'use strict';\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _core.$C)('$data.storageProviders.oData.oDataWhereCompiler', _core2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(provider, lambdaPrefix) {\n        this.provider = provider;\n        this.lambdaPrefix = lambdaPrefix;\n    },\n\n    compile: function compile(expression, context) {\n        this.Visit(expression, context);\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        this.Visit(expression.expression, context);\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, context) {\n        context.data += expression.resolution.mapTo;\n        context.data += \"(\";\n        this.Visit(expression.operand, context);\n        context.data += \")\";\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        context.data += \"(\";\n        //TODO refactor!!!\n        if (expression.nodeType == \"in\") {\n            _core.Guard.requireType(\"expression.right\", expression.type, _core2.default.Expressions.ConstantExpression);\n            var paramValue = expression.right.value;\n            if (!(paramValue instanceof Array)) {\n                _core.Guard.raise(new _core.Exception(\"Right to the 'in' operator must be an array value\"));\n            }\n            var result = null;\n            var orResolution = { mapTo: \"or\", dataType: \"boolean\", name: \"or\" };\n            var eqResolution = { mapTo: \"eq\", dataType: \"boolean\", name: \"equal\" };\n\n            paramValue.forEach(function (item) {\n                var idValue = item;\n                var idCheck = _core.Container.createSimpleBinaryExpression(expression.left, idValue, _core2.default.Expressions.ExpressionType.Equal, \"==\", \"boolean\", eqResolution);\n                if (result) {\n                    result = _core.Container.createSimpleBinaryExpression(result, idCheck, _core2.default.Expressions.ExpressionType.Or, \"||\", \"boolean\", orResolution);\n                } else {\n                    result = idCheck;\n                };\n            });\n            var temp = context.data;\n            context.data = '';\n            this.Visit(result, context);\n            context.data = temp + context.data.replace(/\\(/g, '').replace(/\\)/g, '');\n        } else {\n            this.Visit(expression.left, context);\n            context.data += \" \";\n            context.data += expression.resolution.mapTo;\n            context.data += \" \";\n            this.Visit(expression.right, context);\n        };\n        context.data += \")\";\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (expression.source instanceof _core2.default.Expressions.ComplexTypeExpression) {\n            context.data += \"/\";\n        }\n        this.Visit(expression.selector, context);\n    },\n\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        context.data += expression.associationInfo.FromPropertyName;\n    },\n\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        context.data += expression.memberName;\n    },\n\n    VisitQueryParameterExpression: function VisitQueryParameterExpression(expression, context) {\n        var typeName = _core.Container.resolveName(expression.type);\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(value) : value;\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.parameters || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        args.forEach(function (arg, index) {\n            if (index > 0) {\n                context.data += \",\";\n            };\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n    VisitEntityFunctionOperationExpression: function VisitEntityFunctionOperationExpression(expression, context) {\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n        this.Visit(expression.source, context);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.method.params || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n        var i = 0;\n        args.forEach(function (arg, index) {\n            if (arg === undefined || arg instanceof _core2.default.Expressions.ConstantExpression && typeof arg.value === 'undefined') return;\n\n            if (i > 0) {\n                context.data += \",\";\n            };\n            i++;\n            context.data += params[index].name + '=';\n            this.Visit(arg, context);\n        }, this);\n        context.data += \")\";\n    },\n    VisitContextFunctionOperationExpression: function VisitContextFunctionOperationExpression(expression, context) {\n        return this.VisitEntityFunctionOperationExpression(expression, context);\n    },\n\n    VisitConstantExpression: function VisitConstantExpression(expression, context) {\n        var typeName = _core.Container.resolveName(expression.type);\n\n        var converter = this.provider.fieldConverter.toDb[typeName];\n        var value = converter ? converter(expression.value) : expression.value;\n\n        converter = this.provider.fieldConverter.escape[typeName];\n        context.data += converter ? converter(value) : value;\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        if (this.lambdaPrefix && expression.selector.lambda) {\n            context.lambda = expression.selector.lambda;\n            context.data += expression.selector.lambda + '/';\n        }\n\n        //if (expression.selector instanceof $data.Expressions.EntityExpression) {\n        //    this.Visit(expression.selector, context);\n        //}\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (expression.selector instanceof _core2.default.Expressions.AssociationInfoExpression) {\n            this.Visit(expression.selector, context);\n            context.data += \"/\";\n        }\n    },\n\n    VisitFrameOperationExpression: function VisitFrameOperationExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        _core.Guard.requireType(\"expression.operation\", expression.operation, _core2.default.Expressions.MemberInfoExpression);\n\n        //TODO refactor!\n        var opDef = expression.operation.memberDefinition;\n        var opName = opDef.mapTo || opDef.name;\n        context.data += opName;\n        context.data += \"(\";\n        var paramCounter = 0;\n        var params = opDef.parameters || [{ name: \"@expression\" }];\n\n        var args = params.map(function (item, index) {\n            if (item.name === \"@expression\") {\n                return expression.source;\n            } else {\n                return expression.parameters[paramCounter++];\n            };\n        });\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            if (arg && arg.value instanceof _core2.default.Queryable) {\n                var frameExpression = new opDef.frameType(arg.value.expression);\n                var preparator = _core.Container.createQueryExpressionCreator(arg.value.entityContext);\n                var prep_expression = preparator.Visit(frameExpression);\n\n                var compiler = new _core2.default.storageProviders.oData.oDataWhereCompiler(this.provider, true);\n                var frameContext = { data: \"\" };\n                var compiled = compiler.compile(prep_expression, frameContext);\n\n                context.data += frameContext.lambda + ': ' + frameContext.data;\n            };\n        }\n        context.data += \")\";\n    }\n});\n\n},{\"jaydata/core\":\"jaydata/core\"}]},{},[1])(1)\n});\n\n\t});\r\n})();\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = require('jaydata/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _oDataConverter = require('./oDataConverter.js');\n\nvar _oDataConverter2 = _interopRequireDefault(_oDataConverter);\n\nvar _oDataProvider = require('./oDataProvider.js');\n\nvar _oDataProvider2 = _interopRequireDefault(_oDataProvider);\n\nvar _oDataCompiler = require('./oDataCompiler.js');\n\nvar _oDataCompiler2 = _interopRequireDefault(_oDataCompiler);\n\nvar _oDataWhereCompiler = require('./oDataWhereCompiler.js');\n\nvar _oDataWhereCompiler2 = _interopRequireDefault(_oDataWhereCompiler);\n\nvar _oDataOrderCompiler = require('./oDataOrderCompiler.js');\n\nvar _oDataOrderCompiler2 = _interopRequireDefault(_oDataOrderCompiler);\n\nvar _oDataPagingCompiler = require('./oDataPagingCompiler.js');\n\nvar _oDataPagingCompiler2 = _interopRequireDefault(_oDataPagingCompiler);\n\nvar _oDataProjectionCompiler = require('./oDataProjectionCompiler.js');\n\nvar _oDataProjectionCompiler2 = _interopRequireDefault(_oDataProjectionCompiler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _core2.default;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0=","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oData.oDataCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function () {\r\n        this.context = {};\r\n        this.provider = {};\r\n        //this.logicalType = null;\r\n        this.includes = null;\r\n        this.mainEntitySet = null;\r\n    },\r\n    compile: function (query) {\r\n\r\n        this.provider = query.context.storageProvider;\r\n        this.context = query.context;\r\n\r\n        if (query.defaultType) {\r\n            this.mainEntitySet = query.context.getEntitySetFromElementType(query.defaultType);\r\n        }\r\n\r\n        var queryFragments = { urlText: \"\" };\r\n\r\n        this.Visit(query.expression, queryFragments);\r\n\r\n        query.modelBinderConfig = {};\r\n        var modelBinder = Container.createModelBinderConfigCompiler(query, this.includes, true);\r\n        modelBinder.Visit(query.expression);\r\n\r\n\r\n        var queryText = queryFragments.urlText;\r\n        var addAmp = false;\r\n        for (var name in queryFragments) {\r\n            if (name != \"urlText\" && name != \"actionPack\" && name != \"data\" && name != \"lambda\" && name != \"method\" && name != \"postData\" &&\r\n                name != \"_isBatchExecuteQuery\" && name != \"_subQueries\" && queryFragments[name] != \"\") {\r\n\r\n                if (addAmp) { queryText += \"&\"; } else { queryText += \"?\"; }\r\n                addAmp = true;\r\n                if(name != \"$urlParams\"){\r\n                    queryText += name + '=' + queryFragments[name];\r\n                }else{\r\n                    queryText += queryFragments[name];\r\n                }\r\n            }\r\n        }\r\n        query.queryText = queryText;\r\n        query.postData = queryFragments.postData;\r\n        var result =  {\r\n            queryText: queryText,\r\n            withInlineCount: '$inlinecount' in queryFragments || '$count' in queryFragments,\r\n            method: queryFragments.method || 'GET',\r\n            postData: queryFragments.postData,\r\n            isBatchExecuteQuery: queryFragments._isBatchExecuteQuery,\r\n            subQueries: queryFragments._subQueries,\r\n            params: []\r\n        };\r\n\r\n        query._getComplitedData = function () {\r\n            return result;\r\n        }\r\n\r\n        return result;\r\n    },\r\n    VisitOrderExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var orderCompiler = Container.createoDataOrderCompiler(this.provider);\r\n        orderCompiler.compile(expression, context);\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var pagingCompiler = Container.createoDataPagingCompiler(this.provider);\r\n        pagingCompiler.compile(expression, context);\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (!context['$select']) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += expression.selector.value.replace(/\\./g, '/');\r\n\r\n            this.includes = this.includes || [];\r\n            var includeFragment = expression.selector.value.split('.');\r\n            var tempData = null;\r\n            var storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(this.mainEntitySet.createNew);\r\n            for (var i = 0; i < includeFragment.length; i++) {\r\n                if (tempData) { tempData += '.' + includeFragment[i]; } else { tempData = includeFragment[i]; }\r\n                var association = storageModel.Associations[includeFragment[i]];\r\n                if (association) {\r\n                    if (!this.includes.some(function (include) { return include.name == tempData }, this)) {\r\n                        this.includes.push({ name: tempData, type: association.ToType });\r\n                    }\r\n                }\r\n                else {\r\n                    Guard.raise(new Exception(\"The given include path is invalid: \" + expression.selector.value + \", invalid point: \" + tempData));\r\n                }\r\n                storageModel = this.mainEntitySet.entityContext._storageModel.getStorageModel(association.ToType);\r\n            }\r\n        }\r\n    },\r\n    VisitFindExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        if (expression.subMember) {\r\n            context.urlText += \"/\" + expression.subMember.memberName;\r\n        }\r\n\r\n        context.urlText += '(';\r\n        if (expression.params.length === 1) {\r\n            var param = expression.params[0];\r\n            var typeName = Container.resolveName(param.type);\r\n\r\n            var converter = this.provider.fieldConverter.toDb[typeName];\r\n            var value = converter ? converter(param.value) : param.value;\r\n\r\n            converter = this.provider.fieldConverter.escape[typeName];\r\n            value = converter ? converter(param.value) : param.value;\r\n            context.urlText += value;\r\n        } else {\r\n            for (var i = 0; i < expression.params.length; i++) {\r\n                var param = expression.params[i];\r\n                var typeName = Container.resolveName(param.type);\r\n\r\n                var converter = this.provider.fieldConverter.toDb[typeName];\r\n                var value = converter ? converter(param.value) : param.value;\r\n\r\n                converter = this.provider.fieldConverter.escape[typeName];\r\n                value = converter ? converter(param.value) : param.value;\r\n\r\n                if (i > 0) context.urlText += ',';\r\n                context.urlText += param.name + '=' + value;\r\n            }\r\n        }\r\n        context.urlText += ')';\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        var projectionCompiler = Container.createoDataProjectionCompiler(this.context);\r\n        projectionCompiler.compile(expression, context);\r\n    },\r\n    VisitFilterExpression: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.FilterExpression\" />\r\n\r\n        this.Visit(expression.source, context);\r\n\r\n        var filterCompiler = Container.createoDataWhereCompiler(this.provider);\r\n        context.data = \"\";\r\n        filterCompiler.compile(expression.selector, context);\r\n        context[\"$filter\"] = context.data;\r\n        context.data = \"\";\r\n\r\n    },\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (this.provider.providerConfiguration.maxDataServiceVersion === \"4.0\") {\r\n            context[\"$count\"] = expression.selector.value === 'allpages';\r\n        } else {\r\n            context[\"$inlinecount\"] = expression.selector.value;\r\n        }\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        context.urlText += \"/\" + expression.instance.tableName;\r\n        //this.logicalType = expression.instance.elementType;\r\n        if (expression.params) {\r\n            for (var i = 0; i < expression.params.length; i++) {\r\n                this.Visit(expression.params[i], context);\r\n            }\r\n        }\r\n    },\r\n    VisitServiceOperationExpression: function (expression, context) {\r\n        if (expression.boundItem) {\r\n            context.urlText += \"/\" + expression.boundItem.entitySet.tableName;\r\n            if (expression.boundItem.data instanceof $data.Entity) {\r\n                context.urlText += '(' + this.provider.getEntityKeysValue(expression.boundItem) + ')';\r\n            }\r\n        }\r\n        context.urlText += \"/\" + (expression.cfg.namespace ? (expression.cfg.namespace + \".\" + expression.cfg.serviceName) : expression.cfg.serviceName);\r\n        context.method = context.method || expression.cfg.method;\r\n\r\n        //this.logicalType = expression.returnType;\r\n        if (expression.params) {\r\n            for (var i = 0; i < expression.params.length; i++) {\r\n                this.Visit(expression.params[i], context);\r\n            }\r\n        }\r\n    },\r\n    VisitBatchDeleteExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.urlText += '/$batchDelete';\r\n        context.method = 'DELETE';\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, context) {\r\n        var typeName = Container.resolveName(expression.type);\r\n        if (expression.value instanceof $data.Entity)\r\n            typeName = $data.Entity.fullName;\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n\r\n\r\n        if (context.method === 'GET' || !context.method) {\r\n            converter = this.provider.fieldConverter.escape[typeName];\r\n            value = converter ? converter(value) : value;\r\n\r\n            if (value !== undefined) {\r\n                if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\r\n                context['$urlParams'] += expression.name + '=' + value;\r\n            }\r\n        } else {\r\n            context.postData = context.postData || {};\r\n            context.postData[expression.name] = value;\r\n        }\r\n    },\r\n//    VisitConstantExpression: function (expression, context) {\r\n//        if (context['$urlParams']) { context['$urlParams'] += '&'; } else { context['$urlParams'] = ''; }\r\n//\r\n//\r\n//        var valueType = Container.getTypeName(expression.value);\r\n//\r\n//\r\n//\r\n//        context['$urlParams'] += expression.name + '=' + this.provider.fieldConverter.toDb[Container.resolveName(Container.resolveType(valueType))](expression.value);\r\n//    },\r\n\r\n\r\n    VisitCountExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        context.urlText += '/$count';\r\n    },\r\n\r\n    VisitBatchExecuteQueryExpression: function (expression, context) {\r\n        context.urlText += '/$batch'\r\n        context.method = 'POST';\r\n        context.postData = { __batchRequests: [] };\r\n        context._isBatchExecuteQuery = true;\r\n        context._subQueries = expression.members;\r\n\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            var queryable = expression.members[i];\r\n            var compiler = new $data.storageProviders.oData.oDataCompiler();\r\n            var compiled = compiler.compile(queryable);\r\n            context.postData.__batchRequests.push({\r\n                requestUri: compiled.queryText,\r\n                method: compiled.method,\r\n                data: compiled.data,\r\n                headers: compiled.headers\r\n            });\r\n        }\r\n    }\r\n}, {});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport atob from 'atob'\r\n\r\n$data.defaults = $data.defaults || {};\r\n$data.defaults.oDataWebApi = false;\r\n\r\n$data.oDataConverter = {\r\n    fromDb: {\r\n        '$data.Enum': function(v, enumType) { return $data.Container.convertTo(v, enumType); },\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': function(v) { return $data.Container.convertTo(v, $data.Decimal); },\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': function(v) { return $data.Container.convertTo(v, $data.Int64); },\r\n        '$data.ObjectID': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,//function (number) { return (typeof number === 'string' && /^\\d+$/.test(number)) ? parseInt(number) : number; },\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': function (dbData) {\r\n            if (dbData) {\r\n                if (dbData instanceof Date) {\r\n                    return dbData;\r\n                } else if (dbData.substring(0, 6) === '/Date(') {\r\n                    return new Date(parseInt(dbData.substr(6)));\r\n                } else {\r\n                    //ISODate without Z? Safari compatible with Z\r\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]'))\r\n                        dbData += 'Z';\r\n                    return new Date(dbData);\r\n                }\r\n            } else {\r\n                return dbData;\r\n            }\r\n        },\r\n        '$data.DateTimeOffset': function (dbData) {\r\n            if (dbData) {\r\n                if (dbData instanceof Date) {\r\n                    return dbData;\r\n                } else if (dbData.substring(0, 6) === '/Date(') {\r\n                    return new Date(parseInt(dbData.substr(6)));\r\n                } else {\r\n                    //ISODate without Z? Safari compatible with Z\r\n                    if (dbData.indexOf('Z') === -1 && !dbData.match('T.*[+-]'))\r\n                        dbData += 'Z';\r\n                    return new Date(dbData);\r\n                }\r\n            } else {\r\n                return dbData;\r\n            }\r\n        },\r\n        '$data.Time': function(v) { return $data.Container.convertTo(v, $data.Time); },\r\n        '$data.Day': $data.Container.proxyConverter,\r\n        '$data.Duration': $data.Container.proxyConverter,\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': function (v) {\r\n            if (typeof v == 'string'){\r\n                try { return $data.Container.convertTo(atob(v), '$data.Blob'); }\r\n                catch (e) { return v; }\r\n            }else return v;\r\n        },\r\n        '$data.Object': function (o) { if (o === undefined) { return new $data.Object(); } else if (typeof o === 'string') { return JSON.parse(o); } return o; },\r\n        '$data.Array': function (o) { if (o === undefined) { return new $data.Array(); } else if (o instanceof $data.Array) { return o; } return JSON.parse(o); },\r\n        '$data.GeographyPoint': function (g) { if (g) { return new $data.GeographyPoint(g); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return new $data.GeographyLineString(g); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return new $data.GeographyPolygon(g); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return new $data.GeographyMultiPoint(g); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return new $data.GeographyMultiLineString(g); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return new $data.GeographyMultiPolygon(g); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return new $data.GeographyCollection(g); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return new $data.GeometryPoint(g); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return new $data.GeometryLineString(g); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return new $data.GeometryPolygon(g); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return new $data.GeometryMultiPoint(g); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return new $data.GeometryMultiLineString(g); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return new $data.GeometryMultiPolygon(g); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return new $data.GeometryCollection(g); } return g; },\r\n        '$data.Guid': function (guid) { return guid ? guid.toString() : guid; }\r\n    },\r\n    toDb: {\r\n        '$data.Enum': $data.Container.proxyConverter,\r\n        '$data.Entity': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': $data.Container.proxyConverter,//function (v) { return v ? parseFloat(v) : v },\r\n        '$data.Float': $data.Container.proxyConverter,\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Int64': $data.Container.proxyConverter,//function (v) { return v ? parseInt(v) : v },\r\n        '$data.ObjectID': $data.Container.proxyConverter,\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': $data.Container.proxyConverter,\r\n        '$data.Date': function (e) { return e ? e.toISOString().replace('Z', '') : e; },\r\n        '$data.Time': $data.Container.proxyConverter,\r\n        '$data.Day': $data.Container.proxyConverter,\r\n        '$data.Duration': $data.Container.proxyConverter,\r\n        '$data.DateTimeOffset': function(v){ return v ? v.toISOString() : v; },\r\n        '$data.String': $data.Container.proxyConverter,\r\n        '$data.Boolean': $data.Container.proxyConverter,\r\n        '$data.Blob': function (v) { return v ? $data.Blob.toBase64(v) : v; },\r\n        '$data.Object': $data.Container.proxyConverter,\r\n        '$data.Array': $data.Container.proxyConverter,\r\n        '$data.GeographyPoint': $data.Container.proxyConverter,\r\n        '$data.GeographyLineString': $data.Container.proxyConverter,\r\n        '$data.GeographyPolygon': $data.Container.proxyConverter,\r\n        '$data.GeographyMultiPoint': $data.Container.proxyConverter,\r\n        '$data.GeographyMultiLineString': $data.Container.proxyConverter,\r\n        '$data.GeographyMultiPolygon': $data.Container.proxyConverter,\r\n        '$data.GeographyCollection': $data.Container.proxyConverter,\r\n        '$data.GeometryPoint': $data.Container.proxyConverter,\r\n        '$data.GeometryLineString': $data.Container.proxyConverter,\r\n        '$data.GeometryPolygon': $data.Container.proxyConverter,\r\n        '$data.GeometryMultiPoint': $data.Container.proxyConverter,\r\n        '$data.GeometryMultiLineString': $data.Container.proxyConverter,\r\n        '$data.GeometryMultiPolygon': $data.Container.proxyConverter,\r\n        '$data.GeometryCollection': $data.Container.proxyConverter,\r\n        '$data.Guid': $data.Container.proxyConverter\r\n    },\r\n    escape: {\r\n        '$data.Enum': function (e, enumType) { return  (e !== null && e !== undefined) ? ((enumType ? enumType.fullName : \"\") + \"'\" + e + \"'\") : e },\r\n        '$data.Entity': function (e) { return JSON.stringify(e); },\r\n        '$data.Integer': $data.Container.proxyConverter,\r\n        '$data.Int32': $data.Container.proxyConverter,\r\n        '$data.Number': function (v) { return v && $data.defaults.oDataWebApi ? v + 'd' : v; },\r\n        '$data.Int16': $data.Container.proxyConverter,\r\n        '$data.Byte': $data.Container.proxyConverter,\r\n        '$data.SByte': $data.Container.proxyConverter,\r\n        '$data.Decimal': function (v) { return v && $data.defaults.oDataWebApi ? v + 'm' : v; },\r\n        '$data.Float': function (v) { return v && $data.defaults.oDataWebApi ? v + 'f' : v; },\r\n        '$data.Int64': $data.Container.proxyConverter,\r\n        '$data.Time': $data.Container.proxyConverter,\r\n        '$data.Day': $data.Container.proxyConverter,\r\n        '$data.Duration': function (v) { return v ? \"duration'\" + v + \"'\" : v; },\r\n        '$data.DateTimeOffset': function (d) { return d ? encodeURIComponent(d) : d },\r\n        '$data.Date': function (date) { return date ? \"datetime'\" + date + \"'\" : date; },\r\n        '$data.String': function (text) { return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text; },\r\n        '$data.ObjectID': function (text) { return typeof text === 'string' ? \"'\" + text.replace(/'/g, \"''\") + \"'\" : text; },\r\n        '$data.Boolean': function (bool) { return typeof bool === 'boolean' ? bool.toString() : bool; },\r\n        '$data.Blob': function (b) { return b ? \"binary'\" + b + \"'\" : b; },\r\n        '$data.Object': function (o) { return JSON.stringify(o); },\r\n        '$data.Array': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyPoint': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyLineString': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyPolygon': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyMultiPoint': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyMultiLineString': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyMultiPolygon': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeographyCollection': function (g) { if (g) { return $data.GeographyBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryPoint': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryLineString': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryPolygon': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryMultiPoint': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryMultiLineString': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryMultiPolygon': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.GeometryCollection': function (g) { if (g) { return $data.GeometryBase.stringifyToUrl(g); } return g; },\r\n        '$data.Guid': function (guid) { return guid ? (\"\" + guid.toString() + \"\") : guid; }\r\n    },\r\n    unescape: {\r\n        '$data.Entity': function (v, c) {\r\n            var config = c || {};\r\n            var value = JSON.parse(v);\r\n            if (value && config.type) {\r\n                var type = Container.resolveType(config.type);\r\n                /*Todo converter*/\r\n                return new type(value, { converters: undefined });\r\n            }\r\n            return value;\r\n        },\r\n        '$data.Number': function (v) { return JSON.parse(v); },\r\n        '$data.Integer': function (v) { return JSON.parse(v); },\r\n        '$data.Int32': function (v) { return JSON.parse(v); },\r\n        '$data.Byte': function (v) { return JSON.parse(v); },\r\n        '$data.SByte': function (v) { return JSON.parse(v); },\r\n        '$data.Decimal': function (v) {\r\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('m') === v.length - 1) {\r\n                return v.substr(0, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.Float': function (v) {\r\n            if (typeof v === 'string' && v.toLowerCase().lastIndexOf('f') === v.length - 1) {\r\n                return v.substr(0, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.Int16': function (v) { return JSON.parse(v); },\r\n        '$data.Int64': function (v) {\r\n            return v;\r\n        },\r\n        '$data.Boolean': function (v) { return JSON.parse(v); },\r\n        '$data.Date': function (v) {\r\n            if (typeof v === 'string' && /^datetime'/.test(v)) {\r\n                return v.slice(9, v.length - 1);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.String': function (v) {\r\n            if (typeof v === 'string' && v.indexOf(\"'\") === 0 && v.lastIndexOf(\"'\") === v.length - 1) {\r\n                return v.slice(1, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.ObjectID': function (v) {\r\n            if (typeof v === 'string' && v.indexOf(\"'\") === 0 && v.lastIndexOf(\"'\") === v.length - 1) {\r\n                return v.slice(1, v.length - 1);\r\n            } else {\r\n                return v;\r\n            }\r\n        },\r\n        '$data.Guid': function (v) {\r\n            if (/^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$/.test(v)) {\r\n                var data = v.slice(5, v.length - 1)\r\n                return $data.parseGuid(data).toString();\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Array': function (v, c) {\r\n            var config = c || {};\r\n\r\n            var value = JSON.parse(v) || [];\r\n            if (value && config.elementType) {\r\n                var type = Container.resolveType(config.elementType);\r\n                var typeName = Container.resolveName(type);\r\n                if (type && type.isAssignableTo && type.isAssignableTo($data.Entity)) {\r\n                    typeName = $data.Entity.fullName;\r\n                }\r\n\r\n                if (Array.isArray(value)) {\r\n                    var converter = $data.oDataConverter.unescape[typeName];\r\n                    for (var i = 0; i < value.length; i++) {\r\n                        value[i] = converter ? converter(value[i]) : value[i];\r\n                    }\r\n                }\r\n                return value;\r\n            }\r\n            return value;\r\n        },\r\n        '$data.DateTimeOffset': function (v) {\r\n            if (typeof v === 'string') {\r\n                return $data.Container.convertTo(v, $data.DateTimeOffset);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Time': function (v) {\r\n            if (typeof v === 'string' && /^time'/.test(v)) {\r\n                return $data.Container.convertTo(v.slice(5, v.length - 1), $data.Time);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Day': function (v) {\r\n            if (typeof v === 'string' && /^date'/.test(v)) {\r\n                return $data.Container.convertTo(v.slice(5, v.length - 1), $data.Day);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Duration': function (v) {\r\n            if (typeof v === 'string' && /^duration'/.test(v)) {\r\n                return $data.Container.convertTo(v.slice(9, v.length - 1), $data.Duration);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Blob': function(v){\r\n            if (typeof v === 'string'){\r\n                if (/^X'/.test(v)){\r\n                    return $data.Blob.createFromHexString(v.slice(2, v.length - 1));\r\n                }else if (/^binary'/.test(v)){\r\n                    return $data.Blob.createFromHexString(v.slice(7, v.length - 1));\r\n                }\r\n            }\r\n            return v;\r\n        },\r\n        '$data.Object': function (v) { return JSON.parse(v); },\r\n        '$data.GeographyPoint': function (v) {\r\n            if (/^geography'POINT\\(/i.test(v)) {\r\n                var data = v.slice(10, v.length - 1);\r\n                return $data.GeographyBase.parseFromString(data);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.GeographyPolygon': function (v) {\r\n            if (/^geography'POLYGON\\(/i.test(v)) {\r\n                var data = v.slice(10, v.length - 1);\r\n                return $data.GeographyBase.parseFromString(data);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.GeometryPoint': function (v) {\r\n            if (/^geometry'POINT\\(/i.test(v)) {\r\n                var data = v.slice(9, v.length - 1);\r\n                return $data.GeometryBase.parseFromString(data);\r\n            }\r\n            return v;\r\n        },\r\n        '$data.GeometryPolygon': function (v) {\r\n            if (/^geometry'POLYGON\\(/i.test(v)) {\r\n                var data = v.slice(9, v.length - 1);\r\n                return $data.GeometryBase.parseFromString(data);\r\n            }\r\n            return v;\r\n        }\r\n    },\r\n    xmlEscape: {\r\n        '$data.Byte': function (v) { return v.toString(); },\r\n        '$data.SByte': function (v) { return v.toString(); },\r\n        '$data.Decimal': function (v) { return v.toString(); },\r\n        '$data.Float': function (v) { return v.toString(); },\r\n        '$data.Int16': function (v) { return v.toString(); },\r\n        '$data.Int64': function (v) { return v.toString(); },\r\n        '$data.Integer': function (v) { return v.toString(); },\r\n        '$data.Int32': function (v) { return v.toString(); },\r\n        '$data.Boolean': function (v) { return v.toString(); },\r\n        '$data.Blob': function (v) { return $data.Blob.toBase64(v); },\r\n        '$data.Date': function (v) { return v.toISOString().replace('Z', ''); },\r\n        '$data.DateTimeOffset': function(v){ return v.toISOString(); },\r\n        '$data.Time': function (v) { return v.toString(); },\r\n        '$data.Day': function (v) { return v.toString(); },\r\n        '$data.Duration': function (v) { return v.toString(); },\r\n        '$data.Number': function (v) { return v.toString(); },\r\n        '$data.String': function (v) { return v.toString(); },\r\n        '$data.ObjectID': function (v) { return v.toString(); },\r\n        '$data.Object': function (v) { return JSON.stringify(v); },\r\n        '$data.Guid': function (v) { return v.toString(); }/*,\r\n        '$data.GeographyPoint': function (v) { return this._buildSpatialPoint(v, 'http://www.opengis.net/def/crs/EPSG/0/4326'); },\r\n        '$data.GeometryPoint': function (v) { return this._buildSpatialPoint(v, 'http://www.opengis.net/def/crs/EPSG/0/0'); },\r\n        '$data.GeographyLineString': function (v) { return this._buildSpatialLineString(v, 'http://www.opengis.net/def/crs/EPSG/0/4326'); },\r\n        '$data.GeometryLineString': function (v) { return this._buildSpatialLineString(v, 'http://www.opengis.net/def/crs/EPSG/0/0'); }*/\r\n    },\r\n    simple: { //$value, $count\r\n        '$data.Byte': function (v) { return v.toString(); },\r\n        '$data.SByte': function (v) { return v.toString(); },\r\n        '$data.Decimal': function (v) { return v.toString(); },\r\n        '$data.Float': function (v) { return v.toString(); },\r\n        '$data.Int16': function (v) { return v.toString(); },\r\n        '$data.Int64': function (v) { return v.toString(); },\r\n        '$data.ObjectID': function (o) { return o.toString(); },\r\n        '$data.Integer': function (o) { return o.toString(); },\r\n        '$data.Int32': function (o) { return o.toString(); },\r\n        '$data.Number': function (o) { return o.toString(); },\r\n        '$data.Date': function (o) { return o instanceof $data.Date ? o.toISOString().replace('Z', '') : o.toString() },\r\n        '$data.DateTimeOffset': function(v){ return v ? v.toISOString() : v; },\r\n        '$data.Time': function (o) { return o.toString(); },\r\n        '$data.Day': function (o) { return o.toString(); },\r\n        '$data.Duration': function (o) { return o.toString(); },\r\n        '$data.String': function (o) { return o.toString(); },\r\n        '$data.Boolean': function (o) { return o.toString(); },\r\n        '$data.Blob': function (o) { return o; },\r\n        '$data.Object': function (o) { return JSON.stringify(o); },\r\n        '$data.Array': function (o) { return JSON.stringify(o); },\r\n        '$data.Guid': function (o) { return o.toString(); },\r\n        '$data.GeographyPoint': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryPoint': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyLineString': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyPolygon': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyMultiPoint': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyMultiLineString': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyMultiPolygon': function (o) { return JSON.stringify(o); },\r\n        '$data.GeographyCollection': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryLineString': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryPolygon': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryMultiPoint': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryMultiLineString': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryMultiPolygon': function (o) { return JSON.stringify(o); },\r\n        '$data.GeometryCollection': function (o) { return JSON.stringify(o); }\r\n    }\r\n};\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oData.oDataOrderCompiler', $data.storageProviders.oData.oDataWhereCompiler, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitOrderExpression: function (expression, context) {\r\n        var orderContext = { data: \"\" };\r\n        this.Visit(expression.selector, orderContext);\r\n        if (context['$orderby']) { context['$orderby'] += ','; } else { context['$orderby'] = ''; }\r\n        context['$orderby'] += orderContext.data\r\n                           + (expression.nodeType == $data.Expressions.ExpressionType.OrderByDescending ? \" desc\" : \"\");\r\n    },\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n    },\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n        context.data += \"/\";\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.source, context);\r\n            this.Visit(expression.selector, context);\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        context.data += expression.associationInfo.FromPropertyName + '/';\r\n    },\r\n    VisitEntityExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        context.data += expression.memberName;\r\n    },\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        args.forEach(function (arg, index) {\r\n            if (index > 0) {\r\n                context.data += \",\";\r\n            };\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n    VisitEntityFunctionOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n        this.Visit(expression.source, context);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.method.params || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        var i = 0;\r\n        args.forEach(function (arg, index) {\r\n            if (arg === undefined || (arg instanceof $data.Expressions.ConstantExpression && typeof arg.value === 'undefined'))\r\n                return;\r\n\r\n            if (i > 0) {\r\n                context.data += \",\";\r\n            };\r\n            i++;\r\n            context.data += params[index].name + '=';\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n    VisitContextFunctionOperationExpression: function (expression, context) {\r\n        return this.VisitEntityFunctionOperationExpression(expression, context);\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oData.oDataPagingCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider) {\r\n        this.provider = provider;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        var pagingContext = { data: \"\" };\r\n        this.Visit(expression.amount, pagingContext);\r\n        switch (expression.nodeType) {\r\n            case $data.Expressions.ExpressionType.Skip: context['$skip'] = pagingContext.data; break;\r\n            case $data.Expressions.ExpressionType.Take: context['$top'] = pagingContext.data; break;\r\n            default: Guard.raise(\"Not supported nodeType\"); break;\r\n        }\r\n    },\r\n    VisitConstantExpression: function (expression, context) {\r\n        var typeName = Container.resolveName(expression.type);\r\n        var converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(expression.value) : expression.value;\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oData.oDataProjectionCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (entityContext) {\r\n        this.entityContext = entityContext;\r\n        this.hasObjectLiteral = false;\r\n        this.ObjectLiteralPath = \"\";\r\n        this.modelBinderMapping = [];\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ProjectionExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        context.data = \"\";\r\n        this.mapping = \"\";\r\n\r\n        this.Visit(expression.selector, context);\r\n        if (context['$select']) { context['$select'] += ','; } else { context['$select'] = ''; }\r\n        context[\"$select\"] += context.data;\r\n        context.data = \"\";\r\n    },\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += this.mapping.replace(/\\./g, '/')\r\n        } if (expression.expression instanceof $data.Expressions.ComplexTypeExpression) {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        } else {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        }\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ObjectLiteralExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        var tempObjectLiteralPath = this.ObjectLiteralPath;\r\n        this.hasObjectLiteral = true;\r\n        expression.members.forEach(function (member, index) {\r\n            this.Visit(member, context);\r\n            if (index < expression.members.length - 1) { context.data += ','; }\r\n            this.mapping = '';\r\n        }, this);\r\n        this.ObjectLiteralPath = tempObjectLiteralPath;\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n\r\n\r\n        if (this.ObjectLiteralPath) { this.ObjectLiteralPath += '.' + expression.fieldName; } else { this.ObjectLiteralPath = expression.fieldName; }\r\n        this.Visit(expression.expression, context);\r\n\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n            context['$expand'] += this.mapping.replace(/\\./g, '/')\r\n        } else {\r\n            var m = this.mapping.split('.');\r\n            m.pop();\r\n            if (m.length > 0) {\r\n                if (context['$expand']) { context['$expand'] += ','; } else { context['$expand'] = ''; }\r\n                context['$expand'] += m.join('/');\r\n            }\r\n        }\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        this.Visit(expression.selector, context);\r\n    },\r\n    VisitEntityExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.EntityExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        this.Visit(expression.source, context);\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.EntitySetExpression\" mayBeNull=\"false\"></param>\r\n        ///<param name=\"context\" mayBeNull=\"false\"></param>\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, context);\r\n        }\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.selector, context);\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') { context.data += '/'; }\r\n        context.data += expression.associationInfo.FromPropertyName;\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        if (context.data && context.data.length > 0 && context.data[context.data.length - 1] != ',') { context.data += '/'; }\r\n        context.data += expression.memberName;\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.memberName;\r\n    },\r\n    VisitConstantExpression: function (expression, context) {\r\n        //Guard.raise(new Exception('Constant value is not supported in Projection.', 'Not supported!'));\r\n        //context.data += expression.value;\r\n\t\tcontext.data = context.data.slice(0, context.data.length - 1);\r\n    }\r\n});\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\nimport odatajs from 'jaydata-odatajs';\r\n\r\nvar OData = $data.__global['OData'];\r\nvar datajs = $data.__global['datajs'];\r\n\r\nvar datajsPatch;\r\ndatajsPatch = function (OData) {\r\n    // just datajs-1.1.0\r\n    if (OData && OData.jsonHandler && 'useJsonLight' in OData.jsonHandler && typeof datajs === 'object' && !datajs.version) {\r\n        $data.Trace.log('!!!!!!! - patch datajs 1.1.0');\r\n        var oldread = OData.defaultHandler.read;\r\n        OData.defaultHandler.read = function (p, context) {\r\n            delete context.contentType;\r\n            delete context.dataServiceVersion;\r\n\r\n            oldread.apply(this, arguments);\r\n        };\r\n        var oldwrite = OData.defaultHandler.write;\r\n        OData.defaultHandler.write = function (p, context) {\r\n            delete context.contentType;\r\n            delete context.dataServiceVersion;\r\n\r\n            oldwrite.apply(this, arguments);\r\n        };\r\n    }\r\n    datajsPatch = function () { };\r\n}\r\n\r\n$C('$data.storageProviders.oData.oDataProvider', $data.StorageProviderBase, null,\r\n{\r\n    constructor: function (cfg, ctx) {\r\n        this.SqlCommands = [];\r\n        this.context = ctx;\r\n        this.providerConfiguration = $data.typeSystem.extend({\r\n            dbCreation: $data.storageProviders.DbCreationType.DropTableIfChanged,\r\n            oDataServiceHost: \"/odata.svc\",\r\n            serviceUrl: \"\",\r\n            maxDataServiceVersion: '4.0',\r\n            dataServiceVersion: undefined,\r\n            user: null,\r\n            password: null,\r\n            withCredentials: false,\r\n            //enableJSONP: undefined,\r\n            //useJsonLight: undefined\r\n            //disableBatch: undefined\r\n            UpdateMethod: 'PATCH'\r\n        }, cfg);\r\n\r\n        if (this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\r\n            if (typeof odatajs === 'undefined' || typeof odatajs.oData === 'undefined') {\r\n                Guard.raise(new Exception('odatajs is required', 'Not Found!'));\r\n            } else {\r\n                this.oData = odatajs.oData\r\n            }\r\n        } else {\r\n            if (typeof OData === 'undefined') {\r\n                Guard.raise(new Exception('datajs is required', 'Not Found!'));\r\n            } else {\r\n                this.oData = OData;\r\n                datajsPatch(this.oData);\r\n            }\r\n        }\r\n\r\n        //this.fixkDataServiceVersions(cfg);\r\n\r\n        if (this.context && this.context._buildDbType_generateConvertToFunction && this.buildDbType_generateConvertToFunction) {\r\n            this.context._buildDbType_generateConvertToFunction = this.buildDbType_generateConvertToFunction;\r\n        }\r\n        if (this.context && this.context._buildDbType_modifyInstanceDefinition && this.buildDbType_modifyInstanceDefinition) {\r\n            this.context._buildDbType_modifyInstanceDefinition = this.buildDbType_modifyInstanceDefinition;\r\n        }\r\n    },\r\n    fixkDataServiceVersions: function (cfg) {\r\n        if (this.providerConfiguration.dataServiceVersion > this.providerConfiguration.maxDataServiceVersion) {\r\n            this.providerConfiguration.dataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n        }\r\n\r\n        if (this.providerConfiguration.setDataServiceVersionToMax === true) {\r\n            this.providerConfiguration.dataServiceVersion = this.providerConfiguration.maxDataServiceVersion;\r\n        }\r\n\r\n        if ((cfg && !cfg.UpdateMethod && this.providerConfiguration.dataServiceVersion < '3.0') || !this.providerConfiguration.dataServiceVersion) {\r\n            this.providerConfiguration.UpdateMethod = 'MERGE';\r\n        }\r\n    },\r\n    initializeStore: function (callBack) {\r\n        callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n        switch (this.providerConfiguration.dbCreation) {\r\n            case $data.storageProviders.DbCreationType.DropAllExistingTables:\r\n                var that = this;\r\n                if (this.providerConfiguration.serviceUrl) {\r\n\r\n                    var requestData = [{\r\n                        requestUri: that.providerConfiguration.serviceUrl + \"/Delete\",\r\n                        method: 'POST'\r\n                    }, function (d) {\r\n                        //console.log(\"RESET oData database\");\r\n                        callBack.success(that.context);\r\n                    }, function (error) {\r\n                        callBack.success(that.context);\r\n                    }];\r\n\r\n                    this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n                    //if (this.providerConfiguration.user) {\r\n                    //    requestData[0].user = this.providerConfiguration.user;\r\n                    //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n                    //}\r\n\r\n                    this.context.prepareRequest.call(this, requestData);\r\n                    this.oData.request.apply(this, requestData);\r\n                } else {\r\n                    callBack.success(that.context);\r\n                }\r\n                break;\r\n            default:\r\n                callBack.success(this.context);\r\n                break;\r\n        }\r\n    },\r\n    buildDbType_generateConvertToFunction: function (storageModel, context) {\r\n        return function (logicalEntity, convertedItems) {\r\n            var dbInstance = new storageModel.PhysicalType();\r\n            dbInstance.entityState = logicalEntity.entityState;\r\n\r\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\r\n                dbInstance.initData[property.name] = logicalEntity[property.name];\r\n            }, this);\r\n\r\n            if (storageModel.Associations) {\r\n                storageModel.Associations.forEach(function (association) {\r\n                    if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") ||\r\n                        (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") ||\r\n                        (association.FromMultiplicity == '$$unbound')) {\r\n                        var refValue = logicalEntity[association.FromPropertyName];\r\n                        if (/*refValue !== null &&*/ refValue !== undefined) {\r\n                            if (refValue instanceof $data.Array) {\r\n                                dbInstance.initData[association.FromPropertyName] = dbInstance[association.FromPropertyName] || [];\r\n                                refValue.forEach(function (rv) {\r\n                                    if (rv.entityState == $data.EntityState.Modified || convertedItems.indexOf(rv) < 0) {\r\n                                        var sMod = context._storageModel.getStorageModel(rv.getType())\r\n                                        var tblName = sMod.TableName;\r\n                                        var pk = '(' + context.storageProvider.getEntityKeysValue({ data: rv, entitySet: context.getEntitySetFromElementType(rv.getType()) }) + ')';\r\n                                        dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: tblName + pk } });\r\n                                    } else {\r\n                                        var contentId = convertedItems.indexOf(rv);\r\n                                        if (contentId < 0) { Guard.raise(\"Dependency graph error\"); }\r\n                                        dbInstance.initData[association.FromPropertyName].push({ __metadata: { uri: \"$\" + (contentId + 1) } });\r\n                                    }\r\n                                }, this);\r\n                            } else if (refValue === null) {\r\n                                dbInstance.initData[association.FromPropertyName] = null;\r\n                            } else {\r\n                                if (refValue.entityState == $data.EntityState.Modified || convertedItems.indexOf(refValue) < 0) {\r\n                                    var sMod = context._storageModel.getStorageModel(refValue.getType())\r\n                                    var tblName = sMod.TableName;\r\n                                    var pk = '(' + context.storageProvider.getEntityKeysValue({ data: refValue, entitySet: context.getEntitySetFromElementType(refValue.getType()) }) + ')';\r\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: tblName + pk } };\r\n                                } else {\r\n                                    var contentId = convertedItems.indexOf(refValue);\r\n                                    if (contentId < 0) { Guard.raise(\"Dependency graph error\"); }\r\n                                    dbInstance.initData[association.FromPropertyName] = { __metadata: { uri: \"$\" + (contentId + 1) } };\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }, this);\r\n            }\r\n            if (storageModel.ComplexTypes) {\r\n                storageModel.ComplexTypes.forEach(function (cmpType) {\r\n                    dbInstance.initData[cmpType.FromPropertyName] = logicalEntity[cmpType.FromPropertyName];\r\n                }, this);\r\n            }\r\n            return dbInstance;\r\n        };\r\n    },\r\n    buildDbType_modifyInstanceDefinition: function () { return; },\r\n    executeQuery: function (query, callBack) {\r\n        callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n\r\n        var sql = {};\r\n        try {\r\n            sql = this._compile(query);\r\n        } catch (e) {\r\n            callBack.error(e);\r\n            return;\r\n        }\r\n        var schema = this.context;\r\n\r\n        var that = this;\r\n        var countProperty = \"@odata.count\";\r\n\r\n        var requestData = [\r\n            {\r\n                requestUri: this.providerConfiguration.oDataServiceHost + sql.queryText,\r\n                method: sql.method,\r\n                data: sql.postData,\r\n                headers: {\r\n                }\r\n            },\r\n            function (data, textStatus, jqXHR) {\r\n\r\n                if (!data && textStatus.body && !sql.isBatchExecuteQuery) data = JSON.parse(textStatus.body);\r\n                if (callBack.success) {\r\n                    var processSuccess = function (query, data, sql) {\r\n                        query.rawDataList = typeof data === 'string' ? [{ cnt: Container.convertTo(data, $data.Integer) }] : data;\r\n                        if (sql.withInlineCount && typeof data === 'object' && (typeof data[countProperty] !== 'undefined' || ('d' in data && typeof data.d[countProperty] !== 'undefined'))) {\r\n                            query.__count = new Number(typeof data[countProperty] !== 'undefined' ? data[countProperty] : data.d[countProperty]).valueOf();\r\n                        }\r\n                    }\r\n\r\n                    if (sql.isBatchExecuteQuery) {\r\n                        query.rawDataList = sql.subQueries;\r\n                        for (var i = 0; i < data.__batchResponses.length; i++) {\r\n                            var resp = data.__batchResponses[i];\r\n\r\n                            if (!resp.data) {\r\n                                if (resp.body) {\r\n                                    resp.data = JSON.parse(resp.body);\r\n                                } else {\r\n                                    callBack.error(that.parseError(resp, arguments));\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            processSuccess(sql.subQueries[i], resp.data, sql.subQueries[i]._getComplitedData());\r\n                        }\r\n                    } else {\r\n                        processSuccess(query, data, sql);\r\n                    }\r\n\r\n                    callBack.success(query);\r\n                }\r\n            },\r\n            function (error) {\r\n                callBack.error(that.parseError(error, arguments));\r\n            },\r\n            sql.isBatchExecuteQuery ? this.oData.batchHandler : undefined\r\n        ];\r\n\r\n        if (typeof this.providerConfiguration.enableJSONP !== 'undefined') {\r\n            requestData[0].enableJsonpCallback = this.providerConfiguration.enableJSONP;\r\n        }\r\n        if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\r\n            requestData[0].useJsonLight = this.providerConfiguration.useJsonLight;\r\n        }\r\n\r\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n        //if (this.providerConfiguration.user) {\r\n        //    requestData[0].user = this.providerConfiguration.user;\r\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n        //}\r\n\r\n        this.context.prepareRequest.call(this, requestData);\r\n        //$data.ajax(requestData);\r\n        //OData.request(requestData, requestData.success, requestData.error);\r\n        this.oData.request.apply(this, requestData);\r\n    },\r\n    _compile: function (queryable, params) {\r\n        var compiler = new $data.storageProviders.oData.oDataCompiler();\r\n        var compiled = compiler.compile(queryable);\r\n        return compiled;\r\n    },\r\n    saveChanges: function (callBack, changedItems) {\r\n        if (changedItems.length > 0) {\r\n            var independentBlocks = this.buildIndependentBlocks(changedItems);\r\n            this.saveInternal(independentBlocks, 0, callBack);\r\n        }\r\n        else {\r\n            callBack.success(0);\r\n        }\r\n    },\r\n    saveInternal: function (independentBlocks, index2, callBack) {\r\n        if ((this.providerConfiguration.disableBatch === true || (typeof $data.defaults === 'object' && $data.defaults.disableBatch === true))\r\n            && typeof this._saveRestMany === 'function')\r\n        {\r\n            this._saveRestMany(independentBlocks, index2, callBack);\r\n        } else {\r\n            if (independentBlocks.length > 1 || (independentBlocks.length == 1 && independentBlocks[0].length > 1)) {\r\n                this._saveBatch(independentBlocks, index2, callBack);\r\n            } else {\r\n                this._saveRest(independentBlocks, index2, callBack);\r\n            }\r\n        }\r\n    },\r\n    _saveRest: function (independentBlocks, index2, callBack) {\r\n        var batchRequests = [];\r\n        var convertedItem = [];\r\n        var request;\r\n        for (var index = 0; index < independentBlocks.length; index++) {\r\n            for (var i = 0; i < independentBlocks[index].length; i++) {\r\n                convertedItem.push(independentBlocks[index][i].data);\r\n                request = {\r\n                    requestUri: this.providerConfiguration.oDataServiceHost + '/',\r\n                    headers: {\r\n                    }\r\n                };\r\n\r\n                if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\r\n                    request.useJsonLight = this.providerConfiguration.useJsonLight;\r\n                }\r\n\r\n                //request.headers = { \"Content-Id\": convertedItem.length };\r\n                switch (independentBlocks[index][i].data.entityState) {\r\n                    case $data.EntityState.Unchanged: continue; break;\r\n                    case $data.EntityState.Added:\r\n                        request.method = \"POST\";\r\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        request.method = this.providerConfiguration.UpdateMethod;\r\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        request.method = \"DELETE\";\r\n                        request.requestUri += independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        break;\r\n                    default: Guard.raise(new Exception(\"Not supported Entity state\"));\r\n                }\r\n                //batchRequests.push(request);\r\n            }\r\n        }\r\n        var that = this;\r\n\r\n        var requestData = [request, function (data, response) {\r\n            if (response.statusCode >= 200 && response.statusCode < 300) {\r\n                var item = convertedItem[0];\r\n                if (response.statusCode == 204) {\r\n                    if (response.headers.ETag || response.headers.Etag || response.headers.etag) {\r\n                        var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n                        if (property && property[0]) {\r\n                            item[property[0].name] = response.headers.ETag || response.headers.Etag || response.headers.etag;\r\n                        }\r\n                    }\r\n                } else {\r\n                    that.reload_fromResponse(item, data, response);\r\n                }\r\n\r\n                if (callBack.success) {\r\n                    callBack.success(convertedItem.length);\r\n                }\r\n            } else {\r\n                callBack.error(that.parseError(response));\r\n            }\r\n\r\n        }, function (e) {\r\n            callBack.error(that.parseError(e));\r\n        }];\r\n\r\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n        //if (this.providerConfiguration.user) {\r\n        //    requestData[0].user = this.providerConfiguration.user;\r\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n        //}\r\n\r\n        this.context.prepareRequest.call(this, requestData);\r\n        this.oData.request.apply(this, requestData);\r\n    },\r\n    _saveBatch: function (independentBlocks, index2, callBack) {\r\n        var batchRequests = [];\r\n        var convertedItem = [];\r\n        for (var index = 0; index < independentBlocks.length; index++) {\r\n            for (var i = 0; i < independentBlocks[index].length; i++) {\r\n                convertedItem.push(independentBlocks[index][i].data);\r\n                var request = {};\r\n                request.headers = {\r\n                    \"Content-Id\": convertedItem.length\r\n                };\r\n\r\n                switch (independentBlocks[index][i].data.entityState) {\r\n                    case $data.EntityState.Unchanged: continue; break;\r\n                    case $data.EntityState.Added:\r\n                        request.method = \"POST\";\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        request.method = this.providerConfiguration.UpdateMethod;\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        request.data = this.save_getInitData(independentBlocks[index][i], convertedItem);\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        request.method = \"DELETE\";\r\n                        request.requestUri = independentBlocks[index][i].entitySet.tableName;\r\n                        request.requestUri += \"(\" + this.getEntityKeysValue(independentBlocks[index][i]) + \")\";\r\n                        this.save_addConcurrencyHeader(independentBlocks[index][i], request.headers);\r\n                        break;\r\n                    default: Guard.raise(new Exception(\"Not supported Entity state\"));\r\n                }\r\n\r\n                batchRequests.push(request);\r\n            }\r\n        }\r\n        var that = this;\r\n\r\n        var requestData = [{\r\n            requestUri: this.providerConfiguration.oDataServiceHost + \"/$batch\",\r\n            method: \"POST\",\r\n            data: {\r\n                __batchRequests: [{ __changeRequests: batchRequests }]\r\n            },\r\n            headers: {\r\n            }\r\n        }, function (data, response) {\r\n            if (response.statusCode == 202) {\r\n                var result = data.__batchResponses[0].__changeResponses;\r\n                var errors = [];\r\n\r\n                for (var i = 0; i < result.length; i++) {\r\n                    if (result[i].statusCode >= 200 && result[i].statusCode < 300) {\r\n                        var item = convertedItem[i];\r\n                        if (result[i].statusCode == 204) {\r\n                            if (result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag) {\r\n                                var property = item.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n                                if (property && property[0]) {\r\n                                    item[property[0].name] = result[i].headers.ETag || result[i].headers.Etag || result[i].headers.etag;\r\n                                }\r\n                            }\r\n                            continue;\r\n                        }\r\n\r\n                        that.reload_fromResponse(item, result[i].data, result[i]);\r\n                    } else {\r\n                        errors.push(that.parseError(result[i]));\r\n                    }\r\n                }\r\n                if (errors.length > 0) {\r\n                    if (errors.length === 1) {\r\n                        callBack.error(errors[0]);\r\n                    } else {\r\n                        callBack.error(new Exception('See inner exceptions', 'Batch failed', errors));\r\n                    }\r\n                } else if (callBack.success) {\r\n                    callBack.success(convertedItem.length);\r\n                }\r\n            } else {\r\n                callBack.error(that.parseError(response));\r\n            }\r\n\r\n        }, function (e) {\r\n            callBack.error(that.parseError(e));\r\n        }, this.oData.batchHandler];\r\n\r\n        if (typeof this.providerConfiguration.useJsonLight !== 'undefined') {\r\n            requestData[0].useJsonLight = this.providerConfiguration.useJsonLight;\r\n        }\r\n\r\n        this.appendBasicAuth(requestData[0], this.providerConfiguration.user, this.providerConfiguration.password, this.providerConfiguration.withCredentials);\r\n        //if (this.providerConfiguration.user) {\r\n        //    requestData[0].user = this.providerConfiguration.user;\r\n        //    requestData[0].password = this.providerConfiguration.password || \"\";\r\n        //}\r\n\r\n        this.context.prepareRequest.call(this, requestData);\r\n        this.oData.request.apply(this, requestData);\r\n    },\r\n    reload_fromResponse: function (item, data, response) {\r\n        var that = this;\r\n        item.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            var propType = Container.resolveType(memDef.type);\r\n            if (memDef.computed || memDef.key || !memDef.inverseProperty) {\r\n                if (memDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                    //unescape?\r\n                    item[memDef.name] = response.headers.ETag || response.headers.Etag || response.headers.etag;\r\n\r\n                } else if (memDef.isAssignableTo) {\r\n                    if (data[memDef.name]) {\r\n                        item[memDef.name] = new propType(data[memDef.name], { converters: that.fieldConverter.fromDb });\r\n                    } else {\r\n                        item[memDef.name] = data[memDef.name]\r\n                    }\r\n\r\n                } else if (propType === $data.Array && memDef.elementType) {\r\n                    var aeType = Container.resolveType(memDef.elementType);\r\n                    if (data[memDef.name] && Array.isArray(data[memDef.name])) {\r\n                        var arrayProperty = [];\r\n                        for (var ap = 0; ap < data[memDef.name].length; ap++) {\r\n                            var aitem = data[memDef.name][ap];\r\n                            if (aeType.isAssignableTo && !Object.isNullOrUndefined(aitem)) {\r\n                                arrayProperty.push(new aeType(aitem, { converters: that.fieldConverter.fromDb }));\r\n                            } else {\r\n                                var etypeName = Container.resolveName(aeType);\r\n                                var econverter = that.fieldConverter.fromDb[etypeName];\r\n\r\n                                arrayProperty.push(econverter ? econverter(aitem) : aitem);\r\n                            }\r\n                        }\r\n                        item[memDef.name] = arrayProperty;\r\n                    } else if (!data[memDef.name]) {\r\n                        item[memDef.name] = data[memDef.name]\r\n                    }\r\n\r\n                } else {\r\n                    var typeName = Container.resolveName(memDef.type);\r\n                    var converter = that.fieldConverter.fromDb[typeName];\r\n\r\n                    item[memDef.name] = converter ? converter(data[memDef.name]) : data[memDef.name];\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    //save_getInitData: function (item, convertedItems) {\r\n    //    var self = this;\r\n    //    item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\r\n    //    var serializableObject = {}\r\n    //    item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\r\n    //        if (memdef.kind == $data.MemberTypes.navProperty || memdef.kind == $data.MemberTypes.complexProperty || (memdef.kind == $data.MemberTypes.property && !memdef.notMapped)) {\r\n    //            if (typeof memdef.concurrencyMode === 'undefined' && (memdef.key === true || item.data.entityState === $data.EntityState.Added || item.data.changedProperties.some(function (def) { return def.name === memdef.name; }))) {\r\n    //                var typeName = Container.resolveName(memdef.type);\r\n    //                var converter = self.fieldConverter.toDb[typeName];\r\n    //                serializableObject[memdef.name] = converter ? converter(item.physicalData[memdef.name]) : item.physicalData[memdef.name];\r\n    //            }\r\n    //        }\r\n    //    }, this);\r\n    //    return serializableObject;\r\n    //},\r\n    save_getInitData: function (item, convertedItems, isComplex, isDeep) {\r\n        var self = this;\r\n        if (!isComplex) {\r\n        item.physicalData = this.context._storageModel.getStorageModel(item.data.getType()).PhysicalType.convertTo(item.data, convertedItems);\r\n        } else {\r\n            item.physicalData = item.data;\r\n        }\r\n        var serializableObject = {}\r\n        item.physicalData.getType().memberDefinitions.asArray().forEach(function (memdef) {\r\n            if (memdef.kind == $data.MemberTypes.complexProperty && item.physicalData[memdef.name]) {\r\n                serializableObject[memdef.name] = self.save_getInitData({ data: item.physicalData[memdef.name] }, convertedItems, true, true);\r\n            }\r\n            else if (memdef.kind == $data.MemberTypes.navProperty || (memdef.kind == $data.MemberTypes.property && !memdef.notMapped)) {\r\n                if (isDeep || typeof memdef.concurrencyMode === 'undefined' && (memdef.key === true || item.data.entityState === $data.EntityState.Added || (item.data.changedProperties && item.data.changedProperties.some(function (def) { return def.name === memdef.name; })))) {\r\n\r\n                    if (memdef.kind == $data.MemberTypes.navProperty && item.physicalData[memdef.name] && this.providerConfiguration.maxDataServiceVersion === \"4.0\") {\r\n                        serializableObject[memdef.name + \"@odata.bind\"] = item.physicalData[memdef.name].__metadata.uri;\r\n                    } else {\r\n                    var typeName = Container.resolveName(memdef.type);\r\n                    var converter = self.fieldConverter.toDb[typeName];\r\n                    serializableObject[memdef.name] = converter ? converter(item.physicalData[memdef.name]) : item.physicalData[memdef.name];\r\n                }\r\n            }\r\n            }\r\n        }, this);\r\n        return serializableObject;\r\n    },\r\n    save_addConcurrencyHeader: function (item, headers) {\r\n        var property = item.data.getType().memberDefinitions.getPublicMappedProperties().filter(function (memDef) { return memDef.concurrencyMode === $data.ConcurrencyMode.Fixed });\r\n        if (property && property[0]) {\r\n            headers['If-Match'] = item.data[property[0].name];\r\n            //item.data[property[0].name] = \"\";\r\n        }\r\n    },\r\n    getTraceString: function (queryable) {\r\n        var sqlText = this._compile(queryable);\r\n        return queryable;\r\n    },\r\n    supportedDataTypes: {\r\n        value: [$data.Array, $data.Integer, $data.String, $data.Number, $data.Blob, $data.Boolean, $data.Date, $data.Object, $data.GeographyPoint, $data.Guid,\r\n            $data.GeographyLineString, $data.GeographyPolygon, $data.GeographyMultiPoint, $data.GeographyMultiLineString, $data.GeographyMultiPolygon, $data.GeographyCollection,\r\n            $data.GeometryPoint, $data.GeometryLineString, $data.GeometryPolygon, $data.GeometryMultiPoint, $data.GeometryMultiLineString, $data.GeometryMultiPolygon, $data.GeometryCollection,\r\n            $data.Byte, $data.SByte, $data.Decimal, $data.Float, $data.Int16, $data.Int32, $data.Int64, $data.Time, $data.Day, $data.DateTimeOffset, $data.Duration],\r\n        writable: false\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            notEqual: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            equalTyped: { mapTo: 'eq', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            notEqualTyped: { mapTo: 'ne', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            greaterThan: { mapTo: 'gt', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            greaterThanOrEqual: { mapTo: 'ge', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            lessThan: { mapTo: 'lt', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            lessThenOrEqual: { mapTo: 'le', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            or: { mapTo: 'or', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            and: { mapTo: 'and', dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            add: { mapTo: 'add', dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            divide: { mapTo: 'div', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            multiply: { mapTo: 'mul', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            subtract: { mapTo: 'sub', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n            modulo: { mapTo: 'mod', allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] },\r\n\r\n            \"in\": { mapTo: \"in\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression] }\r\n        }\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' }\r\n        }\r\n    },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            /* string functions */\r\n\r\n            contains: {\r\n                mapTo: \"substringof\",\r\n                dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"substring\", dataType: \"string\" }, { name: \"@expression\" }]\r\n            },\r\n\r\n            startsWith: {\r\n                mapTo: \"startswith\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n            endsWith: {\r\n                mapTo: \"endswith\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n            length: [{\r\n                allowedType: 'string',\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n            {\r\n                allowedType: 'GeographyLineString',\r\n                mapTo: \"geo.length\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: ['GeographyLineString'] }],\r\n                fixedDataType: 'decimal'\r\n            },\r\n            {\r\n                allowedType: 'GeometryLineString',\r\n                mapTo: \"geo.length\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeometryLineString' }],\r\n                fixedDataType: 'decimal'\r\n            }],\r\n\r\n            strLength: {\r\n                mapTo: \"length\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.ProjectionExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n            indexOf: {\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                mapTo: \"indexof\",\r\n                baseIndex: 1,\r\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFragment', dataType: 'string' }]\r\n            },\r\n\r\n            replace: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: '@expression', dataType: \"string\" }, { name: 'strFrom', dataType: 'string' }, { name: 'strTo', dataType: 'string' }]\r\n            },\r\n\r\n            substr: {\r\n                mapTo: \"substring\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\", optional: \"true\" }]\r\n            },\r\n\r\n            toLowerCase: {\r\n                mapTo: \"tolower\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n            toUpperCase: {\r\n                mapTo: \"toupper\",\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n\r\n            },\r\n\r\n            trim: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }]\r\n            },\r\n\r\n\r\n            concat: {\r\n                dataType: \"string\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"string\" }, { name: \"strFragment\", dataType: \"string\" }]\r\n            },\r\n\r\n\r\n            /* data functions */\r\n\r\n            day: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            hour: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            minute: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            month: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            second: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            year: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n\r\n            /* number functions */\r\n            round: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            floor: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n            ceiling: {\r\n                allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: \"date\" }]\r\n            },\r\n\r\n\r\n            /* geo functions */\r\n            distance: [{\r\n                allowedType: 'GeographyPoint',\r\n                mapTo: \"geo.distance\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeographyPoint' }, { name: \"to\", dataType: 'GeographyPoint' }],\r\n                fixedDataType: 'decimal'\r\n            }, {\r\n                allowedType: 'GeometryPoint',\r\n                mapTo: \"geo.distance\",\r\n                dataType: \"number\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeometryPoint' }, { name: \"to\", dataType: 'GeometryPoint' }],\r\n                fixedDataType: 'decimal'\r\n            }],\r\n\r\n            intersects: [{\r\n                allowedType: 'GeographyPoint',\r\n                mapTo: \"geo.intersects\",\r\n                dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeographyPoint' }, { name: \"in\", dataType: 'GeographyPolygon' }]\r\n\r\n            }, {\r\n                allowedType: 'GeometryPoint',\r\n                mapTo: \"geo.intersects\",\r\n                dataType: \"boolean\", allowedIn: [$data.Expressions.FilterExpression, $data.Expressions.OrderExpression],\r\n                parameters: [{ name: \"@expression\", dataType: 'GeometryPoint' }, { name: \"in\", dataType: 'GeometryPolygon' }]\r\n\r\n            }]\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    supportedSetOperations: {\r\n        value: {\r\n            filter: {},\r\n            map: {},\r\n            length: {},\r\n            forEach: {},\r\n            toArray: {},\r\n            single: {},\r\n            some: {\r\n                invokable: false,\r\n                allowedIn: [$data.Expressions.FilterExpression],\r\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\r\n                mapTo: 'any',\r\n                frameType: $data.Expressions.SomeExpression\r\n            },\r\n            every: {\r\n                invokable: false,\r\n                allowedIn: [$data.Expressions.FilterExpression],\r\n                parameters: [{ name: \"filter\", dataType: \"$data.Queryable\" }],\r\n                mapTo: 'all',\r\n                frameType: $data.Expressions.EveryExpression\r\n            },\r\n            take: {},\r\n            skip: {},\r\n            orderBy: {},\r\n            orderByDescending: {},\r\n            first: {},\r\n            include: {},\r\n            batchDelete: {},\r\n            withInlineCount: {},\r\n            find: {}\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    supportedContextOperation: {\r\n        value: {\r\n            batchExecuteQuery: true\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    fieldConverter: { value: $data.oDataConverter },\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        var memDef = expression.entityType.getMemberDefinition(operation);\r\n        if (!memDef ||\r\n            !memDef.method ||\r\n            memDef.method.IsSideEffecting !== false ||\r\n            !memDef.method.returnType ||\r\n            !(frameType === $data.Expressions.FilterExpression || frameType === $data.Expressions.OrderExpression))\r\n        {\r\n            Guard.raise(new Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n        }\r\n\r\n        return memDef;\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        if (expression) {\r\n            var esDef = expression.storageModel.ContextType.getMemberDefinition(expression.storageModel.ItemName);\r\n            if (esDef && esDef.actions && esDef.actions[operation]) {\r\n                var memDef = $data.MemberDefinition.translateDefinition(esDef.actions[operation], operation, this.getType());\r\n                if (!memDef ||\r\n                    !memDef.method ||\r\n                    memDef.method.IsSideEffecting !== false ||\r\n                    !memDef.method.returnType ||\r\n                    !(frameType === $data.Expressions.FilterExpression || frameType === $data.Expressions.OrderExpression)) {\r\n\r\n                    Guard.raise(new Exception(\"Collection '\" + expression.storageModel.ItemName + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n                }\r\n\r\n                return memDef;\r\n            }\r\n        }\r\n        return $data.StorageProviderBase.prototype.resolveSetOperations.apply(this, arguments);\r\n\r\n    },\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        var memDef = this.context.getType().getMemberDefinition(operation);\r\n        if (!memDef ||\r\n            !memDef.method ||\r\n            memDef.method.IsSideEffecting !== false ||\r\n            !memDef.method.returnType ||\r\n            !(frameType === $data.Expressions.FilterExpression || frameType === $data.Expressions.OrderExpression)) {\r\n            Guard.raise(new Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n        }\r\n        return memDef;\r\n    },\r\n\r\n    getEntityKeysValue: function (entity) {\r\n        var result = [];\r\n        var keyValue = undefined;\r\n        var memDefs = entity.data.getType().memberDefinitions.getKeyProperties();\r\n        for (var i = 0, l = memDefs.length; i < l; i++) {\r\n            var field = memDefs[i];\r\n            if (field.key) {\r\n                keyValue = entity.data[field.name];\r\n                var typeName = Container.resolveName(field.type);\r\n\r\n                var converter = this.fieldConverter.toDb[typeName];\r\n                keyValue = converter ? converter(keyValue) : keyValue;\r\n\r\n                converter = this.fieldConverter.escape[typeName];\r\n                keyValue = converter ? converter(keyValue) : keyValue;\r\n\r\n                result.push(field.name + \"=\" + keyValue);\r\n            }\r\n        }\r\n        if (result.length > 1) {\r\n            return result.join(\",\");\r\n        }\r\n        return keyValue;\r\n    },\r\n    getFieldUrl: function (entity, fieldName, entitySet) {\r\n        var keyPart = this.getEntityKeysValue({ data: entity });\r\n        var servicehost = this.providerConfiguration.oDataServiceHost\r\n        if (servicehost.lastIndexOf('/') === servicehost.length)\r\n            servicehost = servicehost.substring(0, servicehost.length - 1);\r\n\r\n        return servicehost + '/' + entitySet.tableName + '(' + keyPart + ')/' + fieldName + '/$value';\r\n    },/*\r\n    getServiceMetadata: function () {\r\n        $data.ajax(this._setAjaxAuthHeader({\r\n            url: this.providerConfiguration.oDataServiceHost + \"/$metadata\",\r\n            dataType: \"xml\",\r\n            success: function (d) {\r\n                console.log(\"OK\");\r\n                console.dir(d);\r\n                console.log(typeof d);\r\n                window[\"s\"] = d;\r\n                window[\"k\"] = this.nsResolver;\r\n                //s.evaluate(\"edmx:Edmx/edmx:DataServices/Schema\", s, $data.storageProviders.oData.oDataProvider.prototype.nsResolver, XPathResult.ANY_TYPE, null).iterateNext()\r\n\r\n            },\r\n            error: function (error) {\r\n                console.log(\"error:\");\r\n                console.dir(error);\r\n            }\r\n        }));\r\n    },\r\n    nsResolver: function (sPrefix) {\r\n        switch (sPrefix) {\r\n            case \"edmx\":\r\n                return \"http://schemas.microsoft.com/ado/2007/06/edmx\";\r\n                break;\r\n            case \"m\":\r\n                return \"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\";\r\n                break;\r\n            case \"d\":\r\n                return \"http://schemas.microsoft.com/ado/2007/08/dataservices\";\r\n                break;\r\n            default:\r\n                return \"http://schemas.microsoft.com/ado/2008/09/edm\";\r\n                break;\r\n        }\r\n    }\r\n    */\r\n    parseError: function(error, data){\r\n\r\n        var message = (error.response || error || {}).body || '';\r\n        try {\r\n            if(message.indexOf('{') === 0){\r\n                var errorObj = JSON.parse(message);\r\n                errorObj = errorObj['odata.error'] || errorObj.error || errorObj;\r\n                if (errorObj.message) {\r\n                    message = errorObj.message.value || errorObj.message;\r\n                }\r\n            }\r\n        } catch (e) {}\r\n\r\n        return new Exception(message, error.message, data || error);\r\n    },\r\n    appendBasicAuth: function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials){\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    },\r\n    __encodeBase64: function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n                           \"QRSTUVWXYZabcdef\" +\r\n                           \"ghijklmnopqrstuv\" +\r\n                           \"wxyz0123456789+/\" +\r\n                           \"=\";\r\n\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            base64 = base64 +\r\n                        b64array.charAt(enc1) +\r\n                        b64array.charAt(enc2) +\r\n                        b64array.charAt(enc3) +\r\n                        b64array.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return base64;\r\n    }\r\n}, null);\r\n\r\n$data.StorageProviderBase.registerProvider(\"oData\", $data.storageProviders.oData.oDataProvider);\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from 'jaydata/core';\r\n\r\n$C('$data.storageProviders.oData.oDataWhereCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (provider, lambdaPrefix) {\r\n        this.provider = provider;\r\n        this.lambdaPrefix = lambdaPrefix;\r\n    },\r\n\r\n    compile: function (expression, context) {\r\n        this.Visit(expression, context);\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        this.Visit(expression.expression, context);\r\n    },\r\n\r\n    VisitUnaryExpression: function (expression, context) {\r\n        context.data += expression.resolution.mapTo;\r\n        context.data += \"(\";\r\n        this.Visit(expression.operand, context);\r\n        context.data += \")\";\r\n    },\r\n\r\n\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        context.data += \"(\";\r\n        //TODO refactor!!!\r\n        if (expression.nodeType == \"in\") {\r\n            Guard.requireType(\"expression.right\", expression.type, $data.Expressions.ConstantExpression);\r\n            var paramValue = expression.right.value;\r\n            if (!(paramValue instanceof Array)) { Guard.raise(new Exception(\"Right to the 'in' operator must be an array value\")); }\r\n            var result = null;\r\n            var orResolution = { mapTo: \"or\", dataType: \"boolean\", name: \"or\" };\r\n            var eqResolution = { mapTo: \"eq\", dataType: \"boolean\", name: \"equal\" };\r\n\r\n            paramValue.forEach(function (item) {\r\n                var idValue = item;\r\n                var idCheck = Container.createSimpleBinaryExpression(expression.left, idValue,\r\n                    $data.Expressions.ExpressionType.Equal, \"==\", \"boolean\", eqResolution);\r\n                if (result) {\r\n                    result = Container.createSimpleBinaryExpression(result, idCheck,\r\n                    $data.Expressions.ExpressionType.Or, \"||\", \"boolean\", orResolution);\r\n                } else {\r\n                    result = idCheck;\r\n                };\r\n            });\r\n            var temp = context.data;\r\n            context.data = '';\r\n            this.Visit(result, context);\r\n            context.data = temp + context.data.replace(/\\(/g, '').replace(/\\)/g, '');\r\n        } else {\r\n            this.Visit(expression.left, context);\r\n            context.data += \" \";\r\n            context.data += expression.resolution.mapTo;\r\n            context.data += \" \";\r\n            this.Visit(expression.right, context);\r\n        };\r\n        context.data += \")\";\r\n\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (expression.source instanceof $data.Expressions.ComplexTypeExpression) {\r\n            context.data += \"/\";\r\n        }\r\n        this.Visit(expression.selector, context);\r\n    },\r\n\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        context.data += expression.associationInfo.FromPropertyName;\r\n    },\r\n\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        context.data += expression.memberName;\r\n    },\r\n\r\n    VisitQueryParameterExpression: function (expression, context) {\r\n        var typeName = Container.resolveName(expression.type);\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n\r\n        converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(value) : value;\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        args.forEach(function (arg, index) {\r\n            if (index > 0) {\r\n                context.data += \",\";\r\n            };\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n    VisitEntityFunctionOperationExpression: function (expression, context) {\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n        this.Visit(expression.source, context);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.method.params || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n        var i = 0;\r\n        args.forEach(function (arg, index) {\r\n            if (arg === undefined || (arg instanceof $data.Expressions.ConstantExpression && typeof arg.value === 'undefined'))\r\n                return;\r\n\r\n            if (i > 0) {\r\n                context.data += \",\";\r\n            };\r\n            i++;\r\n            context.data += params[index].name + '=';\r\n            this.Visit(arg, context);\r\n        }, this);\r\n        context.data += \")\";\r\n    },\r\n    VisitContextFunctionOperationExpression: function (expression, context) {\r\n        return this.VisitEntityFunctionOperationExpression(expression, context);\r\n    },\r\n\r\n    VisitConstantExpression: function (expression, context) {\r\n        var typeName = Container.resolveName(expression.type);\r\n\r\n        var converter = this.provider.fieldConverter.toDb[typeName];\r\n        var value = converter ? converter(expression.value) : expression.value;\r\n\r\n        converter = this.provider.fieldConverter.escape[typeName];\r\n        context.data += converter ? converter(value) : value;\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        if (this.lambdaPrefix && expression.selector.lambda) {\r\n            context.lambda = expression.selector.lambda;\r\n            context.data += (expression.selector.lambda + '/');\r\n        }\r\n\r\n        //if (expression.selector instanceof $data.Expressions.EntityExpression) {\r\n        //    this.Visit(expression.selector, context);\r\n        //}\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n        if (expression.selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n            this.Visit(expression.selector, context);\r\n            context.data += \"/\";\r\n        }\r\n    },\r\n\r\n    VisitFrameOperationExpression: function (expression, context) {\r\n        this.Visit(expression.source, context);\r\n\r\n        Guard.requireType(\"expression.operation\", expression.operation, $data.Expressions.MemberInfoExpression);\r\n\r\n        //TODO refactor!\r\n        var opDef = expression.operation.memberDefinition;\r\n        var opName = opDef.mapTo || opDef.name;\r\n        context.data += opName;\r\n        context.data += \"(\";\r\n        var paramCounter = 0;\r\n        var params = opDef.parameters || [{ name: \"@expression\" }];\r\n\r\n        var args = params.map(function (item, index) {\r\n            if (item.name === \"@expression\") {\r\n                return expression.source;\r\n            } else {\r\n                return expression.parameters[paramCounter++]\r\n            };\r\n        });\r\n\r\n        for (var i = 0; i < args.length; i++) {\r\n            var arg = args[i];\r\n            if (arg && arg.value instanceof $data.Queryable) {\r\n                var frameExpression = new opDef.frameType(arg.value.expression);\r\n                var preparator = Container.createQueryExpressionCreator(arg.value.entityContext);\r\n                var prep_expression = preparator.Visit(frameExpression);\r\n\r\n                var compiler = new $data.storageProviders.oData.oDataWhereCompiler(this.provider, true);\r\n                var frameContext = { data: \"\" };\r\n                var compiled = compiler.compile(prep_expression, frameContext);\r\n\r\n                context.data += (frameContext.lambda + ': ' + frameContext.data);\r\n            };\r\n        }\r\n        context.data += \")\";\r\n    }\r\n});\r\n"],"sourceRoot":"/source/"}