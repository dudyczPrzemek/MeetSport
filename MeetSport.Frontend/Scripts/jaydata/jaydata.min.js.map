{"version":3,"sources":["jaydata.js","node_modules/acorn/dist/acorn.js","node_modules/odata-metadata/lib/edm.js","node_modules/odata-metadata/lib/metacode.js","node_modules/process/browser.js","node_modules/reflect-metadata/Reflect.js","package.json","src/JayDataModules/deferred.js","src/JaySvcUtil/Metadata.js","src/JaySvcUtil/src/JaySvcUtil/MetadataDownloader.js","src/JaySvcUtil/Service.js","src/JaySvcUtil/index.js","src/TypeSystem/Container.js","src/TypeSystem/Exception.js","src/TypeSystem/Extensions.js","src/TypeSystem/Trace/Logger.js","src/TypeSystem/Trace/Trace.js","src/TypeSystem/src/TypeSystem/TypeSystem.js","src/TypeSystem/Types/src/TypeSystem/Types/Blob.js","src/TypeSystem/Types/Converter.js","src/TypeSystem/Types/EdmTypes.js","src/TypeSystem/Types/Geography.js","src/TypeSystem/Types/Geometry.js","src/TypeSystem/Types/Geospatial.js","src/TypeSystem/Types/Guid.js","src/TypeSystem/Types/SimpleBase.js","src/TypeSystem/Types/Types.js","src/TypeSystem/index.js","src/TypeSystem/initializeJayData.js","src/TypeSystem/initializeJayDataClient.js","src/TypeSystem/utils.js","src/Types/Access.js","src/Types/Ajax/AjaxStub.js","src/Types/Ajax/ExtJSAjaxWrapper.js","src/Types/Ajax/WinJSAjaxWrapper.js","src/Types/Ajax/jQueryAjaxWrapper.js","src/Types/Authentication/Anonymous.js","src/Types/Authentication/AuthenticationBase.js","src/Types/Authentication/BasicAuth.js","src/Types/Authentication/FacebookAuth.js","src/Types/Entity.js","src/Types/EntityAttachModes.js","src/Types/EntityContext.js","src/Types/EntitySet.js","src/Types/EntityState.js","src/Types/EntityStateManager.js","src/Types/EntityWrapper.js","src/Types/Enum.js","src/Types/Expressions/ArrayLiteralExpression.js","src/Types/Expressions/CallExpression.js","src/Types/Expressions/CodeParser.js","src/Types/Expressions/ConstantExpression.js","src/Types/Expressions/ContinuationExpressionBuilder.js","src/Types/Expressions/EntityExpressions/AssociationInfoExpression.js","src/Types/Expressions/EntityExpressions/CodeExpression.js","src/Types/Expressions/EntityExpressions/CodeToEntityConverter.js","src/Types/Expressions/EntityExpressions/ComplexTypeExpression.js","src/Types/Expressions/EntityExpressions/EntityContextExpression.js","src/Types/Expressions/EntityExpressions/EntityExpression.js","src/Types/Expressions/EntityExpressions/EntityExpressionVisitor.js","src/Types/Expressions/EntityExpressions/EntityFieldExpression.js","src/Types/Expressions/EntityExpressions/EntityFieldOperationExpression.js","src/Types/Expressions/EntityExpressions/EntitySetExpression.js","src/Types/Expressions/EntityExpressions/ExpressionMonitor.js","src/Types/Expressions/EntityExpressions/FilterExpression.js","src/Types/Expressions/EntityExpressions/FrameOperationExpression.js","src/Types/Expressions/EntityExpressions/IncludeExpression.js","src/Types/Expressions/EntityExpressions/MemberInfoExpression.js","src/Types/Expressions/EntityExpressions/OrderExpression.js","src/Types/Expressions/EntityExpressions/ParametricQueryExpression.js","src/Types/Expressions/EntityExpressions/ProjectionExpression.js","src/Types/Expressions/EntityExpressions/QueryExpressionCreator.js","src/Types/Expressions/EntityExpressions/QueryParameterExpression.js","src/Types/Expressions/EntityExpressions/RepresentationExpression.js","src/Types/Expressions/EntityExpressions/ServiceOperationExpression.js","src/Types/Expressions/ExpressionBuilder.js","src/Types/Expressions/ExpressionNode2.js","src/Types/Expressions/FunctionExpression.js","src/Types/Expressions/ObjectFieldExpression.js","src/Types/Expressions/ObjectLiteralExpression.js","src/Types/Expressions/PagingExpression.js","src/Types/Expressions/ParameterExpression.js","src/Types/Expressions/PropertyExpression.js","src/Types/Expressions/SimpleBinaryExpression.js","src/Types/Expressions/ThisExpression.js","src/Types/Expressions/Visitors/ExecutorVisitor.js","src/Types/Expressions/Visitors/ExpTreeVisitor.js","src/Types/Expressions/Visitors/ExpressionVisitor.js","src/Types/Expressions/Visitors/GlobalContextProcessor.js","src/Types/Expressions/Visitors/LambdaParameterProcessor.js","src/Types/Expressions/Visitors/LocalContextProcessor.js","src/Types/Expressions/Visitors/LogicalSchemaBinderVisitor.js","src/Types/Expressions/Visitors/ParameterProcessor.js","src/Types/Expressions/Visitors/ParameterResolverVisitor.js","src/Types/Expressions/Visitors/SetExecutableVisitor.js","src/Types/Expressions/index.js","src/Types/ItemStore.js","src/Types/ModelBinder.js","src/Types/Notifications/ChangeCollector.js","src/Types/Notifications/ChangeCollectorBase.js","src/Types/Notifications/ChangeDistributor.js","src/Types/Notifications/ChangeDistributorBase.js","src/Types/Promise.js","src/Types/Query.js","src/Types/QueryBuilder.js","src/Types/QueryProvider.js","src/Types/Queryable.js","src/Types/RelatedEntityProxy.js","src/Types/ServiceOperation.js","src/Types/StorageProviderBase.js","src/Types/src/Types/StorageProviderLoader.js","src/Types/StorageProviders/modelBinderConfigCompiler.js","src/Types/Transaction.js","src/Types/Validation/EntityValidation.js","src/Types/Validation/EntityValidationBase.js","src/Types/index.js","src/index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"module","global","define","amd","g","window","self","this","acorn","_dereq_","_tokentype","_state","pp","Parser","prototype","checkPropClash","prop","propHash","options","ecmaVersion","computed","method","shorthand","key","name","undefined","type","String","value","kind","proto","raise","start","other","isGetSet","strict","init","get","set","parseExpression","noIn","refDestructuringErrors","startPos","startLoc","expr","parseMaybeAssign","types","comma","node","startNodeAt","expressions","eat","push","finishNode","afterLeftParse","_yield","inGenerator","parseYield","validateDestructuring","shorthandAssign","trailingComma","parenL","potentialArrowAt","left","parseMaybeConditional","isAssign","checkPatternErrors","operator","eq","toAssignable","checkLVal","next","right","checkExpressionErrors","parseExprOps","question","test","consequent","expect","colon","alternate","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","prec","binop","_in","op","logicalOR","logicalAND","prefix","startNode","update","incDec","argument","parseExprSubscripts","postfix","canInsertSemicolon","parseExprAtom","skipArrowSubscripts","input","slice","lastTokStart","lastTokEnd","parseSubscripts","base","noCalls","dot","object","property","parseIdent","bracketL","bracketR","callee","arguments","parseExprList","parenR","backQuote","tag","quasi","parseTemplate","canBeArrow","_super","inFunction","_this","unexpected","id","arrow","parseArrowExpression","regexp","parseLiteral","regex","pattern","flags","num","string","_null","_true","_false","raw","keyword","parseParenAndDistinguishExpression","_for","parseComprehension","elements","braceL","parseObj","_function","parseFunction","_class","parseClass","_new","parseNew","end","parseParenExpression","val","innerStartPos","innerStartLoc","exprList","first","spreadStart","innerParenStart","ellipsis","parseParenItem","parseRest","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","preserveParens","par","expression","item","empty","meta","parseTemplateElement","elem","replace","cooked","tail","curElt","quasis","dollarBraceL","braceR","isPattern","properties","afterTrailingComma","isGenerator","star","parsePropertyName","parsePropertyValue","parseMaybeDefault","parseMethod","paramCount","params","keywords","reservedWordsStrictBind","reservedWords","initFunction","generator","parseBindingList","parseFunctionBody","toAssignableList","isArrowFunction","isExpression","body","oldInFunc","oldInGen","oldLabels","labels","parseBlock","isUseStrict","oldStrict","checkParams","nameHash","close","allowTrailingComma","allowEmpty","elts","elt","parseSpread","liberal","allowReserved","reservedWordsStrict","indexOf","semi","startsExpr","delegate","blocks","block","parseBindingAtom","expectContextual","filter","_if","./state","./tokentype",2,"isInAstralSet","pos","isIdentifierStart","astral","nonASCIIidentifierStart","fromCharCode","astralIdentifierStartCodes","isIdentifierChar","nonASCIIidentifier","astralIdentifierCodes","__esModule",3,5,6,"strictBind","ecma5AndLessKeywords","nonASCIIidentifierStartChars","nonASCIIidentifierChars","RegExp","parse","parseExpressionAt","p","nextToken","tokenizer","plugins","_options","defaultOptions","_locutil","Position","SourceLocation","getLineInfo","_node","Node","TokenType","tokTypes","_tokencontext","TokContext","tokContexts","_identifier","_tokenize","Token","_whitespace","isNewLine","lineBreak","lineBreakG","version","./expression","./identifier","./location","./locutil","./lval","./node","./options","./parseutil","./statement","./tokencontext","./tokenize","./whitespace",4,"message","loc","line","column","err","SyntaxError","raisedAt","curPosition","locations","curLine","lineStart","_classCallCheck","instance","Constructor","TypeError","offset","cur","lastIndex","match","exec","index","col","sourceFile","source","_util","isBinding","last","arg","allowNonIdent","rest","parseBindingListItem","param","checkClashes","has","./util",7,"ranges","range","parser","directSourceFile","lastTokEndLoc",8,"getOptions","opts","opt","isArray","onToken","tokens","token","onComment","pushComment","array","text","endLoc","comment","sourceType","onInsertedSemicolon","onTrailingComma","allowReturnOutsideFunction","allowImportExportEverywhere","allowHashBang","program",9,"stmt","isContextual","eatContextual","eof","insertSemicolon","semicolon","tokType","lastTokStartLoc","andThrow",10,"keywordRegexp","words","reserved","reservedStrict","containsEsc","loadPlugins","Math","max","lastIndexOf","split","context","initialContext","exprAllowed","inModule","skipLineComment","isKeyword","word","isReservedWord","extend","pluginConfigs","_name","plugin","parseTopLevel",11,"parseStatement","setStrict","loopLabel","switchLabel","declaration","topLevel","starttype","_break","_continue","parseBreakContinueStatement","_debugger","parseDebuggerStatement","_do","parseDoStatement","parseForStatement","parseFunctionStatement","parseIfStatement","_return","parseReturnStatement","_switch","parseSwitchStatement","_throw","parseThrowStatement","_try","parseTryStatement","_let","_const","_var","parseVarStatement","_while","parseWhileStatement","_with","parseWithStatement","parseEmptyStatement","_export","_import","parseImport","parseExport","maybeName","parseLabeledStatement","parseExpressionStatement","isBreak","label","lab","pop","parseFor","_init","varKind","parseVar","declarations","parseForIn","_else","discriminant","cases","sawDefault","_case","_default","isCase","handler","_catch","clause","finalizer","_finally","isLoop","statementStart","allowStrict","isFor","decl","parseVarId","isStatement","allowExpressionBody","parseFunctionParams","parseClassId","parseClassSuper","classBody","hadConstructor","isMaybeStatic","parseClassMethod","superClass","_extends","needsSemi","shouldParseExportStatement","specifiers","parseExportSpecifiers","local","nodes","exported","parseImportSpecifiers","imported",12,"isExpr","preserveSpace","override","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","readTmplToken","f_expr","braceIsBlock","prevType","_parent","curContext","updateContext","beforeExpr","out","statementParens",13,"tryCreateRegexp","src","throwErrorAt","codePointToString","isRhino","Packages","Object","toString","getToken","Symbol","iterator","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","charCodeAt","skipBlockComment","startSkip","ch","loop","nonASCIIwhitespace","readToken_dot","readNumber","next2","readToken_slash","readRegexp","finishOp","assign","slash","readToken_mult_modulo","modulo","readToken_pipe_amp","bitwiseOR","bitwiseAND","readToken_caret","bitwiseXOR","readToken_plus_min","plusMin","readToken_lt_gt","size","bitShift","relational","readToken_eq_excl","equality","readRadixNumber","readString","str","regexpUnicodeSupport","escaped","inClass","charAt","content","mods","readWord1","tmp","validFlags","_match","Number","readInt","radix","len","total","Infinity","startsWithDot","isFloat","octal","parseFloat","parseInt","readCodePoint","codePos","readHexChar","quote","chunkStart","readEscapedChar","template","inTemplate","octalStr","substr","escStart","esc",14,"kw","conf",15,"obj","propName","hasOwnProperty",16,"Edm","__extends","d","b","__","constructor","create","__decorate","decorators","target","desc","c","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","k","v","metadata","metacode","PrimitiveType","className","Binary","Boolean","Byte","Date","DateTimeOffset","Decimal","Double","Duration","Guid","Int16","Int32","Int64","SByte","Single","Stream","TimeOfDay","Geography","GeographyPoint","GeographyLineString","GeographyPolygon","GeographyMultiPoint","GeographyMultiLineString","GeographyMultiPolygon","GeographyCollection","Geometry","GeometryPoint","GeometryLineString","GeometryPolygon","GeometryMultiPoint","GeometryMultiLineString","GeometryMultiPolygon","GeometryCollection","MemberAttribute","required","defaultValue","parseAs","AttributeFunctionChain","mapArray","sourceField","factory","props","Array","map","EdmItemBase","definition","parent","loadFrom","getPrototypeOf","getMembers","forEach","membername","getAttributeValue","invoke","Property","apply","NavigationProperty","ReferentialConstraint","PropertyRef","Key","EntityType","ComplexType","Parameter","ReturnType","Invokable","Action","returnType","rt","Function","Member","EnumType","EntitySet","ActionImport","FunctionImport","EntityContainer","Schema","DataServices","Edmx","edm","dataServices","./metacode","isFunction","isUndefined","attributeName","registerMember","md","getMetadata","defineMetadata","getDecoratorValue","presentedValue","descriptor","decoratorValue","enumerable","configurable","isApplied","memberName","getMetadataKeys","getAttributeNames","steps","_i","result","fn","ParseAttribute","defaultValueAttribute","bind","parseAttribute","decorator","typeArgument","reflect-metadata","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","noop","process","nextTick","args","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","targetKey","targetDescriptor","IsUndefined","IsArray","IsConstructor","DecorateConstructor","IsObject","ToPropertyKey","DecoratePropertyWithoutDescriptor","DecoratePropertyWithDescriptor","metadataKey","metadataValue","OrdinaryDefineOwnMetadata","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","metadataMap","GetOrCreateMetadataMap","targetMetadata","__Metadata__","decorated","propertyKey","_Map","keyMetadata","MetadataKey","O","P","hasOwn","GetPrototypeOf","MetadataValue","ownKeys","parentKeys","_Set","keys","hasKey","add","_a","_","x","IsSymbol","functionPrototype","prototypeProto","CreateMapPolyfill","Map","_keys","_values","_cache","cacheSentinel","_find","delete","splice","clear","callback","thisArg","CreateSetPolyfill","Set","_map","CreateWeakMapPolyfill","WeakMap","_key","CreateUniqueKey","FillRandomBytes","buffer","random","GenRandomBytes","nodeCrypto","data","randomBytes","Uint8Array","crypto","getRandomValues","msCrypto","CreateUUID","UUID_SIZE","byte","toLowerCase","GetOrCreateWeakMapTable","rootKey","isNode","table","_WeakMap","__global","WorkerGlobalScope","description","homepage","author","url","dependencies","atob","btoa","odata-metadata","jaydata-odatajs","xmldom","contributors","repository","engines","license","devDependencies","babel","babel-eslint","babel-plugin-add-module-exports","babel-preset-es2015","babel-register","babelify","browserify","browserify-derequire","browserify-shim","chai","del","google-closure-compiler","gulp","gulp-babel","gulp-browserify","gulp-closure-compiler","gulp-concat","gulp-derequire","gulp-eslint","gulp-footer","gulp-header","gulp-nightwatch","gulp-nuget-pack","gulp-rename","gulp-replace","gulp-sourcemaps","gulp-uglify","gulp-vinyl-zip","gulp-webserver","istanbul","jaguarjs-jsdoc","jsdoc","minimist","nightwatch","npm","selenium-standalone","vinyl-buffer","vinyl-source-stream","yargs","transform","jQuery","angular","Handlebars","kendo","ko","q","Ext","scripts","_interopRequireDefault","default","_index","_index2","$data","Class","PromiseHandlerBase","deferred","Deferred","createCallback","callBack","typeSystem","createCallbackSetting","success","resolve","error","notify","getPromise","promise","PromiseHandler","../TypeSystem/index.js","_toConsumableArray","arr","arr2","from","_createClass","defineProperties","writable","protoProps","staticProps","Metadata","containsField","field","cb","parsebool","_collectionRegex","container","Container","maxValue","MAX_VALUE","propertySchema","collectionBaseType","elementType","Queryable","entitySchema","_this2","createTypeDefinition","nullable","maxLength","_getMaxValue","propertyRefs","some","pr","concurrencyMode","ConcurrencyMode","inverseProperty","createProperty","navigationProps","navigationProperties","createNavigationProperty","reduce","namespace","baseType","Entity","createEntityDefinition","entityFullName","staticDefinition","openType","typeName","isNaN","enumSchema","members","createEnumOption","createEnumDefinition","enumFullName","Enum","underlyingType","entitySetSchema","contextSchema","entityType","entitySetType","fieldName","pick","_this3","entitySets","es","createEntitySetProperty","indexBy","createContextDefinition","contextType","EntityContext","contextImportMethods","actionImports","functionImports","parameter","paramDef","actionInfo","ns","typeDefinitions","_this4","createReturnTypeDefinition","parameters","createMethodParameter","isBound","bindingParameter","shift","filteredContextDefinitions","ctx","setName","actions","filteredTypeDefinitions","methodFullName","methodImportInfo","action","createdTypes","_this5","serviceMethods","schemas","schema","enumTypes","ct","createEnumType","complexTypes","createEntityType","entityTypes","et","m","defs","applyBoundMethod","ServiceAction","functions","ServiceFunction","entityContainer","contexts","createContextType","debug","console","log","resolveName","dp","JSON","stringify","resolveType","MetadataDownloader","_odataMetadata","_Metadata","_jaydataOdatajs","_jaydataOdatajs2","prepareRequest","oData","Guard","Exception","pHandler","serviceUrl","metadataUrl","SerivceUri","requestData","requestUri","headers","edmMetadata","processMetadata","isAssignableTo","_createFactoryFunc","metadataHandler","_appendBasicAuth","user","password","withCredentials","request","ctxType","config","cfg","oDataServiceHost","maxDataServiceVersion","Authorization","__encodeBase64","chr1","chr2","enc1","enc2","enc3","b64array","base64","chr3","enc4","./Metadata.js","_typeof","service","serviceUri","getParam","paramValue","_callback","_config","downloader","load","storeAlias","serviceName","addStore","isDefault","initService","clb","onReady","_index3","_MetadataDownloader","_Service","../Types/Expressions/index.js","./MetadataDownloader.js","./Service.js","ContainerCtor","parentContainer","addPendingResolution","onResolved","pendingResolutions","addChildContainer","classNames","consolidatedClassNames","classTypes","mappedTo","IoC","inst","createInstance","mapType","aliasTypeOrName","realTypeOrName","_utils","requireValue","aliasT","getType","realT","aliasPos","realPos","isPrimitiveType","_initializeJayData2","Integer","Float","Time","Day","SimpleBase","Geospatial","GeographyBase","GeometryBase","tPos","typeOrName","posT","doNotThrow","tp","_Exception2","getName","getTypes","ret","getTypeName","fullName","toHexString","isTypeRegistered","unregisterType","getDefault","getIndex","resolveByIndex","registerType","nameOrNamesArray","factoryFunc","namesArray","parts","shortName","creatorFnc","intellisense","annotate","typePos","pending","_converters","to","converters","convertTo","tType","eType","isNullOrUndefined","sourceTypeName","targetType","targetTypeName","registerConverter","sourceOrToConverters","toConverterOrFromConverters","fromConverter","targetName","sourceName","createOrGetNamespace","root","part","__namespace","ContainerInstance","_initializeJayData","_Exception","./Exception.js","./Extensions.js","./initializeJayData.js","./utils.js","captureStackTrace","__proto__","_getStackTrace","StringFunctions","startsWith","valueOf","endsWith","contains","_TypeSystem","_TypeSystem2","TraceBase","unshift","getDateFormat","warn","date","getHours","getMinutes","getSeconds","getMilliseconds","../TypeSystem.js",17,"Trace",18,"MemberDefinition","$C","_Extensions","_Container","_modelHolder","setModelContainer","modelHolder","defaults","openTypeDefaultPropertyName","openTypeDefaultType","openTypeDefaultValue","setGlobal","memberDefinitionData","definedClass","MemberTypes","asFunction","dataType","originalType","originalElementType","MemberDefinitionCollection","ClassEngineBase","createPropertyDescriptor","classFunction","pd","storeProperty","retrieveProperty","createStorePropertyDescriptor","createGetMethod","tran","getProperty","createSetMethod","_value","setProperty","translateDefinition","memDef","addChildThunk","referencedType","childResolverThunks","resolveForwardDeclarations","memberDefinition","holder","resolverThunks","thunk","toJSON","memberDefinitionPrefix","clearCache","arrayCache","pubMapPropsCache","keyPropsCache","propByTypeCache","pubMapMethodsCache","pubMapPropNamesCache","asArray","getPublicMappedProperties","notMapped","getPublicMappedPropertyNames","getKeyProperties","getPublicMappedMethods","getPropertyByType","getMember","setMember","__enum","navProperty","complexProperty","baseClass","instanceDefinition","classDefinition","defineEx","baseClasses","Base","classNameParts","shortClassName","models","classFunctionBuilder","join","buildType","_classNameParts","_root","innerNS","baseCount","baseTypes","inheritedTypeProcessor","bodyBuilder","bases","mixin","propagation","propagateTo","memberDefinitions","$constructor","inheritsFrom","staticDefs","staticDefinitions","buildMember","openTypeDefinition","buildStaticMembers","classConstructor","openTypePropertyName","definedOpenTypeMember","getMemberDefinition","memberType","buildInstanceMembers","mixins","buildInstanceMixins","__class","addMethod","addProperty","propertyDescriptor","origGet","origSet","addField","buildMethod","classMember","buildProperty","__setPropertyfunctions","withoutGetSetMethod","pdGetMethod","pdSetMethod","memberCollectionName","memberListDefinition","copyMembers","il","msg","logMessage","mixinList","propagations","buildInstancePropagation","buildInstanceMixin","typeObj","memberDefs","itemName","ContainerClass","createContainer","backingFieldName","getterOrType","setterOrGetter","setter","_type","_getter","_setter","propDef","storeOnObject","addMember","isClassMember","describeField","from$data.Object","ConstructorParameter","paramIndex","defaultErrorCallback","reject","defaultSuccessCallback","defaultNotifyCallback","defaultSetting","wrapCode","setting","createCtorParams","indexes","thisObj","paramArray","writePropertyValues","writeProperties","prototypeProperty","defines","writeProperty","member","debugWith","cArgs","fdebug","./Container.js","_process",19,"_btoa","_btoa2","bufferOrArray","eval","Blob","createFromHexString","j","toBase64","toArray","toUpperCase","toDataURL","$data.String","blob","$data.Array","$data.Number","packIEEE754","reverse","$data.Boolean","req","XMLHttpRequest","open","URL","createObjectURL","send","response","ArrayBuffer","../Exception.js","../utils.js",20,"POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_VALUE","$data.Date","parseFromString","matches","time","metrics","ms","parseFromDate","getFullYear","getMonth","getDate","day","ebits","fbits","ln","bits","bytes","bias","pow","abs","min","floor","LN2","round","substring","unpackIEEE754","NaN","IEEE754","toISOString","$data.ObjectID","$data.Function","proxyConverter","defaultConverter",21,"Edm_Boolean","Edm_Binary","Edm_DateTime","Edm_DateTimeOffset","Edm_Time","Edm_TimeOfDay","Edm_Date","Edm_Duration","Edm_Decimal","Edm_Float","Edm_Single","Edm_Double","Edm_Guid","Edm_Int16","Edm_Int32","Edm_Int64","Edm_Byte","Edm_SByte","Edm_String","Edm_GeographyPoint","Edm_GeographyLineString","Edm_GeographyPolygon","Edm_GeographyMultiPoint","Edm_GeographyMultiLineString","Edm_GeographyMultiPolygon","Edm_GeographyCollection","Edm_GeometryPoint","Edm_GeometryLineString","Edm_GeometryPolygon","Edm_GeometryMultiPoint","Edm_GeometryMultiLineString","Edm_GeometryMultiPolygon","Edm_GeometryCollection","oDataEdmMapping","$data.Byte","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.DateTimeOffset","$data.Time","$data.Day","$data.Duration","$data.Blob","$data.Integer","$data.Int32","$data.GeographyPoint","$data.GeographyLineString","$data.GeographyPolygon","$data.GeographyMultiPoint","$data.GeographyMultiLineString","$data.GeographyMultiPolygon","$data.GeographyCollection","$data.GeometryPoint","$data.GeometryLineString","$data.GeometryPolygon","$data.GeometryMultiPoint","$data.GeometryMultiLineString","$data.GeometryMultiPolygon","$data.GeometryCollection","$data.Guid",22,"crs","defaultCrs","validateGeoJSON","disableSRID","strData","lparenIdx","registered","stringifyToUrl","geoData","validMembers","_ret","getSRID","buildArray","coordinates","geoType","isValid","lon","lat","longitude","latitude","lng","values","point","tl","tr","bl","br","topLeft","bottomRight","topRight","bottomLeft","polygon","rings","polyPoints","pairs","polygons","geometries","geometry",23,"y",24,25,"parseGuid","NewGuid","createGuid","guid","CHARS","guidString","chars","uuid",26,27,"ObjectID","mongoDBDriver",28,"_Types","_Trace","_Logger","_SimpleBase","_Geospatial","_Geography","_Geometry","_Guid","_Blob","_EdmTypes","_Converter","./Trace/Logger.js","./Trace/Trace.js","./TypeSystem.js","./Types/Blob.js","./Types/Converter.js","./Types/EdmTypes.js","./Types/Geography.js","./Types/Geometry.js","./Types/Geospatial.js","./Types/Guid.js","./Types/SimpleBase.js","./Types/Types.js",29,"_interopRequireWildcard","newObj","_initializeJayDataClient","_initializeJayDataClient2","_acorn","_package","pkg","timeEnd","versionNumber","Acorn","../../package.json","./initializeJayDataClient.js",30,"_data_handler",31,"requireType","typeOrTypes","exception","./Exception",32,"isAuthorized","access","sets","clbWrapper","pHandlerResult","getAccessBitmaskFromPermission","Access","None","Create","Read","Update","Delete","DeleteBatch","Execute",33,"ajax","../../TypeSystem/index.js",34,"Ajax",35,"WinJS","xhr","dataTypes","json","accept","convert","html","xml","dataTypeContext","Accept","successClb","errorClb","progressClb","progress","responseText",36,37,"Authentication","AuthenticationBase","configuration","Authenticated","Login","callbacks","Logout","CreateRequest",38,39,"Username","Password","origBeforeSend","beforeSend","setRequestHeader",40,"Url_code","type_code","scope","Url_token","type_token","access_token","app_id","provider","stateCallbacks","_processRequestToken","andChar","verification_data","abort",41,"Event","EventSubscriber","state","sender","detachHandler","list","subscriberList","attach","detach","fire","eventData","snder","snd","subscriber","ex","fireCancelAble","EventData","eventName","PropertyChangeEventData","propertyName","oldValue","newValue","PropertyValidationEventData","errors","cancel","initData","newInstanceOptions","thisType","__copyPropertiesToInstance","setDefaultValues","typeMemDefs","memDefNames","memberDef","Fixed","converter","entityBuilder","changedProperties","entityState","Id","Name","equals","entity","entityPk","propertyChanging","monitorChanges","_propertyChanging","propertyChanged","_propertyChanged","propertyValidationError","_propertyValidationError","origValue","Validation","ValidateEntityField","errorEventData","isValidated","EntityState","Unchanged","Modified","_setPropertyChanged","Transaction","loadItemProperty","that","storeToken","then","ValidationErrors","ValidateEntity","ValidationError","resetChanges","_changedProperties","remove","ItemStore","EntityInstanceRemove","save","EntityInstanceSave","refresh","EntityInstanceRefresh","getFieldUrl","_getContextPromise","EntityInheritedTypeProcessor","defaultValues","dv","addEventListener","delegateName","removeEventListener","raiseEvent","getFieldNames","_def","keyFields","keyProp","implementation",42,"defaultMode","AllChanged","memDefs","KeepChanges","Default",43,"defaultDatabaseName","enableRelatedEntityReadMethods","relatedEntityReadMethodPrefix","relatedEntityProxyPrefix","ComplexTypes","Enums","Associations","LogicalType","LogicalTypeName","PhysicalType","PhysicalTypeName","EventHandlers","TableName","TableOptions","ContextType","Roles","initParam","From","FromType","FromMultiplicity","FromPropertyName","To","ToType","ToMultiplicity","ToPropertyName","Association","storageProviderCfg","ContextRegister","queryCache","databaseName","lazyLoad","trackChanges","_entitySetReferences","_storageModel","_isOK","origSuccessInitProvider","_successInitProvider","errorOrContext","getStorageModel","providerList","_initStorageModelSync","_initializeEntitySets","StorageProviderLoader","providerType","storageProvider","setContext","stateManager","EntityStateManager","_storageModelCache","_applyRelatedEntityMethodsToTypes","_initializeStorageModel","_applyRelatedEntityMethodsToContext","checkPermission","_initializeStore","ready","beginTransaction","readParam","isWrite","tables","_beginTran","_isReturnTransaction","transaction","_applyTransaction","isReturnTransaction","getDataType","memDef_dataType","ctor","storageModel","ItemName","sm","tableName","tableOptions","eventHandlers","_initializeActions","initializeStore","_memDefArray","itemResolvedDataType","StorageModel","_convertLogicalTypeNameToPhysical","roles","indices","beforeCreate","beforeRead","beforeUpdate","beforeDelete","afterCreate","afterRead","afterUpdate","afterDelete","dbEntityInstanceDefinition","memDefResolvedDataType","supportedDataTypes","_build_EnumDefinition","_buildDbType_navigationPropertyComplite","_buildDbType_Collection_OneManyDefinition","_buildDbType_ElementType_OneManyDefinition","fields","referealResolvedType","_buildDbType_ElementType_OneOneDefinition","_buildDbType_addComplexTypePropertyDefinition","_buildDbType_modifyInstanceDefinition","dbEntityClassDefinition","_buildDbType_generateConvertToFunction","_buildDbType_modifyClassDefinition","esDef","actionKeys","actionName","actionDef","refStorageModel","refMemDefs","pubDefs","refMemDef","_addNavigationPropertyDefinition","complexType","_createComplexElement","refereedType","refereedStorageModel","associationType","association","_addAssociationElement","refereedMemberDefinition","associationName","fromType","fromMultiplicity","fromPropName","toType","toMultiplicity","toPropName","converterGroups","fieldConverter","createEnumConverter","converterGroup","onReadyFunction","Promise","getEntitySetFromElementType","executeQuery","queryable","query","Query","defaultType","returnTransaction","executeQuerySuccess","executeQueryError","getEntitySets","authorizedFn","readyFn","QueryCache","isInCache","rawDataList","callbackFn","nodeType","Expressions","ExpressionType","BatchDelete","isCacheable","addToCache","buildResultSet","QueryResultModifier","successResult","Find","Count","Some","Every","First","__count","totalCount","_buildContinuationFunction","batchExecuteQuery","queryableOptions","cbWrapper","methodOperationMappings","count","single","every","removeAll","methodFrameMappings","returnFunc","qOptions","queryOption","entityContext","_checkOperation","executableQueries","frameExpressionName","FrameOperator","queryExpression","preparator","createQueryExpressionCreator","Visit","event","createQueryable","queryResults","supportedContextOperation","batchExecuteQueryExpression","createBatchExecuteQueryExpression","results","batchResult","hasError","errorValue","readIterator","queries","iteratorCallback","itTransaction","lastTran","saveChanges","reset","changedEntities","trackedEntities","skipItems","additionalEntities","entityCachedItem","sModel","skipSave","changeStoredProperty","pMemDef","multiplicity","processEntityTypeBeforeEventHandler","smPhyMemDefs","ism","navProp","navPropertyName","connectedDataList","dependentOn","discoverDependentItemEntityState","entitySet","temp","Added","memDefType","isDependentProperty","it","createAll","modifyAll","Deleted","deleteAll","cancelEvent","innerCallback","_postProcessSavedItems","ies","getOwnPropertyNames","cmd","cmdAll","ed","all","im","ix","onbeforeCreate","onbeforeUpdate","onbeforeDelete","processEntityTypeAfterEventHandler","onafterCreate","onafterUpdate","onafterDelete","bulkInsert","datas","currentEntitySet","entitySetName","actualEntitySet","ChangeCollector","Notifications","ChangeCollectorBase","processChangedData","oes","physicalData","forEachEntitySet","isSingleSide","associations","assoc","filterFunc","filterParams","memDefKey","getTraceString","logInfo","resolveBinaryOperator","frameType","resolveUnaryOperator","resolveFieldOperation","operation","resolveSetOperations","resolveTypeOperations","resolveContextOperations","_generateServiceOperationQueryable","functionName","returnEntitySet","tempOperation","generateServiceOperation","mode","EntityWrapper","getEntity","attachOrGet","addMany","entities","collection","keyDef","esName","newMemberName","_relatedEntityGetMethod","memberElementType","_createRelatedEntityProxyClass","proxyClassName","RelatedEntityProxy","navigation","keyValue","proxyClass","keyV","serviceMethod","lastParam","boundItem","virtualEntitySet","paramConstExpression","createConstantExpression","ec","createEntityContextExpression","memberdef","createServiceOperationExpression","createMemberInfoExpression","isTerminated","_runQuery","__storageModelCache",44,"EntitySchemaConfig","entitySetState","created","defined","active","collectionName","createNew","addNew","_item","on_ready","_trackEntity","current","EntityAttachMode","attachMode","existsItem","trackedEnt","idx","Detached","getter","_expression","createEntitySetExpression",45,46,47,48,"createEnum","enumType","enumDefinition","__enumType","getEnumDef","enumMember","isValueCalculation","hasIndex","enumDef","enumValA","enumName","enumValO","sort","enumOptions","enumVal","enumClass",49,"ExpressionNode","items","ArrayLiteral",50,"Call",51,"scopeContext","lambdaParams","resolver","errorMessage","errorDetails","ParserBuild","Esprima","AST","ASTParser","parseCode","Build2","tree","createExpression","ParserExpressionStatement","ParserBlockStatement","ParserReturnStatement","ParserMemberExpression","PropertyExpression","ConstantExpression","ParserIdentifier","ParserParameter","LambdaParameterReference","ParserObjectExpression","ParserProperty","ObjectLiteralExpression","ParserArrayExpression","ArrayLiteralExpression","ObjectFieldExpression","ParserFunctionExpression","LambdaParameter","owningFunction","FunctionExpression","ParameterExpression","ParserLogicalExpression","ParserBinaryExpression","ParserOperators","==","expressionType","Equal","===","EqualTyped","!=","NotEqual","!==","NotEqualTyped",">","GreaterThen",">=","GreaterThenOrEqual","<=","LessThenOrEqual","<","LessThen","&&","And","||","Or","&","AndBitwise","|","OrBitwise","+","Add","-","Subtract","/","Divide","%","Modulo","*","Multiply","[","ArrayIndex","in","In","ParserUnaryOperators","arity","Positive","operand","Negative","++true","Increment","--true","Decrement","++false","!","Not","--false","ParserUnaryExpression","UnaryExpression","ParserUpdateExpression","SimpleBinaryExpression","ParserThisExpression","ThisExpression","ParserLiteral","ParserCallExpression","CallExpression",52,"Constant",53,"EntityExpressionVisitor","compile","findContext","skipExists","skip","skipSize","take","pageSize","append","VisitPagingExpression","Take","amount","Skip","constExp","createPagingExpression",54,"associationInfo","AssociationInfo","../../../TypeSystem/index.js",55,"Code",56,"ExpressionVisitor","VisitBinary","refExpression","constExpr","memInfo","selector","MemberInfoExpression","fieldType","constExprType","resultExp","operatorResolution","createSimpleBinaryExpression","VisitUnary","createUnaryExpression","VisitParameter","createEntityExpression","lambdaParameters","lambda","VisitThis","createQueryParameterExpression","queryParameters","VisitFunction","VisitCall","exp","QueryParameterExpression","argValues","EntityFieldExpression","EntityFieldOperationExpression","getJSON","createEntityFieldOperationExpression","_resolveFunctionArguments","EntitySetExpression","createFrameOperationExpression","EntityExpression","createEntityFunctionOperationExpression","EntityContextExpression","createContextFunctionOperationExpression","VisitProperty","res","memberDefinitionExp","storageField","createEntityFieldExpression","assocInfo","setExpression","createAssociationInfoExpression","ee","createComplexTypeExpression","ComplexTypeExpression","memDefExp",57,"dt","Com",58,59,"ServiceOperationExpression","memdef",60,"lambdaTypes","canVisit","visitorName","VisitToArrayExpression","createToArrayExpression","VisitForEachExpression","createForEachExpression","VisitMemberInfoExpression","VisitSingleExpression","createSingleExpression","VisitFirstExpression","createFirstExpression","VisitSomeExpression","createSomeExpression","VisitFindExpression","createFindExpression","VisitEveryExpression","createEveryExpression","VisitCountExpression","createCountExpression","VisitBatchDeleteExpression","createBatchDeleteExpression","VisitBatchExecuteQueryExpression","newQueries","equal","VisitObjectLiteralExpression","newValues","ofe","createObjectLiteralExpression","VisitObjectFieldExpression","newExpression","createObjectFieldExpression","VisitIncludeExpression","createIncludeExpression","VisitUnaryExpression","resolution","VisitSimpleBinaryExpression","VisitEntityContextExpression","VisitCodeExpression","VisitComplexTypeExpression","VisitEntityExpression","VisitEntityFieldExpression","VisitEntityFieldOperationExpression","VisitParametricQueryExpression","createParametricQueryExpression","VisitEntitySetExpression","VisitInlineCountExpression","createInlineCountExpression","VisitFilterExpression","createFilterExpression","VisitProjectionExpression","createProjectionExpression","projectionAs","VisitOrderExpression","createOrderExpression",61,"EntityField",62,"EntityFieldOperation",63,"CodeExpression","ParametricQueryExpression","storage_type","AssociationInfoExpression",64,"monitorDefinition","methodName","VisitExpressionNode","expressionTypeName","MonitorExpressionNode","MutateExpressionNode",65,"resultType","Filter","InlineCount","BatchExecuteQuery","subMember","ForEach","ToArray",66,"FrameOperation","FrameOperationExpression","EntityFunctionOperation","ContextFunctionOperation",67,"Include",68,"MemberInfo",69,"nType","OrderBy",70,"ParametricQuery",71,"Projection",72,"VisitServiceOperationExpression","jsCodeTree","createCodeParser","constantResolver","createConstantValueResolver","parameterProcessor","createParameterResolverVisitor","code2entity","createCodeToEntityConverter","entityExpression",73,"QueryParameter",74,75,"ServiceOperation",76,"_isLambdaParam","_isParam","paramContext","_isParamRoot","paramsName","Build","expNode","BuildMethodCall","BuildMember","BuildEquality","BuildBinary","BuildArrayAccess","BuildUnary","BuildIncDec","BuildNewExpression","BuildLiteral","BuildDecision","BuildVariable","BuildBoolLiteral","ExpressionNodeTypes","NewExpressionNode","LiteralExpressionNode","MEMBERACCESS","subType","operationName","missingParameterName","VariableExpressionNode","jsonAssign","JsonAssignExpressionNode","JSONASSIGN","MemberAccessExpressionNode","second","UnaryExpressionNode","IncDecExpressionNode","BinaryExpressionNode","EqualityExpressionNode","DecisionExpressionNode","third","MethodcallExpressionNode","argNodes","ArrayAccessExpressionNode",77,"jsonify","Variable","MemberAccess","New","This","ObjectLiteral","ObjectField","Unknown","EntityMember","EntityBinary","ComplexEntityField","OrderByDescending","IndexedPhysicalAnd","IndexedLogicalAnd","IndexedLogicalOr","IndexedLogicalIn","BinaryOperator","binaryOperators","getOperator","unaryOperators","timeIt","iterations","OperatorTypes","UNARY","INCDEC","DECISION","METHODCALL","NEW","ARRAYACCESS","UNKNOWN","executable","_expressionType",78,"paramStrings","bodyString",79,80,"namesAndValues",81,82,83,84,85,86,"ExpTreeVisitor","VisitVariable","eNode","VisitMember","chain","GetMemberChain","operandValue","valueType","VisitIncDec","suffix","leftValue","rightValue","VisitEquality","VisitDecision","VisitMethodCall","VisitArray","VisitArrayAccess","arrayNode","indexNode",87,"_deep","LITERAL","VisitLiteral","VARIABLE","BINARY","EQUALITY","VisitNew","VisitJsonAssign","eNodes","ok","memberAccess",88,"VisitConstant","VisitObjectLiteral","VisitObjectField","VisitArrayLiteral","VisitEntityContext","createArrayLiteralExpression",89,"ParameterProcessor","canResolve","paramExpression","resultValue","paramsObject","globalResolver","createGlobalContextProcessor","paramResolver",90,"lambdaParameterTypeInfos","paramIndices","fnParams","lambdaParamType","createParameterExpression",91,"GlobalContextProcessor","evalMethod",92,"binder","mem","memberResolver","createPropertyExpression",93,94,"lambdaParamCache","allLocal","lambdaParam","isExecutable","convertToValue","visitors",95,"firstMember","isLambdaParam","isLocalParam",96,"_ExpressionNode","_ArrayLiteralExpression","_CallExpression","_CodeParser","_ConstantExpression","_FunctionExpression","_ObjectFieldExpression","_ObjectLiteralExpression","_PagingExpression","_ParameterExpression","_PropertyExpression","_SimpleBinaryExpression","_ThisExpression","_ExpressionVisitor","_ParameterProcessor","_GlobalContextProcessor","_LocalContextProcessor","_LambdaParameterProcessor","_ParameterResolverVisitor","_LogicalSchemaBinderVisitor","_ExpTreeVisitor","_SetExecutableVisitor","_ExecutorVisitor","_ExpressionBuilder","_AssociationInfoExpression","_CodeExpression","_CodeToEntityConverter","_ComplexTypeExpression","_EntityContextExpression","_EntityExpression","_EntityExpressionVisitor","_ExpressionMonitor","_EntityFieldExpression","_EntityFieldOperationExpression","_EntitySetExpression","_FrameOperationExpression","_FilterExpression","_IncludeExpression","_MemberInfoExpression","_OrderExpression","_ParametricQueryExpression","_ProjectionExpression","_QueryExpressionCreator","_QueryParameterExpression","_RepresentationExpression","_ServiceOperationExpression","_ContinuationExpressionBuilder","./ArrayLiteralExpression.js","./CallExpression.js","./CodeParser.js","./ConstantExpression.js","./ContinuationExpressionBuilder.js","./EntityExpressions/AssociationInfoExpression.js","./EntityExpressions/CodeExpression.js","./EntityExpressions/CodeToEntityConverter.js","./EntityExpressions/ComplexTypeExpression.js","./EntityExpressions/EntityContextExpression.js","./EntityExpressions/EntityExpression.js","./EntityExpressions/EntityExpressionVisitor.js","./EntityExpressions/EntityFieldExpression.js","./EntityExpressions/EntityFieldOperationExpression.js","./EntityExpressions/EntitySetExpression.js","./EntityExpressions/ExpressionMonitor.js","./EntityExpressions/FilterExpression.js","./EntityExpressions/FrameOperationExpression.js","./EntityExpressions/IncludeExpression.js","./EntityExpressions/MemberInfoExpression.js","./EntityExpressions/OrderExpression.js","./EntityExpressions/ParametricQueryExpression.js","./EntityExpressions/ProjectionExpression.js","./EntityExpressions/QueryExpressionCreator.js","./EntityExpressions/QueryParameterExpression.js","./EntityExpressions/RepresentationExpression.js","./EntityExpressions/ServiceOperationExpression.js","./ExpressionBuilder.js","./ExpressionNode2.js","./FunctionExpression.js","./ObjectFieldExpression.js","./ObjectLiteralExpression.js","./PagingExpression.js","./ParameterExpression.js","./PropertyExpression.js","./SimpleBinaryExpression.js","./ThisExpression.js","./Visitors/ExecutorVisitor.js","./Visitors/ExpTreeVisitor.js","./Visitors/ExpressionVisitor.js","./Visitors/GlobalContextProcessor.js","./Visitors/LambdaParameterProcessor.js","./Visitors/LocalContextProcessor.js","./Visitors/LogicalSchemaBinderVisitor.js","./Visitors/ParameterProcessor.js","./Visitors/ParameterResolverVisitor.js","./Visitors/SetExecutableVisitor.js",97,"itemStoreConfig","aliases","contextTypes","resetStoreToDefault","addItemStoreAlias","storeConfigs","stores","_setTypeStoreConfig","contextFactoryOrToken","contextPromise","preContext","_getDefaultItemStoreFactory","_setStoreAlias","_getStoreAlias","alias","_getStoreContext","aliasOrToken","nullIfInvalid","_getStoreEntitySet","instanceOrType","initStoreConfig","storeConfig","contextDef","inMemoryType","_storeToken","contextOrAlias","_resolveFromContext","hint","_getSaveMode","keepStore","_getKeyObjectFromEntity","read","loadedEntity","readAll","EntityTypeReadAll","EntityTypeRead","EntityTypeRemoveAll","EntityTypeRemove","EntityTypeGet","EntityTypeSave","EntityTypeAddMany","itemCount","EntityTypeItemCount","EntityTypeQuery","takeFirst","EntityTypeTakeFirst","setStore","EntityTypeSetStore","singleParam","_findByIdQueryable","predicate","thisArgs","initDatas","defStoreConfig","dataSource","ds","parsedApiUrl","apiUrl","keysProps","keyDefs","fail","modelBinderConfig","$type","$item","navProps","ItemStoreClass","def","definedBy","MemberWrapper","setKey","setComputed","setRequired","setNullable","changeDefinition","attr",98,"providerName","references","providerConfiguration","modelBinderOptimization","RegisteredStorageProviders","_deepExtend","_finalize","_buildSelector","$selector","path","iter","_buildKey","typeIndex","$source","build","$value","fromDb","$keys","keycacheName","itemForKey","resolvedType","isEntityType","isPrimitive","openTypeProperty","entityTypeIndex",99,"buildData","element","resObj","enumerableMemDefCollection",100,"entityContextData","entityData","Distrbutor","distributeData","ChangeDistributorBase",101,"broadcastUrl","succes",102,"collectorData",103,"always","isRejected","isResolved","pipe",104,"ModelBinder",105,"_fragments","selectedFragment","_binderConfig","_binderConfigPropertyStack","selectTextPart","getTextPart","addText","textParticle","addParameter","selectModelBinderProperty","popModelBinderProperty","resetModelBinderProperty","addKeyField",106,"requiresExpressions","resultHandler",107,"rootExpression","createCodeExpression","expressionSource","FilterExpression","where","projection","codeExpression","select","onResult","countExpression","iteratorFunc","forEachExpression","onResult_items","toArrayExpression","toLiveArray","doAction","successFunc","prev","filterPredicate","singleExpression","someExpression","everyExpression","takeExp","order","orderString","orderByDescending","orderBy","firstExpression","find","supportedSetOperations","findExpression","include","withInlineCount","inlineCountExp","withCount","batchDeleteExpression","toTraceString","invokable",108,"entityKeyObject","navigationProperty","_entityKeyObject","_navigationProperty","_context","_ctxFactory","proxyChains","_chainToArray","firstProxy",109,"propertyDef","argObj","paramConfig",110,"storageProviders","DbCreationType","Merge","DropTableIfChanged","DropTableIfChange","DropAllExistingTables","ErrorIfChange","DropDbIfChange","schemaConfiguration","providers","loadRawData","buildIndependentBlocks","changedItems","edgesTo","edgesFrom","currentDependency","ixDependendOn","independentBlocks","currentBlock","cbix","dependentNodes","_buildPagingMethod","continuation","ContinuationExpressionBuilder","continuationResult","buildDbType_modifyInstanceDefinition","buildDbType_copyPropertyDefinition","propertyDefinition","refProp","cPropertyDef","buildDbType_createConstrain","foreignType","keyPropertyName","constrain","addToEntityDef","foreignPropName","keyProperties","constraint","dependentMemDef","navigationPropertyName","buildDbType_generateConvertToFunction","logicalEntity","dbInstance","complexInstance","cmpType","supportedFieldOperations","allowedIn","allowedType","supportedBinaryOperators","mapTo","supportedUnaryOperators","not","makePhysicalTypeDefinition","entityDefinition","supportedAutoincrementKeys","onRegisterProvider","registerProvider","getProvider","isSupported",111,"supported","indexedDB","webkitIndexedDB","mozIndexedDB","msIndexedDB","location","href","localStorage","scriptLoadTimeout","scriptLoadInterval","npmModules","indexedDb","InMemory","LocalStore","mongoDB","webApi","sqLite","webSql","storm","ProviderNames","cacheKey","_fallbackCache","selectedProvider","currentProvider","getVirtual","loadProvider","loadNpmModule","mappedName","getUrl","loader","loadScript","document","createElement","loadScriptElement","successful","jaydataScriptMin","querySelector","jaydataScript","getHttpRequest","ActiveXObject","oXmlHttp","onreadystatechange","readyState","status","watcher","iteration","loadInterval","head","getElementsByTagName","documentElement","script","appendChild","ceil","virtualProviders","fallbacks","StorageProviderLoaderBase",112,"projectionExpression","includes","oDataProvider","_query","_includes","_isoDataProvider","_defaultModelBinder","builder","createqueryBuilder","VisitExpression","VisitConstantExpression","projVisitor","createFindProjectionVisitor","DefaultSelection","_addPropertyToModelBinderConfig","arrayElementType","_addComplexTypeProperties","allIncludes","tmpStorageModel","hasProjection","VisitEntityAsProjection","mapping","inc","VisitAssociationInfoExpression","of",113,"_objectId","getTime","oncomplete","onerror",114,"validators","definedValue","customValidator","minValue","minLength","_getGroupValidations","validations","validator","EntityValidationBase","valueNotSet","fieldValidate","getValidationValue","validationName","convertableValidation","typeToConvert","getValidationMessage","defaultMessage","eMessage","createValidationError","supportedValidations","Defaults","$data.Object","validationTypeName","validatonGroup","validation","EntityValidation",115,"Message","PropertyDefinition","Type",116,"_EntityValidationBase","_EntityValidation","_ChangeDistributorBase","_ChangeCollectorBase","_ChangeDistributor","_ChangeCollector","_Transaction","_Access","_Promise","_Entity","_Enum","_RelatedEntityProxy","_EntityContext","_QueryProvider","_ModelBinder","_QueryBuilder","_Query","_Queryable","_EntitySet","_EntityState","_EntityAttachModes","_EntityStateManager","_ItemStore","_StorageProviderLoader","_StorageProviderBase","_ServiceOperation","_EntityWrapper","_jQueryAjaxWrapper","_WinJSAjaxWrapper","_ExtJSAjaxWrapper","_AjaxStub","_modelBinderConfigCompiler","_AuthenticationBase","_Anonymous","_FacebookAuth","_BasicAuth","_deferred","../JayDataModules/deferred.js","./Access.js","./Ajax/AjaxStub.js","./Ajax/ExtJSAjaxWrapper.js","./Ajax/WinJSAjaxWrapper.js","./Ajax/jQueryAjaxWrapper.js","./Authentication/Anonymous.js","./Authentication/AuthenticationBase.js","./Authentication/BasicAuth.js","./Authentication/FacebookAuth.js","./Entity.js","./EntityAttachModes.js","./EntityContext.js","./EntitySet.js","./EntityState.js","./EntityStateManager.js","./EntityWrapper.js","./Enum.js","./Expressions/index.js","./ItemStore.js","./ModelBinder.js","./Notifications/ChangeCollector.js","./Notifications/ChangeCollectorBase.js","./Notifications/ChangeDistributor.js","./Notifications/ChangeDistributorBase.js","./Promise.js","./Query.js","./QueryBuilder.js","./QueryProvider.js","./Queryable.js","./RelatedEntityProxy.js","./ServiceOperation.js","./StorageProviderBase.js","./StorageProviderLoader.js","./StorageProviders/modelBinderConfigCompiler.js","./Transaction.js","./Validation/EntityValidation.js","./Validation/EntityValidationBase.js","jaydata/core","_index5","_index7","./JaySvcUtil/index.js","./TypeSystem/index.js","./Types/Expressions/index.js","./Types/index.js","interopRequire"],"mappings":"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,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,KAAA,IAAA,IAAA,IAAA,KAAA,KAAA,MAAA,IAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,MAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,KAAA,MAAA,GAAA,KAAA,GAAA,IAAA,MAAA,KACAG,GAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAA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","file":"jaydata.min.js","sourcesContent":["﻿// JayData 1.5.0 CTP\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(){\r\n\t\r\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.acorn = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar pp = _state.Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp.checkPropClash = function (prop, propHash) {\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n  var key = prop.key;var name = undefined;\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;break;\n    case \"Literal\":\n      name = String(key.value);break;\n    default:\n      return;\n  }\n  var kind = prop.kind;\n\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n      propHash.proto = true;\n    }\n    return;\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var isGetSet = kind !== \"init\";\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raise(key.start, \"Redefinition of property\");\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp.parseExpression = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === _tokentype.types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(_tokentype.types.comma)) node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.type == _tokentype.types._yield && this.inGenerator) return this.parseYield();\n\n  var validateDestructuring = false;\n  if (!refDestructuringErrors) {\n    refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n    validateDestructuring = true;\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name) this.potentialArrowAt = this.start;\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.type.isAssign) {\n    if (validateDestructuring) this.checkPatternErrors(refDestructuringErrors, true);\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;\n    refDestructuringErrors.shorthandAssign = 0; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else {\n    if (validateDestructuring) this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  if (this.eat(_tokentype.types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(_tokentype.types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp.parseExprOps = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.left = left;\n      node.operator = this.value;\n      var op = this.type;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n      this.finishNode(node, op === _tokentype.types.logicalOR || op === _tokentype.types.logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp.parseMaybeUnary = function (refDestructuringErrors) {\n  if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === _tokentype.types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary();\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raise(node.start, \"Deleting local variable in strict mode\");\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprSubscripts(refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  while (this.type.postfix && !this.canInsertSemicolon()) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.prefix = false;\n    node.argument = expr;\n    this.checkLVal(expr);\n    this.next();\n    expr = this.finishNode(node, \"UpdateExpression\");\n  }\n  return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp.parseExprSubscripts = function (refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (this.eat(_tokentype.types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseIdent(true);\n      node.computed = false;\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(_tokentype.types.bracketL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(_tokentype.types.bracketR);\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(_tokentype.types.parenL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseExprList(_tokentype.types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (this.type === _tokentype.types.backQuote) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate();\n      base = this.finishNode(node, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp.parseExprAtom = function (refDestructuringErrors) {\n  var node = undefined,\n      canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n    case _tokentype.types._super:\n      if (!this.inFunction) this.raise(this.start, \"'super' outside of function or class\");\n    case _tokentype.types._this:\n      var type = this.type === _tokentype.types._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case _tokentype.types._yield:\n      if (this.inGenerator) this.unexpected();\n\n    case _tokentype.types.name:\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var id = this.parseIdent(this.type !== _tokentype.types.name);\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);\n      return id;\n\n    case _tokentype.types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = { pattern: value.pattern, flags: value.flags };\n      return node;\n\n    case _tokentype.types.num:case _tokentype.types.string:\n      return this.parseLiteral(this.value);\n\n    case _tokentype.types._null:case _tokentype.types._true:case _tokentype.types._false:\n      node = this.startNode();\n      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _tokentype.types.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow);\n\n    case _tokentype.types.bracketL:\n      node = this.startNode();\n      this.next();\n      // check whether this is array comprehension or regular array\n      if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {\n        return this.parseComprehension(node, false);\n      }\n      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(false, refDestructuringErrors);\n\n    case _tokentype.types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case _tokentype.types._class:\n      return this.parseClass(this.startNode(), false);\n\n    case _tokentype.types._new:\n      return this.parseNew();\n\n    case _tokentype.types.backQuote:\n      return this.parseTemplate();\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp.parseParenExpression = function () {\n  this.expect(_tokentype.types.parenL);\n  var val = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  return val;\n};\n\npp.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val = undefined;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {\n      return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);\n    }\n\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true;\n    var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 },\n        spreadStart = undefined,\n        innerParenStart = undefined;\n    while (this.type !== _tokentype.types.parenR) {\n      first ? first = false : this.expect(_tokentype.types.comma);\n      if (this.type === _tokentype.types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRest()));\n        break;\n      } else {\n        if (this.type === _tokentype.types.parenL && !innerParenStart) {\n          innerParenStart = this.start;\n        }\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(_tokentype.types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, true);\n      if (innerParenStart) this.unexpected(innerParenStart);\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length) this.unexpected(this.lastTokStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp.parseParenItem = function (item) {\n  return item;\n};\n\npp.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\") this.raise(node.property.start, \"The only valid meta property for new is new.target\");\n    if (!this.inFunction) this.raise(node.start, \"new.target can only be used in functions\");\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, false);else node.arguments = empty;\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp.parseTemplateElement = function () {\n  var elem = this.startNode();\n  elem.value = {\n    raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.value\n  };\n  this.next();\n  elem.tail = this.type === _tokentype.types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp.parseTemplate = function () {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(_tokentype.types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(_tokentype.types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement());\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp.parseObj = function (isPattern, refDestructuringErrors) {\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var prop = this.startNode(),\n        isGenerator = undefined,\n        startPos = undefined,\n        startLoc = undefined;\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern) isGenerator = this.eat(_tokentype.types.star);\n    }\n    this.parsePropertyName(prop);\n    this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors);\n    this.checkPropClash(prop, propHash);\n    node.properties.push(this.finishNode(prop, \"Property\"));\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n  if (this.eat(_tokentype.types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator);\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR)) {\n    if (isGenerator || isPattern) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\") this.raise(start, \"getter should have no params\");else this.raise(start, \"setter should have exactly one param\");\n    }\n    if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raise(prop.value.params[0].start, \"Setter cannot use rest params\");\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    prop.kind = \"init\";\n    if (isPattern) {\n      if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name)) this.raise(prop.key.start, \"Binding \" + prop.key.name);\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {\n      if (!refDestructuringErrors.shorthandAssign) refDestructuringErrors.shorthandAssign = this.start;\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else this.unexpected();\n};\n\npp.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(_tokentype.types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(_tokentype.types.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);\n};\n\n// Initialize empty function node.\n\npp.initFunction = function (node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n};\n\n// Parse object or class method.\n\npp.parseMethod = function (isGenerator) {\n  var node = this.startNode();\n  this.initFunction(node);\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false);\n  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n  this.parseFunctionBody(node, false);\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\n// Parse arrow function expression with given parameters.\n\npp.parseArrowExpression = function (node, params) {\n  this.initFunction(node);\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\n// Parse function body and check parameters.\n\npp.parseFunctionBody = function (node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.inFunction,\n        oldInGen = this.inGenerator,\n        oldLabels = this.labels;\n    this.inFunction = true;this.inGenerator = node.generator;this.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.inFunction = oldInFunc;this.inGenerator = oldInGen;this.labels = oldLabels;\n  }\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {\n    var oldStrict = this.strict;\n    this.strict = true;\n    if (node.id) this.checkLVal(node.id, true);\n    this.checkParams(node);\n    this.strict = oldStrict;\n  } else if (isArrowFunction) {\n    this.checkParams(node);\n  }\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp.checkParams = function (node) {\n  var nameHash = {};\n  for (var i = 0; i < node.params.length; i++) {\n    this.checkLVal(node.params[i], true, nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.type === close && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n        refDestructuringErrors.trailingComma = this.lastTokStart;\n      }\n      if (allowTrailingComma && this.afterTrailingComma(close)) break;\n    } else first = false;\n\n    var elt = undefined;\n    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) elt = this.parseSpread(refDestructuringErrors);else elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    elts.push(elt);\n  }\n  return elts;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp.parseIdent = function (liberal) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") liberal = false;\n  if (this.type === _tokentype.types.name) {\n    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1)) this.raise(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n    node.name = this.value;\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\n// Parses yield expression inside generator.\n\npp.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(_tokentype.types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n// Parses array and generator comprehensions.\n\npp.parseComprehension = function (node, isGenerator) {\n  node.blocks = [];\n  while (this.type === _tokentype.types._for) {\n    var block = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    block.left = this.parseBindingAtom();\n    this.checkLVal(block.left, true);\n    this.expectContextual(\"of\");\n    block.right = this.parseExpression();\n    this.expect(_tokentype.types.parenR);\n    node.blocks.push(this.finishNode(block, \"ComprehensionBlock\"));\n  }\n  node.filter = this.eat(_tokentype.types._if) ? this.parseParenExpression() : null;\n  node.body = this.parseExpression();\n  this.expect(isGenerator ? _tokentype.types.parenR : _tokentype.types.bracketR);\n  node.generator = isGenerator;\n  return this.finishNode(node, \"ComprehensionExpression\");\n};\n\n},{\"./state\":10,\"./tokentype\":14}],2:[function(_dereq_,module,exports){\n// This is a trick taken from Esprima. It turns out that, on\n// non-Chrome browsers, to check whether a string is in a set, a\n// predicate containing a big ugly `switch` statement is faster than\n// a regular expression, and on Chrome the two are about on par.\n// This function uses `eval` (non-lexical) to produce such a\n// predicate from a space-separated string of words.\n//\n// It starts by sorting the words by length.\n\n// Reserved word lists for various dialects of the language\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isIdentifierChar = isIdentifierChar;\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\nexports.reservedWords = reservedWords;\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" let const class extends export import yield super\"\n};\n\nexports.keywords = keywords;\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\nvar nonASCIIidentifierChars = \"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by tools/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.parse = parse;\nexports.parseExpressionAt = parseExpressionAt;\nexports.tokenizer = tokenizer;\n\nvar _state = _dereq_(\"./state\");\n\n_dereq_(\"./parseutil\");\n\n_dereq_(\"./statement\");\n\n_dereq_(\"./lval\");\n\n_dereq_(\"./expression\");\n\n_dereq_(\"./location\");\n\nexports.Parser = _state.Parser;\nexports.plugins = _state.plugins;\n\nvar _options = _dereq_(\"./options\");\n\nexports.defaultOptions = _options.defaultOptions;\n\nvar _locutil = _dereq_(\"./locutil\");\n\nexports.Position = _locutil.Position;\nexports.SourceLocation = _locutil.SourceLocation;\nexports.getLineInfo = _locutil.getLineInfo;\n\nvar _node = _dereq_(\"./node\");\n\nexports.Node = _node.Node;\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nexports.TokenType = _tokentype.TokenType;\nexports.tokTypes = _tokentype.types;\n\nvar _tokencontext = _dereq_(\"./tokencontext\");\n\nexports.TokContext = _tokencontext.TokContext;\nexports.tokContexts = _tokencontext.types;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nexports.isIdentifierChar = _identifier.isIdentifierChar;\nexports.isIdentifierStart = _identifier.isIdentifierStart;\n\nvar _tokenize = _dereq_(\"./tokenize\");\n\nexports.Token = _tokenize.Token;\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nexports.isNewLine = _whitespace.isNewLine;\nexports.lineBreak = _whitespace.lineBreak;\nexports.lineBreakG = _whitespace.lineBreakG;\nvar version = \"2.7.0\";\n\nexports.version = version;\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new _state.Parser(options, input).parse();\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new _state.Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression();\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new _state.Parser(options, input);\n}\n\n},{\"./expression\":1,\"./identifier\":2,\"./location\":4,\"./locutil\":5,\"./lval\":6,\"./node\":7,\"./options\":8,\"./parseutil\":9,\"./state\":10,\"./statement\":11,\"./tokencontext\":12,\"./tokenize\":13,\"./tokentype\":14,\"./whitespace\":16}],4:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar pp = _state.Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp.raise = function (pos, message) {\n  var loc = _locutil.getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;\n  throw err;\n};\n\npp.curPosition = function () {\n  if (this.options.locations) {\n    return new _locutil.Position(this.curLine, this.pos - this.lineStart);\n  }\n};\n\n},{\"./locutil\":5,\"./state\":10}],5:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getLineInfo = getLineInfo;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = (function () {\n  function Position(line, col) {\n    _classCallCheck(this, Position);\n\n    this.line = line;\n    this.column = col;\n  }\n\n  Position.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n  };\n\n  return Position;\n})();\n\nexports.Position = Position;\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) this.source = p.sourceFile;\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\n;\n\nexports.SourceLocation = SourceLocation;\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    _whitespace.lineBreakG.lastIndex = cur;\n    var match = _whitespace.lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\n},{\"./whitespace\":16}],6:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _util = _dereq_(\"./util\");\n\nvar pp = _state.Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp.toAssignable = function (node, isBinding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i];\n          if (prop.kind !== \"init\") this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          this.toAssignable(prop.value, isBinding);\n        }\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          // falls through to AssignmentPattern\n        } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n            break;\n          }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\") this.raise(node.right.start, \"Yield expression cannot be a default value\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp.toAssignableList = function (exprList, isBinding) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type == \"RestElement\") {\n      --end;\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") this.unexpected(arg.start);\n      --end;\n    }\n\n    if (isBinding && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding);\n  }\n  return exprList;\n};\n\n// Parses spread element.\n\npp.parseSpread = function (refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp.parseRest = function (allowNonIdent) {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (allowNonIdent) node.argument = this.type === _tokentype.types.name ? this.parseIdent() : this.unexpected();else node.argument = this.type === _tokentype.types.name || this.type === _tokentype.types.bracketL ? this.parseBindingAtom() : this.unexpected();\n\n  return this.finishNode(node, \"RestElement\");\n};\n\n// Parses lvalue (assignable) atom.\n\npp.parseBindingAtom = function () {\n  if (this.options.ecmaVersion < 6) return this.parseIdent();\n  switch (this.type) {\n    case _tokentype.types.name:\n      return this.parseIdent();\n\n    case _tokentype.types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (first) first = false;else this.expect(_tokentype.types.comma);\n    if (allowEmpty && this.type === _tokentype.types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break;\n    } else if (this.type === _tokentype.types.ellipsis) {\n      var rest = this.parseRest(allowNonIdent);\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      this.expect(close);\n      break;\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts;\n};\n\npp.parseBindingListItem = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp.parseMaybeDefault = function (startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp.checkLVal = function (expr, isBinding, checkClashes) {\n  switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raise(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      if (checkClashes) {\n        if (_util.has(checkClashes, expr.name)) this.raise(expr.start, \"Argument name clash\");\n        checkClashes[expr.name] = true;\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++) {\n        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n      }break;\n\n    case \"ArrayPattern\":\n      for (var i = 0; i < expr.elements.length; i++) {\n        var elem = expr.elements[i];\n        if (elem) this.checkLVal(elem, isBinding, checkClashes);\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./util\":15}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar Node = function Node(parser, pos, loc) {\n  _classCallCheck(this, Node);\n\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);\n  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n  if (parser.options.ranges) this.range = [pos, 0];\n}\n\n// Start an AST node, attaching a start offset.\n\n;\n\nexports.Node = Node;\nvar pp = _state.Parser.prototype;\n\npp.startNode = function () {\n  return new Node(this, this.start, this.startLoc);\n};\n\npp.startNodeAt = function (pos, loc) {\n  return new Node(this, pos, loc);\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations) node.loc.end = loc;\n  if (this.options.ranges) node.range[1] = pos;\n  return node;\n}\n\npp.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\n},{\"./locutil\":5,\"./state\":10}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getOptions = getOptions;\n\nvar _util = _dereq_(\"./util\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, or 5, or 6. This influences support for strict\n  // mode, the set of reserved words, support for getters and\n  // setters and other features.\n  ecmaVersion: 5,\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\nexports.defaultOptions = defaultOptions;\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var opt in defaultOptions) {\n    options[opt] = opts && _util.has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n\n  if (_util.isArray(options.onToken)) {\n    (function () {\n      var tokens = options.onToken;\n      options.onToken = function (token) {\n        return tokens.push(token);\n      };\n    })();\n  }\n  if (_util.isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? 'Block' : 'Line',\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);\n    if (options.ranges) comment.range = [start, end];\n    array.push(comment);\n  };\n}\n\n},{\"./locutil\":5,\"./util\":15}],9:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ## Parser utilities\n\n// Test whether a statement node is the string literal `\"use strict\"`.\n\npp.isUseStrict = function (stmt) {\n  return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && stmt.expression.raw.slice(1, -1) === \"use strict\";\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.type === _tokentype.types.name && this.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.value === name && this.eat(_tokentype.types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) this.unexpected();\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    return true;\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();\n};\n\npp.afterTrailingComma = function (tokType) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    this.next();\n    return true;\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\npp.checkPatternErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.trailingComma;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Trailing comma is not permitted in destructuring patterns\");\n};\n\npp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\");\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar _options = _dereq_(\"./options\");\n\n// Registered plugins\nvar plugins = {};\n\nexports.plugins = plugins;\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\");\n}\n\nvar Parser = (function () {\n  function Parser(options, input, startPos) {\n    _classCallCheck(this, Parser);\n\n    this.options = options = _options.getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n    var reserved = options.allowReserved ? \"\" : _identifier.reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\");\n    this.reservedWords = keywordRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + _identifier.reservedWords.strict;\n    this.reservedWordsStrict = keywordRegexp(reservedStrict);\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + _identifier.reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Load plugins\n    this.loadPlugins(options.plugins);\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos));\n      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = _tokentype.types.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\";\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false;\n    // Labels in scope.\n    this.labels = [];\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') this.skipLineComment(2);\n  }\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\n  Parser.prototype.isKeyword = function isKeyword(word) {\n    return this.keywords.test(word);\n  };\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    return this.reservedWords.test(word);\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n    for (var _name in pluginConfigs) {\n      var plugin = plugins[_name];\n      if (!plugin) throw new Error(\"Plugin '\" + _name + \"' not found\");\n      plugin(this, pluginConfigs[_name]);\n    }\n  };\n\n  Parser.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n  };\n\n  return Parser;\n})();\n\nexports.Parser = Parser;\n\n},{\"./identifier\":2,\"./options\":8,\"./tokentype\":14,\"./whitespace\":16}],11:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function (node) {\n  var first = true;\n  if (!node.body) node.body = [];\n  while (this.type !== _tokentype.types.eof) {\n    var stmt = this.parseStatement(true, true);\n    node.body.push(stmt);\n    if (first) {\n      if (this.isUseStrict(stmt)) this.setStrict(true);\n      first = false;\n    }\n  }\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = { kind: \"loop\" },\n    switchLabel = { kind: \"switch\" };\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function (declaration, topLevel) {\n  var starttype = this.type,\n      node = this.startNode();\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _tokentype.types._break:case _tokentype.types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case _tokentype.types._debugger:\n      return this.parseDebuggerStatement(node);\n    case _tokentype.types._do:\n      return this.parseDoStatement(node);\n    case _tokentype.types._for:\n      return this.parseForStatement(node);\n    case _tokentype.types._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n      return this.parseFunctionStatement(node);\n    case _tokentype.types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n    case _tokentype.types._if:\n      return this.parseIfStatement(node);\n    case _tokentype.types._return:\n      return this.parseReturnStatement(node);\n    case _tokentype.types._switch:\n      return this.parseSwitchStatement(node);\n    case _tokentype.types._throw:\n      return this.parseThrowStatement(node);\n    case _tokentype.types._try:\n      return this.parseTryStatement(node);\n    case _tokentype.types._let:case _tokentype.types._const:\n      if (!declaration) this.unexpected(); // NOTE: falls through to _var\n    case _tokentype.types._var:\n      return this.parseVarStatement(node, starttype);\n    case _tokentype.types._while:\n      return this.parseWhileStatement(node);\n    case _tokentype.types._with:\n      return this.parseWithStatement(node);\n    case _tokentype.types.braceL:\n      return this.parseBlock();\n    case _tokentype.types.semi:\n      return this.parseEmptyStatement(node);\n    case _tokentype.types._export:\n    case _tokentype.types._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n      }\n      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node);\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value,\n          expr = this.parseExpression();\n      if (starttype === _tokentype.types.name && expr.type === \"Identifier\" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(_tokentype.types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  this.expect(_tokentype.types.parenL);\n  if (this.type === _tokentype.types.semi) return this.parseFor(node, null);\n  if (this.type === _tokentype.types._var || this.type === _tokentype.types._let || this.type === _tokentype.types._const) {\n    var _init = this.startNode(),\n        varKind = this.type;\n    this.next();\n    this.parseVar(_init, true, varKind);\n    this.finishNode(_init, \"VariableDeclaration\");\n    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && _init.declarations.length === 1 && !(varKind !== _tokentype.types._var && _init.declarations[0].init)) return this.parseForIn(node, _init);\n    return this.parseFor(node, _init);\n  }\n  var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n    this.toAssignable(init);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return this.parseFor(node, init);\n};\n\npp.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {\n    node.argument = this.parseExpression();this.semicolon();\n  }\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(_tokentype.types.braceL);\n  this.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != _tokentype.types.braceR;) {\n    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {\n      var isCase = this.type === _tokentype.types._case;\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raise(this.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(_tokentype.types.colon);\n    } else {\n      if (!cur) this.unexpected();\n      cur.consequent.push(this.parseStatement(true));\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp.parseThrowStatement = function (node) {\n  this.next();\n  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === _tokentype.types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true);\n    this.expect(_tokentype.types.parenR);\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp.parseWithStatement = function (node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var i = 0; i < this.labels.length; ++i) {\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  }var kind = this.type.isLoop ? \"loop\" : this.type === _tokentype.types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label = this.labels[i];\n    if (label.statementStart == node.start) {\n      label.statementStart = this.start;\n      label.kind = kind;\n    } else break;\n  }\n  this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });\n  node.body = this.parseStatement(true);\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function (allowStrict) {\n  var node = this.startNode(),\n      first = true,\n      oldStrict = undefined;\n  node.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    var stmt = this.parseStatement(true);\n    node.body.push(stmt);\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict;\n      this.setStrict(this.strict = true);\n    }\n    first = false;\n  }\n  if (oldStrict === false) this.setStrict(false);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(_tokentype.types.semi);\n  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();\n  this.expect(_tokentype.types.semi);\n  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function (node, init) {\n  var type = this.type === _tokentype.types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind.keyword;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl);\n    if (this.eat(_tokentype.types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === _tokentype.types._const && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === _tokentype.types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(_tokentype.types.comma)) break;\n  }\n  return node;\n};\n\npp.parseVarId = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function (node, isStatement, allowExpressionBody) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) node.generator = this.eat(_tokentype.types.star);\n  if (isStatement || this.type === _tokentype.types.name) node.id = this.parseIdent();\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp.parseFunctionParams = function (node) {\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false, true);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function (node, isStatement) {\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (this.eat(_tokentype.types.semi)) continue;\n    var method = this.startNode();\n    var isGenerator = this.eat(_tokentype.types.star);\n    var isMaybeStatic = this.type === _tokentype.types.name && this.value === \"static\";\n    this.parsePropertyName(method);\n    method[\"static\"] = isMaybeStatic && this.type !== _tokentype.types.parenL;\n    if (method[\"static\"]) {\n      if (isGenerator) this.unexpected();\n      isGenerator = this.eat(_tokentype.types.star);\n      this.parsePropertyName(method);\n    }\n    method.kind = \"method\";\n    var isGetSet = false;\n    if (!method.computed) {\n      var key = method.key;\n\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== _tokentype.types.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true;\n        method.kind = key.name;\n        key = this.parsePropertyName(method);\n      }\n      if (!method[\"static\"] && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\");\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n        method.kind = \"constructor\";\n        hadConstructor = true;\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator);\n    if (isGetSet) {\n      var paramCount = method.kind === \"get\" ? 0 : 1;\n      if (method.value.params.length !== paramCount) {\n        var start = method.value.start;\n        if (method.kind === \"get\") this.raise(start, \"getter should have no params\");else this.raise(start, \"setter should have exactly one param\");\n      }\n      if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this.raise(method.value.params[0].start, \"Setter cannot use rest params\");\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp.parseClassMethod = function (classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp.parseClassId = function (node, isStatement) {\n  node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n};\n\npp.parseClassSuper = function (node) {\n  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.eat(_tokentype.types.star)) {\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n  if (this.eat(_tokentype.types._default)) {\n    // export default ...\n    var expr = this.parseMaybeAssign();\n    var needsSemi = true;\n    if (expr.type == \"FunctionExpression\" || expr.type == \"ClassExpression\") {\n      needsSemi = false;\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\" ? \"FunctionDeclaration\" : \"ClassDeclaration\";\n      }\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0; i < node.specifiers.length; i++) {\n        if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {\n          this.unexpected(node.specifiers[i].local.start);\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp.shouldParseExportStatement = function () {\n  return this.type.keyword;\n};\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  // export { x, y as z } [from '...']\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.local = this.parseIdent(this.type === _tokentype.types._default);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes;\n};\n\n// Parses import declaration.\n\npp.parseImport = function (node) {\n  this.next();\n  // import '...'\n  if (this.type === _tokentype.types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  if (this.type === _tokentype.types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(_tokentype.types.comma)) return nodes;\n  }\n  if (this.type === _tokentype.types.star) {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent();\n    } else {\n      node.local = node.imported;\n      if (this.isKeyword(node.local.name)) this.unexpected(node.local.start);\n      if (this.reservedWordsStrict.test(node.local.name)) this.raise(node.local.start, \"The keyword '\" + node.local.name + \"' is reserved\");\n    }\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"));\n  }\n  return nodes;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],12:[function(_dereq_,module,exports){\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nexports.TokContext = TokContext;\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  f_expr: new TokContext(\"function\", true)\n};\n\nexports.types = types;\nvar pp = _state.Parser.prototype;\n\npp.initialContext = function () {\n  return [types.b_stat];\n};\n\npp.braceIsBlock = function (prevType) {\n  if (prevType === _tokentype.types.colon) {\n    var _parent = this.curContext();\n    if (_parent === types.b_stat || _parent === types.b_expr) return !_parent.isExpr;\n  }\n  if (prevType === _tokentype.types._return) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR) return true;\n  if (prevType == _tokentype.types.braceL) return this.curContext() === types.b_stat;\n  return !this.exprAllowed;\n};\n\npp.updateContext = function (prevType) {\n  var update = undefined,\n      type = this.type;\n  if (type.keyword && prevType == _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;\n};\n\n// Token-specific context update code\n\n_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return;\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop();\n    this.exprAllowed = false;\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true;\n  } else {\n    this.exprAllowed = !out.isExpr;\n  }\n};\n\n_tokentype.types.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.dollarBraceL.updateContext = function () {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\n_tokentype.types._function.updateContext = function () {\n  if (this.curContext() !== types.b_stat) this.context.push(types.f_expr);\n  this.exprAllowed = false;\n};\n\n_tokentype.types.backQuote.updateContext = function () {\n  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);\n  this.exprAllowed = false;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],13:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  _classCallCheck(this, Token);\n\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);\n  if (p.options.ranges) this.range = [p.start, p.end];\n}\n\n// ## Tokenizer\n\n;\n\nexports.Token = Token;\nvar pp = _state.Parser.prototype;\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\";\n\n// Move to the next token\n\npp.next = function () {\n  if (this.options.onToken) this.options.onToken(new Token(this));\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function () {\n  this.next();\n  return new Token(this);\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") pp[Symbol.iterator] = function () {\n  var self = this;\n  return { next: function next() {\n      var token = self.getToken();\n      return {\n        done: token.type === _tokentype.types.eof,\n        value: token\n      };\n    } };\n};\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function (strict) {\n  this.strict = strict;\n  if (this.type !== _tokentype.types.num && this.type !== _tokentype.types.string) return;\n  this.pos = this.start;\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n      --this.curLine;\n    }\n  }\n  this.nextToken();\n};\n\npp.curContext = function () {\n  return this.context[this.context.length - 1];\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function () {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n  this.start = this.pos;\n  if (this.options.locations) this.startLoc = this.curPosition();\n  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);\n\n  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());\n};\n\npp.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (_identifier.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */) return this.readWord();\n\n  return this.getTokenFromCode(code);\n};\n\npp.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) return code;\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00;\n};\n\npp.skipBlockComment = function () {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n  this.pos = end + 2;\n  if (this.options.locations) {\n    _whitespace.lineBreakG.lastIndex = start;\n    var match = undefined;\n    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n};\n\npp.skipLineComment = function (startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos;\n    ch = this.input.charCodeAt(this.pos);\n  }\n  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function () {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n      case 32:case 160:\n        // ' '\n        ++this.pos;\n        break;\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10:case 8232:case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break;\n      case 47:\n        // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42:\n            // '*'\n            this.skipBlockComment();\n            break;\n          case 47:\n            this.skipLineComment(2);\n            break;\n          default:\n            break loop;\n        }\n        break;\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop;\n        }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function (type, val) {\n  this.end = this.pos;\n  if (this.options.locations) this.endLoc = this.curPosition();\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) return this.readNumber(true);\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(_tokentype.types.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(_tokentype.types.dot);\n  }\n};\n\npp.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) {\n    ++this.pos;return this.readRegexp();\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.slash, 1);\n};\n\npp.readToken_mult_modulo = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 42 ? _tokentype.types.star : _tokentype.types.modulo, 1);\n};\n\npp.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);\n};\n\npp.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.bitwiseXOR, 1);\n};\n\npp.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n    return this.finishOp(_tokentype.types.incDec, 2);\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.plusMin, 1);\n};\n\npp.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);\n    return this.finishOp(_tokentype.types.bitShift, size);\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected();\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n  if (next === 61) size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2;\n  return this.finishOp(_tokentype.types.relational, size);\n};\n\npp.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(_tokentype.types.arrow);\n  }\n  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);\n};\n\npp.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n\n    // Punctuation tokens.\n    case 40:\n      ++this.pos;return this.finishToken(_tokentype.types.parenL);\n    case 41:\n      ++this.pos;return this.finishToken(_tokentype.types.parenR);\n    case 59:\n      ++this.pos;return this.finishToken(_tokentype.types.semi);\n    case 44:\n      ++this.pos;return this.finishToken(_tokentype.types.comma);\n    case 91:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketL);\n    case 93:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketR);\n    case 123:\n      ++this.pos;return this.finishToken(_tokentype.types.braceL);\n    case 125:\n      ++this.pos;return this.finishToken(_tokentype.types.braceR);\n    case 58:\n      ++this.pos;return this.finishToken(_tokentype.types.colon);\n    case 63:\n      ++this.pos;return this.finishToken(_tokentype.types.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) break;\n      ++this.pos;\n      return this.finishToken(_tokentype.types.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n      // 1-9\n      return this.readNumber(false);\n\n    // Quotes produce strings.\n    case 34:case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:case 42:\n      // '%*'\n      return this.readToken_mult_modulo(code);\n\n    case 124:case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(_tokentype.types.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags);\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n      throw e;\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"￿\", \"u\");\n\npp.readRegexp = function () {\n  var _this = this;\n\n  var escaped = undefined,\n      inClass = undefined,\n      start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n    var ch = this.input.charAt(this.pos);\n    if (_whitespace.lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\");\n    if (!escaped) {\n      if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n      escaped = ch === \"\\\\\";\n    } else escaped = false;\n    ++this.pos;\n  }\n  var content = this.input.slice(start, this.pos);\n  ++this.pos;\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1();\n  var tmp = content;\n  if (mods) {\n    var validFlags = /^[gim]*$/;\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n        code = Number(\"0x\" + code);\n        if (code > 0x10FFFF) _this.raise(start + offset + 3, \"Code point out of bounds\");\n        return \"x\";\n      });\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null;\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, undefined, start, this);\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods);\n  }\n  return this.finishToken(_tokentype.types.regexp, { pattern: content, flags: mods, value: value });\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function (radix, len) {\n  var start = this.pos,\n      total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this.input.charCodeAt(this.pos),\n        val = undefined;\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n        else val = Infinity;\n    if (val >= radix) break;\n    ++this.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null;\n\n  return total;\n};\n\npp.readRadixNumber = function (radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function (startsWithDot) {\n  var start = this.pos,\n      isFloat = false,\n      octal = this.input.charCodeAt(this.pos) === 48;\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46) {\n    // '.'\n    ++this.pos;\n    this.readInt(10);\n    isFloat = true;\n    next = this.input.charCodeAt(this.pos);\n  }\n  if (next === 69 || next === 101) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    isFloat = true;\n  }\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n\n  var str = this.input.slice(start, this.pos),\n      val = undefined;\n  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");else val = parseInt(str, 8);\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code = undefined;\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected();\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\");\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code;\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code);\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n\npp.readString = function (quote) {\n  var out = \"\",\n      chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) break;\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (_whitespace.isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\");\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(_tokentype.types.string, out);\n};\n\n// Reads template string tokens.\n\npp.readTmplToken = function () {\n  var out = \"\",\n      chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n      // '`', '${'\n      if (this.pos === this.start && this.type === _tokentype.types.template) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(_tokentype.types.dollarBraceL);\n        } else {\n          ++this.pos;\n          return this.finishToken(_tokentype.types.backQuote);\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(_tokentype.types.template, out);\n    }\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (_whitespace.isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n        case 10:\n          out += \"\\n\";\n          break;\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function (inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n    case 110:\n      return \"\\n\"; // 'n' -> '\\n'\n    case 114:\n      return \"\\r\"; // 'r' -> '\\r'\n    case 120:\n      return String.fromCharCode(this.readHexChar(2)); // 'x'\n    case 117:\n      return codePointToString(this.readCodePoint()); // 'u'\n    case 116:\n      return \"\\t\"; // 't' -> '\\t'\n    case 98:\n      return \"\\b\"; // 'b' -> '\\b'\n    case 118:\n      return \"\\u000b\"; // 'v' -> '\\u000b'\n    case 102:\n      return \"\\f\"; // 'f' -> '\\f'\n    case 13:\n      if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n    case 10:\n      // ' \\n'\n      if (this.options.locations) {\n        this.lineStart = this.pos;++this.curLine;\n      }\n      return \"\";\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\");\n        }\n        this.pos += octalStr.length - 1;\n        return String.fromCharCode(octal);\n      }\n      return String.fromCharCode(ch);\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function (len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\");\n  return n;\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function () {\n  this.containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (_identifier.isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.raise(escStart, \"Invalid Unicode escape\");\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break;\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos);\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function () {\n  var word = this.readWord1();\n  var type = _tokentype.types.name;\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word)) type = _tokentype.keywords[word];\n  return this.finishToken(type, word);\n};\n\n},{\"./identifier\":2,\"./locutil\":5,\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],14:[function(_dereq_,module,exports){\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  _classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nexports.TokenType = TokenType;\n\nfunction binop(name, prec) {\n  return new TokenType(name, { beforeExpr: true, binop: prec });\n}\nvar beforeExpr = { beforeExpr: true },\n    startsExpr = { startsExpr: true };\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: true, startsExpr: true }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: true, startsExpr: true }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: true, startsExpr: true }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: true, startsExpr: true }),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: true, isAssign: true }),\n  assign: new TokenType(\"_=\", { beforeExpr: true, isAssign: true }),\n  incDec: new TokenType(\"++/--\", { prefix: true, postfix: true, startsExpr: true }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: true, prefix: true, startsExpr: true }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10)\n};\n\nexports.types = types;\n// Map keyword names to token types.\n\nvar keywords = {};\n\nexports.keywords = keywords;\n// Succinct definitions of keyword token types\nfunction kw(name) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  options.keyword = name;\n  keywords[name] = types[\"_\" + name] = new TokenType(name, options);\n}\n\nkw(\"break\");\nkw(\"case\", beforeExpr);\nkw(\"catch\");\nkw(\"continue\");\nkw(\"debugger\");\nkw(\"default\", beforeExpr);\nkw(\"do\", { isLoop: true, beforeExpr: true });\nkw(\"else\", beforeExpr);\nkw(\"finally\");\nkw(\"for\", { isLoop: true });\nkw(\"function\", startsExpr);\nkw(\"if\");\nkw(\"return\", beforeExpr);\nkw(\"switch\");\nkw(\"throw\", beforeExpr);\nkw(\"try\");\nkw(\"var\");\nkw(\"let\");\nkw(\"const\");\nkw(\"while\", { isLoop: true });\nkw(\"with\");\nkw(\"new\", { beforeExpr: true, startsExpr: true });\nkw(\"this\", startsExpr);\nkw(\"super\", startsExpr);\nkw(\"class\");\nkw(\"extends\", beforeExpr);\nkw(\"export\");\nkw(\"import\");\nkw(\"yield\", { beforeExpr: true, startsExpr: true });\nkw(\"null\", startsExpr);\nkw(\"true\", startsExpr);\nkw(\"false\", startsExpr);\nkw(\"in\", { beforeExpr: true, binop: 7 });\nkw(\"instanceof\", { beforeExpr: true, binop: 7 });\nkw(\"typeof\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"void\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"delete\", { beforeExpr: true, prefix: true, startsExpr: true });\n\n},{}],15:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.isArray = isArray;\nexports.has = has;\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n}\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName);\n}\n\n},{}],16:[function(_dereq_,module,exports){\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isNewLine = isNewLine;\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nexports.lineBreak = lineBreak;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nexports.lineBreakG = lineBreakG;\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code == 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nexports.nonASCIIwhitespace = nonASCIIwhitespace;\n\n},{}]},{},[3])(3)\n});\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar metacode = require('./metacode');\r\nvar Edm;\r\n(function (Edm) {\r\n    var PrimitiveType = (function () {\r\n        function PrimitiveType(className) {\r\n            this.className = className;\r\n        }\r\n        PrimitiveType.prototype.toString = function () { return this.className; };\r\n        return PrimitiveType;\r\n    })();\r\n    Edm.PrimitiveType = PrimitiveType;\r\n    Edm.Binary = new PrimitiveType('Edm.Binary');\r\n    Edm.Boolean = new PrimitiveType('Edm.Boolean');\r\n    Edm.Byte = new PrimitiveType('Edm.Byte');\r\n    Edm.Date = new PrimitiveType('Edm.Date');\r\n    Edm.DateTimeOffset = new PrimitiveType('Edm.DateTimeOffset');\r\n    Edm.Decimal = new PrimitiveType('Edm.Decimal');\r\n    Edm.Double = new PrimitiveType('Edm.Double');\r\n    Edm.Duration = new PrimitiveType('Edm.Duration');\r\n    Edm.Guid = new PrimitiveType('Edm.Guid');\r\n    Edm.Int16 = new PrimitiveType('Edm.Int16');\r\n    Edm.Int32 = new PrimitiveType('Edm.Int32');\r\n    Edm.Int64 = new PrimitiveType('Edm.Int64');\r\n    Edm.SByte = new PrimitiveType('Edm.SByte');\r\n    Edm.Single = new PrimitiveType('Edm.Single');\r\n    Edm.Stream = new PrimitiveType('Edm.Stream');\r\n    Edm.String = new PrimitiveType('Edm.String');\r\n    Edm.TimeOfDay = new PrimitiveType('Edm.TimeOfDay');\r\n    Edm.Geography = new PrimitiveType('Edm.Geography');\r\n    Edm.GeographyPoint = new PrimitiveType('Edm.GeographyPoint');\r\n    Edm.GeographyLineString = new PrimitiveType('Edm.GeographyLineString');\r\n    Edm.GeographyPolygon = new PrimitiveType('Edm.GeographyPolygon');\r\n    Edm.GeographyMultiPoint = new PrimitiveType('Edm.GeographyMultiPoint');\r\n    Edm.GeographyMultiLineString = new PrimitiveType('Edm.GeographyMultiLineString');\r\n    Edm.GeographyMultiPolygon = new PrimitiveType('Edm.GeographyMultiPolygon');\r\n    Edm.GeographyCollection = new PrimitiveType('Edm.GeographyCollection');\r\n    Edm.Geometry = new PrimitiveType('Edm.Geometry');\r\n    Edm.GeometryPoint = new PrimitiveType('Edm.GeometryPoint');\r\n    Edm.GeometryLineString = new PrimitiveType('Edm.GeometryLineString');\r\n    Edm.GeometryPolygon = new PrimitiveType('Edm.GeometryPolygon');\r\n    Edm.GeometryMultiPoint = new PrimitiveType('Edm.GeometryMultiPoint');\r\n    Edm.GeometryMultiLineString = new PrimitiveType('Edm.GeometryMultiLineString');\r\n    Edm.GeometryMultiPolygon = new PrimitiveType('Edm.GeometryMultiPolygon');\r\n    Edm.GeometryCollection = new PrimitiveType('Edm.GeometryCollection');\r\n    var MemberAttribute = metacode.MemberAttribute;\r\n    var parse = metacode.parse;\r\n    var required = metacode.required;\r\n    var defaultValue = metacode.defaultValue;\r\n    var parseAs = metacode.parseAs;\r\n    var AttributeFunctionChain = metacode.AttributeFunctionChain;\r\n    var mapArray = function (sourceField, factory) { return new metacode.AttributeFunctionChain(function (d, i) { return d[sourceField]; }, function (props, i) { return Array.isArray(props) ? props : (props ? [props] : []); }, function (props, i) { return props.map(function (prop) { return factory(prop, i); }); }); };\r\n    var EdmItemBase = (function () {\r\n        function EdmItemBase(definition, parent) {\r\n            this.parent = parent;\r\n            definition && this.loadFrom(definition);\r\n        }\r\n        EdmItemBase.prototype.loadFrom = function (definition) {\r\n            var _this = this;\r\n            var proto = Object.getPrototypeOf(this);\r\n            MemberAttribute.getMembers(proto).forEach(function (membername) {\r\n                var parser = MemberAttribute.getAttributeValue(proto, membername, \"serialize\");\r\n                var v = parser.invoke(definition, _this);\r\n                _this[membername] = v;\r\n            });\r\n        };\r\n        return EdmItemBase;\r\n    })();\r\n    Edm.EdmItemBase = EdmItemBase;\r\n    var Property = (function (_super) {\r\n        __extends(Property, _super);\r\n        function Property() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"defaultValue\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"concurrencyMode\", void 0);\r\n        return Property;\r\n    })(EdmItemBase);\r\n    Edm.Property = Property;\r\n    var NavigationProperty = (function (_super) {\r\n        __extends(NavigationProperty, _super);\r\n        function NavigationProperty() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"partner\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"containsTarget\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"referentialConstraint\", function (prop, i) { return new ReferentialConstraint(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"referentialConstraints\", void 0);\r\n        return NavigationProperty;\r\n    })(EdmItemBase);\r\n    Edm.NavigationProperty = NavigationProperty;\r\n    var ReferentialConstraint = (function (_super) {\r\n        __extends(ReferentialConstraint, _super);\r\n        function ReferentialConstraint() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"property\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"referencedProperty\", void 0);\r\n        return ReferentialConstraint;\r\n    })(EdmItemBase);\r\n    Edm.ReferentialConstraint = ReferentialConstraint;\r\n    var PropertyRef = (function (_super) {\r\n        __extends(PropertyRef, _super);\r\n        function PropertyRef() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"alias\", void 0);\r\n        return PropertyRef;\r\n    })(EdmItemBase);\r\n    Edm.PropertyRef = PropertyRef;\r\n    var Key = (function (_super) {\r\n        __extends(Key, _super);\r\n        function Key() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"propertyRef\", function (prop, i) { return new PropertyRef(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Key.prototype, \"propertyRefs\", void 0);\r\n        return Key;\r\n    })(EdmItemBase);\r\n    Edm.Key = Key;\r\n    var EntityType = (function (_super) {\r\n        __extends(EntityType, _super);\r\n        function EntityType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.key; }, function (props, i) { return props || []; }, function (props, i) { return props.map(function (prop) { return new Key(prop, i); }); }, function (props) { return props[0]; })), \r\n            __metadata('design:type', Key)\r\n        ], EntityType.prototype, \"key\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"navigationProperties\", void 0);\r\n        return EntityType;\r\n    })(EdmItemBase);\r\n    Edm.EntityType = EntityType;\r\n    var ComplexType = (function (_super) {\r\n        __extends(ComplexType, _super);\r\n        function ComplexType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"navigationProperties\", void 0);\r\n        return ComplexType;\r\n    })(EdmItemBase);\r\n    Edm.ComplexType = ComplexType;\r\n    var Parameter = (function (_super) {\r\n        __extends(Parameter, _super);\r\n        function Parameter() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"SRID\", void 0);\r\n        return Parameter;\r\n    })(EdmItemBase);\r\n    Edm.Parameter = Parameter;\r\n    var ReturnType = (function (_super) {\r\n        __extends(ReturnType, _super);\r\n        function ReturnType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReturnType.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], ReturnType.prototype, \"nullable\", void 0);\r\n        return ReturnType;\r\n    })(EdmItemBase);\r\n    Edm.ReturnType = ReturnType;\r\n    var Invokable = (function (_super) {\r\n        __extends(Invokable, _super);\r\n        function Invokable() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        return Invokable;\r\n    })(EdmItemBase);\r\n    Edm.Invokable = Invokable;\r\n    var Action = (function (_super) {\r\n        __extends(Action, _super);\r\n        function Action() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Action.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Action.prototype, \"returnType\", void 0);\r\n        return Action;\r\n    })(Invokable);\r\n    Edm.Action = Action;\r\n    var Function = (function (_super) {\r\n        __extends(Function, _super);\r\n        function Function() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Function.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isComposable\", void 0);\r\n        return Function;\r\n    })(Invokable);\r\n    Edm.Function = Function;\r\n    var Member = (function (_super) {\r\n        __extends(Member, _super);\r\n        function Member() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Member.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Member.prototype, \"value\", void 0);\r\n        return Member;\r\n    })(EdmItemBase);\r\n    Edm.Member = Member;\r\n    var EnumType = (function (_super) {\r\n        __extends(EnumType, _super);\r\n        function EnumType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(Edm.Int32), \r\n            __metadata('design:type', PrimitiveType)\r\n        ], EnumType.prototype, \"underlyingType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EnumType.prototype, \"isFlags\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"member\", function (prop, i) { return new Member(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"members\", void 0);\r\n        return EnumType;\r\n    })(EdmItemBase);\r\n    Edm.EnumType = EnumType;\r\n    var EntitySet = (function (_super) {\r\n        __extends(EntitySet, _super);\r\n        function EntitySet() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"entityType\", void 0);\r\n        return EntitySet;\r\n    })(EdmItemBase);\r\n    Edm.EntitySet = EntitySet;\r\n    var ActionImport = (function (_super) {\r\n        __extends(ActionImport, _super);\r\n        function ActionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"action\", void 0);\r\n        return ActionImport;\r\n    })(EdmItemBase);\r\n    Edm.ActionImport = ActionImport;\r\n    var FunctionImport = (function (_super) {\r\n        __extends(FunctionImport, _super);\r\n        function FunctionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"function\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(false), \r\n            __metadata('design:type', Boolean)\r\n        ], FunctionImport.prototype, \"includeInServiceDocument\", void 0);\r\n        return FunctionImport;\r\n    })(EdmItemBase);\r\n    Edm.FunctionImport = FunctionImport;\r\n    var EntityContainer = (function (_super) {\r\n        __extends(EntityContainer, _super);\r\n        function EntityContainer() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityContainer.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entitySet\", function (prop, i) { return new EntitySet(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"entitySets\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"actionImport\", function (prop, i) { return new ActionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"actionImports\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"functionImport\", function (prop, i) { return new FunctionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"functionImports\", void 0);\r\n        return EntityContainer;\r\n    })(EdmItemBase);\r\n    Edm.EntityContainer = EntityContainer;\r\n    var Schema = (function (_super) {\r\n        __extends(Schema, _super);\r\n        function Schema() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"alias\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"enumType\", function (prop, i) { return new EnumType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"enumTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"complexType\", function (prop, i) { return new ComplexType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"complexTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityType\", function (prop, i) { return new EntityType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"action\", function (prop, i) { return new Action(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"actions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"function\", function (prop, i) { return new Edm.Function(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"functions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityContainer\", function (prop, i) { return new Edm.EntityContainer(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityContainer\", void 0);\r\n        return Schema;\r\n    })(EdmItemBase);\r\n    Edm.Schema = Schema;\r\n    var DataServices = (function (_super) {\r\n        __extends(DataServices, _super);\r\n        function DataServices() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"schema\", function (prop, i) { return new Schema(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], DataServices.prototype, \"schemas\", void 0);\r\n        return DataServices;\r\n    })(EdmItemBase);\r\n    Edm.DataServices = DataServices;\r\n    var Edmx = (function (_super) {\r\n        __extends(Edmx, _super);\r\n        function Edmx() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (edm) { return new Edm.DataServices(edm.dataServices); })), \r\n            __metadata('design:type', Array)\r\n        ], Edmx.prototype, \"dataServices\", void 0);\r\n        return Edmx;\r\n    })(EdmItemBase);\r\n    Edm.Edmx = Edmx;\r\n})(Edm = exports.Edm || (exports.Edm = {}));\r\n\n},{\"./metacode\":4}],4:[function(require,module,exports){\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../node_modules/reflect-metadata/reflect-metadata.d.ts\" />\r\nrequire('reflect-metadata');\r\nfunction isFunction(o) {\r\n    return \"function\" === typeof o;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === undefined;\r\n}\r\nvar MemberAttribute = (function () {\r\n    function MemberAttribute(attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n    MemberAttribute.prototype.registerMember = function (target, key) {\r\n        var md = (Reflect.getMetadata(\"members\", target) || []);\r\n        if (md.indexOf(key) < 0) {\r\n            md.push(key);\r\n        }\r\n        Reflect.defineMetadata(\"members\", md, target);\r\n    };\r\n    MemberAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        return presentedValue;\r\n    };\r\n    MemberAttribute.prototype.decorate = function (value) {\r\n        var _this = this;\r\n        return function (target, key, descriptor) {\r\n            _this.registerMember(target, key);\r\n            var decoratorValue = _this.getDecoratorValue(target, key, value);\r\n            //console.log(\"decorator runs\",key, this.attributeName, decoratorValue, value)\r\n            Reflect.defineMetadata(_this.attributeName, decoratorValue, target, key);\r\n        };\r\n    };\r\n    Object.defineProperty(MemberAttribute.prototype, \"decorator\", {\r\n        get: function () {\r\n            return this.decorate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MemberAttribute.prototype.isApplied = function (instance, memberName) {\r\n        return Reflect.getMetadataKeys(Object.getPrototypeOf(instance), memberName).indexOf(this.attributeName) > -1;\r\n    };\r\n    MemberAttribute.getMembers = function (target) {\r\n        return Reflect.getMetadata(\"members\", isFunction(target) ? target.prototype : target);\r\n    };\r\n    MemberAttribute.getAttributeNames = function (target, memberName) {\r\n        return Reflect.getMetadataKeys(target, memberName);\r\n    };\r\n    MemberAttribute.getAttributeValue = function (target, memberName, attributeName) {\r\n        return Reflect.getMetadata(attributeName, target, memberName);\r\n    };\r\n    return MemberAttribute;\r\n})();\r\nexports.MemberAttribute = MemberAttribute;\r\nvar AttributeFunctionChain = (function () {\r\n    function AttributeFunctionChain() {\r\n        var steps = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            steps[_i - 0] = arguments[_i];\r\n        }\r\n        this.steps = [];\r\n        this.steps = steps;\r\n    }\r\n    AttributeFunctionChain.prototype.invoke = function (definition, instance) {\r\n        var result = definition;\r\n        this.steps.forEach(function (fn) {\r\n            result = fn(result, instance);\r\n        });\r\n        return result;\r\n    };\r\n    return AttributeFunctionChain;\r\n})();\r\nexports.AttributeFunctionChain = AttributeFunctionChain;\r\nvar ParseAttribute = (function (_super) {\r\n    __extends(ParseAttribute, _super);\r\n    function ParseAttribute() {\r\n        _super.call(this, \"serialize\");\r\n    }\r\n    ParseAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        if (!isUndefined(presentedValue)) {\r\n            return presentedValue;\r\n        }\r\n        return new AttributeFunctionChain(function (d) { return d[key]; });\r\n    };\r\n    return ParseAttribute;\r\n})(MemberAttribute);\r\nexports.ParseAttribute = ParseAttribute;\r\nexports.required = new MemberAttribute(\"required\").decorate(true);\r\nexports.defaultValueAttribute = new MemberAttribute(\"defaultValue\");\r\nexports.defaultValue = exports.defaultValueAttribute.decorate.bind(exports.defaultValueAttribute);\r\nexports.parseAttribute = new ParseAttribute();\r\nexports.parse = exports.parseAttribute.decorator;\r\nexports.parseAs = exports.parseAttribute.decorate.bind(exports.parseAttribute);\r\nexports.typeArgument = new MemberAttribute(\"typeArgument\");\r\n\n},{\"reflect-metadata\":6}],5:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],6:[function(require,module,exports){\n(function (global){\n/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\nvar Reflect;\r\n(function (Reflect) {\r\n    \"use strict\";\r\n    // Load global or shim versions of Map, Set, and WeakMap\r\n    var functionPrototype = Object.getPrototypeOf(Function);\r\n    var _Map = typeof Map === \"function\" ? Map : CreateMapPolyfill();\r\n    var _Set = typeof Set === \"function\" ? Set : CreateSetPolyfill();\r\n    var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n    // [[Metadata]] internal slot\r\n    var __Metadata__ = new _WeakMap();\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param targetKey (Optional) The property key to decorate.\r\n      * @param targetDescriptor (Optional) The property descriptor for the target key\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     C = Reflect.decorate(decoratorsArray, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(C, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, C, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(C, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(C.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, C.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(C.prototype, \"method\")));\r\n      *\r\n      */\r\n    function decorate(decorators, target, targetKey, targetDescriptor) {\r\n        if (!IsUndefined(targetDescriptor)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (IsUndefined(targetKey)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(targetDescriptor)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);\r\n        }\r\n        else {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsConstructor(target)) {\r\n                throw new TypeError();\r\n            }\r\n            return DecorateConstructor(decorators, target);\r\n        }\r\n    }\r\n    Reflect.decorate = decorate;\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class C {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    function metadata(metadataKey, metadataValue) {\r\n        function decorator(target, targetKey) {\r\n            if (!IsUndefined(targetKey)) {\r\n                if (!IsObject(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                targetKey = ToPropertyKey(targetKey);\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n            }\r\n            else {\r\n                if (!IsConstructor(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);\r\n            }\r\n        }\r\n        return decorator;\r\n    }\r\n    Reflect.metadata = metadata;\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): Decorator {\r\n      *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    function defineMetadata(metadataKey, metadataValue, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n    }\r\n    Reflect.defineMetadata = defineMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasMetadata = hasMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasOwnMetadata = hasOwnMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getMetadata = getMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadata = getOwnMetadata;\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getMetadataKeys = getMetadataKeys;\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryOwnMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function deleteMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        if (IsUndefined(metadataMap)) {\r\n            return false;\r\n        }\r\n        if (!metadataMap.delete(metadataKey)) {\r\n            return false;\r\n        }\r\n        if (metadataMap.size > 0) {\r\n            return true;\r\n        }\r\n        var targetMetadata = __Metadata__.get(target);\r\n        targetMetadata.delete(targetKey);\r\n        if (targetMetadata.size > 0) {\r\n            return true;\r\n        }\r\n        __Metadata__.delete(target);\r\n        return true;\r\n    }\r\n    Reflect.deleteMetadata = deleteMetadata;\r\n    function DecorateConstructor(decorators, target) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsConstructor(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                target = decorated;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target, propertyKey, descriptor);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsObject(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                descriptor = decorated;\r\n            }\r\n        }\r\n        return descriptor;\r\n    }\r\n    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            decorator(target, propertyKey);\r\n        }\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-\r\n    function GetOrCreateMetadataMap(target, targetKey, create) {\r\n        var targetMetadata = __Metadata__.get(target);\r\n        if (!targetMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            targetMetadata = new _Map();\r\n            __Metadata__.set(target, targetMetadata);\r\n        }\r\n        var keyMetadata = targetMetadata.get(targetKey);\r\n        if (!keyMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            keyMetadata = new _Map();\r\n            targetMetadata.set(targetKey, keyMetadata);\r\n        }\r\n        return keyMetadata;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-\r\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return true;\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n        }\r\n        return false;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-\r\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return false;\r\n        }\r\n        return Boolean(metadataMap.has(MetadataKey));\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-\r\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n        }\r\n        return undefined;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-\r\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return undefined;\r\n        }\r\n        return metadataMap.get(MetadataKey);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-\r\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);\r\n        metadataMap.set(MetadataKey, MetadataValue);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-\r\n    function OrdinaryMetadataKeys(O, P) {\r\n        var ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent === null) {\r\n            return ownKeys;\r\n        }\r\n        var parentKeys = OrdinaryMetadataKeys(parent, P);\r\n        if (parentKeys.length <= 0) {\r\n            return ownKeys;\r\n        }\r\n        if (ownKeys.length <= 0) {\r\n            return parentKeys;\r\n        }\r\n        var set = new _Set();\r\n        var keys = [];\r\n        for (var _i = 0; _i < ownKeys.length; _i++) {\r\n            var key = ownKeys[_i];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (var _a = 0; _a < parentKeys.length; _a++) {\r\n            var key = parentKeys[_a];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-\r\n    function OrdinaryOwnMetadataKeys(target, targetKey) {\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        var keys = [];\r\n        if (metadataMap) {\r\n            metadataMap.forEach(function (_, key) { return keys.push(key); });\r\n        }\r\n        return keys;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type\r\n    function IsUndefined(x) {\r\n        return x === undefined;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\r\n    function IsArray(x) {\r\n        return Array.isArray(x);\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type\r\n    function IsObject(x) {\r\n        return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\r\n    function IsConstructor(x) {\r\n        return typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type\r\n    function IsSymbol(x) {\r\n        return typeof x === \"symbol\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\r\n    function ToPropertyKey(value) {\r\n        if (IsSymbol(value)) {\r\n            return value;\r\n        }\r\n        return String(value);\r\n    }\r\n    function GetPrototypeOf(O) {\r\n        var proto = Object.getPrototypeOf(O);\r\n        if (typeof O !== \"function\" || O === functionPrototype) {\r\n            return proto;\r\n        }\r\n        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. \r\n        // Try to determine the superclass constructor. Compatible implementations\r\n        // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n        // or ensure each class has a valid `constructor` property on its prototype that\r\n        // points back to the constructor.\r\n        // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n        // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n        if (proto !== functionPrototype) {\r\n            return proto;\r\n        }\r\n        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n        var prototype = O.prototype;\r\n        var prototypeProto = Object.getPrototypeOf(prototype);\r\n        if (prototypeProto == null || prototypeProto === Object.prototype) {\r\n            return proto;\r\n        }\r\n        // if the constructor was not a function, then we cannot determine the heritage.\r\n        var constructor = prototypeProto.constructor;\r\n        if (typeof constructor !== \"function\") {\r\n            return proto;\r\n        }\r\n        // if we have some kind of self-reference, then we cannot determine the heritage.\r\n        if (constructor === O) {\r\n            return proto;\r\n        }\r\n        // we have a pretty good guess at the heritage.\r\n        return constructor;\r\n    }\r\n    // naive Map shim\r\n    function CreateMapPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Map() {\r\n            this._keys = [];\r\n            this._values = [];\r\n            this._cache = cacheSentinel;\r\n        }\r\n        Map.prototype = {\r\n            get size() {\r\n                return this._keys.length;\r\n            },\r\n            has: function (key) {\r\n                if (key === this._cache) {\r\n                    return true;\r\n                }\r\n                if (this._find(key) >= 0) {\r\n                    this._cache = key;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._cache = key;\r\n                    return this._values[index];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (key, value) {\r\n                this.delete(key);\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n                this._cache = key;\r\n                return this;\r\n            },\r\n            delete: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._keys.splice(index, 1);\r\n                    this._values.splice(index, 1);\r\n                    this._cache = cacheSentinel;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                this._keys.length = 0;\r\n                this._values.length = 0;\r\n                this._cache = cacheSentinel;\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                var size = this.size;\r\n                for (var i = 0; i < size; ++i) {\r\n                    var key = this._keys[i];\r\n                    var value = this._values[i];\r\n                    this._cache = key;\r\n                    callback.call(this, value, key, this);\r\n                }\r\n            },\r\n            _find: function (key) {\r\n                var keys = this._keys;\r\n                var size = keys.length;\r\n                for (var i = 0; i < size; ++i) {\r\n                    if (keys[i] === key) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n        };\r\n        return Map;\r\n    }\r\n    // naive Set shim\r\n    function CreateSetPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Set() {\r\n            this._map = new _Map();\r\n        }\r\n        Set.prototype = {\r\n            get size() {\r\n                return this._map.length;\r\n            },\r\n            has: function (value) {\r\n                return this._map.has(value);\r\n            },\r\n            add: function (value) {\r\n                this._map.set(value, value);\r\n                return this;\r\n            },\r\n            delete: function (value) {\r\n                return this._map.delete(value);\r\n            },\r\n            clear: function () {\r\n                this._map.clear();\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                this._map.forEach(callback, thisArg);\r\n            }\r\n        };\r\n        return Set;\r\n    }\r\n    // naive WeakMap shim\r\n    function CreateWeakMapPolyfill() {\r\n        var UUID_SIZE = 16;\r\n        var isNode = typeof global !== \"undefined\" && Object.prototype.toString.call(global.process) === '[object process]';\r\n        var nodeCrypto = isNode && require(\"crypto\");\r\n        var hasOwn = Object.prototype.hasOwnProperty;\r\n        var keys = {};\r\n        var rootKey = CreateUniqueKey();\r\n        function WeakMap() {\r\n            this._key = CreateUniqueKey();\r\n        }\r\n        WeakMap.prototype = {\r\n            has: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return this._key in table;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return table[this._key];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (target, value) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ true);\r\n                table[this._key] = value;\r\n                return this;\r\n            },\r\n            delete: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table && this._key in table) {\r\n                    return delete table[this._key];\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                // NOTE: not a real clear, just makes the previous data unreachable\r\n                this._key = CreateUniqueKey();\r\n            }\r\n        };\r\n        function FillRandomBytes(buffer, size) {\r\n            for (var i = 0; i < size; ++i) {\r\n                buffer[i] = Math.random() * 255 | 0;\r\n            }\r\n        }\r\n        function GenRandomBytes(size) {\r\n            if (nodeCrypto) {\r\n                var data = nodeCrypto.randomBytes(size);\r\n                return data;\r\n            }\r\n            else if (typeof Uint8Array === \"function\") {\r\n                var data = new Uint8Array(size);\r\n                if (typeof crypto !== \"undefined\") {\r\n                    crypto.getRandomValues(data);\r\n                }\r\n                else if (typeof msCrypto !== \"undefined\") {\r\n                    msCrypto.getRandomValues(data);\r\n                }\r\n                else {\r\n                    FillRandomBytes(data, size);\r\n                }\r\n                return data;\r\n            }\r\n            else {\r\n                var data = new Array(size);\r\n                FillRandomBytes(data, size);\r\n                return data;\r\n            }\r\n        }\r\n        function CreateUUID() {\r\n            var data = GenRandomBytes(UUID_SIZE);\r\n            // mark as random - RFC 4122 § 4.4\r\n            data[6] = data[6] & 0x4f | 0x40;\r\n            data[8] = data[8] & 0xbf | 0x80;\r\n            var result = \"\";\r\n            for (var offset = 0; offset < UUID_SIZE; ++offset) {\r\n                var byte = data[offset];\r\n                if (offset === 4 || offset === 6 || offset === 8) {\r\n                    result += \"-\";\r\n                }\r\n                if (byte < 16) {\r\n                    result += \"0\";\r\n                }\r\n                result += byte.toString(16).toLowerCase();\r\n            }\r\n            return result;\r\n        }\r\n        function CreateUniqueKey() {\r\n            var key;\r\n            do {\r\n                key = \"@@WeakMap@@\" + CreateUUID();\r\n            } while (hasOwn.call(keys, key));\r\n            keys[key] = true;\r\n            return key;\r\n        }\r\n        function GetOrCreateWeakMapTable(target, create) {\r\n            if (!hasOwn.call(target, rootKey)) {\r\n                if (!create) {\r\n                    return undefined;\r\n                }\r\n                Object.defineProperty(target, rootKey, { value: Object.create(null) });\r\n            }\r\n            return target[rootKey];\r\n        }\r\n        return WeakMap;\r\n    }\r\n    // hook global Reflect\r\n    (function (__global) {\r\n        if (typeof __global.Reflect !== \"undefined\") {\r\n            if (__global.Reflect !== Reflect) {\r\n                for (var p in Reflect) {\r\n                    __global.Reflect[p] = Reflect[p];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            __global.Reflect = Reflect;\r\n        }\r\n    })(typeof window !== \"undefined\" ? window :\r\n        typeof WorkerGlobalScope !== \"undefined\" ? self :\r\n            typeof global !== \"undefined\" ? global :\r\n                Function(\"return this;\")());\r\n})(Reflect || (Reflect = {}));\r\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"crypto\":2}],7:[function(require,module,exports){\nmodule.exports={\r\n  \"name\": \"jaydata\",\r\n  \"description\": \"Cross-platform HTML5 data-management, JavaScript Language Query (JSLQ) support for OData, SQLite, WebSQL, IndexedDB, YQL and Facebook (packaged for Node.JS)\",\r\n  \"keywords\": [\r\n    \"HTML5 data management\",\r\n    \"JavaScript\",\r\n    \"JavaScript Language Query\",\r\n    \"JSLQ\",\r\n    \"OData\",\r\n    \"SQLite\",\r\n    \"WebSQL\",\r\n    \"IndexedDB\",\r\n    \"YQL\",\r\n    \"Facebook\",\r\n    \"cross-platform\",\r\n    \"iPhone\",\r\n    \"Android\"\r\n  ],\r\n  \"version\": \"1.5.0\",\r\n  \"homepage\": \"http://jaydata.org\",\r\n  \"author\": {\r\n    \"name\": \"JayData\",\r\n    \"url\": \"http://jaydata.org\"\r\n  },\r\n  \"dependencies\": {\r\n    \"acorn\": \"^2.6.4\",\r\n    \"atob\": \"^2.0.0\",\r\n    \"btoa\": \"^1.1.2\",\r\n    \"dot\": \"^1.0.3\",\r\n    \"odata-metadata\": \"^0.1.0\",\r\n    \"jaydata-odatajs\": \"^4.0.0\",\r\n    \"xmldom\": \"^0.1.19\"\r\n  },\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Dániel József\"\r\n    },\r\n    {\r\n      \"name\": \"Hajnalka Battancs\"\r\n    },\r\n    {\r\n      \"name\": \"János Roden\"\r\n    },\r\n    {\r\n      \"name\": \"László Horváth\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Zentai\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Nochta\"\r\n    },\r\n    {\r\n      \"name\": \"Róbert Bónay\"\r\n    },\r\n    {\r\n      \"name\": \"Szabolcs Czinege\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Borza\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Lázár\"\r\n    },\r\n    {\r\n      \"name\": \"Zoltán Gyebrovszki\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/jaydata/jaydata.git\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=0.6.0\"\r\n  },\r\n  \"license\": \"(MIT OR GPL-2.0)\",\r\n  \"devDependencies\": {\r\n    \"babel\": \"^6.1.18\",\r\n    \"babel-eslint\": \"^5.0.0-beta4\",\r\n    \"babel-plugin-add-module-exports\": \"^0.1.1\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-register\": \"^6.2.0\",\r\n    \"babelify\": \"^7.2.0\",\r\n    \"browserify\": \"^12.0.1\",\r\n    \"browserify-derequire\": \"^0.9.4\",\r\n    \"browserify-shim\": \"^3.8.11\",\r\n    \"chai\": \"^3.4.1\",\r\n    \"del\": \"^2.2.0\",\r\n    \"google-closure-compiler\": \"^20151015.0.0\",\r\n    \"gulp\": \"^3.9.0\",\r\n    \"gulp-babel\": \"^6.1.1\",\r\n    \"gulp-browserify\": \"^0.5.1\",\r\n    \"gulp-closure-compiler\": \"^0.3.1\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-derequire\": \"^2.1.0\",\r\n    \"gulp-eslint\": \"^1.1.1\",\r\n    \"gulp-footer\": \"^1.0.5\",\r\n    \"gulp-header\": \"^1.7.1\",\r\n    \"gulp-nightwatch\": \"^0.2.6\",\r\n    \"gulp-nuget-pack\": \"0.0.6\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-replace\": \"^0.5.4\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-uglify\": \"^1.5.1\",\r\n    \"gulp-vinyl-zip\": \"^1.1.2\",\r\n    \"gulp-webserver\": \"^0.9.1\",\r\n    \"istanbul\": \"^0.4.1\",\r\n    \"jaguarjs-jsdoc\": \"0.0.1\",\r\n    \"jsdoc\": \"^3.4.0\",\r\n    \"minimist\": \"^1.2.0\",\r\n    \"nightwatch\": \"^0.8.8\",\r\n    \"npm\": \"^3.5.2\",\r\n    \"selenium-standalone\": \"^4.7.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"^1.1.0\",\r\n    \"yargs\": \"^3.31.0\"\r\n  },\r\n  \"browserify\": {\r\n    \"transform\": [\r\n      \"browserify-shim\"\r\n    ]\r\n  },\r\n  \"browserify-shim\": {\r\n    \"atob\": \"global:atob\",\r\n    \"btoa\": \"global:btoa\",\r\n    \"jQuery\": \"global:jQuery\",\r\n    \"jaydata-odatajs\": \"global:odatajs\",\r\n    \"angular\": \"global:angular\",\r\n    \"Handlebars\": \"global:Handlebars\",\r\n    \"kendo\": \"global:kendo\",\r\n    \"ko\": \"global:ko\",\r\n    \"q\": \"global:Q\",\r\n    \"Ext\": \"global:Ext\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"mocha --compilers js:babel-register\"\r\n  }\r\n}\r\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar jQuery = _index2.default.__global['jQuery'];\n\n(function ($data) {\n    if (typeof jQuery !== 'undefined') {\n        $data.Class.define('$data.Deferred', $data.PromiseHandlerBase, null, {\n            constructor: function constructor() {\n                this.deferred = new jQuery.Deferred();\n            },\n            deferred: {},\n            createCallback: function createCallback(callBack) {\n                callBack = $data.typeSystem.createCallbackSetting(callBack);\n                var self = this;\n\n                return {\n                    success: function success() {\n                        callBack.success.apply(self.deferred, arguments);\n                        self.deferred.resolve.apply(self.deferred, arguments);\n                    },\n                    error: function error() {\n                        Array.prototype.push.call(arguments, self.deferred);\n                        callBack.error.apply(self.deferred, arguments);\n                    },\n                    notify: function notify() {\n                        callBack.notify.apply(self.deferred, arguments);\n                        self.deferred.notify.apply(self.deferred, arguments);\n                    }\n                };\n            },\n            getPromise: function getPromise() {\n                return this.deferred.promise();\n            }\n        }, null);\n\n        $data.PromiseHandler = $data.Deferred;\n    }\n})(_index2.default);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],9:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Metadata = undefined;\n\nvar _index = require(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar containsField = function containsField(obj, field, cb) {\n    // if (field in (obj || {})) {\n    //     cb(obj[field])\n    // }\n    if (obj && field in obj && typeof obj[field] !== \"undefined\") {\n        cb(obj[field]);\n    }\n};\n\nvar parsebool = function parsebool(b, d) {\n    if (\"boolean\" === typeof b) {\n        return b;\n    }\n    switch (b) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            return d;\n    }\n};\n\nvar _collectionRegex = /^Collection\\((.*)\\)$/;\n\nvar Metadata = exports.Metadata = function () {\n    function Metadata(options, metadata) {\n        _classCallCheck(this, Metadata);\n\n        this.options = options || {};\n        this.metadata = metadata;\n        this.options.container = _index.Container; //this.options.container || $data.createContainer()\n    }\n\n    _createClass(Metadata, [{\n        key: \"_getMaxValue\",\n        value: function _getMaxValue(maxValue) {\n            if (\"number\" === typeof maxValue) return maxValue;\n            if (\"max\" === maxValue) return Number.MAX_VALUE;\n            return parseInt(maxValue);\n        }\n    }, {\n        key: \"createTypeDefinition\",\n        value: function createTypeDefinition(propertySchema, definition) {\n            var _this = this;\n\n            containsField(propertySchema, \"type\", function (v) {\n                var match = _collectionRegex.exec(v);\n                if (match) {\n                    definition.type = _this.options.collectionBaseType || 'Array';\n                    definition.elementType = match[1];\n                } else {\n                    definition.type = v;\n                }\n            });\n        }\n    }, {\n        key: \"createReturnTypeDefinition\",\n        value: function createReturnTypeDefinition(propertySchema, definition) {\n            containsField(propertySchema, \"type\", function (v) {\n                var match = _collectionRegex.exec(v);\n                if (match) {\n                    definition.returnType = _index2.default.Queryable;\n                    definition.elementType = match[1];\n                } else {\n                    definition.returnType = v;\n                }\n            });\n        }\n    }, {\n        key: \"createProperty\",\n        value: function createProperty(entitySchema, propertySchema) {\n            var _this2 = this;\n\n            if (!propertySchema) {\n                propertySchema = entitySchema;\n                entitySchema = undefined;\n            }\n\n            var definition = {};\n\n            this.createTypeDefinition(propertySchema, definition);\n\n            containsField(propertySchema, \"nullable\", function (v) {\n                definition.nullable = parsebool(v, true), definition.required = parsebool(v, true) === false;\n            });\n\n            containsField(propertySchema, \"maxLength\", function (v) {\n                definition.maxLength = _this2._getMaxValue(v);\n            });\n\n            containsField(entitySchema, \"key\", function (keys) {\n                if (keys.propertyRefs.some(function (pr) {\n                    return pr.name === propertySchema.name;\n                })) {\n                    definition.key = true;\n                }\n            });\n\n            containsField(propertySchema, \"concurrencyMode\", function (v) {\n                definition.concurrencyMode = _index2.default.ConcurrencyMode[v];\n            });\n\n            return {\n                name: propertySchema.name,\n                definition: definition\n            };\n        }\n    }, {\n        key: \"createNavigationProperty\",\n        value: function createNavigationProperty(entitySchema, propertySchema) {\n            if (!propertySchema) {\n                propertySchema = entitySchema;\n                entitySchema = undefined;\n            }\n\n            var definition = {};\n\n            this.createTypeDefinition(propertySchema, definition);\n\n            containsField(propertySchema, \"nullable\", function (v) {\n                definition.nullable = parsebool(v, true), definition.required = parsebool(v, true) === false;\n            });\n\n            containsField(propertySchema, \"partner\", function (p) {\n                definition.inverseProperty = p;\n            });\n\n            if (!definition.inverseProperty) {\n                definition.inverseProperty = '$$unbound';\n            }\n\n            return {\n                name: propertySchema.name,\n                definition: definition\n            };\n        }\n    }, {\n        key: \"createEntityDefinition\",\n        value: function createEntityDefinition(entitySchema) {\n            var props = (entitySchema.properties || []).map(this.createProperty.bind(this, entitySchema));\n            var navigationProps = (entitySchema.navigationProperties || []).map(this.createNavigationProperty.bind(this, entitySchema));\n            props = props.concat(navigationProps);\n            var result = props.reduce(function (p, c) {\n                p[c.name] = c.definition;\n                return p;\n            }, {});\n            return result;\n        }\n    }, {\n        key: \"createEntityType\",\n        value: function createEntityType(entitySchema, namespace) {\n            var baseType = (entitySchema.baseType ? entitySchema.baseType : this.options.baseType) || _index2.default.Entity;\n            var definition = this.createEntityDefinition(entitySchema);\n            var entityFullName = namespace + \".\" + entitySchema.name;\n\n            var staticDefinition = {};\n\n            containsField(entitySchema, \"openType\", function (v) {\n                if (parsebool(v, false)) {\n                    staticDefinition.openType = { value: true };\n                }\n            });\n\n            return {\n                namespace: namespace,\n                typeName: entityFullName,\n                baseType: baseType,\n                params: [entityFullName, this.options.container, definition, staticDefinition],\n                definition: definition,\n                type: 'entity'\n            };\n        }\n    }, {\n        key: \"createEnumOption\",\n        value: function createEnumOption(entitySchema, propertySchema, i) {\n            if (!propertySchema) {\n                propertySchema = entitySchema;\n                entitySchema = undefined;\n            }\n\n            var definition = {\n                name: propertySchema.name,\n                index: i\n            };\n\n            containsField(entitySchema, \"value\", function (value) {\n                var v = +value;\n                if (!isNaN(v)) {\n                    definition.value = v;\n                }\n            });\n\n            return definition;\n        }\n    }, {\n        key: \"createEnumDefinition\",\n        value: function createEnumDefinition(enumSchema) {\n            var props = (enumSchema.members || []).map(this.createEnumOption.bind(this, enumSchema));\n            return props;\n        }\n    }, {\n        key: \"createEnumType\",\n        value: function createEnumType(enumSchema, namespace) {\n            var definition = this.createEnumDefinition(enumSchema);\n            var enumFullName = namespace + \".\" + enumSchema.name;\n\n            return {\n                namespace: namespace,\n                typeName: enumFullName,\n                baseType: _index2.default.Enum,\n                params: [enumFullName, this.options.container, enumSchema.underlyingType, definition],\n                definition: definition,\n                type: 'enum'\n            };\n        }\n    }, {\n        key: \"createEntitySetProperty\",\n        value: function createEntitySetProperty(entitySetSchema, contextSchema) {\n            //var c = this.options.container\n            var t = entitySetSchema.entityType; //c.classTypes[c.classNames[entitySetSchema.entityType]] // || entitySetSchema.entityType\n            var prop = {\n                name: entitySetSchema.name,\n                definition: {\n                    type: this.options.entitySetType || _index2.default.EntitySet,\n                    elementType: t\n                }\n            };\n            return prop;\n        }\n    }, {\n        key: \"indexBy\",\n        value: function indexBy(fieldName, pick) {\n            return [function (p, c) {\n                p[c[fieldName]] = c[pick];return p;\n            }, {}];\n        }\n    }, {\n        key: \"createContextDefinition\",\n        value: function createContextDefinition(contextSchema, namespace) {\n            var _this3 = this;\n\n            var props = (contextSchema.entitySets || []).map(function (es) {\n                return _this3.createEntitySetProperty(es, contextSchema);\n            });\n\n            var result = props.reduce.apply(props, _toConsumableArray(this.indexBy(\"name\", \"definition\")));\n            return result;\n        }\n    }, {\n        key: \"createContextType\",\n        value: function createContextType(contextSchema, namespace) {\n            if (Array.isArray(contextSchema)) {\n                throw new Error(\"Array type is not supported here\");\n            }\n            var definition = this.createContextDefinition(contextSchema, namespace);\n            var baseType = this.options.contextType || _index2.default.EntityContext;\n            var typeName = namespace + \".\" + contextSchema.name;\n            var contextImportMethods = [];\n            contextSchema.actionImports && contextImportMethods.push.apply(contextImportMethods, _toConsumableArray(contextSchema.actionImports));\n            contextSchema.functionImports && contextImportMethods.push.apply(contextImportMethods, _toConsumableArray(contextSchema.functionImports));\n\n            return {\n                namespace: namespace,\n                typeName: typeName,\n                baseType: baseType,\n                params: [typeName, this.options.container, definition],\n                definition: definition,\n                type: 'context',\n                contextImportMethods: contextImportMethods\n            };\n        }\n    }, {\n        key: \"createMethodParameter\",\n        value: function createMethodParameter(parameter, definition) {\n            var paramDef = {\n                name: parameter.name\n            };\n\n            this.createTypeDefinition(parameter, paramDef);\n\n            definition.params.push(paramDef);\n        }\n    }, {\n        key: \"applyBoundMethod\",\n        value: function applyBoundMethod(actionInfo, ns, typeDefinitions, type) {\n            var _this4 = this;\n\n            var definition = {\n                type: type,\n                namespace: ns,\n                returnType: null,\n                params: []\n            };\n\n            containsField(actionInfo, \"returnType\", function (value) {\n                _this4.createReturnTypeDefinition(value, definition);\n            });\n\n            var parameters = [].concat(actionInfo.parameters);\n            parameters.forEach(function (p) {\n                return _this4.createMethodParameter(p, definition);\n            });\n\n            if (parsebool(actionInfo.isBound, false)) {\n                (function () {\n                    var bindingParameter = definition.params.shift();\n\n                    if (bindingParameter.type === (_this4.options.collectionBaseType || 'Array')) {\n                        var filteredContextDefinitions = typeDefinitions.filter(function (d) {\n                            return d.namespace === ns && d.type === 'context';\n                        });\n                        filteredContextDefinitions.forEach(function (ctx) {\n                            for (var setName in ctx.definition) {\n                                var set = ctx.definition[setName];\n                                if (set.elementType === bindingParameter.elementType) {\n                                    set.actions = set.actions = {};\n                                    set.actions[actionInfo.name] = definition;\n                                }\n                            }\n                        });\n                    } else {\n                        var filteredTypeDefinitions = typeDefinitions.filter(function (d) {\n                            return d.typeName === bindingParameter.type && d.type === 'entity';\n                        });\n                        filteredTypeDefinitions.forEach(function (t) {\n                            t.definition[actionInfo.name] = definition;\n                        });\n                    }\n                })();\n            } else {\n                (function () {\n                    delete definition.namespace;\n\n                    var methodFullName = ns + '.' + actionInfo.name;\n                    var filteredContextDefinitions = typeDefinitions.filter(function (d) {\n                        return d.type === 'context';\n                    });\n                    filteredContextDefinitions.forEach(function (ctx) {\n                        ctx.contextImportMethods.forEach(function (methodImportInfo) {\n                            if (methodImportInfo.action === methodFullName || methodImportInfo.function === methodFullName) {\n                                ctx.definition[actionInfo.name] = definition;\n                            }\n                        });\n                    });\n                })();\n            }\n        }\n    }, {\n        key: \"processMetadata\",\n        value: function processMetadata(createdTypes) {\n            var _this5 = this;\n\n            var types = createdTypes || [];\n            var typeDefinitions = [];\n            var serviceMethods = [];\n\n            this.metadata.dataServices.schemas.forEach(function (schema) {\n                var ns = schema.namespace;\n\n                if (schema.enumTypes) {\n                    var enumTypes = schema.enumTypes.map(function (ct) {\n                        return _this5.createEnumType(ct, ns);\n                    });\n                    typeDefinitions.push.apply(typeDefinitions, _toConsumableArray(enumTypes));\n                }\n\n                if (schema.complexTypes) {\n                    var complexTypes = schema.complexTypes.map(function (ct) {\n                        return _this5.createEntityType(ct, ns);\n                    });\n                    typeDefinitions.push.apply(typeDefinitions, _toConsumableArray(complexTypes));\n                }\n\n                if (schema.entityTypes) {\n                    var entityTypes = schema.entityTypes.map(function (et) {\n                        return _this5.createEntityType(et, ns);\n                    });\n                    typeDefinitions.push.apply(typeDefinitions, _toConsumableArray(entityTypes));\n                }\n\n                if (schema.actions) {\n                    serviceMethods.push.apply(serviceMethods, _toConsumableArray(schema.actions.map(function (m) {\n                        return function (defs) {\n                            return _this5.applyBoundMethod(m, ns, defs, _index2.default.ServiceAction);\n                        };\n                    })));\n                }\n\n                if (schema.functions) {\n                    serviceMethods.push.apply(serviceMethods, _toConsumableArray(schema.functions.map(function (m) {\n                        return function (defs) {\n                            return _this5.applyBoundMethod(m, ns, defs, _index2.default.ServiceFunction);\n                        };\n                    })));\n                }\n\n                if (schema.entityContainer) {\n                    var contexts = schema.entityContainer.map(function (ctx) {\n                        return _this5.createContextType(ctx, ns);\n                    });\n                    typeDefinitions.push.apply(typeDefinitions, _toConsumableArray(contexts));\n                }\n            });\n\n            serviceMethods.forEach(function (m) {\n                return m(typeDefinitions);\n            });\n\n            types.push.apply(types, _toConsumableArray(typeDefinitions.map(function (d) {\n\n                if (_this5.options.debug) {\n                    console.log('---------------');\n                    console.log('    ' + d.params[0] + \" : \" + _this5.options.container.resolveName(d.baseType));\n                    d.params[2] && Object.keys(d.params[2]).forEach(function (dp) {\n                        console.log(dp + \": \" + JSON.stringify(d.params[2][dp]));\n                    });\n                    d.params[3] && Object.keys(d.params[3]).forEach(function (dp) {\n                        console.log(dp + \": \" + JSON.stringify(d.params[3][dp]));\n                    });\n                }\n\n                var baseType = _this5.options.container.resolveType(d.baseType);\n                return baseType.extend.apply(baseType, d.params);\n            })));\n\n            return types;\n        }\n    }, {\n        key: \"convertToSourceCode\",\n        value: function convertToSourceCode(done) {}\n    }]);\n\n    return Metadata;\n}();\n\n_index2.default.Metadata = Metadata;\n\n},{\"../TypeSystem/index.js\":28}],10:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.MetadataDownloader = undefined;\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _odataMetadata = require('odata-metadata');\n\nvar _Metadata = require('./Metadata.js');\n\nvar _jaydataOdatajs = (typeof window !== \"undefined\" ? window['odatajs'] : typeof global !== \"undefined\" ? global['odatajs'] : null);\n\nvar _jaydataOdatajs2 = _interopRequireDefault(_jaydataOdatajs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MetadataDownloader = exports.MetadataDownloader = function () {\n    function MetadataDownloader(options) {\n        _classCallCheck(this, MetadataDownloader);\n\n        this.options = options || {};\n        this.prepareRequest = options.prepareRequest || function () {};\n\n        if (typeof _jaydataOdatajs2.default === 'undefined' || typeof _jaydataOdatajs2.default.oData === 'undefined') {\n            _index.Guard.raise(new _index.Exception('odatajs is required', 'Not Found!'));\n        } else {\n            this.oData = _jaydataOdatajs2.default.oData;\n        }\n    }\n\n    _createClass(MetadataDownloader, [{\n        key: 'load',\n        value: function load(callBack) {\n            var _this = this;\n\n            var pHandler = new _index2.default.PromiseHandler();\n            callBack = pHandler.createCallback(callBack);\n\n            var serviceUrl = this.options.url.replace('/$metadata', '');\n            var metadataUrl = serviceUrl.replace(/\\/+$/, '') + '/$metadata';\n            this.options.SerivceUri = serviceUrl;\n\n            var requestData = [{\n                requestUri: metadataUrl,\n                method: this.options.method || \"GET\",\n                headers: this.options.headers || {}\n            }, function (data) {\n                var edmMetadata = new _odataMetadata.Edm.Edmx(data);\n                var metadata = new _Metadata.Metadata(_this.options, edmMetadata);\n                var types = metadata.processMetadata();\n\n                var contextType = types.filter(function (t) {\n                    return t.isAssignableTo(_index2.default.EntityContext);\n                })[0];\n\n                var factory = _this._createFactoryFunc(contextType);\n                factory.type = contextType;\n\n                callBack.success(factory);\n            }, callBack.error, this.oData.metadataHandler];\n\n            this._appendBasicAuth(requestData[0], this.options.user, this.options.password, this.options.withCredentials);\n\n            this.prepareRequest.call(this, requestData);\n\n            this.oData.request.apply(this.oData, requestData);\n\n            return pHandler.getPromise();\n        }\n    }, {\n        key: '_createFactoryFunc',\n        value: function _createFactoryFunc(ctxType) {\n            var _this2 = this;\n\n            return function (config) {\n                if (ctxType) {\n                    var cfg = _index2.default.typeSystem.extend({\n                        name: 'oData',\n                        oDataServiceHost: _this2.options.SerivceUri,\n                        user: _this2.options.user,\n                        password: _this2.options.password,\n                        withCredentials: _this2.options.withCredentials,\n                        maxDataServiceVersion: _this2.options.maxDataServiceVersion || '4.0'\n                    }, config);\n\n                    return new ctxType(cfg);\n                } else {\n                    return null;\n                }\n            };\n        }\n    }, {\n        key: '_appendBasicAuth',\n        value: function _appendBasicAuth(request, user, password, withCredentials) {\n            request.headers = request.headers || {};\n            if (!request.headers.Authorization && user && password) {\n                request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\n            }\n            if (withCredentials) {\n                request.withCredentials = withCredentials;\n            }\n        }\n    }, {\n        key: '__encodeBase64',\n        value: function __encodeBase64(val) {\n            var b64array = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\" + \"wxyz0123456789+/\" + \"=\";\n\n            var input = val;\n            var base64 = \"\";\n            var hex = \"\";\n            var chr1,\n                chr2,\n                chr3 = \"\";\n            var enc1,\n                enc2,\n                enc3,\n                enc4 = \"\";\n            var i = 0;\n\n            do {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n                enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                base64 = base64 + b64array.charAt(enc1) + b64array.charAt(enc2) + b64array.charAt(enc3) + b64array.charAt(enc4);\n                chr1 = chr2 = chr3 = \"\";\n                enc1 = enc2 = enc3 = enc4 = \"\";\n            } while (i < input.length);\n\n            return base64;\n        }\n    }]);\n\n    return MetadataDownloader;\n}();\n\n_index2.default.MetadataDownloader = MetadataDownloader;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../TypeSystem/index.js\":28,\"./Metadata.js\":9,\"odata-metadata\":3}],11:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.service = function (serviceUri, config, cb) {\n    var _url, _config, _callback;\n    function getParam(paramValue) {\n        switch (typeof paramValue === 'undefined' ? 'undefined' : _typeof(paramValue)) {\n            case 'object':\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\n                    _callback = paramValue;\n                } else {\n                    _config = paramValue;\n                }\n                break;\n            case 'function':\n                _callback = paramValue;\n                break;\n            default:\n                break;\n        }\n    }\n    getParam(config);\n    getParam(cb);\n\n    if ((typeof serviceUri === 'undefined' ? 'undefined' : _typeof(serviceUri)) === 'object') {\n        _config = _index2.default.typeSystem.extend(serviceUri, _config);\n    } else if (typeof serviceUri === \"string\") {\n        _config = _config || {};\n        _config.url = serviceUri;\n    }\n\n    var pHandler = new _index2.default.PromiseHandler();\n    _callback = pHandler.createCallback(_callback);\n\n    var downloader = new _index2.default.MetadataDownloader(_config);\n    downloader.load({\n        success: function success(factory) {\n            var type = factory.type;\n            //register to local store\n            if (_config) {\n                var storeAlias = _config.serviceName || _config.storeAlias;\n                if (storeAlias && 'addStore' in _index2.default) {\n                    _index2.default.addStore(storeAlias, factory, _config.isDefault === undefined || _config.isDefault);\n                }\n            }\n\n            _callback.success(factory, type);\n        },\n        error: _callback.error\n    });\n\n    return pHandler.getPromise();\n};\n\n_index2.default.initService = function (serviceUri, config, cb) {\n    var _config, _callback;\n    function getParam(paramValue) {\n        switch (typeof paramValue === 'undefined' ? 'undefined' : _typeof(paramValue)) {\n            case 'object':\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\n                    _callback = paramValue;\n                } else {\n                    _config = paramValue;\n                }\n                break;\n            case 'function':\n                _callback = paramValue;\n                break;\n            default:\n                break;\n        }\n    }\n    getParam(config);\n    getParam(cb);\n\n    var d = new _index2.default.PromiseHandler();\n    var clb = d.createCallback(_callback);\n\n    _index2.default.service(serviceUri, _config, {\n        success: function success(factory) {\n            var ctx = factory();\n            if (ctx) {\n                return ctx.onReady(clb);\n            }\n            return clb.error(new _index.Exception(\"Missing Context Type\"));\n        },\n        error: clb.error\n    });\n\n    return d.getPromise();\n};\n\n},{\"../TypeSystem/index.js\":28}],12:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('../Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _Metadata = require('./Metadata.js');\n\nvar _Metadata2 = _interopRequireDefault(_Metadata);\n\nvar _MetadataDownloader = require('./MetadataDownloader.js');\n\nvar _MetadataDownloader2 = _interopRequireDefault(_MetadataDownloader);\n\nvar _Service = require('./Service.js');\n\nvar _Service2 = _interopRequireDefault(_Service);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28,\"../Types/Expressions/index.js\":96,\"./Metadata.js\":9,\"./MetadataDownloader.js\":10,\"./Service.js\":11}],13:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContainerInstance = undefined;\nexports.ContainerCtor = ContainerCtor;\n\nvar _initializeJayData = require('./initializeJayData.js');\n\nvar _initializeJayData2 = _interopRequireDefault(_initializeJayData);\n\nvar _Exception = require('./Exception.js');\n\nvar _Exception2 = _interopRequireDefault(_Exception);\n\nvar _utils = require('./utils.js');\n\nvar _Extensions = require('./Extensions.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Container = new ContainerCtor();\n\nvar ContainerInstance = exports.ContainerInstance = Container;\n\nfunction ContainerCtor(parentContainer) {\n  var parent = parentContainer;\n  if (parent) {\n    parent.addChildContainer(this);\n  }\n\n  var classNames = {};\n  var consolidatedClassNames = [];\n  var classTypes = [];\n\n  this.classNames = classNames;\n  this.consolidatedClassNames = consolidatedClassNames;\n  this.classTypes = classTypes;\n\n  var mappedTo = [];\n  this.mappedTo = mappedTo;\n\n  var self = this;\n\n  this[\"holder\"] = null;\n\n  var IoC = function IoC(type, parameters) {\n    var t = self.resolveType(type);\n    var inst = Object.create(t.prototype);\n    t.apply(inst, parameters);\n    return inst;\n  };\n\n  var pendingResolutions = {};\n  this.pendingResolutions = pendingResolutions;\n\n  function addPendingResolution(name, onResolved) {\n    pendingResolutions[name] = pendingResolutions[name] || [];\n    pendingResolutions[name].push(onResolved);\n  }\n\n  this.addChildContainer = function (container) {\n    //children.push(container);\n  };\n\n  this.createInstance = function (type, parameters) {\n    return IoC(type, parameters);\n  };\n\n  this.mapType = function (aliasTypeOrName, realTypeOrName) {\n    _utils.Guard.requireValue(\"aliasType\", aliasTypeOrName);\n    _utils.Guard.requireValue(\"realType\", realTypeOrName);\n    var aliasT = this.getType(aliasTypeOrName);\n    var realT = this.getType(realTypeOrName);\n    var aliasPos = classTypes.indexOf(aliasT);\n    var realPos = classTypes.indexOf(realT);\n    mappedTo[aliasPos] = realPos;\n  },\n\n  //this.resolve = function (type, parameters) {\n  //    var classFunction = this.resolveType(type, parameters);\n  //    return new classFunction(parameters);\n  //};\n\n  this.isPrimitiveType = function (type) {\n    var t = this.resolveType(type);\n\n    switch (true) {\n      case t === Number:\n      case t === String:\n      case t === Date:\n      case t === Boolean:\n      case t === Array:\n      case t === Object:\n\n      case t === _initializeJayData2.default.Number:\n      case t === _initializeJayData2.default.Integer:\n      case t === _initializeJayData2.default.Date:\n      case t === _initializeJayData2.default.String:\n      case t === _initializeJayData2.default.Boolean:\n      case t === _initializeJayData2.default.Array:\n      case t === _initializeJayData2.default.Object:\n      case t === _initializeJayData2.default.Guid:\n\n      case t === _initializeJayData2.default.Byte:\n      case t === _initializeJayData2.default.SByte:\n      case t === _initializeJayData2.default.Decimal:\n      case t === _initializeJayData2.default.Float:\n      case t === _initializeJayData2.default.Int16:\n      case t === _initializeJayData2.default.Int32:\n      case t === _initializeJayData2.default.Int64:\n      case t === _initializeJayData2.default.DateTimeOffset:\n      case t === _initializeJayData2.default.Time:\n      case t === _initializeJayData2.default.Day:\n      case t === _initializeJayData2.default.Duration:\n\n      case t === _initializeJayData2.default.SimpleBase:\n      case t === _initializeJayData2.default.Geospatial:\n      case t === _initializeJayData2.default.GeographyBase:\n      case t === _initializeJayData2.default.GeographyPoint:\n      case t === _initializeJayData2.default.GeographyLineString:\n      case t === _initializeJayData2.default.GeographyPolygon:\n      case t === _initializeJayData2.default.GeographyMultiPoint:\n      case t === _initializeJayData2.default.GeographyMultiLineString:\n      case t === _initializeJayData2.default.GeographyMultiPolygon:\n      case t === _initializeJayData2.default.GeographyCollection:\n      case t === _initializeJayData2.default.GeometryBase:\n      case t === _initializeJayData2.default.GeometryPoint:\n      case t === _initializeJayData2.default.GeometryLineString:\n      case t === _initializeJayData2.default.GeometryPolygon:\n      case t === _initializeJayData2.default.GeometryMultiPoint:\n      case t === _initializeJayData2.default.GeometryMultiLineString:\n      case t === _initializeJayData2.default.GeometryMultiPolygon:\n      case t === _initializeJayData2.default.GeometryCollection:\n\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  this.resolveName = function (type) {\n    var t = this.resolveType(type);\n    var tPos = classTypes.indexOf(t);\n    return consolidatedClassNames[tPos];\n  };\n\n  this.resolveType = function (typeOrName, onResolved) {\n    var t = typeOrName;\n    t = this.getType(t, onResolved ? true : false, onResolved);\n    var posT = classTypes.indexOf(t);\n    return typeof mappedTo[posT] === 'undefined' ? t : classTypes[mappedTo[posT]];\n  };\n\n  this.getType = function (typeOrName, doNotThrow, onResolved) {\n    _utils.Guard.requireValue(\"typeOrName\", typeOrName);\n    if (typeof typeOrName === 'function') {\n      return typeOrName;\n    };\n\n    if (!(typeOrName in classNames)) {\n      if (parent) {\n        var tp = parent.getType(typeOrName, true);\n        if (tp) return tp;\n      }\n      if (onResolved) {\n        addPendingResolution(typeOrName, onResolved);\n        return;\n      } else if (doNotThrow) {\n        return undefined;\n      } else {\n        _utils.Guard.raise(new _Exception2.default(\"Unable to resolve type:\" + typeOrName));\n      }\n    };\n    var result = classTypes[classNames[typeOrName]];\n    if (onResolved) {\n      onResolved(result);\n    }\n    return result;\n  };\n\n  this.getName = function (typeOrName) {\n    var t = this.getType(typeOrName);\n    var tPos = classTypes.indexOf(t);\n    if (tPos == -1) _utils.Guard.raise(\"unknown type to request name for: \" + typeOrName);\n    return consolidatedClassNames[tPos];\n  };\n\n  this.getTypes = function () {\n    var keys = Object.keys(classNames);\n    var ret = [];\n    for (var i = 0; i < keys.length; i++) {\n      var className = keys[i];\n      ret.push({\n        name: className,\n        type: classTypes[classNames[className]],\n        toString: function toString() {\n          return this.name;\n        }\n      });\n    }\n    return ret;\n  };\n\n  //this.getTypeName( in type);\n  //this.resolveType()\n  //this.inferTypeFromValue = function (value) {\n\n  this.getTypeName = function (value) {\n    //TODO refactor\n    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n      case 'object':\n        if (value == null) return '$data.Object';\n        if (value instanceof Array) return '$data.Array';\n        if (value.getType) return value.getType().fullName;\n        if (value instanceof Date) return '$data.Date';\n        if (value instanceof _initializeJayData2.default.Guid) return '$data.Guid';\n        if (value instanceof _initializeJayData2.default.DateTimeOffset) return '$data.DateTimeOffset';\n        if (value instanceof _initializeJayData2.default.GeographyPoint) return '$data.GeographyPoint';\n        if (value instanceof _initializeJayData2.default.GeographyLineString) return '$data.GeographyLineString';\n        if (value instanceof _initializeJayData2.default.GeographyPolygon) return '$data.GeographyPolygon';\n        if (value instanceof _initializeJayData2.default.GeographyMultiPoint) return '$data.GeographyMultiPoint';\n        if (value instanceof _initializeJayData2.default.GeographyMultiLineString) return '$data.GeographyMultiLineString';\n        if (value instanceof _initializeJayData2.default.GeographyMultiPolygon) return '$data.GeographyMultiPolygon';\n        if (value instanceof _initializeJayData2.default.GeographyCollection) return '$data.GeographyCollection';\n        if (value instanceof _initializeJayData2.default.GeographyBase) return '$data.GeographyBase';\n        if (value instanceof _initializeJayData2.default.GeometryPoint) return '$data.GeometryPoint';\n        if (value instanceof _initializeJayData2.default.GeometryLineString) return '$data.GeometryLineString';\n        if (value instanceof _initializeJayData2.default.GeometryPolygon) return '$data.GeometryPolygon';\n        if (value instanceof _initializeJayData2.default.GeometryMultiPoint) return '$data.GeometryMultiPoint';\n        if (value instanceof _initializeJayData2.default.GeometryMultiLineString) return '$data.GeometryMultiLineString';\n        if (value instanceof _initializeJayData2.default.GeometryMultiPolygon) return '$data.GeometryMultiPolygon';\n        if (value instanceof _initializeJayData2.default.GeometryCollection) return '$data.GeometryCollection';\n        if (value instanceof _initializeJayData2.default.GeometryBase) return '$data.GeometryBase';\n        if (value instanceof _initializeJayData2.default.Geospatial) return '$data.Geospatial';\n        if (value instanceof _initializeJayData2.default.SimpleBase) return '$data.SimpleBase';\n        if (typeof value.toHexString === 'function') return '$data.ObjectID';\n      //if(value instanceof \"number\") return\n      default:\n        return typeof value === 'undefined' ? 'undefined' : _typeof(value);\n    }\n  };\n\n  this.isTypeRegistered = function (typeOrName) {\n    if (typeof typeOrName === 'function') {\n      return classTypes.indexOf(typeOrName) > -1;\n    } else {\n      return typeOrName in classNames;\n    }\n  };\n\n  this.unregisterType = function (type) {\n    _utils.Guard.raise(\"Unimplemented\");\n  };\n\n  this.getDefault = function (typeOrName) {\n    var t = this.resolveType(typeOrName);\n    switch (t) {\n      case _initializeJayData2.default.Number:\n        return 0.0;\n      case _initializeJayData2.default.Float:\n        return 0.0;\n      case _initializeJayData2.default.Decimal:\n        return '0.0';\n      case _initializeJayData2.default.Integer:\n        return 0;\n      case _initializeJayData2.default.Int16:\n        return 0;\n      case _initializeJayData2.default.Int32:\n        return 0;\n      case _initializeJayData2.default.Int64:\n        return '0';\n      case _initializeJayData2.default.Byte:\n        return 0;\n      case _initializeJayData2.default.SByte:\n        return 0;\n      case _initializeJayData2.default.String:\n        return null;\n      case _initializeJayData2.default.Boolean:\n        return false;\n      default:\n        return null;\n    }\n  };\n\n  //name array ['', '', '']\n  this.getIndex = function (typeOrName) {\n    var t = this.resolveType(typeOrName);\n    return classTypes.indexOf(t);\n  };\n\n  this.resolveByIndex = function (index) {\n    return classTypes[index];\n  };\n\n  this.registerType = function (nameOrNamesArray, type, factoryFunc) {\n    ///<signature>\n    ///<summary>Registers a type and optionally a lifetimeManager with a name\n    ///that can be used to later resolve the type or create new instances</summary>\n    ///<param name=\"nameOrNamesArray\" type=\"Array\">The names of the type</param>\n    ///<param name=\"type\" type=\"Function\">The type to register</param>\n    ///<param name=\"instanceManager\" type=\"Function\"></param>\n    ///</signature>\n    ///<signature>\n    ///<summary>Registers a new type that </summary>\n    ///<param name=\"aliasType\" type=\"Function\">The name of the type</param>\n    ///<param name=\"actualType\" type=\"Function\">The type to register</param>\n    ///</signature>\n\n    ///TODO remove\n    /*if (typeof typeNameOrAlias === 'string') {\r\n        if (classNames.indexOf(typeNameOrAlias) > -1) {\r\n            Guard.raise(\"Type already registered. Remove first\");\r\n        }\r\n    }*/\n\n    if (!nameOrNamesArray) {\n      return;\n    }\n\n    //todo add ('number', 'number')\n    if (typeof type === \"string\") {\n      type = self.resolveType(type);\n    }\n\n    var namesArray = [];\n    if (typeof nameOrNamesArray === 'string') {\n      var tmp = [];\n      tmp.push(nameOrNamesArray);\n      namesArray = tmp;\n    } else {\n      namesArray = nameOrNamesArray;\n    }\n\n    for (var i = 0; i < namesArray.length; i++) {\n      var parts = namesArray[i].split('.');\n      var item = {};\n      item.shortName = parts[parts.length - 1];\n      item.fullName = namesArray[i];\n      namesArray[i] = item;\n    }\n\n    //if (type.\n\n    var creatorFnc = function creatorFnc() {\n      return IoC(type, arguments);\n    };\n\n    if (typeof intellisense !== 'undefined') {\n      intellisense.annotate(creatorFnc, type);\n    }\n\n    for (var i = 0, l = namesArray.length; i < l; i++) {\n      var item = namesArray[i];\n      if (!(\"create\" + item.shortName in self)) {\n        if (typeof factoryFunc === 'function') {\n          self[\"create\" + item.shortName] = factoryFunc;\n        } else {\n          self[\"create\" + item.shortName] = creatorFnc;\n        }\n      }\n\n      var typePos = classTypes.indexOf(type);\n      if (typePos == -1) {\n        //new type\n        typePos = classTypes.push(type) - 1;\n        var fn = item.fullName;\n        consolidatedClassNames[typePos] = item.fullName;\n      };\n\n      classNames[item.fullName] = typePos;\n\n      var pending = pendingResolutions[item.fullName] || [];\n      if (pending.length > 0) {\n        pending.forEach(function (t) {\n          t(type);\n        });\n        pendingResolutions[item.fullName] = [];\n      }\n    }\n    if (parent) {\n      parent.registerType.apply(parent, arguments);\n    }\n    if (!type.name) {\n      try {\n        type.name = namesArray[0].shortName;\n      } catch (err) {}\n    }\n  };\n\n  var _converters = {\n    from: {},\n    to: {}\n  };\n  this.converters = _converters;\n\n  this.convertTo = function (value, tType, eType /*if Array*/, options) {\n    _utils.Guard.requireValue(\"typeOrName\", tType);\n\n    if (Object.isNullOrUndefined(value)) return value;\n\n    var sourceTypeName = Container.getTypeName(value);\n    var sourceType = Container.resolveType(sourceTypeName);\n    var sourceTypeName = Container.resolveName(sourceType);\n    var targetType = Container.resolveType(tType);\n    var targetTypeName = Container.resolveName(targetType);\n\n    var result;\n    try {\n      if (typeof targetType['from' + sourceTypeName] === 'function') {\n        // target from\n        result = targetType['from' + sourceTypeName].apply(targetType, arguments);\n      } else if (typeof sourceType['to' + targetTypeName] === 'function') {\n        // source to\n        result = sourceType['to' + targetTypeName].apply(sourceType, arguments);\n      } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName][sourceTypeName]) {\n        // target from source\n        result = _converters.to[targetTypeName][sourceTypeName].apply(_converters, arguments);\n      } else if (_converters.from[sourceTypeName] && _converters.from[sourceTypeName][targetTypeName]) {\n        // source to target\n        result = _converters.from[sourceTypeName][targetTypeName].apply(_converters, arguments);\n      } else if (targetTypeName === sourceTypeName || value instanceof targetType) {\n        result = value;\n      } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName]['default']) {\n        // target from anything\n        result = _converters.to[targetTypeName]['default'].apply(_converters, arguments);\n      } else {\n        throw \"converter not found\";\n      }\n    } catch (e) {\n      _utils.Guard.raise(new _Exception2.default(\"Value '\" + sourceTypeName + \"' not convertable to '\" + targetTypeName + \"'\", 'TypeError', value));\n    }\n\n    if (targetType === _initializeJayData2.default.Array && eType && Array.isArray(result)) {\n      for (var i = 0; i < result.length; i++) {\n        result[i] = this.convertTo.call(this, result[i], eType, undefined, options);\n      }\n    }\n\n    return result;\n  };\n  this.registerConverter = function (target, sourceOrToConverters, toConverterOrFromConverters, fromConverter) {\n    //registerConverter($data.Guid, { $data.String: fn, int: fn }, { string: fn, int:fn })\n    //registerConverter($data.Guid, $data.String, fn, fn);\n\n    var targetName = Container.resolveName(target);\n    if (Container.isTypeRegistered(sourceOrToConverters)) {\n      //isSource\n      _converters.to[targetName] = _converters.to[targetName] || {};\n      _converters.from[targetName] = _converters.from[targetName] || {};\n\n      var sourceName = Container.resolveName(sourceOrToConverters);\n\n      if (toConverterOrFromConverters) _converters.to[targetName][sourceName] = toConverterOrFromConverters;\n      if (fromConverter) _converters.from[targetName][sourceName] = fromConverter;\n    } else {\n      // converterGroup\n\n      //fromConverters\n      if (_converters.to[targetName]) {\n        _converters.to[targetName] = _initializeJayData2.default.typeSystem.extend(_converters.to[targetName], sourceOrToConverters);\n      } else {\n        _converters.to[targetName] = sourceOrToConverters;\n      }\n\n      //toConverters\n      if (_converters.from[targetName]) {\n        _converters.from[targetName] = _initializeJayData2.default.typeSystem.extend(_converters.from[targetName], toConverterOrFromConverters);\n      } else {\n        _converters.from[targetName] = toConverterOrFromConverters;\n      }\n    }\n  };\n\n  this.createOrGetNamespace = function (parts, root) {\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      if (!root[part]) {\n        var ns = {};\n        ns.__namespace = true;\n        root[part] = ns;\n      }\n      root = root[part];\n    }\n    return root;\n  };\n}\n\n},{\"./Exception.js\":14,\"./Extensions.js\":15,\"./initializeJayData.js\":29,\"./utils.js\":31}],14:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar Exception = function Exception(message, name, data) {\n    Error.call(this);\n    if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);\n\n    this.name = name || \"Exception\";\n    this.message = message;\n    this.data = data;\n\n    //this.toString = function() { return JSON.stringify(this); };\n};\n\nException.prototype.__proto__ = Error.prototype;\n\nException.prototype._getStackTrace = function () {\n    var callstack = [];\n    var isCallstackPopulated = false;\n    // unreachable code\n    //return;\n    /*try {\r\n        i.dont.exist += 0;\r\n    }\r\n    catch (e) {\r\n        if (e.stack) { // Firefox, Chrome\r\n            var lines = e.stack.split('\\n');\r\n            for (var i = 0, len = lines.length; i < len; i++) {\r\n                //if (lines[i].match(/^\\s*[A-Za-z0-9\\-_\\$]+\\(/)) {\r\n                if (lines[i].indexOf(\" at \") >= 0)\r\n                    callstack.push(lines[i]);\r\n            }\r\n            //Remove call to printStackTrace()\r\n            callstack.shift();\r\n            //TODO: Remove call to new Exception( chain\r\n            //callstack.shift();\r\n            isCallstackPopulated = true;\r\n        }\r\n        else if (window.opera && e.message) { //Opera\r\n            var lines = e.message.split('\\n');\r\n            for (var i = 0, len = lines.length; i < len; i++) {\r\n                if (lines[i].match(/^\\s*[A-Za-z0-9\\-_\\$]+\\(/)) {\r\n                    var entry = lines[i];\r\n                    //Append next line also since it has the file info\r\n                    if (lines[i + 1]) {\r\n                        entry += ' at ' + lines[i + 1];\r\n                        i++;\r\n                    }\r\n                    callstack.push(entry);\r\n                }\r\n            }\r\n            //Remove call to printStackTrace()\r\n            callstack.shift();\r\n            //TODO: Remove call to new Exception( chain\r\n            //callstack.shift();\r\n            isCallstackPopulated = true;\r\n        }\r\n    }\r\n      //if (!isCallstackPopulated) { //IE and Safari\r\n    //    var currentFunction = arguments.callee.caller;\r\n    //    while (currentFunction) {\r\n    //        var fn = currentFunction.toString();\r\n    //        var fname = fn.substring(fn.indexOf(\"function\") + 8, fn.indexOf('(')) || 'anonymous';\r\n    //        callstack.push(fname);\r\n    //        if (currentFunction == currentFunction.caller) {\r\n    //            Guard.raise(\"Infinite loop\");\r\n    //        }\r\n    //        currentFunction = currentFunction.caller;\r\n    //    }\r\n    //}\r\n    return callstack.join(\"\\n\\r\");\t */\n};\nexports.default = Exception;\nmodule.exports = exports['default'];\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar StringFunctions = exports.StringFunctions = {\n    startsWith: function startsWith() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.indexOf(str) === 0;\n    },\n    endsWith: function endsWith() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.slice(-str.length) === str;\n    },\n    contains: function contains() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.indexOf(str) >= 0;\n    }\n};\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Class.define('$data.Logger', _TypeSystem2.default.TraceBase, null, {\n    log: function log() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.log.apply(console, arguments);\n    },\n    warn: function warn() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.warn.apply(console, arguments);\n    },\n    error: function error() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.error.apply(console, arguments);\n    },\n\n    getDateFormat: function getDateFormat() {\n        var date = new Date();\n        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\n    }\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":18}],17:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Class.define('$data.TraceBase', null, null, {\n    log: function log() {},\n    warn: function warn() {},\n    error: function error() {}\n});\n\n_TypeSystem2.default.Trace = new _TypeSystem2.default.TraceBase();\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":18}],18:[function(require,module,exports){\n(function (process,global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemberDefinition = exports.Container = exports.$C = undefined;\n\nvar _initializeJayData = require('./initializeJayData.js');\n\nvar _initializeJayData2 = _interopRequireDefault(_initializeJayData);\n\nvar _Exception = require('./Exception.js');\n\nvar _Exception2 = _interopRequireDefault(_Exception);\n\nvar _utils = require('./utils.js');\n\nvar _Extensions = require('./Extensions.js');\n\nvar _Container = require('./Container.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*$data.Class.MixinParameter = MixinParameter = $data.Class.define('MixinParameter', null, null, {\r\n    constructor: function (typeName) {\r\n        ///<param name=\"paramIndex\" type=\"integer\">\r\n        this.typeName = typeName;\r\n    },\r\n    typeName: {}\r\n});*/\n\n//var e = new Entity();\n\n/*$data.Interface = Class.define(\"Interface\", null, null, {\r\n    constructor: function() { Guard.raise(\"Can not create an interface\"); }\r\n},\r\n{\r\n    define: function (name, definition) {\r\n        var result = Class.define(name, $data.Interface, null, null, definition);\r\n        delete result.__class;\r\n        result.__interface = true;\r\n        return result;\r\n    }\r\n});\r\n\r\n  $data.Observable = Observable = Class.define(\"Observable\", null, null, {\r\n    propertyChanged: { dataType: $data.Event }\r\n}, {\r\n    createFromInstance: function(instance) {\r\n        var propNames = instance.getClass().memberDefinitions.f\r\n    }\r\n});*/\n\n_initializeJayData2.default.StringFunctions = _Extensions.StringFunctions;\n\nvar _modelHolder = null;\n_initializeJayData2.default.setModelContainer = function (modelHolder) {\n  _modelHolder = modelHolder;\n};\n\n_initializeJayData2.default.defaults = _initializeJayData2.default.defaults || {};\n_initializeJayData2.default.defaults.openTypeDefaultPropertyName = \"dynamicProperties\";\n_initializeJayData2.default.defaults.openTypeDefaultType = '$data.Object';\n_initializeJayData2.default.defaults.openTypeDefaultValue = {};\n\n_initializeJayData2.default.__global = process.browser ? window : global;\n_initializeJayData2.default.setGlobal = function (obj) {\n  _initializeJayData2.default.__global = obj;\n};\n\n(function init($data) {\n\n  function il(msg) {\n    if (typeof intellisense !== 'undefined') {\n      if (!intellisense.i) {\n        intellisense.i = 0;\n      }\n      intellisense.i = intellisense.i + 1;\n      intellisense.logMessage(msg + \":\" + intellisense.i);\n    }\n  }\n\n  function MemberDefinition(memberDefinitionData, definedClass) {\n\n    ///<field name=\"name\" type=\"String\">*</field>\n    ///<field name=\"dataType\" type=\"Object\">*</field>\n    ///<field name=\"elementType\" type=\"Object\"></field>\n    ///<field name=\"kind\" type=\"String\" />\n    ///<field name=\"classMember\" type=\"Boolean\" />\n    ///<field name=\"set\" type=\"Function\" />\n    ///<field name=\"get\" type=\"Function\" />\n    ///<field name=\"value\" type=\"Object\" />\n    ///<field name=\"initialValue\" type=\"Object\" />\n    ///<field name=\"method\" type=\"Function\" />\n    ///<field name=\"enumerable\" type=\"Boolean\" />\n    ///<field name=\"configurable\" type=\"Boolean\" />\n    ///<field name=\"key\" type=\"Boolean\" />\n    ///<field name=\"computed\" type=\"Boolean\" />\n    ///<field name=\"storeOnObject\" type=\"Boolean\">[false] if false value is stored in initData, otherwise on the object</field>\n    ///<field name=\"monitorChanges\" type=\"Boolean\">[true] if set to false propertyChange events are not raise and property tracking is disabled</field>\n\n    this.kind = MemberTypes.property;\n    //this.definedBy = definedClass;\n    Object.defineProperty(this, 'definedBy', {\n      value: definedClass,\n      enumerable: false,\n      configurable: false,\n      writable: false\n    });\n    if (memberDefinitionData) {\n      if (typeof memberDefinitionData === 'function' || typeof memberDefinitionData.asFunction === 'function') {\n        this.method = memberDefinitionData;\n        this.kind = MemberTypes.method;\n      } else {\n        this.enumerable = true;\n        this.configurable = true;\n        if (typeof memberDefinitionData === \"number\") {\n          this.value = memberDefinitionData;\n          this.type = $data.Number;\n          this.dataType = $data.Number;\n        } else if (typeof memberDefinitionData === \"string\") {\n          this.value = memberDefinitionData;\n          this.dataType = $data.String;\n          this.type = $data.String;\n        } else {\n          for (var item in memberDefinitionData) {\n            if (memberDefinitionData.hasOwnProperty(item)) {\n              this[item] = memberDefinitionData[item];\n            }\n          }\n        }\n      }\n      if (this.type !== undefined) {\n        this.dataType = this.dataType || this.type;\n      } else {\n        this.type = this.dataType;\n      }\n\n      this.originalType = this.type;\n      if (this.elementType !== undefined) {\n        this.originalElementType = this.elementType;\n      }\n    }\n  }\n  MemberDefinition.prototype.createPropertyDescriptor = function (classFunction, value) {\n    ///<returns type=\"Object\" />\n    var pd = this;\n    var result = {\n      enumerable: this.enumerable == undefined ? true : this.enumerable,\n      configurable: this.configurable == undefined ? true : this.configurable\n    };\n    if (this.set && this.get) {\n      result.set = this.set;\n      result.get = this.get;\n    } else if (\"value\" in this || value) {\n      result.value = value || this.value;\n      //TODO\n      //result.writable = this.writable;\n      result.writable = true;\n    } else {\n      result.set = function (value) {\n        this.storeProperty(pd, value);\n      };\n      result.get = function () {\n        return this.retrieveProperty(pd);\n      };\n    }\n    return result;\n  };\n  MemberDefinition.prototype.createStorePropertyDescriptor = function (value) {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: true,\n      configurable: pd.configurable,\n      value: value\n    };\n  };\n  MemberDefinition.prototype.createGetMethod = function () {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: function value(callback, tran) {\n        return this.getProperty(pd, callback, tran);\n      }\n    };\n  };\n  MemberDefinition.prototype.createSetMethod = function () {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: function value(_value, callback, tran) {\n        return this.setProperty(pd, _value, callback, tran);\n      }\n    };\n  };\n  MemberDefinition.translateDefinition = function (memDef, name, classFunction) {\n    var holder = classFunction;\n    var memberDefinition;\n\n    if (memDef.type && Container.isTypeRegistered(memDef.type)) {\n      holder = Container.resolveType(memDef.type);\n      if (typeof holder.translateDefinition === 'function') {\n        memberDefinition = holder.translateDefinition.apply(holder, arguments);\n        memberDefinition.name = memberDefinition.name || name;\n      } else {\n        holder = classFunction;\n      }\n    }\n\n    if (!(memberDefinition instanceof MemberDefinition)) {\n      memberDefinition = new MemberDefinition(memberDefinition || memDef, holder);\n      memberDefinition.name = name;\n    }\n    classFunction.resolverThunks = classFunction.resolverThunks || [];\n    classFunction.childResolverThunks = classFunction.childResolverThunks || [];\n\n    var t = memberDefinition.type;\n    var et = memberDefinition.elementType;\n\n    function addChildThunk(referencedType) {\n      if (referencedType && referencedType.isAssignableTo && $data.Entity && referencedType.isAssignableTo($data.Entity)) {\n        classFunction.childResolverThunks.push(function () {\n          if (referencedType.resolveForwardDeclarations) {\n            referencedType.resolveForwardDeclarations();\n          }\n        });\n      }\n    }\n\n    addChildThunk(t);\n    addChildThunk(et);\n\n    if (\"string\" === typeof t) {\n      if (\"@\" === t[0]) {\n        memberDefinition.type = t.substr(1);\n        memberDefinition.dataType = t.substr(1);\n      } else {\n        //forward declared types get this callback when type is registered\n        classFunction.resolverThunks.push(function () {\n          var rt = classFunction.container.resolveType(t);\n          addChildThunk(rt);\n          memberDefinition.type = rt;\n          memberDefinition.dataType = rt;\n        });\n      }\n    }\n\n    if (et) {\n      if (\"string\" === typeof et) {\n        if (\"@\" === et[0]) {\n          memberDefinition.elementType = et.substr(1);\n        } else {\n          //forward declared types get this callback when type is registered\n          classFunction.resolverThunks.push(function () {\n            var rt = classFunction.container.resolveType(et);\n            addChildThunk(rt);\n            memberDefinition.elementType = rt;\n          });\n        }\n      }\n    }\n\n    //if (!classFunction)\n\n    classFunction.resolveForwardDeclarations = function () {\n      classFunction.resolveForwardDeclarations = function () {};\n      $data.Trace.log(\"resolving: \" + classFunction.fullName);\n      this.resolverThunks.forEach(function (thunk) {\n        thunk();\n      });\n      //this.resolverThunks = [];\n      this.childResolverThunks.forEach(function (thunk) {\n        thunk();\n      });\n      //this.childResolverThunks = [];\n    };\n\n    return memberDefinition;\n  };\n\n  MemberDefinition.prototype.toJSON = function () {\n    var property = {};\n    for (var name in this) {\n      if (name !== 'defineBy' && name !== 'storageModel') {\n        if ((name === 'type' || name === 'dataType') && this[name] && typeof this[name] === 'function') {\n          try {\n            property[name] = Container.resolveName(this[name]);\n          } catch (e) {\n            property[name] = this[name];\n          }\n        } else {\n          property[name] = this[name];\n        }\n      }\n    }\n    return property;\n  };\n\n  $data.MemberDefinition = MemberDefinition;\n\n  var memberDefinitionPrefix = '$';\n\n  function MemberDefinitionCollection() {};\n  MemberDefinitionCollection.prototype = {\n    clearCache: function clearCache() {\n      this.arrayCache = undefined;\n      this.pubMapPropsCache = undefined;\n      this.keyPropsCache = undefined;\n      this.propByTypeCache = undefined;\n      this.pubMapMethodsCache = undefined;\n      this.pubMapPropNamesCache = undefined;\n    },\n    asArray: function asArray() {\n      if (!this.arrayCache) {\n        this.arrayCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0) this.arrayCache.push(this[i]);\n        }\n      }\n      return this.arrayCache;\n    },\n    getPublicMappedProperties: function getPublicMappedProperties() {\n      if (!this.pubMapPropsCache) {\n        this.pubMapPropsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable) this.pubMapPropsCache.push(this[i]);\n        }\n      }\n      return this.pubMapPropsCache; // || (this.pubMapPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && !m.notMapped && m.enumerable; }));\n    },\n    getPublicMappedPropertyNames: function getPublicMappedPropertyNames() {\n      if (!this.pubMapPropNamesCache) {\n        this.pubMapPropNamesCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable) this.pubMapPropNamesCache.push(this[i].name);\n        }\n      }\n      return this.pubMapPropNamesCache;\n    },\n    getKeyProperties: function getKeyProperties() {\n      if (!this.keyPropsCache) {\n        this.keyPropsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && this[i].key) this.keyPropsCache.push(this[i]);\n        }\n      }\n      return this.keyPropsCache;\n      //return this.keyPropsCache || (this.keyPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && m.key; }));\n    },\n    getPublicMappedMethods: function getPublicMappedMethods() {\n      if (!this.pubMapMethodsCache) {\n        this.pubMapMethodsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'method' && this[i].method /* && this.hasOwnProperty(i)*/) this.pubMapMethodsCache.push(this[i]);\n        }\n      }\n      return this.pubMapMethodsCache;\n    },\n    getPropertyByType: function getPropertyByType(type) {\n      if (!this.propByTypeCache) {\n        this.propByTypeCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].dataType == type) this.propByTypeCache.push(this[i]);\n        }\n      }\n      return this.propByTypeCache;\n      //return this.propByTypeCache || (this.propByTypeCache = this.asArray().filter(function (m) { return m.dataType == type; }));\n    },\n    getMember: function getMember(name) {\n      return this[memberDefinitionPrefix + name];\n    },\n    setMember: function setMember(value) {\n      this[memberDefinitionPrefix + value.name] = value;\n    }\n  };\n  MemberDefinitionCollection.prototype.constructor = MemberDefinitionCollection;\n  $data.MemberDefinitionCollection = MemberDefinitionCollection;\n\n  function ClassEngineBase() {\n    this.classNames = {};\n  }\n\n  function MemberTypes() {\n    ///<field name=\"method\" type=\"string\" />\n    ///<field name=\"property\" type=\"string\" />\n    ///<field name=\"field\" type=\"string\" />\n    ///<field name=\"complexProperty\" type=\"string\" />\n  }\n  MemberTypes.__enum = true;\n\n  MemberTypes.method = \"method\";\n  MemberTypes.property = \"property\";\n  MemberTypes.navProperty = \"navProperty\";\n  MemberTypes.complexProperty = \"complexProperty\";\n  MemberTypes.field = \"field\";\n\n  $data.MemberTypes = MemberTypes;\n\n  //function classToJSON() {\n  //    var ret = {};\n  //    for (var i in this) {\n  //        if (this.hasOwnProperty(i)) {\n  //            ret[i] = this[i];\n  //        }\n  //    }\n  //    return ret;\n  //}\n  //$data.Base.toJSON = classToJSON;\n\n  ClassEngineBase.prototype = {\n\n    //getClass: function (classReference) {\n    //},\n\n    //getProperties: function (classFunction) {\n    //    return classFunction.propertyDefinitions;\n    //},\n\n    define: function define(className, baseClass, container, instanceDefinition, classDefinition) {\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClass\" type=\"Function\">Basetype of the class</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', $data.Base, null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n\n      return this.defineEx(className, [{\n        type: baseClass\n      }], container, instanceDefinition, classDefinition);\n    },\n    defineEx: function defineEx(className, baseClasses, container, instanceDefinition, classDefinition) {\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Functions\">Basetypes of the class. First is a real base, others are mixins</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', [$data.Base, $data.Mixin1, $data.Mixin2], null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Object\">Basetypes of the class. First is a real base, others are mixins or propagations</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', [\n      ///                         { type: $data.Base, params: [1, 'secondParameterValue', new $data.Class.ConstructorParameter(0)] },\n      ///                         { type: $data.Mixin1, },\n      ///                         { type: $data.Mixin2, },\n      ///                         { type: $data.Propagation1, params: [new $data.Class.ConstructorParameter(1)], propagateTo:'Propagation1' },\n      ///                         { type: $data.Propagation2, params: ['firstParameterValue'], propagateTo:'Propagation2' }\n      ///                     ], null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n\n      container = container || $data.Container;\n\n      if (baseClasses.length == 0) {\n        baseClasses.push({\n          type: $data.Base\n        });\n      } else if (baseClasses.length > 0 && !baseClasses[0].type) {\n        baseClasses[0].type = $data.Base;\n      }\n      for (var i = 0, l = baseClasses.length; i < l; i++) {\n        if (typeof baseClasses[i] === 'function') baseClasses[i] = {\n          type: baseClasses[i]\n        };\n      }\n\n      var providedCtor = instanceDefinition ? instanceDefinition.constructor : undefined;\n\n      var classNameParts = className.split('.');\n      var shortClassName = classNameParts.splice(classNameParts.length - 1, 1)[0];\n\n      $data.models = $data.models || {};\n      var root = container === $data.Container ? $data.models : container;\n      root = $data.Container.createOrGetNamespace(classNameParts, root);\n\n      var classFunction = null;\n      classFunction = this.classFunctionBuilder(shortClassName, baseClasses, classDefinition, instanceDefinition);\n      classFunction.fullName = className;\n      classFunction.namespace = classNameParts.join('.'); //classname splitted\n      //classFunction.name = shortClassName;\n      classFunction.container = container;\n      classFunction.container.registerType(className, classFunction);\n\n      this.buildType(classFunction, baseClasses, instanceDefinition, classDefinition);\n\n      if (typeof intellisense !== 'undefined') {\n        if (instanceDefinition && instanceDefinition.constructor) {\n          intellisense.annotate(classFunction, instanceDefinition.constructor);\n        }\n      }\n\n      root[shortClassName] = this.classNames[className] = classFunction;\n\n      if (classNameParts[0] == '$data') {\n        var _classNameParts = [].concat(classNameParts);\n        _classNameParts.shift();\n        var _root = $data.Container.createOrGetNamespace(_classNameParts, $data);\n        _root[shortClassName] = classFunction;\n      }\n      if (_modelHolder && container == $data.Container) {\n        var innerNS = $data.Container.createOrGetNamespace(classNameParts, _modelHolder);\n        innerNS[shortClassName] = classFunction;\n      }\n\n      //classFunction.toJSON = classToJSON;\n      var baseCount = classFunction.baseTypes.length;\n      for (var i = 0; i < baseCount; i++) {\n        var b = classFunction.baseTypes[i];\n        if (\"inheritedTypeProcessor\" in b) {\n          b.inheritedTypeProcessor(classFunction);\n        }\n      }\n      //classFunction.prototype.constructor = instanceDefinition.constructor;\n      //classFunction.constructor = instanceDefinition.constructor;\n      //classFunction.toJSON = function () { return classFunction.memberDefinitions.filter( function(md) { return md; };\n      return classFunction;\n    },\n    classFunctionBuilder: function classFunctionBuilder(name, base, classDefinition, instanceDefinition) {\n      var body = this.bodyBuilder(base, classDefinition, instanceDefinition);\n      return new Function('base', 'classDefinition', 'instanceDefinition', 'name', '$data', 'return function ' + name + ' (){ ' + body + ' \\n}; ')(base, classDefinition, instanceDefinition, name, $data);\n    },\n    bodyBuilder: function bodyBuilder(bases, classDefinition, instanceDefinition) {\n      var mixin = '';\n      var body = '';\n      var propagation = '';\n\n      for (var i = 0, l = bases.length; i < l; i++) {\n        var base = bases[i];\n        var index = i;\n        if (index == 0) {\n          //ctor func\n          if (base && base.type && base.type !== $data.Base && base.type.fullName) {\n            body += '    var baseArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\n            body += '    $data.models.' + base.type.fullName + '.apply(this, baseArguments); \\n';\n          }\n        } else {\n          if (base && base.type && base.propagateTo) {\n            //propagation\n            propagation += '    ' + (!propagation ? 'var ' : '' + '') + 'propagationArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\n            propagation += '    this[\"' + base.propagateTo + '\"] =  Object.create($data.models.' + base.type.fullName + '.prototype); \\n' + '    $data.models.' + base.type.fullName + '.apply(this[\"' + base.propagateTo + '\"], propagationArguments); \\n';\n          } else if (base && base.type && base.type.memberDefinitions && base.type.memberDefinitions.$constructor && !base.propagateTo) {\n            //mixin\n            mixin += '    $data.models.' + base.type.fullName + '.memberDefinitions.$constructor.method.apply(this); \\n';\n          }\n        }\n      }\n      if (instanceDefinition && instanceDefinition.constructor != Object) body += \"    instanceDefinition.constructor.apply(this, arguments); \\n\";\n\n      return '\\n    //mixins \\n' + mixin + '\\n    //construction \\n' + body + '\\n    //propagations \\n' + propagation;\n    },\n\n    buildType: function buildType(classFunction, baseClasses, instanceDefinition, classDefinition) {\n      var baseClass = baseClasses[0].type;\n      classFunction.inheritsFrom = baseClass;\n\n      if (baseClass) {\n        classFunction.prototype = Object.create(baseClass.prototype);\n        classFunction.memberDefinitions = Object.create(baseClass.memberDefinitions || new MemberDefinitionCollection());\n        classFunction.memberDefinitions.clearCache();\n\n        var staticDefs = baseClass.staticDefinitions;\n        if (staticDefs) {\n          staticDefs = staticDefs.asArray();\n          if (staticDefs) {\n            for (var i = 0; i < staticDefs.length; i++) {\n              this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\n            }\n          }\n        }\n        classFunction.baseTypes = baseClass.baseTypes ? [].concat(baseClass.baseTypes) : [];\n        for (var i = 0; i < baseClasses.length; i++) {\n          classFunction.baseTypes.push(baseClasses[i].type);\n        }\n        //classFunction.baseTypes = (baseClass.baseTypes || []).concat(baseClasses.map(function (base) { return base.type; }));\n        if (!classFunction.isAssignableTo) {\n          Object.defineProperty(classFunction, \"isAssignableTo\", {\n            value: function value(type) {\n              return this === type || this.baseTypes.indexOf(type) >= 0;\n            },\n            writable: false,\n            enumerable: false,\n            configurable: false\n          });\n        }\n      }\n\n      var openTypeDefinition = classFunction.staticDefinitions && classFunction.staticDefinitions.getMember('openType');\n      if (classDefinition) {\n        if (openTypeDefinition) delete classDefinition.openType;\n        this.buildStaticMembers(classFunction, classDefinition);\n\n        if (classDefinition.constructor) classFunction.classConstructor = classDefinition.constructor;\n      }\n\n      if (instanceDefinition) {\n\n        //build open type member\n        if (!openTypeDefinition && classDefinition && (typeof classFunction.openType === \"string\" || classFunction.openType === true) && classFunction.isAssignableTo($data.Entity)) {\n          var openTypePropertyName = $data.defaults.openTypeDefaultPropertyName;\n          var openTypeDefaultType = Container.resolveType($data.defaults.openTypeDefaultType);\n          var openTypeDefaultValue = $data.defaults.openTypeDefaultValue;\n          if (typeof classFunction.openType == \"string\") {\n            openTypePropertyName = classFunction.openType;\n          }\n\n          var definedOpenTypeMember = classFunction.getMemberDefinition(openTypePropertyName);\n          if (definedOpenTypeMember && Container.resolveType(definedOpenTypeMember.type || definedOpenTypeMember.dataType) !== openTypeDefaultType) {\n            _utils.Guard.raise(new _Exception2.default(\"Type Error\", \"OpenType default type missmatch\"));\n          }\n          if (!definedOpenTypeMember && instanceDefinition[openTypePropertyName]) {\n            var memberType = Container.resolveType(instanceDefinition[openTypePropertyName].type || instanceDefinition[openTypePropertyName].dataType);\n            if (memberType !== openTypeDefaultType) {\n              _utils.Guard.raise(new _Exception2.default(\"Type Error\", \"OpenType default type missmatch\"));\n            }\n          }\n          if (!definedOpenTypeMember && !instanceDefinition[openTypePropertyName]) {\n            var defaultValue = typeof openTypeDefaultValue !== \"undefined\" ? openTypeDefaultValue : {};\n            instanceDefinition[openTypePropertyName] = { type: openTypeDefaultType, defaultValue: defaultValue };\n          }\n        }\n\n        this.buildInstanceMembers(classFunction, instanceDefinition);\n      }\n\n      var mixins = [].concat(baseClasses);\n      mixins.shift();\n      if (Object.keys(mixins).length > 0) this.buildInstanceMixins(classFunction, mixins);\n\n      classFunction.__class = true;\n\n      classFunction.prototype.constructor = classFunction;\n\n      Object.defineProperty(classFunction.prototype, \"getType\", {\n        value: function value() {\n          return classFunction;\n        },\n        writable: false,\n        enumerable: false,\n        configurable: false\n      });\n    },\n\n    addMethod: function addMethod(holder, name, method, propagation) {\n      if (!propagation || typeof intellisense !== 'undefined') {\n        holder[name] = method;\n      } else {\n        holder[name] = function () {\n          return method.apply(this[propagation], arguments);\n        };\n      }\n    },\n\n    addProperty: function addProperty(holder, name, propertyDescriptor, propagation) {\n\n      //holder[name] = {};\n\n      if (propagation) {\n        propertyDescriptor.configurable = true;\n        if (propertyDescriptor.get) {\n          var origGet = propertyDescriptor.get;\n          propertyDescriptor.get = function () {\n            if (!this[propagation]) _utils.Guard.raise(new _Exception2.default(\"not inicialized\"));\n            return origGet.apply(this[propagation], arguments);\n          };\n        }\n        if (propertyDescriptor.set) {\n          var origSet = propertyDescriptor.set;\n          propertyDescriptor.set = function () {\n            if (!this[propagation]) _utils.Guard.raise(new _Exception2.default(\"not inicialized\"));\n            origSet.apply(this[propagation], arguments);\n          };\n        }\n      }\n\n      Object.defineProperty(holder, name, propertyDescriptor);\n    },\n\n    addField: function addField(holder, name, field) {\n      _utils.Guard.raise(\"not implemented\");\n    },\n\n    buildMethod: function buildMethod(classFunction, memberDefinition, propagation) {\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\n      this.addMethod(holder, memberDefinition.name, memberDefinition.method, propagation);\n    },\n\n    buildProperty: function buildProperty(classFunction, memberDefinition, propagation) {\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\n      var pd = memberDefinition.createPropertyDescriptor(classFunction);\n      this.addProperty(holder, memberDefinition.name, pd, propagation);\n\n      //if lazyload TODO\n      if (!memberDefinition.classMember && classFunction.__setPropertyfunctions == true && memberDefinition.withoutGetSetMethod !== true && !('get_' + memberDefinition.name in holder || 'set_' + memberDefinition.name in holder)) {\n        var pdGetMethod = memberDefinition.createGetMethod();\n        this.addProperty(holder, 'get_' + memberDefinition.name, pdGetMethod, propagation);\n\n        var pdSetMethod = memberDefinition.createSetMethod();\n        this.addProperty(holder, 'set_' + memberDefinition.name, pdSetMethod, propagation);\n      }\n    },\n\n    buildMember: function buildMember(classFunction, memberDefinition, propagation, memberCollectionName) {\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\" />\n      memberCollectionName = memberCollectionName || 'memberDefinitions';\n      classFunction[memberCollectionName] = classFunction[memberCollectionName] || new MemberDefinitionCollection();\n      classFunction[memberCollectionName].setMember(memberDefinition);\n\n      switch (memberDefinition.kind) {\n        case MemberTypes.method:\n          this.buildMethod(classFunction, memberDefinition, propagation);\n          break;\n        case MemberTypes.navProperty:\n        case MemberTypes.complexProperty:\n        case MemberTypes.property:\n          this.buildProperty(classFunction, memberDefinition, propagation);\n          break;\n        default:\n          _utils.Guard.raise(\"Unknown member type: \" + memberDefinition.kind + \",\" + memberDefinition.name);\n      }\n    },\n\n    buildStaticMembers: function buildStaticMembers(classFunction, memberListDefinition) {\n      ///<param name=\"classFunction\" type=\"Object\">The class constructor that will be extended</param>\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\n      var t = this;\n      for (var item in memberListDefinition) {\n        if (memberListDefinition.hasOwnProperty(item)) {\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\n          memberDefinition.classMember = true;\n          t.buildMember(classFunction, memberDefinition, undefined, 'staticDefinitions');\n        }\n      }\n    },\n\n    buildInstanceMembers: function buildInstanceMembers(classFunction, memberListDefinition) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\n      ///pinning t outside of the closure seems actually faster then passing in the this  and referencing\n      var t = this;\n      for (var item in memberListDefinition) {\n        if (memberListDefinition.hasOwnProperty(item)) {\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\n          t.buildMember(classFunction, memberDefinition, undefined, 'memberDefinitions');\n        }\n      }\n    },\n\n    copyMembers: function copyMembers(sourceType, targetType) {\n      ///<param name=\"sourceType\" type=\"Function\" />\n      ///<param name=\"targetType\" type=\"Function\" />\n      function il(msg) {\n        if (typeof intellisense === 'undefined') {\n          return;\n        }\n        intellisense.logMessage(msg);\n      }\n\n      Object.keys(sourceType.prototype).forEach(function (item, i, src) {\n        if (item !== 'constructor' && item !== 'toString') {\n          il(\"copying item:\" + item);\n          targetType.prototype[item] = sourceType[item];\n        }\n      });\n    },\n\n    buildInstanceMixins: function buildInstanceMixins(classFunction, mixinList) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"mixinList\" type=\"Array\"></param>\n\n      classFunction.mixins = classFunction.mixins || [];\n      classFunction.propagations = classFunction.propagations || [];\n\n      for (var i = 0; i < mixinList.length; i++) {\n        var item = mixinList[i];\n        //if (classFunction.memberDefinitions.getMember(item.type.name)) {\n        if (item.propagateTo) {\n          this.buildInstancePropagation(classFunction, item);\n          classFunction.propagations.push(item);\n          classFunction.propagations[item.type.name] = true;\n        } else {\n          this.buildInstanceMixin(classFunction, item);\n          classFunction.mixins.push(item);\n          classFunction.mixins[item.type.name] = true;\n        }\n      };\n    },\n    buildInstanceMixin: function buildInstanceMixin(classFunction, typeObj) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"typeObj\" type=\"Object\"></param>\n\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\n        var itemName = memberDefs[i].name;\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n          this.buildMember(classFunction, memberDefs[i]);\n        }\n      }\n\n      if (typeObj.type.staticDefinitions) {\n        var staticDefs = typeObj.type.staticDefinitions.asArray();\n        for (var i = 0, l = staticDefs.length; i < l; i++) {\n          var itemName = staticDefs[i].name;\n          if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n            this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\n          }\n        }\n      }\n    },\n    buildInstancePropagation: function buildInstancePropagation(classFunction, typeObj) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"typeObj\" type=\"Object\"></param>\n\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\n        var itemName = memberDefs[i].name;\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n          this.buildMember(classFunction, memberDefs[i], typeObj.propagateTo);\n        }\n      }\n    }\n\n  };\n  var Class;\n  $data.Class = Class = new ClassEngineBase();\n\n  $data.ContainerClass = _Container.ContainerCtor;\n\n  var c;\n  $data.Container = c = _Container.ContainerInstance;\n\n  $data.createContainer = function () {\n    return new _Container.ContainerCtor($data.Container);\n  };\n\n  var storeProperty = function storeProperty(memberDefinition, value) {\n    var backingFieldName = \"_\" + memberDefinition.name;\n    if (!this[backingFieldName]) {\n      Object.defineProperty(this, backingFieldName, memberDefinition.createStorePropertyDescriptor(value));\n    } else {\n      this[backingFieldName] = value;\n    }\n  };\n  var retrieveProperty = function retrieveProperty(memberDefinition) {\n    var backingFieldName = \"_\" + memberDefinition.name;\n    return this[backingFieldName];\n  };\n\n  $data.Class.define('$data.Base', function Base() {}, null, {\n    storeProperty: storeProperty,\n    retrieveProperty: retrieveProperty,\n    setProperty: function setProperty(memberDefinition, value, callback) {\n      this[memberDefinition.name] = value;\n      callback();\n    },\n    getProperty: function getProperty(memberDefinition, callback) {\n      callback.apply(this, [this[memberDefinition.name]]);\n    }\n  }, {\n    create: function create() {\n      return Container.createInstance(this, arguments);\n    },\n    extend: function extend(name, container, instanceDefinition, classDefinition) {\n      if (container && !(container instanceof _Container.ContainerCtor)) {\n        classDefinition = instanceDefinition;\n        instanceDefinition = container;\n        container = undefined;\n      }\n      return $data.Class.define(name, this, container, instanceDefinition, classDefinition);\n    },\n    getMemberDefinition: function getMemberDefinition(name) {\n      return this.memberDefinitions.getMember(name);\n    },\n    addProperty: function addProperty(name, getterOrType, setterOrGetter, setter) {\n      var _getter = getterOrType;\n      var _setter = setterOrGetter;\n      var _type;\n      if (typeof _getter === 'string') {\n        _type = getterOrType;\n        _getter = setterOrGetter;\n        _setter = setter;\n      }\n\n      var propDef = {\n        notMapped: true,\n        storeOnObject: true,\n        get: typeof _getter === 'function' ? _getter : function () {},\n        set: typeof _setter === 'function' ? _setter : function () {},\n        type: _type\n      };\n\n      var memberDefinition = MemberDefinition.translateDefinition(propDef, name, this);\n      $data.Class.buildMember(this, memberDefinition);\n\n      this.memberDefinitions.clearCache();\n\n      return this;\n    },\n    addMember: function addMember(name, definition, isClassMember) {\n      var memberDefinition = MemberDefinition.translateDefinition(definition, name, this);\n\n      if (isClassMember) {\n        memberDefinition.classMember = true;\n        $data.Class.buildMember(this, memberDefinition, undefined, 'staticDefinitions');\n        this.staticDefinitions.clearCache();\n      } else {\n        $data.Class.buildMember(this, memberDefinition);\n        this.memberDefinitions.clearCache();\n      }\n      return this;\n    },\n    describeField: function describeField(name, definition) {\n      var memDef = this.memberDefinitions.getMember(name);\n      if (!memDef) {\n        this.addMember(name, definition);\n      } else {\n        _utils.Guard.raise(new _Exception2.default(\"Field '\" + name + \"' already defined!\", \"Invalid operation\"));\n      }\n      return this;\n    },\n    storeProperty: storeProperty,\n    retrieveProperty: retrieveProperty,\n    'from$data.Object': function from$dataObject(value) {\n      return value;\n    }\n  });\n\n  //override after typeSystem initialized\n\n  $data.Class.ConstructorParameter = $data.Class.define('ConstructorParameter', null, null, {\n    constructor: function constructor(paramIndex) {\n      ///<param name=\"paramIndex\" type=\"integer\" />\n      this.paramIndex = paramIndex;\n    },\n    paramIndex: {}\n  });\n})(_initializeJayData2.default);\n\n_initializeJayData2.default.defaultErrorCallback = function () {\n  //console.log('DEFAULT ERROR CALLBACK:');\n  /*if (console.dir)\r\n      console.dir(arguments);\r\n  else\r\n      console.log(arguments);*/\n  if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\n    (console.error || console.log).call(console, arguments[0]);\n    arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\n  } else {\n    if (arguments[0] instanceof Error) {\n      _utils.Guard.raise(arguments[0]);\n    } else {\n      _utils.Guard.raise(new _Exception2.default(\"DEFAULT ERROR CALLBACK!\", \"DefaultError\", arguments));\n    }\n  }\n};\n_initializeJayData2.default.defaultSuccessCallback = function () {/*console.log('DEFAULT SUCCES CALLBACK');*/};\n_initializeJayData2.default.defaultNotifyCallback = function () {/*console.log('DEFAULT NOTIFY CALLBACK');*/};\n\n_initializeJayData2.default.typeSystem = {\n  __namespace: true,\n  /*inherit: function (ctor, baseType) {\r\n      var proto = new baseType();\r\n      ctor.prototype = $.extend(proto, ctor.prototype);\r\n      //console.dir(proto);\r\n      ctor.prototype.base = new baseType();\r\n      //console.dir(ctor.prototype.base);\r\n      ctor.prototype.constructor = ctor;\r\n      return ctor;\r\n  },*/\n  //mix: function (type, mixin) {\n  //    type.prototype = $.extend(type.prototype || {}, mixin.prototype || {});\n  //    type.mixins = type.mixins || [];\n  //    type.mixins.push(mixin);\n  //    return type;\n  //},\n  extend: function extend(target) {\n    /// <summary>\n    /// Extends an object with properties of additional parameters.\n    /// </summary>\n    /// <signature>\n    /// <param name=\"target\" type=\"Object\">Object that will be extended.</param>\n    /// <param name=\"object\" type=\"Object\">Object to extend target with.</param>\n    /// <param name=\"objectN\" optional=\"true\" parameterArray=\"true\" type=\"Object\">Object to extend target with.</param>\n    /// </signature>\n    /// <returns></returns>\n    if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object' && typeof target !== 'function') _utils.Guard.raise('Target must be object or function');\n\n    for (var i = 1; i < arguments.length; i++) {\n      var obj = arguments[i];\n      if (obj === null || typeof obj === 'undefined') continue;\n      for (var key in obj) {\n        target[key] = obj[key];\n      }\n    }\n    return target;\n  },\n  createCallbackSetting: function createCallbackSetting(callBack, defaultSetting) {\n    var setting = {\n      success: _initializeJayData2.default.defaultSuccessCallback,\n      error: _initializeJayData2.default.defaultErrorCallback,\n      notify: _initializeJayData2.default.defaultNotifyCallback\n    };\n\n    if (defaultSetting != undefined && defaultSetting != null) {\n      setting = defaultSetting;\n    }\n\n    var result;\n    if (callBack == null || callBack == undefined) {\n      result = setting;\n    } else if (typeof callBack == 'function') {\n      result = this.extend(setting, {\n        success: callBack\n      });\n    } else {\n      result = this.extend(setting, callBack);\n    }\n\n    function wrapCode(fn) {\n      var t = this;\n\n      function r() {\n        fn.apply(t, arguments);\n        fn = function fn() {};\n      }\n      return r;\n    }\n\n    if (typeof result.error === 'function') result.error = wrapCode(result.error);\n\n    return result;\n  },\n  createCtorParams: function createCtorParams(source, indexes, thisObj) {\n    ///<param name=\"source\" type=\"Array\" />Paramerter array\n    ///<param name=\"indexes\" type=\"Array\" />\n    ///<param name=\"thisObj\" type=\"Object\" />\n    if (indexes) {\n      var paramArray = [];\n      for (var i = 0, l = indexes.length; i < l; i++) {\n        var item = i;\n        if (indexes[item] instanceof _initializeJayData2.default.Class.ConstructorParameter) paramArray.push(source[indexes[item].paramIndex]);else if (typeof indexes[item] === \"function\") paramArray.push(indexes[item].apply(thisObj));else paramArray.push(indexes[item]);\n      }\n      return paramArray;\n    }\n    return source;\n  },\n  writePropertyValues: function writePropertyValues(obj) {\n    if (obj && obj.getType && obj.getType().memberDefinitions) {\n      this.writeProperties(obj, obj.getType().memberDefinitions.asArray().filter(function (md) {\n        return (md.kind == \"property\" || md.kind == \"navProperty\" || md.kind == \"complexProperty\") && !md.prototypeProperty;\n      }));\n    }\n  },\n  writeProperties: function writeProperties(obj, members) {\n    var defines = {};\n    for (var i = 0, l = members.length; i < l; i++) {\n      var memDef = members[i];\n      defines[memDef.name] = memDef.createPropertyDescriptor(null, memDef.value);\n    }\n\n    Object.defineProperties(obj, defines);\n  },\n  writeProperty: function writeProperty(obj, member, value) {\n    var memDef = typeof member === 'string' ? obj.getType().memberDefinitions.getMember(member) : member;\n    if (memDef) {\n      var propDef = memDef.createPropertyDescriptor(null, value);\n      //////OPTIMIZATION\n      Object.defineProperty(obj, memDef.name, propDef);\n    }\n  }\n};\n\n_initializeJayData2.default.debug = function () {\n  (console.debug || console.log).apply(console, arguments);\n};\n\n_initializeJayData2.default.debugWith = function () {\n  var cArgs = arguments;\n  return function (r) {\n    (console.debug || console.log).apply(console, cArgs);\n    if (typeof Error !== 'undefined' && r instanceof Error || typeof _Exception2.default !== 'undefined' && r instanceof _Exception2.default) {\n      (console.error || console.log).apply(console, arguments);\n    } else {\n      (console.debug || console.log).apply(console, arguments);\n    }\n  };\n};\n\n_initializeJayData2.default.fdebug = {\n  success: _initializeJayData2.default.debugWith('success'),\n  error: _initializeJayData2.default.debugWith('error')\n};\n\nvar $C = exports.$C = function $C() {\n  _initializeJayData2.default.Class.define.apply(_initializeJayData2.default.Class, arguments);\n};\nvar Container = exports.Container = _initializeJayData2.default.Container;\nvar MemberDefinition = exports.MemberDefinition = _initializeJayData2.default.MemberDefinition;\nexports.default = _initializeJayData2.default;\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./Container.js\":13,\"./Exception.js\":14,\"./Extensions.js\":15,\"./initializeJayData.js\":29,\"./utils.js\":31,\"_process\":5}],19:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _Exception = require('../Exception.js');\n\nvar _Exception2 = _interopRequireDefault(_Exception);\n\nvar _utils = require('../utils.js');\n\nvar _btoa = (typeof window !== \"undefined\" ? window['btoa'] : typeof global !== \"undefined\" ? global['btoa'] : null);\n\nvar _btoa2 = _interopRequireDefault(_btoa);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bufferOrArray = eval('typeof Buf' + 'fer !== \"undefined\" ? Buf' + 'fer : Uint8Array');\n_TypeSystem2.default.Blob = function Blob() {};\n\n_TypeSystem2.default.Blob.createFromHexString = function (value) {\n    if (value != value.match(new RegExp('[0-9a-fA-F]+'))[0]) {\n        _utils.Guard.raise(new _Exception2.default('TypeError: ', 'value not convertable to $data.Blob', value));\n    } else {\n        //if (value.length & 1) value = '0' + value;\n        var arr = new bufferOrArray(value.length >> 1);\n        for (var i = 0, j = 1, k = 0; i < value.length; i += 2, j += 2, k++) {\n            arr[k] = parseInt('0x' + value[i] + value[j], 16);\n        }\n\n        return arr;\n    }\n};\n\n_TypeSystem2.default.Blob.toString = function (value) {\n    if (!value || !value.length) return null;\n    var s = '';\n    for (var i = 0; i < value.length; i++) {\n        s += String.fromCharCode(value[i]);\n    }\n\n    return s;\n};\n\n_TypeSystem2.default.Blob.toBase64 = function (value) {\n    if (!value || !value.length) return null;\n    return (0, _btoa2.default)(_TypeSystem2.default.Blob.toString(value));\n};\n\n_TypeSystem2.default.Blob.toArray = function (src) {\n    if (!src || !src.length) return null;\n    var arr = new Array(src.length);\n    for (var i = 0; i < src.length; i++) {\n        arr[i] = src[i];\n    }\n\n    return arr;\n};\n\n/*$data.Blob.toJSON = function(value){\r\n    return JSON.stringify($data.Blob.toArray(value));\r\n};*/\n\n_TypeSystem2.default.Blob.toHexString = function (value) {\n    if (!value || !value.length) return null;\n    var s = '';\n    for (var i = 0; i < value.length; i++) {\n        s += ('00' + value[i].toString(16)).slice(-2);\n    }\n\n    return s.toUpperCase();\n};\n\n_TypeSystem2.default.Blob.toDataURL = function (value) {\n    if (!value || !value.length) return null;\n    return 'data:application/octet-stream;base64,' + (0, _btoa2.default)(_TypeSystem2.default.Blob.toString(value));\n};\n\n_TypeSystem2.default.Container.registerType([\"$data.Blob\", \"blob\", \"JayBlob\"], _TypeSystem2.default.Blob);\n_TypeSystem2.default.Container.registerConverter('$data.Blob', {\n    '$data.String': function $dataString(value) {\n        if (value && value.length) {\n            var blob = new bufferOrArray(value.length);\n            for (var i = 0; i < value.length; i++) {\n                blob[i] = value.charCodeAt(i);\n            }\n\n            return blob;\n        } else return null;\n    },\n    '$data.Array': function $dataArray(value) {\n        return new bufferOrArray(value);\n    },\n    '$data.Number': function $dataNumber(value) {\n        return new bufferOrArray(_TypeSystem2.default.packIEEE754(value, 11, 52).reverse());\n    },\n    '$data.Boolean': function $dataBoolean(value) {\n        return new bufferOrArray([value | 0]);\n    },\n    'default': function _default(value) {\n        if (typeof Blob !== 'undefined' && value instanceof Blob) {\n            var req = new XMLHttpRequest();\n            req.open('GET', URL.createObjectURL(value), false);\n            req.send(null);\n            return _TypeSystem2.default.Container.convertTo(req.response, _TypeSystem2.default.Blob);\n        } else if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n            return new bufferOrArray(new Uint8Array(value));\n        } else if (value instanceof Uint8Array) {\n            //if (typeof Buffer !== 'undefined') return new Buffer(value);\n            //else\n            return value;\n        } else /*if (typeof Buffer !== 'undefined' ? value instanceof Buffer : false){\r\n               return value;\r\n               }else*/if (value.buffer) {\n                return new bufferOrArray(value);\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && value instanceof Object) {\n                var arr = [];\n                for (var i in value) {\n                    arr[i] = value[i];\n                }\n                if (!arr.length) throw 0;\n                return new bufferOrArray(arr);\n            }\n        throw 0;\n    }\n}, {\n    '$data.String': function $dataString(value) {\n        return _TypeSystem2.default.Blob.toString(value);\n    },\n    '$data.Array': function $dataArray(value) {\n        return _TypeSystem2.default.Blob.toArray(value);\n    }\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../Exception.js\":14,\"../TypeSystem.js\":18,\"../utils.js\":31}],20:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Container.registerConverter('$data.Boolean', {\n    '$data.String': function $dataString(value) {\n        if (value.toLowerCase() == 'true') return true;\n        if (value.toLowerCase() == 'false') return false;\n\n        return !!value;\n    },\n    'default': function _default(value) {\n        return !!value;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Integer', {\n    'default': function _default(value) {\n        if (value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY || value === Number.MAX_VALUE || value === Number.MIN_VALUE) {\n            return value;\n        }\n\n        var r = parseInt(+value, 10);\n        if (isNaN(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int32', {\n    'default': function _default(value) {\n        return value | 0;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Number', {\n    'default': function _default(value) {\n        var r = +value;\n        if (isNaN(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Byte', {\n    'default': function _default(value) {\n        return (value | 0) & 0xff;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Date', {\n    'default': function _default(value) {\n        var d = new Date(value);\n        if (isNaN(d)) throw 0;\n        return d;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.DateTimeOffset', {\n    '$data.Date': function $dataDate(value) {\n        return value;\n    },\n    'default': function _default(value) {\n        var d = new Date(value);\n        if (isNaN(d)) throw 0;\n        return d;\n    }\n});\n(function () {\n    function parseFromString(value) {\n        var regex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])(:([0-5][0-9]|[0-9])(\\.(\\d+))?)?$/;\n\n        var matches = regex.exec(value);\n        if (!matches) throw 0;\n        var time = '';\n        time += ('00' + matches[1]).slice(-2);\n        time += ':' + ('00' + matches[2]).slice(-2);\n        if (matches[4]) {\n            time += ':' + ('00' + matches[4]).slice(-2);\n        } else {\n            time += ':00';\n        }\n        if (matches[6]) time += '.' + (matches[6] + '000').slice(0, 3);\n\n        return time;\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Time', {\n        '$data.String': parseFromString,\n        '$data.Number': function tt(value) {\n            var metrics = [1000, 60, 60];\n            var result = [0, 0, 0, value | 0];\n\n            for (var i = 0; i < metrics.length; i++) {\n                result[metrics.length - (i + 1)] = result[metrics.length - i] / metrics[i] | 0;\n                result[metrics.length - i] -= result[metrics.length - (i + 1)] * metrics[i];\n            }\n\n            var time = '';\n            for (var i = 0; i < result.length; i++) {\n                if (i < result.length - 1) {\n                    time += ('00' + result[i]).slice(-2);\n                    if (i < result.length - 2) time += ':';\n                } else {\n                    time += '.' + ('000' + result[i]).slice(-3);\n                }\n            }\n\n            return parseFromString(time);\n        },\n        '$data.Date': function $dataDate(value) {\n            var val = value.getHours() + ':' + value.getMinutes() + ':' + value.getSeconds();\n            var ms = value.getMilliseconds();\n            if (ms) {\n                val += '.' + ms;\n            }\n\n            return parseFromString(val);\n        }\n    });\n})();\n(function () {\n    function parseFromString(value) {\n        var regex = /^(-?)([0-9]{1,4})-(1[0-2]|0[0-9]|[0-9])-([0-2][0-9]|3[0-1]|[0-9])$/;\n\n        var matches = regex.exec(value);\n        if (!matches) throw 0;\n        var date = matches[1];\n        date += ('0000' + matches[2]).slice(-4);\n        date += '-' + ('00' + matches[3]).slice(-2);\n        date += '-' + ('00' + matches[4]).slice(-2);\n        return date;\n    }\n    function parseFromDate(value) {\n        var val = value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate();\n        return parseFromString(val);\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Day', {\n        '$data.String': parseFromString,\n        '$data.Number': function tt(value) {\n            var t = 1000 * 60 * 60 * 24;\n            var day = value * t;\n            if (isNaN(day)) throw 0;\n\n            return parseFromDate(new Date(day));\n        },\n        '$data.Date': parseFromDate\n    });\n})();\n(function () {\n    function parseFromString(value) {\n        return value;\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Duration', {\n        '$data.String': parseFromString\n    });\n})();\n_TypeSystem2.default.Container.registerConverter('$data.Decimal', {\n    '$data.Boolean': function $dataBoolean(value) {\n        return value ? '1' : '0';\n    },\n    '$data.Number': function $dataNumber(value) {\n        return value.toString();\n    },\n    '$data.String': function $dataString(value) {\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\n        return value;\n    },\n    '$data.Date': function $dataDate(value) {\n        var r = value.valueOf();\n        if (isNaN(r)) throw 0;\n        return r.toString();\n    }\n});\n\n_TypeSystem2.default.packIEEE754 = function (v, ebits, fbits) {\n    var bias = (1 << ebits - 1) - 1,\n        s,\n        e,\n        f,\n        ln,\n        i,\n        bits,\n        str,\n        bytes;\n\n    // Compute sign, exponent, fraction\n    if (v !== v) {\n        // NaN\n        // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\n        e = (1 << bias) - 1;f = Math.pow(2, fbits - 1);s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n        e = (1 << bias) - 1;f = 0;s = v < 0 ? 1 : 0;\n    } else if (v === 0) {\n        e = 0;f = 0;s = 1 / v === -Infinity ? 1 : 0;\n    } else {\n        s = v < 0;\n        v = Math.abs(v);\n\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        } else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n\n    // Pack sign, exponent, fraction\n    bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    str = bits.join('');\n\n    // Bits to bytes\n    bytes = [];\n    while (str.length) {\n        bytes.push(parseInt(str.substring(0, 8), 2));\n        str = str.substring(8);\n    }\n\n    return bytes;\n};\n\n_TypeSystem2.default.unpackIEEE754 = function (bytes, ebits, fbits) {\n    // Bytes to bits\n    var bits = [],\n        i,\n        j,\n        b,\n        str,\n        bias,\n        s,\n        e,\n        f;\n\n    for (i = bytes.length; i; i -= 1) {\n        b = bytes[i - 1];\n        for (j = 8; j; j -= 1) {\n            bits.push(b % 2 ? 1 : 0);b = b >> 1;\n        }\n    }\n    bits.reverse();\n    str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    bias = (1 << ebits - 1) - 1;\n    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    e = parseInt(str.substring(1, 1 + ebits), 2);\n    f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n        return f !== 0 ? NaN : s * Infinity;\n    } else if (e > 0) {\n        // Normalized\n        return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    } else if (f !== 0) {\n        // Denormalized\n        return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    } else {\n        return s < 0 ? -0 : 0;\n    }\n};\n\n_TypeSystem2.default.IEEE754 = function (v, e, f) {\n    return _TypeSystem2.default.unpackIEEE754(_TypeSystem2.default.packIEEE754(v, e, f), e, f);\n};\n\n_TypeSystem2.default.Container.registerConverter('$data.Float', {\n    'default': function _default(value) {\n        var r = +value;\n        if (isNaN(r)) throw 0;\n        return _TypeSystem2.default.IEEE754(r, 8, 23);\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int16', {\n    'default': function _default(value) {\n        var r = (value | 0) & 0xffff;\n        if (r >= 0x8000) return r - 0x10000;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int64', {\n    '$data.Boolean': function $dataBoolean(value) {\n        return value ? '1' : '0';\n    },\n    '$data.Number': function $dataNumber(value) {\n        var r = value.toString();\n        if (r.indexOf('.') > 0) return r.split('.')[0];\n        if (r.indexOf('.') == 0) throw 0;\n        return r;\n    },\n    '$data.String': function $dataString(value) {\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\n        if (value.indexOf('.') > 0) return value.split('.')[0];\n        if (value.indexOf('.') == 0) throw 0;\n        return value;\n    },\n    '$data.Date': function $dataDate(value) {\n        var r = value.valueOf();\n        if (isNaN(r)) throw 0;\n        return r.toString();\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.SByte', {\n    'default': function _default(value) {\n        var r = (value | 0) & 0xff;\n        if (r >= 0x80) return r - 0x100;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.String', {\n    '$data.Date': function $dataDate(value) {\n        return value.toISOString();\n    },\n    '$data.ObjectID': function $dataObjectID(value) {\n        return btoa(value.toString());\n    },\n    'default': function _default(value) {\n        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') return JSON.stringify(value);\n        return value.toString();\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Object', {\n    '$data.String': function $dataString(value) {\n        return JSON.parse(value);\n    },\n    '$data.Function': function $dataFunction() {\n        throw 0;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Array', {\n    '$data.String': function $dataString(value) {\n        var r = JSON.parse(value);\n        if (!Array.isArray(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.ObjectID', {\n    '$data.ObjectID': function $dataObjectID(value) {\n        try {\n            return btoa(value.toString());\n        } catch (e) {\n            return value;\n        }\n    },\n    '$data.String': function $dataString(id) {\n        return id;\n    }\n});\n\n_TypeSystem2.default.Container.proxyConverter = function (v) {\n    return v;\n};\n_TypeSystem2.default.Container.defaultConverter = function (type) {\n    return function (v) {\n        return _TypeSystem2.default.Container.convertTo(v, type);\n    };\n};\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":18}],21:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($data) {\n\n    function Edm_Boolean() {};\n    $data.Container.registerType('Edm.Boolean', Edm_Boolean);\n    $data.Container.mapType(Edm_Boolean, $data.Boolean);\n\n    function Edm_Binary() {};\n    $data.Container.registerType('Edm.Binary', Edm_Binary);\n    $data.Container.mapType(Edm_Binary, $data.Blob);\n\n    function Edm_DateTime() {};\n    $data.Container.registerType('Edm.DateTime', Edm_DateTime);\n    $data.Container.mapType(Edm_DateTime, $data.Date);\n\n    function Edm_DateTimeOffset() {};\n    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);\n    $data.Container.mapType(Edm_DateTimeOffset, $data.DateTimeOffset);\n\n    function Edm_Time() {};\n    $data.Container.registerType('Edm.Time', Edm_Time);\n    $data.Container.mapType(Edm_Time, $data.Time);\n\n    function Edm_TimeOfDay() {};\n    $data.Container.registerType('Edm.TimeOfDay', Edm_TimeOfDay);\n    $data.Container.mapType(Edm_TimeOfDay, $data.Time);\n\n    function Edm_Date() {};\n    $data.Container.registerType('Edm.Date', Edm_Date);\n    $data.Container.mapType(Edm_Date, $data.Day);\n\n    function Edm_Duration() {};\n    $data.Container.registerType('Edm.Duration', Edm_Duration);\n    $data.Container.mapType(Edm_Duration, $data.Duration);\n\n    function Edm_Decimal() {};\n    $data.Container.registerType('Edm.Decimal', Edm_Decimal);\n    $data.Container.mapType(Edm_Decimal, $data.Decimal);\n\n    function Edm_Float() {};\n    $data.Container.registerType('Edm.Float', Edm_Float);\n    $data.Container.mapType(Edm_Float, $data.Float);\n\n    function Edm_Single() {};\n    $data.Container.registerType('Edm.Single', Edm_Single);\n    $data.Container.mapType(Edm_Single, $data.Float);\n\n    function Edm_Double() {};\n    $data.Container.registerType('Edm.Double', Edm_Double);\n    $data.Container.mapType(Edm_Double, $data.Number);\n\n    function Edm_Guid() {};\n    $data.Container.registerType('Edm.Guid', Edm_Guid);\n    $data.Container.mapType(Edm_Guid, $data.Guid);\n\n    function Edm_Int16() {};\n    $data.Container.registerType('Edm.Int16', Edm_Int16);\n    $data.Container.mapType(Edm_Int16, $data.Int16);\n\n    function Edm_Int32() {};\n    $data.Container.registerType('Edm.Int32', Edm_Int32);\n    $data.Container.mapType(Edm_Int32, $data.Integer);\n\n    function Edm_Int64() {};\n    $data.Container.registerType('Edm.Int64', Edm_Int64);\n    $data.Container.mapType(Edm_Int64, $data.Int64);\n\n    function Edm_Byte() {};\n    $data.Container.registerType('Edm.Byte', Edm_Byte);\n    $data.Container.mapType(Edm_Byte, $data.Byte);\n\n    function Edm_SByte() {};\n    $data.Container.registerType('Edm.SByte', Edm_SByte);\n    $data.Container.mapType(Edm_SByte, $data.SByte);\n\n    function Edm_String() {};\n    $data.Container.registerType('Edm.String', Edm_String);\n    $data.Container.mapType(Edm_String, $data.String);\n\n    function Edm_GeographyPoint() {};\n    $data.Container.registerType('Edm.GeographyPoint', Edm_GeographyPoint);\n    $data.Container.mapType(Edm_GeographyPoint, $data.GeographyPoint);\n\n    function Edm_GeographyLineString() {};\n    $data.Container.registerType('Edm.GeographyLineString', Edm_GeographyLineString);\n    $data.Container.mapType(Edm_GeographyLineString, $data.GeographyLineString);\n\n    function Edm_GeographyPolygon() {};\n    $data.Container.registerType('Edm.GeographyPolygon', Edm_GeographyPolygon);\n    $data.Container.mapType(Edm_GeographyPolygon, $data.GeographyPolygon);\n\n    function Edm_GeographyMultiPoint() {};\n    $data.Container.registerType('Edm.GeographyMultiPoint', Edm_GeographyMultiPoint);\n    $data.Container.mapType(Edm_GeographyMultiPoint, $data.GeographyMultiPoint);\n\n    function Edm_GeographyMultiLineString() {};\n    $data.Container.registerType('Edm.GeographyMultiLineString', Edm_GeographyMultiLineString);\n    $data.Container.mapType(Edm_GeographyMultiLineString, $data.GeographyMultiLineString);\n\n    function Edm_GeographyMultiPolygon() {};\n    $data.Container.registerType('Edm.GeographyMultiPolygon', Edm_GeographyMultiPolygon);\n    $data.Container.mapType(Edm_GeographyMultiPolygon, $data.GeographyMultiPolygon);\n\n    function Edm_GeographyCollection() {};\n    $data.Container.registerType('Edm.GeographyCollection', Edm_GeographyCollection);\n    $data.Container.mapType(Edm_GeographyCollection, $data.GeographyCollection);\n\n    function Edm_GeometryPoint() {};\n    $data.Container.registerType('Edm.GeometryPoint', Edm_GeometryPoint);\n    $data.Container.mapType(Edm_GeometryPoint, $data.GeometryPoint);\n\n    function Edm_GeometryLineString() {};\n    $data.Container.registerType('Edm.GeometryLineString', Edm_GeometryLineString);\n    $data.Container.mapType(Edm_GeometryLineString, $data.GeometryLineString);\n\n    function Edm_GeometryPolygon() {};\n    $data.Container.registerType('Edm.GeometryPolygon', Edm_GeometryPolygon);\n    $data.Container.mapType(Edm_GeometryPolygon, $data.GeometryPolygon);\n\n    function Edm_GeometryMultiPoint() {};\n    $data.Container.registerType('Edm.GeometryMultiPoint', Edm_GeometryMultiPoint);\n    $data.Container.mapType(Edm_GeometryMultiPoint, $data.GeometryMultiPoint);\n\n    function Edm_GeometryMultiLineString() {};\n    $data.Container.registerType('Edm.GeometryMultiLineString', Edm_GeometryMultiLineString);\n    $data.Container.mapType(Edm_GeometryMultiLineString, $data.GeometryMultiLineString);\n\n    function Edm_GeometryMultiPolygon() {};\n    $data.Container.registerType('Edm.GeometryMultiPolygon', Edm_GeometryMultiPolygon);\n    $data.Container.mapType(Edm_GeometryMultiPolygon, $data.GeometryMultiPolygon);\n\n    function Edm_GeometryCollection() {};\n    $data.Container.registerType('Edm.GeometryCollection', Edm_GeometryCollection);\n    $data.Container.mapType(Edm_GeometryCollection, $data.GeometryCollection);\n\n    $data.oDataEdmMapping = {\n        '$data.Byte': 'Edm.Byte',\n        '$data.SByte': 'Edm.SByte',\n        '$data.Decimal': 'Edm.Decimal',\n        '$data.Float': 'Edm.Float',\n        '$data.Int16': 'Edm.Int16',\n        '$data.Int64': 'Edm.Int64',\n        '$data.DateTimeOffset': 'Edm.DateTimeOffset',\n        '$data.Time': 'Edm.TimeOfDay',\n        '$data.Day': 'Edm.Date',\n        '$data.Duration': 'Edm.Duration',\n        '$data.Boolean': 'Edm.Boolean',\n        '$data.Blob': 'Edm.Binary',\n        '$data.Date': 'Edm.DateTime',\n        '$data.Number': 'Edm.Double',\n        '$data.Integer': 'Edm.Int32',\n        '$data.Int32': 'Edm.Int32',\n        '$data.String': 'Edm.String',\n        '$data.ObjectID': 'Edm.String',\n        '$data.GeographyPoint': 'Edm.GeographyPoint',\n        '$data.GeographyLineString': 'Edm.GeographyLineString',\n        '$data.GeographyPolygon': 'Edm.GeographyPolygon',\n        '$data.GeographyMultiPoint': 'Edm.GeographyMultiPoint',\n        '$data.GeographyMultiLineString': 'Edm.GeographyMultiLineString',\n        '$data.GeographyMultiPolygon': 'Edm.GeographyMultiPolygon',\n        '$data.GeographyCollection': 'Edm.GeographyCollection',\n        '$data.GeometryPoint': 'Edm.GeometryPoint',\n        '$data.GeometryLineString': 'Edm.GeometryLineString',\n        '$data.GeometryPolygon': 'Edm.GeometryPolygon',\n        '$data.GeometryMultiPoint': 'Edm.GeometryMultiPoint',\n        '$data.GeometryMultiLineString': 'Edm.GeometryMultiLineString',\n        '$data.GeometryMultiPolygon': 'Edm.GeometryMultiPolygon',\n        '$data.GeometryCollection': 'Edm.GeometryCollection',\n        '$data.Guid': 'Edm.Guid'\n    };\n})(_TypeSystem2.default);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":18}],22:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _Exception = require('../Exception.js');\n\nvar _Exception2 = _interopRequireDefault(_Exception);\n\nvar _utils = require('../utils.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.GeographyBase */\n_TypeSystem2.default.GeographyBase = function GeographyBase() {\n    _TypeSystem2.default.Geospatial.apply(this, arguments);\n\n    this.crs = this.crs || _TypeSystem2.default.GeographyBase.defaultCrs;\n    _TypeSystem2.default.GeographyBase.validateGeoJSON(this);\n};\n\n_TypeSystem2.default.GeographyBase.disableSRID = false;\n_TypeSystem2.default.GeographyBase.defaultCrs = {\n    properties: {\n        name: 'EPSG:4326'\n    },\n    type: 'name'\n};\n\n_TypeSystem2.default.GeographyBase.parseFromString = function (strData) {\n    var lparenIdx = strData.indexOf('(');\n    if (lparenIdx >= 0) {\n        var name = strData.substring(0, lparenIdx).toLowerCase();\n        var type = _TypeSystem2.default.GeographyBase.registered[name];\n\n        if (type && type.parseFromString && type != _TypeSystem2.default.GeographyBase) {\n            return type.parseFromString(strData);\n        } else {\n            _utils.Guard.raise(new _Exception2.default('parseFromString', 'Not Implemented', strData));\n        }\n    }\n};\n_TypeSystem2.default.GeographyBase.stringifyToUrl = function (geoData) {\n    if (geoData instanceof _TypeSystem2.default.GeographyBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\n        return geoData.constructor.stringifyToUrl(geoData);\n    } else if (geoData instanceof _TypeSystem2.default.GeographyBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\n        var data;\n\n        var _ret = function () {\n            var getSRID = function getSRID(g) {\n                if (!_TypeSystem2.default.GeographyBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name) {\n                    var r = /EPSG:(\\d+)/i;\n                    var matches = r.exec(g.crs.properties.name);\n                    if (matches) {\n                        data += \"SRID=\" + matches[1] + \";\";\n                    }\n                }\n                return data;\n            };\n\n            var buildArray = function buildArray(d) {\n                if (Array.isArray(d[0])) {\n\n                    for (var i = 0; i < d.length; i++) {\n                        if (i > 0) data += ',';\n                        if (Array.isArray(d[i][0])) data += '(';\n\n                        buildArray(d[i]);\n\n                        if (Array.isArray(d[i][0])) data += ')';\n                    }\n                } else {\n                    data += d.join(' ');\n                }\n                return data;\n            };\n\n            data = \"geography'\";\n\n            data = getSRID(geoData);\n            data += geoData.type + '(';\n\n            data = buildArray(geoData.coordinates);\n\n            data += \")'\";\n            return {\n                v: data\n            };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n        _utils.Guard.raise(new _Exception2.default('stringifyToUrl on instance type', 'Not Implemented', geoData));\n    }\n};\n_TypeSystem2.default.GeographyBase.registerType = function (name, type, base) {\n    _TypeSystem2.default.SimpleBase.registerType(name, type, base || _TypeSystem2.default.GeographyBase);\n\n    _TypeSystem2.default.GeographyBase.registered = _TypeSystem2.default.GeographyBase.registered || {};\n    _TypeSystem2.default.GeographyBase.registered[name.toLowerCase()] = type;\n};\n_TypeSystem2.default.GeographyBase.validateGeoJSON = function (geoData) {\n    var type = geoData.type;\n    if (type) {\n        var geoType = _TypeSystem2.default.GeographyBase.registered[type.toLowerCase()];\n        if (typeof geoType.validateGeoJSON === 'function') {\n            var isValid = geoType.validateGeoJSON(geoData);\n            if (isValid) {\n                return isValid;\n            } else {\n                _utils.Guard.raise(new _Exception2.default(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\n            }\n        }\n    }\n    console.log('GeoJSON validation missing', geoData);\n    return;\n};\n_TypeSystem2.default.SimpleBase.registerType('GeographyBase', _TypeSystem2.default.GeographyBase, _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.GeographyBase'], _TypeSystem2.default.GeographyBase);\n\n/* $data.GeographyPoint */\n_TypeSystem2.default.GeographyPoint = function GeographyPoint(lon, lat) {\n    if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && Array.isArray(lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: lon });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && ('longitude' in lon || 'latitude' in lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon.longitude, lon.latitude] });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && ('lng' in lon || 'lat' in lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon.lng, lon.lat] });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object') {\n        _TypeSystem2.default.GeographyBase.call(this, lon);\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon || 0, lat || 0] });\n    }\n};\n_TypeSystem2.default.GeographyPoint.validateGeoJSON = function (geoData) {\n    return geoData && Array.isArray(geoData.coordinates) && geoData.coordinates.length == 2 && typeof geoData.coordinates[0] === 'number' && typeof geoData.coordinates[1] === 'number';\n};\n_TypeSystem2.default.GeographyPoint.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var values = data.split(' ');\n\n    return new _TypeSystem2.default.GeographyPoint(parseFloat(values[0]), parseFloat(values[1]));\n};\n_TypeSystem2.default.GeographyPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('Point', _TypeSystem2.default.GeographyPoint);\nObject.defineProperty(_TypeSystem2.default.GeographyPoint.prototype, 'longitude', { get: function get() {\n        return this.coordinates[0];\n    }, set: function set(v) {\n        this.coordinates[0] = v;\n    } });\nObject.defineProperty(_TypeSystem2.default.GeographyPoint.prototype, 'latitude', { get: function get() {\n        return this.coordinates[1];\n    }, set: function set(v) {\n        this.coordinates[1] = v;\n    } });\n_TypeSystem2.default.Container.registerType(['$data.GeographyPoint', 'GeographyPoint', '$data.Geography', 'Geography', 'geography', 'geo'], _TypeSystem2.default.GeographyPoint);\n_TypeSystem2.default.Geography = _TypeSystem2.default.GeographyPoint;\n\n/* $data.GeographyLineString */\n_TypeSystem2.default.GeographyLineString = function GeographyLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('LineString', _TypeSystem2.default.GeographyLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeographyLineString', 'GeographyLineString'], _TypeSystem2.default.GeographyLineString);\n\n/* $data.GeographyPolygon */\n_TypeSystem2.default.GeographyPolygon = function GeographyPolygon(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ('topLeft' in data && 'bottomRight' in data || 'topRight' in data && 'bottomLeft' in data)) {\n        var tl, tr, bl, br;\n\n        if ('topLeft' in data && 'bottomRight' in data) {\n            tl = data.topLeft instanceof _TypeSystem2.default.GeographyPoint ? data.topLeft : new _TypeSystem2.default.GeographyPoint(data.topLeft);\n            br = data.bottomRight instanceof _TypeSystem2.default.GeographyPoint ? data.bottomRight : new _TypeSystem2.default.GeographyPoint(data.bottomRight);\n            tr = new _TypeSystem2.default.GeographyPoint([br.coordinates[0], tl.coordinates[1]]);\n            bl = new _TypeSystem2.default.GeographyPoint([tl.coordinates[0], br.coordinates[1]]);\n        } else {\n            tr = data.topRight instanceof _TypeSystem2.default.GeographyPoint ? data.topRight : new _TypeSystem2.default.GeographyPoint(data.topRight);\n            bl = data.bottomLeft instanceof _TypeSystem2.default.GeographyPoint ? data.bottomLeft : new _TypeSystem2.default.GeographyPoint(data.bottomLeft);\n            tl = new _TypeSystem2.default.GeographyPoint([bl.coordinates[0], tr.coordinates[1]]);\n            br = new _TypeSystem2.default.GeographyPoint([tr.coordinates[0], bl.coordinates[1]]);\n        }\n\n        var coordinates = [];\n        coordinates.push([].concat(tl.coordinates));\n        coordinates.push([].concat(tr.coordinates));\n        coordinates.push([].concat(br.coordinates));\n        coordinates.push([].concat(bl.coordinates));\n        coordinates.push([].concat(tl.coordinates));\n\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [coordinates] });\n    } else if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyPolygon.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\n\n    var data = [];\n    for (var i = 0; i < rings.length; i++) {\n        var polyPoints = [];\n        var pairs = rings[i].split(',');\n        for (var j = 0; j < pairs.length; j++) {\n            var values = pairs[j].split(' ');\n\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\n        }\n        data.push(polyPoints);\n    }\n\n    return new _TypeSystem2.default.GeographyPolygon(data);\n};\n_TypeSystem2.default.GeographyPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('Polygon', _TypeSystem2.default.GeographyPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeographyPolygon', 'GeographyPolygon'], _TypeSystem2.default.GeographyPolygon);\n\n/* $data.GeographyMultiPoint */\n_TypeSystem2.default.GeographyMultiPoint = function GeographyMultiPoint(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiPoint.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiPoint', _TypeSystem2.default.GeographyMultiPoint);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiPoint', 'GeographyMultiPoint'], _TypeSystem2.default.GeographyMultiPoint);\n\n/* $data.GeographyMultiLineString */\n_TypeSystem2.default.GeographyMultiLineString = function GeographyMultiLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiLineString', _TypeSystem2.default.GeographyMultiLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiLineString', 'GeographyMultiLineString'], _TypeSystem2.default.GeographyMultiLineString);\n\n/* $data.GeographyMultiPolygon */\n_TypeSystem2.default.GeographyMultiPolygon = function GeographyMultiPolygon(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\n        var polygons = geoData.coordinates[k];\n        var isValid = isValid && Array.isArray(polygons);\n\n        for (var i = 0; isValid && i < polygons.length; i++) {\n            var polygon = polygons[i];\n            var isValid = isValid && Array.isArray(polygon);\n\n            for (var j = 0; isValid && j < polygon.length; j++) {\n                var point = polygon[j];\n\n                isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n            }\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiPolygon', _TypeSystem2.default.GeographyMultiPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiPolygon', 'GeographyMultiPolygon'], _TypeSystem2.default.GeographyMultiPolygon);\n\n/* $data.GeographyCollection */\n_TypeSystem2.default.GeographyCollection = function GeographyCollection(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { geometries: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyCollection.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.geometries);\n\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\n        var geometry = geoData.geometries[i];\n        try {\n            isValid = isValid && _TypeSystem2.default.GeographyBase.validateGeoJSON(geometry);\n        } catch (e) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyCollection.validMembers = ['geometries'];\n_TypeSystem2.default.GeographyBase.registerType('GeometryCollection', _TypeSystem2.default.GeographyCollection);\n_TypeSystem2.default.Container.registerType(['$data.GeographyCollection', 'GeographyCollection'], _TypeSystem2.default.GeographyCollection);\n\n/* converters */\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyCollection, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyCollection(value) : value;\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../Exception.js\":14,\"../TypeSystem.js\":18,\"../utils.js\":31}],23:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _Exception = require('../Exception.js');\n\nvar _Exception2 = _interopRequireDefault(_Exception);\n\nvar _utils = require('../utils.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.Geometry */\n_TypeSystem2.default.GeometryBase = function GeometryBase() {\n    _TypeSystem2.default.Geospatial.apply(this, arguments);\n\n    this.crs = this.crs || _TypeSystem2.default.GeometryBase.defaultCrs;\n    _TypeSystem2.default.GeometryBase.validateGeoJSON(this);\n};\n\n_TypeSystem2.default.GeometryBase.disableSRID = false;\n_TypeSystem2.default.GeometryBase.defaultCrs = {\n    properties: {\n        name: 'EPSG:0'\n    },\n    type: 'name'\n};\n\n_TypeSystem2.default.GeometryBase.parseFromString = function (strData) {\n    var lparenIdx = strData.indexOf('(');\n    if (lparenIdx >= 0) {\n        var name = strData.substring(0, lparenIdx).toLowerCase();\n        var type = _TypeSystem2.default.GeometryBase.registered[name];\n\n        if (type && type.parseFromString && type != _TypeSystem2.default.GeometryBase) {\n            return type.parseFromString(strData);\n        } else {\n            _utils.Guard.raise(new _Exception2.default('parseFromString', 'Not Implemented', strData));\n        }\n    }\n};\n_TypeSystem2.default.GeometryBase.stringifyToUrl = function (geoData) {\n    if (geoData instanceof _TypeSystem2.default.GeometryBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\n        return geoData.constructor.stringifyToUrl(geoData);\n    } else if (geoData instanceof _TypeSystem2.default.GeometryBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\n        var data;\n\n        var _ret = function () {\n            var getSRID = function getSRID(g) {\n                if (!_TypeSystem2.default.GeometryBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name) {\n                    var r = /EPSG:(\\d+)/i;\n                    var matches = r.exec(g.crs.properties.name);\n                    if (matches) {\n                        data += \"SRID=\" + matches[1] + \";\";\n                    }\n                }\n                return data;\n            };\n\n            var buildArray = function buildArray(d) {\n                if (Array.isArray(d[0])) {\n\n                    for (var i = 0; i < d.length; i++) {\n                        if (i > 0) data += ',';\n                        if (Array.isArray(d[i][0])) data += '(';\n\n                        buildArray(d[i]);\n\n                        if (Array.isArray(d[i][0])) data += ')';\n                    }\n                } else {\n                    data += d.join(' ');\n                }\n                return data;\n            };\n\n            data = \"geometry'\";\n\n            data = getSRID(geoData);\n            data += geoData.type + '(';\n\n            data = buildArray(geoData.coordinates);\n\n            data += \")'\";\n            return {\n                v: data\n            };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n        _utils.Guard.raise(new _Exception2.default('stringifyToUrl on instance type', 'Not Implemented', geoData));\n    }\n};\n_TypeSystem2.default.GeometryBase.registerType = function (name, type, base) {\n    _TypeSystem2.default.SimpleBase.registerType(name, type, base || _TypeSystem2.default.GeometryBase);\n\n    _TypeSystem2.default.GeometryBase.registered = _TypeSystem2.default.GeometryBase.registered || {};\n    _TypeSystem2.default.GeometryBase.registered[name.toLowerCase()] = type;\n};\n_TypeSystem2.default.GeometryBase.validateGeoJSON = function (geoData) {\n    var type = geoData.type;\n    if (type) {\n        var geoType = _TypeSystem2.default.GeometryBase.registered[type.toLowerCase()];\n        if (typeof geoType.validateGeoJSON === 'function') {\n            var isValid = geoType.validateGeoJSON(geoData);\n            if (isValid) {\n                return isValid;\n            } else {\n                _utils.Guard.raise(new _Exception2.default(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\n            }\n        }\n    }\n    console.log('GeoJSON validation missing', geoData);\n    return;\n};\n_TypeSystem2.default.SimpleBase.registerType('GeometryBase', _TypeSystem2.default.GeometryBase, _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.GeometryBase'], _TypeSystem2.default.GeometryBase);\n\n/* $data.GeometryPoint */\n_TypeSystem2.default.GeometryPoint = function GeometryPoint(x, y) {\n    var param = x;\n    if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && Array.isArray(param)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: param });\n    } else if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && ('x' in param || 'y' in param)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [param.x, param.y] });\n    } else if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object') {\n        _TypeSystem2.default.GeometryBase.call(this, param);\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [x || 0, y || 0] });\n    }\n};\n_TypeSystem2.default.GeometryPoint.validateGeoJSON = function (geoData) {\n    return geoData && Array.isArray(geoData.coordinates) && geoData.coordinates.length == 2 && typeof geoData.coordinates[0] === 'number' && typeof geoData.coordinates[1] === 'number';\n};\n_TypeSystem2.default.GeometryPoint.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var values = data.split(' ');\n\n    return new _TypeSystem2.default.GeometryPoint(parseFloat(values[0]), parseFloat(values[1]));\n};\n_TypeSystem2.default.GeometryPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('Point', _TypeSystem2.default.GeometryPoint);\nObject.defineProperty(_TypeSystem2.default.GeometryPoint.prototype, 'x', { get: function get() {\n        return this.coordinates[0];\n    }, set: function set(v) {\n        this.coordinates[0] = v;\n    } });\nObject.defineProperty(_TypeSystem2.default.GeometryPoint.prototype, 'y', { get: function get() {\n        return this.coordinates[1];\n    }, set: function set(v) {\n        this.coordinates[1] = v;\n    } });\n_TypeSystem2.default.Container.registerType(['$data.GeometryPoint', 'GeometryPoint'], _TypeSystem2.default.GeometryPoint);\n\n/* $data.GeometryLineString */\n_TypeSystem2.default.GeometryLineString = function GeometryLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('LineString', _TypeSystem2.default.GeometryLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeometryLineString', 'GeometryLineString'], _TypeSystem2.default.GeometryLineString);\n\n/* $data.GeometryPolygon */\n_TypeSystem2.default.GeometryPolygon = function GeometryPolygon(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ('topLeft' in data && 'bottomRight' in data || 'topRight' in data && 'bottomLeft' in data)) {\n        var tl, tr, bl, br;\n\n        if ('topLeft' in data && 'bottomRight' in data) {\n            tl = data.topLeft instanceof _TypeSystem2.default.GeometryPoint ? data.topLeft : new _TypeSystem2.default.GeometryPoint(data.topLeft);\n            br = data.bottomRight instanceof _TypeSystem2.default.GeometryPoint ? data.bottomRight : new _TypeSystem2.default.GeometryPoint(data.bottomRight);\n            tr = new _TypeSystem2.default.GeometryPoint([br.coordinates[0], tl.coordinates[1]]);\n            bl = new _TypeSystem2.default.GeometryPoint([tl.coordinates[0], br.coordinates[1]]);\n        } else {\n            tr = data.topRight instanceof _TypeSystem2.default.GeometryPoint ? data.topRight : new _TypeSystem2.default.GeometryPoint(data.topRight);\n            bl = data.bottomLeft instanceof _TypeSystem2.default.GeometryPoint ? data.bottomLeft : new _TypeSystem2.default.GeometryPoint(data.bottomLeft);\n            tl = new _TypeSystem2.default.GeometryPoint([bl.coordinates[0], tr.coordinates[1]]);\n            br = new _TypeSystem2.default.GeometryPoint([tr.coordinates[0], bl.coordinates[1]]);\n        }\n\n        var coordinates = [];\n        coordinates.push([].concat(tl.coordinates));\n        coordinates.push([].concat(tr.coordinates));\n        coordinates.push([].concat(br.coordinates));\n        coordinates.push([].concat(bl.coordinates));\n        coordinates.push([].concat(tl.coordinates));\n\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [coordinates] });\n    } else if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryPolygon.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\n\n    var data = [];\n    for (var i = 0; i < rings.length; i++) {\n        var polyPoints = [];\n        var pairs = rings[i].split(',');\n        for (var j = 0; j < pairs.length; j++) {\n            var values = pairs[j].split(' ');\n\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\n        }\n        data.push(polyPoints);\n    }\n\n    return new _TypeSystem2.default.GeometryPolygon(data);\n};\n_TypeSystem2.default.GeometryPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('Polygon', _TypeSystem2.default.GeometryPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeometryPolygon', 'GeometryPolygon'], _TypeSystem2.default.GeometryPolygon);\n\n/* $data.GeometryMultiPoint */\n_TypeSystem2.default.GeometryMultiPoint = function GeometryMultiPoint(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiPoint.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiPoint', _TypeSystem2.default.GeometryMultiPoint);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiPoint', 'GeometryMultiPoint'], _TypeSystem2.default.GeometryMultiPoint);\n\n/* $data.GeometryMultiLineString */\n_TypeSystem2.default.GeometryMultiLineString = function GeometryMultiLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiLineString', _TypeSystem2.default.GeometryMultiLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiLineString', 'GeometryMultiLineString'], _TypeSystem2.default.GeometryMultiLineString);\n\n/* $data.GeometryMultiPolygon */\n_TypeSystem2.default.GeometryMultiPolygon = function GeometryMultiPolygon(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\n        var polygons = geoData.coordinates[k];\n        var isValid = isValid && Array.isArray(polygons);\n\n        for (var i = 0; isValid && i < polygons.length; i++) {\n            var polygon = polygons[i];\n            var isValid = isValid && Array.isArray(polygon);\n\n            for (var j = 0; isValid && j < polygon.length; j++) {\n                var point = polygon[j];\n\n                isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n            }\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiPolygon', _TypeSystem2.default.GeometryMultiPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiPolygon', 'GeometryMultiPolygon'], _TypeSystem2.default.GeometryMultiPolygon);\n\n/* $data.GeometryCollection */\n_TypeSystem2.default.GeometryCollection = function GeometryCollection(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { geometries: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryCollection.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.geometries);\n\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\n        var geometry = geoData.geometries[i];\n        try {\n            isValid = isValid && _TypeSystem2.default.GeometryBase.validateGeoJSON(geometry);\n        } catch (e) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryCollection.validMembers = ['geometries'];\n_TypeSystem2.default.GeometryBase.registerType('GeometryCollection', _TypeSystem2.default.GeometryCollection);\n_TypeSystem2.default.Container.registerType(['$data.GeometryCollection', 'GeometryCollection'], _TypeSystem2.default.GeometryCollection);\n\n/* converters */\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryCollection, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryCollection(value) : value;\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../Exception.js\":14,\"../TypeSystem.js\":18,\"../utils.js\":31}],24:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Geospatial = function Geospatial() {\n    this.type = this.constructor.type;\n    if (Array.isArray(this.constructor.validMembers)) {\n        for (var i = 0; i < this.constructor.validMembers.length; i++) {\n            var name = this.constructor.validMembers[i];\n            this[name] = undefined;\n        }\n    }\n\n    _TypeSystem2.default.SimpleBase.apply(this, arguments);\n    this.type = this.constructor.type || 'Unknown';\n};\n_TypeSystem2.default.SimpleBase.registerType('Geospatial', _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.Geospatial', 'Geospatial'], _TypeSystem2.default.Geospatial);\n\n_TypeSystem2.default.point = function (arg) {\n    if (arg && arg.crs) {\n        if (arg.crs.properties && arg.crs.properties.name === _TypeSystem2.default.GeometryBase.defaultCrs.properties.name) {\n            return new _TypeSystem2.default.GeometryPoint(arg);\n        } else {\n            return new _TypeSystem2.default.GeographyPoint(arg);\n        }\n    } else if (arg) {\n        if ('x' in arg && 'y' in arg) {\n            return new _TypeSystem2.default.GeometryPoint(arg.x, arg.y);\n        } else if ('longitude' in arg && 'latitude' in arg) {\n            return new _TypeSystem2.default.GeographyPoint(arg.longitude, arg.latitude);\n        } else if ('lng' in arg && 'lat' in arg) {\n            return new _TypeSystem2.default.GeographyPoint(arg.lng, arg.lat);\n        }\n    }\n};\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":18}],25:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Guid = function Guid(value) {\n    ///<param name=\"value\" type=\"string\" />\n\n    if (value === undefined || typeof value === 'string' && /^[a-zA-z0-9]{8}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{12}$/.test(value)) {\n        this.value = value || '00000000-0000-0000-0000-000000000000';\n    } else {\n        throw Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Guid', value));\n    }\n};\n_TypeSystem2.default.Container.registerType(['$data.Guid', 'Guid', 'guid'], _TypeSystem2.default.Guid);\n_TypeSystem2.default.Container.registerConverter('$data.Guid', {\n    '$data.String': function $dataString(value) {\n        return value ? _TypeSystem2.default.parseGuid(value).toString() : value;\n    },\n    '$data.Guid': function $dataGuid(value) {\n        return value ? value.toString() : value;\n    }\n}, {\n    '$data.String': function $dataString(value) {\n        return value ? value.toString() : value;\n    }\n});\n\n_TypeSystem2.default.Guid.prototype.toJSON = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.prototype.valueOf = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.prototype.toString = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.NewGuid = function () {\n    return _TypeSystem2.default.createGuid();\n};\n\n_TypeSystem2.default.parseGuid = function (guid) {\n    return new _TypeSystem2.default.Guid(guid);\n};\n\n(function () {\n    /*!\r\n    Math.uuid.js (v1.4)\r\n    http://www.broofa.com\r\n    mailto:robert@broofa.com\r\n      Copyright (c) 2010 Robert Kieffer\r\n    Dual licensed under the MIT and GPL licenses.\r\n    */\n\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n    _TypeSystem2.default.createGuid = function (guidString) {\n        if (guidString) {\n            return new _TypeSystem2.default.Guid(guidString);\n        };\n\n        var len;\n        var chars = CHARS,\n            uuid = [],\n            i;\n        var radix = chars.length;\n\n        if (len) {\n            // Compact form\n            for (i = 0; i < len; i++) {\n                uuid[i] = chars[0 | Math.random() * radix];\n            }\n        } else {\n            // rfc4122, version 4 form\n            var r;\n\n            // rfc4122 requires these characters\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\n            // per rfc4122, sec. 4.1.5\n            for (i = 0; i < 36; i++) {\n                if (!uuid[i]) {\n                    r = 0 | Math.random() * 16;\n                    uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n                }\n            }\n        }\n\n        return _TypeSystem2.default.parseGuid(uuid.join(''));\n    };\n})();\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":18}],26:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.SimpleBase */\n_TypeSystem2.default.SimpleBase = function SimpleBase(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && data) {\n        if (Array.isArray(this.constructor.validMembers)) {\n            for (var i = 0; i < this.constructor.validMembers.length; i++) {\n                var name = this.constructor.validMembers[i];\n\n                if (data[name] !== undefined) {\n                    this[name] = data[name];\n                }\n            }\n        } else {\n            delete data.type;\n            _TypeSystem2.default.typeSystem.extend(this, data);\n        }\n    }\n};\n_TypeSystem2.default.SimpleBase.registerType = function (name, type, base) {\n    base = base || _TypeSystem2.default.SimpleBase;\n\n    type.type = name;\n    type.prototype = Object.create(base.prototype);\n    type.prototype.constructor = type;\n};\n_TypeSystem2.default.Container.registerType(['$data.SimpleBase', 'SimpleBase'], _TypeSystem2.default.SimpleBase);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":18}],27:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = require('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Number = typeof Number !== 'undefined' ? Number : function JayNumber() {};\n_TypeSystem2.default.Date = typeof Date !== 'undefined' ? Date : function JayDate() {};\n_TypeSystem2.default.String = typeof String !== 'undefined' ? String : function JayString() {};\n_TypeSystem2.default.Boolean = typeof Boolean !== 'undefined' ? Boolean : function JayBoolean() {};\n_TypeSystem2.default.Array = typeof Array !== 'undefined' ? Array : function JayArray() {};\n_TypeSystem2.default.Object = typeof Object !== 'undefined' ? Object : function JayObject() {};\n_TypeSystem2.default.Function = Function;\n\n_TypeSystem2.default.Byte = function JayByte() {};\n_TypeSystem2.default.SByte = function JaySByte() {};\n_TypeSystem2.default.Decimal = function JayDecimal() {};\n_TypeSystem2.default.Float = _TypeSystem2.default.Single = function JayFloat() {};\n_TypeSystem2.default.Integer = function JayInteger() {};\n_TypeSystem2.default.Int16 = function JayInt16(v) {};\n_TypeSystem2.default.Int32 = function JayInt32() {};\n_TypeSystem2.default.Int64 = function JayInt64(v) {};\n_TypeSystem2.default.ObjectID = typeof _TypeSystem2.default.mongoDBDriver !== 'undefined' && typeof _TypeSystem2.default.mongoDBDriver.ObjectID !== 'undefined' ? _TypeSystem2.default.mongoDBDriver.ObjectID : function JayObjectID() {};\n_TypeSystem2.default.Time = function JayTime() {};\n_TypeSystem2.default.Day = function JayDay() {};\n_TypeSystem2.default.Duration = function JayDuration() {};\n_TypeSystem2.default.DateTimeOffset = function JayDateTimeOffset(val) {\n    this.value = val;\n};\n_TypeSystem2.default.DateTimeOffset.prototype.toJSON = function () {\n    return this.value instanceof Date ? this.value.toISOString() : this.value;\n};\n\n_TypeSystem2.default.Container.registerType([\"$data.Number\", \"number\", \"JayNumber\", \"double\"], _TypeSystem2.default.Number);\n_TypeSystem2.default.Container.registerType([\"$data.Integer\", \"int\", \"integer\", \"JayInteger\"], _TypeSystem2.default.Integer);\n_TypeSystem2.default.Container.registerType([\"$data.Int32\", \"int32\", \"JayInt32\"], _TypeSystem2.default.Int32);\n_TypeSystem2.default.Container.registerType([\"$data.Byte\", \"byte\", \"JayByte\"], _TypeSystem2.default.Byte);\n_TypeSystem2.default.Container.registerType([\"$data.SByte\", \"sbyte\", \"JaySByte\"], _TypeSystem2.default.SByte);\n_TypeSystem2.default.Container.registerType([\"$data.Decimal\", \"decimal\", \"JayDecimal\"], _TypeSystem2.default.Decimal);\n_TypeSystem2.default.Container.registerType([\"$data.Float\", \"$data.Single\", \"float\", \"single\", \"JayFloat\"], _TypeSystem2.default.Float);\n_TypeSystem2.default.Container.registerType([\"$data.Int16\", \"int16\", \"word\", \"JayInt16\"], _TypeSystem2.default.Int16);\n_TypeSystem2.default.Container.registerType([\"$data.Int64\", \"int64\", \"long\", \"JayInt64\"], _TypeSystem2.default.Int64);\n_TypeSystem2.default.Container.registerType([\"$data.String\", \"string\", \"text\", \"character\", \"JayString\"], _TypeSystem2.default.String);\n_TypeSystem2.default.Container.registerType([\"$data.Array\", \"array\", \"Array\", \"[]\", \"JayArray\"], _TypeSystem2.default.Array, function () {\n    return _TypeSystem2.default.Array.apply(undefined, arguments);\n});\n_TypeSystem2.default.Container.registerType([\"$data.Date\", \"datetime\", \"date\", \"JayDate\"], _TypeSystem2.default.Date);\n_TypeSystem2.default.Container.registerType([\"$data.Time\", \"time\", \"JayTime\"], _TypeSystem2.default.Time);\n_TypeSystem2.default.Container.registerType([\"$data.Day\", \"day\", \"JayDay\"], _TypeSystem2.default.Day);\n_TypeSystem2.default.Container.registerType([\"$data.Duration\", \"duration\", \"JayDuration\"], _TypeSystem2.default.Duration);\n_TypeSystem2.default.Container.registerType([\"$data.DateTimeOffset\", \"offset\", \"datetimeoffset\", \"JayDateTimeOffset\"], _TypeSystem2.default.DateTimeOffset);\n_TypeSystem2.default.Container.registerType([\"$data.Boolean\", \"bool\", \"boolean\", \"JayBoolean\"], _TypeSystem2.default.Boolean);\n_TypeSystem2.default.Container.registerType([\"$data.Object\", \"Object\", \"object\", \"{}\", \"JayObject\"], _TypeSystem2.default.Object);\n_TypeSystem2.default.Container.registerType([\"$data.Function\", \"Function\", \"function\"], _TypeSystem2.default.Function);\n_TypeSystem2.default.Container.registerType(['$data.ObjectID', 'ObjectID', 'objectId', 'objectid', 'ID', 'Id', 'id', 'JayObjectID'], _TypeSystem2.default.ObjectID);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":18}],28:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Container = exports.$C = exports.Exception = exports.Guard = undefined;\n\nvar _TypeSystem = require('./TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _Types = require('./Types/Types.js');\n\nvar _Types2 = _interopRequireDefault(_Types);\n\nvar _Trace = require('./Trace/Trace.js');\n\nvar _Trace2 = _interopRequireDefault(_Trace);\n\nvar _Logger = require('./Trace/Logger.js');\n\nvar _Logger2 = _interopRequireDefault(_Logger);\n\nvar _SimpleBase = require('./Types/SimpleBase.js');\n\nvar _SimpleBase2 = _interopRequireDefault(_SimpleBase);\n\nvar _Geospatial = require('./Types/Geospatial.js');\n\nvar _Geospatial2 = _interopRequireDefault(_Geospatial);\n\nvar _Geography = require('./Types/Geography.js');\n\nvar _Geography2 = _interopRequireDefault(_Geography);\n\nvar _Geometry = require('./Types/Geometry.js');\n\nvar _Geometry2 = _interopRequireDefault(_Geometry);\n\nvar _Guid = require('./Types/Guid.js');\n\nvar _Guid2 = _interopRequireDefault(_Guid);\n\nvar _Blob = require('./Types/Blob.js');\n\nvar _Blob2 = _interopRequireDefault(_Blob);\n\nvar _EdmTypes = require('./Types/EdmTypes.js');\n\nvar _EdmTypes2 = _interopRequireDefault(_EdmTypes);\n\nvar _Converter = require('./Types/Converter.js');\n\nvar _Converter2 = _interopRequireDefault(_Converter);\n\nvar _utils = require('./utils.js');\n\nvar _Exception = require('./Exception.js');\n\nvar _Exception2 = _interopRequireDefault(_Exception);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Guard = exports.Guard = _utils.Guard;\n_TypeSystem2.default.Guard = _utils.Guard;\n\nvar Exception = exports.Exception = _Exception2.default;\n_TypeSystem2.default.Exception = _Exception2.default;\n\nvar $C = exports.$C = _TypeSystem.$C;\n_TypeSystem2.default.$C = _TypeSystem.$C;\n\nvar Container = exports.Container = _TypeSystem.Container;\nexports.default = _TypeSystem2.default;\n\n},{\"./Exception.js\":14,\"./Trace/Logger.js\":16,\"./Trace/Trace.js\":17,\"./TypeSystem.js\":18,\"./Types/Blob.js\":19,\"./Types/Converter.js\":20,\"./Types/EdmTypes.js\":21,\"./Types/Geography.js\":22,\"./Types/Geometry.js\":23,\"./Types/Geospatial.js\":24,\"./Types/Guid.js\":25,\"./Types/SimpleBase.js\":26,\"./Types/Types.js\":27,\"./utils.js\":31}],29:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _initializeJayDataClient = require('./initializeJayDataClient.js');\n\nvar _initializeJayDataClient2 = _interopRequireDefault(_initializeJayDataClient);\n\nvar _acorn = require('acorn');\n\nvar acorn = _interopRequireWildcard(_acorn);\n\nvar _package = require('../../package.json');\n\nvar pkg = _interopRequireWildcard(_package);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof console === 'undefined') {\n  console = {\n    warn: function warn() {},\n    error: function error() {},\n    log: function log() {},\n    dir: function dir() {},\n    time: function time() {},\n    timeEnd: function timeEnd() {}\n  };\n}\n\nif (!console.warn) console.warn = function () {};\nif (!console.error) console.error = function () {};\n\n(function ($data) {\n  ///<summary>\n  /// Collection of JayData services\n  ///</summary>\n  $data.__namespace = true;\n  $data.version = \"JayData \" + pkg.version;\n  $data.versionNumber = pkg.version;\n  $data.root = {};\n  $data.Acorn = acorn;\n})(_initializeJayDataClient2.default);\nexports.default = _initializeJayDataClient2.default;\n// Do not remove this block, it is used by jsdoc\n/**\r\n    @name $data.Base\r\n    @class base class\r\n*/\n\nmodule.exports = exports['default'];\n\n},{\"../../package.json\":7,\"./initializeJayDataClient.js\":30,\"acorn\":1}],30:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _data_handler;\nfunction _data_handler() {\n  console.log(\"@@@@\", this);\n  if (this instanceof _data_handler) {\n    var type = _data_handler[\"implementation\"].apply(this, arguments);\n    return new type(arguments[1]);\n  } else {\n    return _data_handler[\"implementation\"].apply(this, arguments);\n  }\n};\nmodule.exports = exports['default'];\n\n},{}],31:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Exception = require('./Exception');\n\nvar _Exception2 = _interopRequireDefault(_Exception);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Guard = {};\nGuard.requireValue = function (name, value) {\n  if (typeof value === 'undefined' || value === null) {\n    Guard.raise(name + \" requires a value other than undefined or null\");\n  }\n};\n\nGuard.requireType = function (name, value, typeOrTypes) {\n  var types = typeOrTypes instanceof Array ? typeOrTypes : [typeOrTypes];\n  return types.some(function (item) {\n    switch (typeof item === 'undefined' ? 'undefined' : _typeof(item)) {\n      case \"string\":\n        return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === item;\n      case \"function\":\n        return value instanceof item;\n      default:\n        Guard.raise(\"Unknown type format : \" + (typeof item === 'undefined' ? 'undefined' : _typeof(item)) + \" for: \" + name);\n    }\n  });\n};\n\nGuard.raise = function (exception) {\n  if (typeof intellisense === 'undefined') {\n    if (exception instanceof _Exception2.default) {\n      console.error(exception.name + ':', exception.message + '\\n', exception);\n    } else {\n      console.error(exception);\n    }\n    throw exception;\n  }\n};\n\nObject.isNullOrUndefined = function (value) {\n  return value === undefined || value === null;\n};\n\nexports.default = { Guard: Guard };\nmodule.exports = exports['default'];\n\n},{\"./Exception\":14}],32:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Access', null, null, {}, {\n    isAuthorized: function isAuthorized(access, user, sets, callback) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var clbWrapper = pHandler.createCallback(callback);\n        var pHandlerResult = pHandler.getPromise();\n\n        //clbWrapper.error('Authorization failed', 'Access authorization');\n        clbWrapper.success(true);\n\n        return pHandlerResult;\n\n        /*var error;\r\n          if (!access) error = 'Access undefined';\r\n        if (typeof access !== 'number') error = 'Invalid access type';\r\n        if (!user) user = {}; //error = 'User undefined';\r\n        if (!user.roles) user.roles = {}; //error = 'User has no roles';\r\n        if (!roles) roles = {}; //error = 'Roles undefined';\r\n        if (!(roles instanceof Array || typeof roles === 'object')) error = 'Invald roles type';\r\n          var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n          if (error){\r\n            clbWrapper.error(error, 'Access authorization');\r\n            return pHandlerResult;\r\n        }\r\n          if (user.roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < user.roles.length; i++){\r\n                if (typeof user.roles[i] === 'string') r[user.roles[i]] = true;\r\n            }\r\n            user.roles = r;\r\n        }\r\n          if (roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < roles.length; i++){\r\n                if (typeof roles[i] === 'string') r[roles[i]] = true;\r\n            }\r\n            roles = r;\r\n        }\r\n          var args = arguments;\r\n        var readyFn = function(result){\r\n            if (result) clbWrapper.success(result);\r\n            else clbWrapper.error('Authorization failed', args);\r\n        };\r\n          var rolesKeys = Object.getOwnPropertyNames(roles);\r\n        var i = 0;\r\n          var callbackFn = function(result){\r\n            if (result) readyFn(result);\r\n              if (typeof roles[rolesKeys[i]] === 'boolean' && roles[rolesKeys[i]]){\r\n                if (user.roles[rolesKeys[i]]) readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'function'){\r\n                var r = roles[rolesKeys[i]].call(user);\r\n                  if (typeof r === 'function') r.call(user, (i < rolesKeys.length ? callbackFn : readyFn));\r\n                else{\r\n                    if (r) readyFn(true);\r\n                    else{\r\n                        i++;\r\n                        if (i < rolesKeys.length) callbackFn();\r\n                        else readyFn(false);\r\n                    }\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'number'){\r\n                if (((typeof user.roles[rolesKeys[i]] === 'number' && (user.roles[rolesKeys[i]] & access)) ||\r\n                    (typeof user.roles[rolesKeys[i]] !== 'number' && user.roles[rolesKeys[i]])) &&\r\n                    (roles[rolesKeys[i]] & access)) user.roles[rolesKeys[i]] &&  readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }\r\n        };\r\n          callbackFn();\r\n          return pHandlerResult;*/\n    },\n    getAccessBitmaskFromPermission: function getAccessBitmaskFromPermission(p) {\n        var access = _index2.default.Access.None;\n\n        if (p.Create) access |= _index2.default.Access.Create;\n        if (p.Read) access |= _index2.default.Access.Read;\n        if (p.Update) access |= _index2.default.Access.Update;\n        if (p.Delete) access |= _index2.default.Access.Delete;\n        if (p.DeleteBatch) access |= _index2.default.Access.DeleteBatch;\n        if (p.Execute) access |= _index2.default.Access.Execute;\n\n        return access;\n    },\n    None: { value: 0 },\n    Create: { value: 1 },\n    Read: { value: 2 },\n    Update: { value: 4 },\n    Delete: { value: 8 },\n    DeleteBatch: { value: 16 },\n    Execute: { value: 32 }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],33:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.ajax = _index2.default.ajax || function () {\n    var cfg = arguments[arguments.length - 1];\n    var clb = _index2.default.typeSystem.createCallbackSetting(cfg);\n    clb.error(\"Not implemented\");\n};\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],34:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof Ext !== 'undefined' && _typeof(Ext.Ajax)) {\n    _index2.default.ajax = _index2.default.ajax || function (options) {\n        Ext.Ajax.request(options);\n    };\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],35:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof WinJS !== 'undefined' && WinJS.xhr) {\n    _index2.default.ajax = _index2.default.ajax || function (options) {\n        _index2.default.typeSystem.extend(options, {\n            dataType: 'json',\n            headers: {}\n        });\n        var dataTypes = {\n            'json': {\n                accept: 'application/json, text/javascript',\n                convert: JSON.parse\n            },\n            'text': {\n                accept: 'text/plain',\n                convert: function convert(e) {\n                    return e;\n                }\n            },\n            'html': {\n                accept: 'text/html',\n                convert: function convert(e) {\n                    return e;\n                }\n            },\n            'xml': {\n                accept: 'application/xml, text/xml',\n                convert: function convert(e) {\n                    // TODO?\n                    return e;\n                }\n            }\n        };\n        var dataTypeContext = dataTypes[options.dataType.toLowerCase()];\n\n        options.headers.Accept = dataTypeContext.accept;\n\n        var successClb = options.success || _index2.default.defaultSuccessCallback;\n        var errorClb = options.error || _index2.default.defaultErrorCallback;\n        var progressClb = options.progress;\n\n        var success = function success(r) {\n            var result = dataTypeContext.convert(r.responseText);\n            successClb(result);\n        };\n        var error = function error(r) {\n            var error = dataTypeContext.convert(r.responseText);\n            errorClb(error);\n        };\n        var progress = progressClb;\n\n        WinJS.xhr(options).done(success, error, progress);\n    };\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],36:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof jQuery !== 'undefined' && jQuery.ajax) {\n    _index2.default.ajax = _index2.default.ajax || jQuery.ajax;\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],37:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.Anonymous\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = cfg || {};\n        this.Authenticated = false;\n    },\n    /// { error:, abort:, pending:, success: }\n    Login: function Login(callbacks) {},\n    Logout: function Logout() {},\n    CreateRequest: function CreateRequest(cfg) {\n        _index2.default.ajax(cfg);\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],38:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.AuthenticationBase\", null, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = cfg || {};\n        this.Authenticated = false;\n    },\n    /// { error:, abort:, pending:, success: }\n    Login: function Login(callbacks) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    Logout: function Logout() {\n        _index.Guard.raise(\"Pure class\");\n    },\n    CreateRequest: function CreateRequest(cfg) {\n        _index.Guard.raise(\"Pure class\");\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],39:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.BasicAuth.BasicAuth\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = _index2.default.typeSystem.extend({\n            Username: '',\n            Password: ''\n        }, cfg);\n    },\n    Login: function Login(callbacks) {\n        if (callbacks && typeof callbacks.pending == \"function\") callbacks.pending();\n    },\n    Logout: function Logout() {},\n    CreateRequest: function CreateRequest(cfg) {\n        if (!cfg) return;\n        var _this = this;\n\n        var origBeforeSend = cfg.beforeSend;\n        cfg.beforeSend = function (xhr) {\n            xhr.setRequestHeader(\"Authorization\", \"Basic  \" + _this.__encodeBase64(_this.configuration.Username + \":\" + _this.configuration.Password));\n\n            if (typeof origBeforeSend == \"function\") origBeforeSend(xhr);\n        };\n\n        _index2.default.ajax(cfg);\n    },\n    __encodeBase64: function __encodeBase64(val) {\n        var b64array = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\" + \"wxyz0123456789+/\" + \"=\";\n\n        input = val;\n        var base64 = \"\";\n        var hex = \"\";\n        var chr1,\n            chr2,\n            chr3 = \"\";\n        var enc1,\n            enc2,\n            enc3,\n            enc4 = \"\";\n        var i = 0;\n\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n\n            base64 = base64 + b64array.charAt(enc1) + b64array.charAt(enc2) + b64array.charAt(enc3) + b64array.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return base64;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],40:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.FacebookAuth\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = _index2.default.typeSystem.extend({\n            Url_code: '',\n            type_code: '',\n            scope: '',\n            Url_token: '',\n            type_token: '',\n            access_token: '',\n            app_id: ''\n        }, cfg);\n    },\n    Login: function Login(callbacks) {\n        if (this.Authenticated) {\n            return;\n        }\n\n        var provider = this;\n        provider.configuration.stateCallbacks = callbacks || {};\n\n        _index2.default.ajax({\n            url: this.configuration.Url_code,\n            data: 'type=' + provider.configuration.type_code + '&client_id=' + provider.configuration.app_id + '&scope=' + provider.configuration.scope,\n            type: 'POST',\n            dataType: 'json',\n            success: function success(data) {\n                if (typeof provider.configuration.stateCallbacks.pending == \"function\") provider.configuration.stateCallbacks.pending(data);\n                provider._processRequestToken(data);\n                provider.Authenticated = true;\n            },\n            error: function error() {\n                if (typeof provider.configuration.stateCallbacks.error == \"function\") provider.configuration.stateCallbacks.error(arguments);\n            }\n        });\n    },\n    Logout: function Logout() {\n        this.Authenticated = false;\n    },\n    CreateRequest: function CreateRequest(cfg) {\n        if (!cfg) return;\n        var _this = this;\n\n        if (cfg.url.indexOf('access_token=') === -1) {\n            if (cfg.url && this.Authenticated) {\n                var andChar = '?';\n                if (cfg.url.indexOf(andChar) > 0) andChar = '&';\n\n                if (this.configuration.access_token) cfg.url = cfg.url + andChar + 'access_token=' + this.configuration.access_token;\n            }\n        }\n\n        _index2.default.ajax(cfg);\n    },\n    _processRequestToken: function _processRequestToken(verification_data) {\n        var provider = this;\n\n        _index2.default.ajax({\n            url: provider.configuration.Url_token,\n            data: 'type=' + provider.configuration.type_token + '&client_id=' + provider.configuration.app_id + '&code=' + verification_data.code,\n            type: 'POST',\n            dataType: 'json',\n            success: function success(result) {\n                provider.configuration.access_token = result.access_token;\n                if (typeof provider.configuration.stateCallbacks.success == \"function\") provider.configuration.stateCallbacks.success(result);\n            },\n            error: function error(obj) {\n                var data = eval('(' + obj.responseText + ')');\n                if (data.error) {\n                    if (data.error.message == \"authorization_pending\") {\n                        setTimeout(function () {\n                            provider._processRequestToken(verification_data);\n                        }, 2000);\n                    } else if (\"authorization_declined\") {\n                        if (typeof provider.configuration.stateCallbacks.abort == \"function\") provider.configuration.stateCallbacks.abort(arguments);\n                    }\n                }\n            }\n        });\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],41:[function(require,module,exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Entity = exports.Event = undefined;\n\nvar _index = require(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EventSubscriber = _index2.default.Class.define(\"EventSubscriber\", null, null, {\n    constructor: function constructor(handler, state, thisArg) {\n        /// <param name=\"handler\" type=\"Function\">\n        ///     <summary>event handler</summary>\n        ///     <signature>\n        ///         <param name=\"sender\" type=\"$data.Entity\" />\n        ///         <param name=\"eventData\" type=\"EventData\" />\n        ///         <param name=\"state\" type=\"Object\" />\n        ///     </signature>\n        /// </param>\n        /// <param name=\"state\" type=\"Object\" optional=\"true\">custom state object</param>\n        /// <param name=\"thisArg\" type=\"Object\" optional=\"true\">[i]this[/i] context for handler</param>\n        ///\n        /// <field name=\"handler\" type=\"function($data.Entity sender, EventData eventData, Object state)\">event handler</field>\n        /// <field name=\"state\" type=\"Object\">custom state object</field>\n        /// <field name=\"thisArg\">[i]this[/i] context for handler</field>\n        this.handler = handler;\n        this.state = state;\n        this.thisArg = thisArg;\n    },\n    handler: {},\n    state: {},\n    thisArg: {}\n});\n\n_index2.default.Event = _index2.default.Class.define(\"$data.Event\", null, null, {\n    constructor: function constructor(name, sender) {\n        ///<param name=\"name\" type=\"string\">The name of the event</param>\n        ///<param name=\"sender\" type=\"Object\">The originator/sender of the event. [this] in handlers will be set to this</param>\n        var subscriberList = null;\n        var parentObject = sender;\n\n        function detachHandler(list, handler) {\n            ///<param name=\"list\" type=\"Array\" elementType=\"EventSubscriber\" />\n            ///<param name=\"handler\" type=\"Function\" />\n            list.forEach(function (item, index) {\n                if (item.handler == handler) {\n                    list.splice(index, 1);\n                }\n            });\n        }\n\n        this.attach = function (handler, state, thisArg) {\n            ///<param name=\"handler\" type=\"Function\">\n            ///<signature>\n            ///<param name=\"sender\" type=\"Object\" />\n            ///<param name=\"eventData\" type=\"Object\" />\n            ///<param name=\"state\" type=\"Object\" />\n            ///</signature>\n            ///</param>\n            ///<param name=\"state\" type=\"Object\" optional=\"true\" />\n            ///<param name=\"thisArg\" type=\"Object\" optional=\"true\" />\n            if (!subscriberList) {\n                subscriberList = [];\n            }\n            subscriberList.push(new EventSubscriber(handler, state, thisArg || sender));\n        };\n        this.detach = function (handler) {\n            detachHandler(subscriberList, handler);\n        };\n        this.fire = function (eventData, snder) {\n            var snd = snder || sender || this;\n            //eventData.eventName = name;\n            ///<value name=\"subscriberList type=\"Array\" />\n            if (subscriberList) {\n                subscriberList.forEach(function (subscriber) {\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\n                    try {\n                        subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state);\n                    } catch (ex) {\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\n                        console.dir(ex);\n                    }\n                });\n            }\n        };\n        this.fireCancelAble = function (eventData, snder) {\n            var snd = snder || sender || this;\n            //eventData.eventName = name;\n            ///<value name=\"subscriberList type=\"Array\" />\n            var isValid = true;\n            if (subscriberList) {\n                subscriberList.forEach(function (subscriber) {\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\n                    try {\n                        isValid = isValid && (subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state) === false ? false : true);\n                    } catch (ex) {\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\n                        console.dir(ex);\n                    }\n                });\n            }\n            return isValid;\n        };\n    }\n});\n\nvar EventData = _index2.default.Class.define(\"EventData\", null, null, {\n    eventName: {}\n});\n\nvar PropertyChangeEventData = _index2.default.Class.define(\"PropertyChangeEventData\", EventData, null, {\n    constructor: function constructor(propertyName, oldValue, newValue) {\n        this.propertyName = propertyName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n    },\n    propertyName: {},\n    oldValue: {},\n    newValue: {}\n});\n\nvar PropertyValidationEventData = _index2.default.Class.define(\"PropertyValidationEventData\", EventData, null, {\n    constructor: function constructor(propertyName, oldValue, newValue, errors) {\n        this.propertyName = propertyName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n        this.errors = errors;\n        this.cancel = false;\n    },\n    propertyName: {},\n    oldValue: {},\n    newValue: {},\n    errors: {},\n    cancel: {}\n});\n\n_index2.default.Entity = _index2.default.Class.define(\"$data.Entity\", null, null, {\n    constructor: function constructor(initData, newInstanceOptions) {\n        /// <description>\n        ///     This class provide a light weight, object-relational interface between\n        ///     your javascript code and database.\n        /// </description>\n        ///\n        /// <signature>\n        ///     <param name=\"initData\" type=\"Object\">initialization data</param>\n        ///     <example>\n        ///         var category = new $news.Types.Category({ Title: 'Tech' });\n        ///         $news.context.Categories.add(category);\n        ///     </example>\n        /// </signature>\n        ///\n        /// <field name=\"initData\" type=\"Object\">initialization data</field>\n        /// <field name=\"context\" type=\"$data.EntityContext\"></field>\n        /// <field name=\"propertyChanging\" type=\"$data.Event\"></field>\n        /// <field name=\"propertyChanged\" type=\"$data.Event\"></field>\n        /// <field name=\"propertyValidationError\" type=\"$data.Event\"></field>\n        /// <field name=\"isValidated\" type=\"Boolean\">Determines the current $data.Entity is validated.</field>\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of $data.Validation.ValidationError</field>\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of MemberDefinition</field>\n        /// <field name=\"entityState\" type=\"Integer\"></field>\n        /// <field name=\"changedProperties\" type=\"Array\">array of MemberDefinition</field>\n\n        this.initData = {};\n        var thisType = this.getType();\n        if (thisType.__copyPropertiesToInstance) {\n            _index2.default.typeSystem.writePropertyValues(this);\n        }\n\n        var ctx = null;\n        this.context = ctx;\n        if (\"setDefaultValues\" in thisType) {\n            if (!newInstanceOptions || newInstanceOptions.setDefaultValues !== false) {\n                if (!initData || Object.keys(initData).length < 1) {\n                    initData = thisType.setDefaultValues(initData);\n                }\n            }\n        }\n\n        if ((typeof initData === \"undefined\" ? \"undefined\" : _typeof(initData)) === \"object\") {\n            var typeMemDefs = thisType.memberDefinitions;\n            var memDefNames = typeMemDefs.getPublicMappedPropertyNames();\n\n            for (var i in initData) {\n                if (memDefNames.indexOf(i) > -1) {\n                    var memberDef = typeMemDefs.getMember(i);\n                    var type = _index.Container.resolveType(memberDef.type);\n                    var value = initData[i];\n\n                    if (memberDef.concurrencyMode === _index2.default.ConcurrencyMode.Fixed) {\n                        this.initData[i] = value;\n                    } else {\n                        if (newInstanceOptions && newInstanceOptions.converters) {\n                            var converter = newInstanceOptions.converters[_index.Container.resolveName(type)];\n                            if (converter) value = converter(value);\n                        }\n\n                        this.initData[i] = _index.Container.convertTo(value, type, memberDef.elementType, newInstanceOptions);\n                    }\n                }\n            }\n        }\n\n        if (newInstanceOptions && newInstanceOptions.entityBuilder) {\n            newInstanceOptions.entityBuilder(this, thisType.memberDefinitions.asArray(), thisType);\n        }\n\n        this.changedProperties = undefined;\n        this.entityState = undefined;\n    },\n    toString: function toString() {\n        /// <summary>Returns a string that represents the current $data.Entity</summary>\n        /// <returns type=\"String\"/>\n\n        return this.getType().fullName + \"(\" + (this.Id || this.Name || '') + \")\";\n    },\n    toJSON: function toJSON() {\n        /// <summary>Creates pure JSON object from $data.Entity.</summary>\n        /// <returns type=\"Object\">JSON representation</returns>\n\n        var result = {};\n        var self = this;\n        this.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            if (self[memDef.name] instanceof Date && memDef.type && _index.Container.resolveType(memDef.type) === _index2.default.DateTimeOffset) {\n                result[memDef.name] = new _index2.default.DateTimeOffset(self[memDef.name]);\n            } else {\n                result[memDef.name] = self[memDef.name];\n            }\n        });\n        return result;\n    },\n    equals: function equals(entity) {\n        /// <summary>Determines whether the specified $data.Entity is equal to the current $data.Entity.</summary>\n        /// <returns type=\"Boolean\">[b]true[/b] if the specified $data.Entity is equal to the current $data.Entity; otherwise, [b]false[/b].</returns>\n\n        if (entity.getType() !== this.getType()) {\n            return false;\n        }\n        var entityPk = this.getType().memberDefinitions.getKeyProperties();\n        for (var i = 0; i < entityPk.length; i++) {\n            if (this[entityPk[i].name] != entity[entityPk[i].name]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    propertyChanging: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyChanging) this._propertyChanging = new _index2.default.Event('propertyChanging', this);\n\n            return this._propertyChanging;\n        },\n        set: function set(value) {\n            this._propertyChanging = value;\n        }\n    },\n\n    propertyChanged: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyChanged) this._propertyChanged = new _index2.default.Event('propertyChanged', this);\n\n            return this._propertyChanged;\n        },\n        set: function set(value) {\n            this._propertyChanged = value;\n        }\n    },\n\n    propertyValidationError: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyValidationError) this._propertyValidationError = new _index2.default.Event('propertyValidationError', this);\n\n            return this._propertyValidationError;\n        },\n        set: function set(value) {\n            this._propertyValidationError = value;\n        }\n    },\n\n    // protected\n    storeProperty: function storeProperty(memberDefinition, value) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"value\" />\n\n        if (memberDefinition.concurrencyMode !== _index2.default.ConcurrencyMode.Fixed) {\n            value = _index.Container.convertTo(value, memberDefinition.type, memberDefinition.elementType);\n        }\n\n        var eventData = null;\n        if (memberDefinition.monitorChanges != false && (this._propertyChanging || this._propertyChanged || \"instancePropertyChanged\" in this.constructor)) {\n            var origValue = this[memberDefinition.name];\n            eventData = new PropertyChangeEventData(memberDefinition.name, origValue, value);\n            if (this._propertyChanging) this.propertyChanging.fire(eventData);\n        }\n\n        if (memberDefinition.monitorChanges != false && (this._propertyValidationError || \"instancePropertyValidationError\" in this.constructor)) {\n            var errors = _index2.default.Validation.Entity.ValidateEntityField(this, memberDefinition, value);\n            if (errors.length > 0) {\n                var origValue = this[memberDefinition.name];\n                var errorEventData = new PropertyValidationEventData(memberDefinition.name, origValue, value, errors);\n\n                if (this._propertyValidationError) this.propertyValidationError.fire(errorEventData);\n                if (\"instancePropertyValidationError\" in this.constructor) this.constructor[\"instancePropertyValidationError\"].fire(errorEventData, this);\n\n                if (errorEventData.cancel == true) return;\n            }\n        }\n\n        if (memberDefinition.storeOnObject == true) {\n            //TODO refactor to Base.getBackingFieldName\n            var backingFieldName = \"_\" + memberDefinition.name;\n            this[backingFieldName] = value;\n        } else {\n            this.initData[memberDefinition.name] = value;\n        }\n        this.isValidated = false;\n\n        if (memberDefinition.monitorChanges != false && this.entityState == _index2.default.EntityState.Unchanged) this.entityState = _index2.default.EntityState.Modified;\n\n        this._setPropertyChanged(memberDefinition);\n\n        if (memberDefinition.monitorChanges != false) {\n            //if (!this.changedProperties) {\n            //    this.changedProperties = [];\n            //}\n\n            //if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\n            //    this.changedProperties.push(memberDefinition);\n\n            if (this._propertyChanged) this.propertyChanged.fire(eventData);\n\n            //TODO mixin framework\n            if (\"instancePropertyChanged\" in this.constructor) {\n                this.constructor[\"instancePropertyChanged\"].fire(eventData, this);\n            }\n        }\n    },\n    _setPropertyChanged: function _setPropertyChanged(memberDefinition) {\n        if (memberDefinition.monitorChanges != false && memberDefinition.name != \"ValidationErrors\") {\n            if (!this.changedProperties) {\n                this.changedProperties = [];\n            }\n\n            if (!this.changedProperties.some(function (memDef) {\n                return memDef.name == memberDefinition.name;\n            })) this.changedProperties.push(memberDefinition);\n        }\n    },\n\n    // protected\n    retrieveProperty: function retrieveProperty(memberDefinition) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n\n        if (memberDefinition.storeOnObject == true) {\n            //TODO refactor to Base.getBackingFieldName\n            var backingFieldName = \"_\" + memberDefinition.name;\n            return this[backingFieldName];\n        } else {\n            return this.initData[memberDefinition.name];\n        }\n    },\n\n    // protected\n    getProperty: function getProperty(memberDefinition, callback, tran) {\n        /// <summary>Retrieve value of member</summary>\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"callback\" type=\"Function\">\n        ///     <signature>\n        ///         <param name=\"value\" />\n        ///     </signature>\n        /// </param>\n        /// <returns>value associated for [i]memberDefinition[/i]</returns>\n\n        callback = _index2.default.typeSystem.createCallbackSetting(callback);\n        if (this[memberDefinition.name] != undefined) {\n            if (tran instanceof _index2.default.Transaction) callback.success(this[memberDefinition.name], tran);else callback.success(this[memberDefinition.name]);\n            return;\n        }\n\n        var context = this.context;\n        if (!this.context) {\n            try {\n                var that = this;\n                var storeToken = this.storeToken || this.getType().storeToken;\n                if (storeToken && typeof storeToken.factory === 'function') {\n                    var ctx = storeToken.factory();\n                    return ctx.onReady().then(function (context) {\n                        return context.loadItemProperty(that, memberDefinition, callback);\n                    });\n                }\n            } catch (e) {}\n\n            _index.Guard.raise(new _index.Exception('Entity not in context', 'Invalid operation'));\n        } else {\n            return context.loadItemProperty(this, memberDefinition, callback, tran);\n        }\n    },\n    // protected\n    setProperty: function setProperty(memberDefinition, value, callback, tran) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"value\" />\n        /// <param name=\"callback\" type=\"Function\">done</param>\n        this[memberDefinition.name] = value;\n\n        //callback = $data.typeSystem.createCallbackSetting(callback);\n        var pHandler = new _index2.default.PromiseHandler();\n        callback = pHandler.createCallback(callback);\n        callback.success(this[memberDefinition.name]);\n        return pHandler.getPromise();\n    },\n\n    isValid: function isValid() {\n        /// <summary>Determines the current $data.Entity is validated and valid.</summary>\n        /// <returns type=\"Boolean\" />\n\n        if (!this.isValidated) {\n            this.ValidationErrors = _index2.default.Validation.Entity.ValidateEntity(this);\n            this.isValidated = true;\n        }\n        return this.ValidationErrors.length == 0;\n    },\n    isValidated: { dataType: \"bool\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, value: false },\n    ValidationErrors: {\n        dataType: Array,\n        elementType: _index2.default.Validation.ValidationError,\n        storeOnObject: true,\n        monitorChanges: true,\n        notMapped: true,\n        enumerable: false\n    },\n\n    resetChanges: function resetChanges() {\n        /// <summary>reset changes</summary>\n\n        delete this._changedProperties;\n    },\n\n    changedProperties: {\n        dataType: Array,\n        elementType: _index.MemberDefinition,\n        storeOnObject: true,\n        monitorChanges: false,\n        notMapped: true,\n        enumerable: false\n    },\n\n    entityState: { dataType: \"integer\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false },\n    /*\r\n    toJSON: function () {\r\n        if (this.context) {\r\n            var itemType = this.getType();\r\n            var storageModel = this.context._storageModel[itemType.name];\r\n            var o = new Object();\r\n            for (var property in this) {\r\n                if (typeof this[property] !== \"function\") {\r\n                    var excludedFields = storageModel.Associations.every(function (association) {\r\n                        return association.FromPropertyName == property && (association.FromMultiplicity == \"0..1\" || association.FromMultiplicity == \"1\");\r\n                    }, this);\r\n                    if (!excludedFields) {\r\n                        o[property] = this[property];\r\n                    }\r\n                }\r\n            }\r\n            return o;\r\n        }\r\n        return this;\r\n    }   */\n    //,\n\n    //onReady: function (callback) {\n    //    this.__onReadyList = this.__onReadyList || [];\n    //    this.__onReadyList.push(callback);\n    //},\n\n    remove: function remove() {\n        if (_index2.default.ItemStore && 'EntityInstanceRemove' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceRemove.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    save: function save() {\n        if (_index2.default.ItemStore && 'EntityInstanceSave' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceSave.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    refresh: function refresh() {\n        if (_index2.default.ItemStore && 'EntityInstanceRefresh' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceRefresh.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    storeToken: { type: Object, monitorChanges: false, notMapped: true, storeOnObject: true },\n\n    getFieldUrl: function getFieldUrl(field) {\n        if (this.context) {\n            return this.context.getFieldUrl(this, field);\n        } else if (this.getType().storeToken && typeof this.getType().storeToken.factory === 'function') {\n            var context = this.getType().storeToken.factory();\n            return context.getFieldUrl(this, field);\n        } else if (this.getType().storeToken) {\n            try {\n                var ctx = _index2.default.ItemStore._getContextPromise('default', this.getType());\n                if (ctx instanceof _index2.default.EntityContext) {\n                    return ctx.getFieldUrl(this, field);\n                }\n            } catch (e) {}\n        }\n        return '#';\n    }\n}, {\n    //create get_[property] and set_[property] functions for properties\n    __setPropertyfunctions: { value: true, notMapped: true, enumerable: false, storeOnObject: true },\n    //copy public properties to current instance\n    __copyPropertiesToInstance: { value: false, notMapped: true, enumerable: false, storeOnObject: true },\n\n    inheritedTypeProcessor: function inheritedTypeProcessor(type) {\n        if (_index2.default.ItemStore && 'EntityInheritedTypeProcessor' in _index2.default.ItemStore) _index2.default.ItemStore.EntityInheritedTypeProcessor.apply(this, arguments);\n\n        //default value setter method factory\n        type.defaultValues = {};\n\n        type.memberDefinitions.asArray().forEach(function (pd) {\n            if (pd.hasOwnProperty(\"defaultValue\")) {\n                type.defaultValues[pd.name] = pd.defaultValue;\n            }\n        });\n\n        if (Object.keys(type.defaultValues).length > 0) {\n            type.setDefaultValues = function (initData, instance) {\n                initData = initData || {};\n                var dv = type.defaultValues;\n                for (var n in dv) {\n                    if (!(n in initData)) {\n                        var value = dv[n];\n                        if (\"function\" === typeof value) {\n                            initData[n] = dv[n](n, instance);\n                        } else {\n                            initData[n] = dv[n];\n                        }\n                    }\n                }\n                return initData;\n            };\n        }\n    },\n\n    //Type Events\n    addEventListener: function addEventListener(eventName, fn) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            this[delegateName] = new _index2.default.Event(eventName, this);\n        }\n        this[delegateName].attach(fn);\n    },\n    removeEventListener: function removeEventListener(eventName, fn) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            return;\n        }\n        this[delegateName].detach(fn);\n    },\n    raiseEvent: function raiseEvent(eventName, data) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            return;\n        }\n        this[delegateName].fire(data);\n    },\n\n    getFieldNames: function getFieldNames() {\n        return this.memberDefinitions.getPublicMappedPropertyNames();\n    },\n\n    'from$data.Object': function from$dataObject(value, type, t, options) {\n        if (!Object.isNullOrUndefined(value)) {\n            var newInstanceOptions;\n            if (options && options.converters) {\n                newInstanceOptions = {\n                    converters: options.converters\n                };\n            }\n\n            return new this(value, newInstanceOptions);\n        } else {\n            return value;\n        }\n    }\n\n});\n\n_index2.default.define = function (name, container, definition) {\n    if (container && !(container instanceof _index2.default.ContainerClass)) {\n        definition = container;\n        container = undefined;\n    }\n    if (!definition) {\n        throw new Error(\"json object type is not supported yet\");\n    }\n    var _def = {};\n    var hasKey = false;\n    var keyFields = [];\n    Object.keys(definition).forEach(function (fieldName) {\n        var propDef = definition[fieldName];\n        if ((typeof propDef === \"undefined\" ? \"undefined\" : _typeof(propDef)) === 'object' && (\"type\" in propDef || \"get\" in propDef || \"set\" in propDef)) {\n\n            _def[fieldName] = propDef;\n            if (propDef.key) {\n                keyFields.push(propDef);\n            }\n\n            if ((\"get\" in propDef || \"set\" in propDef) && (!('notMapped' in propDef) || propDef.notMapped === true)) {\n                propDef.notMapped = true;\n                propDef.storeOnObject = true;\n            }\n            if (\"get\" in propDef && !(\"set\" in propDef)) {\n                propDef.set = function () {};\n            } else if (\"set\" in propDef && !(\"get\" in propDef)) {\n                propDef.get = function () {};\n            }\n        } else {\n            _def[fieldName] = { type: propDef };\n        }\n    });\n\n    if (keyFields.length < 1) {\n        var keyProp;\n        switch (true) {\n            case \"id\" in _def:\n                keyProp = \"id\";\n                break;\n            case \"Id\" in _def:\n                keyProp = \"Id\";\n                break;\n            case \"ID\" in _def:\n                keyProp = \"ID\";\n                break;\n        }\n        if (keyProp) {\n            _def[keyProp].key = true;\n            var propTypeName = _index2.default.Container.resolveName(_def[keyProp].type);\n            _def[keyProp].computed = true;\n            //if (\"$data.Number\" === propTypeName || \"$data.Integer\" === propTypeName) {\n            //}\n        } else {\n                _def.Id = { type: \"int\", key: true, computed: true };\n            }\n    }\n\n    var entityType = _index2.default.Entity.extend(name, container, _def);\n    return entityType;\n};\n_index2.default.implementation = function (name) {\n    return _index.Container.resolveType(name);\n};\n\nvar Event = exports.Event = _index2.default.Event;\nvar Entity = exports.Entity = _index2.default.Entity;\nexports.default = _index2.default;\n\n},{\"../TypeSystem/index.js\":28}],42:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.EntityAttachMode\", null, null, {}, {\n    defaultMode: 'Default',\n    AllChanged: function AllChanged(data) {\n        var memDefs = data.getType().memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < memDefs.length; i++) {\n            data._setPropertyChanged(memDefs[i]);\n        }\n        data.entityState = _index2.default.EntityState.Modified;\n    },\n    KeepChanges: function KeepChanges(data) {\n        if (data.changedProperties && data.changedProperties.length > 0) {\n            data.entityState = _index2.default.EntityState.Modified;\n        } else {\n            data.entityState = _index2.default.EntityState.Unchanged;\n        }\n    },\n    Default: function Default(data) {\n        data.entityState = _index2.default.EntityState.Unchanged;\n        data.changedProperties = undefined;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],43:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n\n    _index2.default.defaults = _index2.default.defaults || {};\n    _index2.default.defaults.defaultDatabaseName = 'JayDataDefault';\n    _index2.default.defaults.enableRelatedEntityReadMethods = true;\n    _index2.default.defaults.relatedEntityReadMethodPrefix = 'get';\n    _index2.default.defaults.relatedEntityProxyPrefix = '$relatedProxy';\n})();\n\n_index2.default.Class.define('$data.StorageModel', null, null, {\n    constructor: function constructor() {\n        ///<field name=\"LogicalType\" type=\"$data.Entity\">User defined type</field>\n        this.ComplexTypes = [];\n        this.Enums = [];\n        this.Associations = [];\n    },\n    LogicalType: {},\n    LogicalTypeName: {},\n    PhysicalType: {},\n    PhysicalTypeName: {},\n    EventHandlers: {},\n    TableName: {},\n    TableOptions: { value: undefined },\n    ComplexTypes: {},\n    Enums: {},\n    Associations: {},\n    ContextType: {},\n    Roles: {}\n}, null);\n_index2.default.Class.define('$data.Association', null, null, {\n    constructor: function constructor(initParam) {\n        if (initParam) {\n            this.From = initParam.From;\n            this.FromType = initParam.FromType;\n            this.FromMultiplicity = initParam.FromMultiplicity;\n            this.FromPropertyName = initParam.FromPropertyName;\n            this.To = initParam.To;\n            this.ToType = initParam.ToType;\n            this.ToMultiplicity = initParam.ToMultiplicity;\n            this.ToPropertyName = initParam.ToPropertyName;\n        }\n    },\n    From: {},\n    FromType: {},\n    FromMultiplicity: {},\n    FromPropertyName: {},\n    To: {},\n    ToType: {},\n    ToMultiplicity: {},\n    ToPropertyName: {},\n    ReferentialConstraint: {}\n}, null);\n_index2.default.Class.define('$data.ComplexType', _index2.default.Association, null, {}, null);\n\n/**\r\n * @public\r\n * @module $data.EntityContext\r\n */\n/**\r\n* Provides facilities for querying and working with entity data as objects\r\n*/\n_index2.default.Class.define('$data.EntityContext', null, null, {\n    /**\r\n     * @constructs $data.EntityContext\r\n     * Provides facilities for querying and working with entity data as objects\r\n     * @param {Object} storageProviderCfg - Storage provider specific configuration object\r\n     * @param {string} storageProviderCfg.provider - Storage provider type name: 'oData', 'indexedDb', 'webSql', 'sqLite', 'mongoDB'\r\n     * @param {string} [storageProviderCfg.oDataServiceHost=/odata.svc] - URI of OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.maxDataServiceVersion=4.0] - Maximal OData version. Provider: OData\r\n     * @param {string} [storageProviderCfg.dataServiceVersion] - version of your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.user] - login name for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.password] - password for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.UpdateMethod=PATCH] - HTTP verb used while updating entities, this should be configured according the accepted verb by your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.databaseName] - database name created by the following providers: webSql, sqLite, indexedDb, mongoDB\r\n     * @example <caption>initialize OData context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'oData',\r\n     *  oDataServiceHost: '/api/odata.svc'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     *\r\n     * @example <caption>initialize webSql context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'webSql',\r\n     *  databaseName: 'Northwind'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     */\n    constructor: function constructor(storageProviderCfg) {\n        if (_index2.default.ItemStore && 'ContextRegister' in _index2.default.ItemStore) _index2.default.ItemStore.ContextRegister.apply(this, arguments);\n\n        if (storageProviderCfg.queryCache) this.queryCache = storageProviderCfg.queryCache;\n\n        if (\"string\" === typeof storageProviderCfg) {\n            if (0 === storageProviderCfg.indexOf(\"http\")) {\n                storageProviderCfg = {\n                    name: \"oData\",\n                    oDataServiceHost: storageProviderCfg\n                };\n            } else {\n                storageProviderCfg = {\n                    name: \"local\",\n                    databaseName: storageProviderCfg\n                };\n            }\n        }\n\n        if (\"provider\" in storageProviderCfg) {\n            storageProviderCfg.name = storageProviderCfg.provider;\n        }\n\n        //Initialize properties\n        this.lazyLoad = false;\n        this.trackChanges = false;\n        this._entitySetReferences = {};\n        this._storageModel = [];\n\n        var ctx = this;\n        ctx._isOK = false;\n\n        var origSuccessInitProvider = this._successInitProvider;\n        this._successInitProvider = function (errorOrContext) {\n            if (errorOrContext instanceof _index2.default.EntityContext) {\n                origSuccessInitProvider(ctx);\n            } else {\n                origSuccessInitProvider(ctx, errorOrContext);\n            }\n        };\n\n        this._storageModel.getStorageModel = function (typeName) {\n            var name = _index.Container.resolveName(typeName);\n            return ctx._storageModel[name];\n        };\n        if (typeof storageProviderCfg.name === 'string') {\n            var tmp = storageProviderCfg.name;\n            storageProviderCfg.name = [tmp];\n        }\n        var i = 0,\n            providerType;\n        var providerList = [].concat(storageProviderCfg.name);\n        var callBack = _index2.default.typeSystem.createCallbackSetting({ success: this._successInitProvider, error: this._successInitProvider });\n\n        this._initStorageModelSync();\n        ctx._initializeEntitySets(ctx.getType());\n\n        _index2.default.StorageProviderLoader.load(providerList, {\n            success: function success(providerType) {\n                ctx.storageProvider = new providerType(storageProviderCfg, ctx);\n                ctx.storageProvider.setContext(ctx);\n                ctx.stateManager = new _index2.default.EntityStateManager(ctx);\n\n                var contextType = ctx.getType();\n                if (providerType.name in contextType._storageModelCache) {\n                    ctx._storageModel = contextType._storageModelCache[providerType.name];\n                } else {\n                    _index2.default.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToTypes();\n                    ctx._initializeStorageModel();\n                    contextType._storageModelCache[providerType.name] = ctx._storageModel;\n                }\n                _index2.default.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToContext();\n\n                //ctx._initializeEntitySets(contextType);\n                if (storageProviderCfg && storageProviderCfg.user) Object.defineProperty(ctx, 'user', { value: storageProviderCfg.user, enumerable: true });\n                if (storageProviderCfg && storageProviderCfg.checkPermission) Object.defineProperty(ctx, 'checkPermission', { value: storageProviderCfg.checkPermission, enumerable: true });\n\n                //ctx._isOK = false;\n                ctx._initializeStore(callBack);\n            },\n            error: function error() {\n                callBack.error('Provider fallback failed!');\n            }\n        });\n\n        this.addEventListener = function (eventName, fn) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                this[delegateName] = new _index2.default.Event(eventName, this);\n            }\n            this[delegateName].attach(fn);\n        };\n\n        this.removeEventListener = function (eventName, fn) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                return;\n            }\n            this[delegateName].detach(fn);\n        };\n\n        this.raiseEvent = function (eventName, data) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                return;\n            }\n            this[delegateName].fire(data);\n        };\n\n        this.ready = this.onReady({\n            success: _index2.default.defaultSuccessCallback,\n            error: function error() {\n                if (_index2.default.PromiseHandler !== _index2.default.PromiseHandlerBase) {\n                    _index2.default.defaultErrorCallback.apply(this, arguments);\n                } else {\n                    _index2.default.Trace.error(arguments);\n                }\n            }\n        });\n    },\n    beginTransaction: function beginTransaction() {\n        var tables = null;\n        var callBack = null;\n        var isWrite = false;\n\n        function readParam(value) {\n            if (Object.isNullOrUndefined(value)) return;\n\n            if (typeof value === 'boolean') {\n                isWrite = value;\n            } else if (Array.isArray(value)) {\n                tables = value;\n            } else {\n                callBack = value;\n            }\n        }\n\n        readParam(arguments[0]);\n        readParam(arguments[1]);\n        readParam(arguments[2]);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        callBack = pHandler.createCallback(callBack);\n\n        //callBack = $data.typeSystem.createCallbackSetting(callBack);\n        this.storageProvider._beginTran(tables, isWrite, callBack);\n\n        return pHandler.getPromise();\n    },\n    _isReturnTransaction: function _isReturnTransaction(transaction) {\n        return transaction instanceof _index2.default.Base || transaction === 'returnTransaction';\n    },\n    _applyTransaction: function _applyTransaction(scope, cb, args, transaction, isReturnTransaction) {\n        if (isReturnTransaction === true) {\n            if (transaction instanceof _index2.default.Transaction) {\n                Array.prototype.push.call(args, transaction);\n                cb.apply(scope, args);\n            } else {\n                this.beginTransaction(function (tran) {\n                    Array.prototype.push.call(args, tran);\n                    cb.apply(scope, args);\n                });\n            }\n        } else {\n            cb.apply(scope, args);\n        }\n    },\n\n    getDataType: function getDataType(dataType) {\n        // Obsolate\n        if (typeof dataType == \"string\") {\n            var memDef_dataType = this[dataType];\n            if (memDef_dataType === undefined || memDef_dataType === null) {\n                memDef_dataType = eval(dataType);\n            }\n            return memDef_dataType;\n        }\n        return dataType;\n    },\n    _initializeEntitySets: function _initializeEntitySets(ctor) {\n\n        for (var i = 0, l = this._storageModel.length; i < l; i++) {\n            var storageModel = this._storageModel[i];\n            this[storageModel.ItemName] = new _index2.default.EntitySet(storageModel.LogicalType, this, storageModel.ItemName, storageModel.EventHandlers, storageModel.Roles);\n            var sm = this[storageModel.ItemName];\n            sm.name = storageModel.ItemName;\n            sm.tableName = storageModel.TableName;\n            sm.tableOptions = storageModel.TableOptions;\n            sm.eventHandlers = storageModel.EventHandlers;\n            this._entitySetReferences[storageModel.LogicalType.name] = sm;\n\n            this._initializeActions(sm, ctor, ctor.getMemberDefinition(storageModel.ItemName));\n        }\n    },\n    _initializeStore: function _initializeStore(callBack) {\n        if (this.storageProvider) {\n            this.storageProvider.initializeStore(callBack);\n        }\n    },\n\n    _initStorageModelSync: function _initStorageModelSync() {\n        var _memDefArray = this.getType().memberDefinitions.asArray();\n\n        for (var i = 0; i < _memDefArray.length; i++) {\n            var item = _memDefArray[i];\n            if ('dataType' in item) {\n                var itemResolvedDataType = _index.Container.resolveType(item.dataType);\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(item.elementType);\n                    var storageModel = new _index2.default.StorageModel();\n                    storageModel.TableName = item.tableName || item.name;\n                    storageModel.TableOptions = item.tableOptions;\n                    storageModel.ItemName = item.name;\n                    storageModel.LogicalType = elementType;\n                    storageModel.LogicalTypeName = elementType.name;\n                    storageModel.PhysicalTypeName = _index2.default.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\n                    storageModel.ContextType = this.getType();\n                    storageModel.Roles = item.roles;\n                    if (item.indices) {\n                        storageModel.indices = item.indices;\n                    }\n                    if (item.beforeCreate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeCreate = item.beforeCreate;\n                    }\n                    if (item.beforeRead) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeRead = item.beforeRead;\n                    }\n                    if (item.beforeUpdate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeUpdate = item.beforeUpdate;\n                    }\n                    if (item.beforeDelete) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeDelete = item.beforeDelete;\n                    }\n                    if (item.afterCreate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterCreate = item.afterCreate;\n                    }\n                    if (item.afterRead) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterRead = item.afterRead;\n                    }\n                    if (item.afterUpdate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterUpdate = item.afterUpdate;\n                    }\n                    if (item.afterDelete) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterDelete = item.afterDelete;\n                    }\n                    this._storageModel.push(storageModel);\n                    var name = _index.Container.resolveName(elementType);\n                    this._storageModel[name] = storageModel;\n                }\n            }\n        }\n    },\n    _initializeStorageModel: function _initializeStorageModel() {\n\n        var _memDefArray = this.getType().memberDefinitions.asArray();\n\n        if (typeof intellisense !== 'undefined') return;\n\n        for (var i = 0; i < this._storageModel.length; i++) {\n            var storageModel = this._storageModel[i];\n\n            ///<param name=\"storageModel\" type=\"$data.StorageModel\">Storage model item</param>\n            var dbEntityInstanceDefinition = {};\n\n            storageModel.Associations = storageModel.Associations || [];\n            storageModel.ComplexTypes = storageModel.ComplexTypes || [];\n            storageModel.Enums = storageModel.Enums || [];\n            for (var j = 0; j < storageModel.LogicalType.memberDefinitions.getPublicMappedProperties().length; j++) {\n                var memDef = storageModel.LogicalType.memberDefinitions.getPublicMappedProperties()[j];\n                ///<param name=\"memDef\" type=\"MemberDefinition\">Member definition instance</param>\n\n                var memDefResolvedDataType = _index.Container.resolveType(memDef.dataType);\n\n                if ((this.storageProvider.supportedDataTypes.indexOf(memDefResolvedDataType) > -1 || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.Enum)) && Object.isNullOrUndefined(memDef.inverseProperty)) {\n                    //copy member definition\n                    var t = JSON.parse(JSON.stringify(memDef));\n                    //change datatype to resolved type\n                    t.dataType = memDefResolvedDataType;\n                    dbEntityInstanceDefinition[memDef.name] = t;\n\n                    if (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.Enum)) {\n                        this._build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                    }\n\n                    continue;\n                }\n\n                this._buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel);\n\n                //var memDef_dataType = this.getDataType(memDef.dataType);\n                if ((memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) && memDef.inverseProperty && memDef.inverseProperty !== '$$unbound') {\n                    this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                } else {\n                    if (memDef.inverseProperty) {\n                        if (memDef.inverseProperty === '$$unbound') {\n                            //member definition is navigation but not back reference\n                            if (memDefResolvedDataType === _index2.default.Array) {\n                                this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                            } else {\n                                this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                            }\n                        } else {\n                            //member definition is navigation property one..one or one..many case\n                            var fields = memDefResolvedDataType.memberDefinitions.getMember(memDef.inverseProperty);\n                            if (fields) {\n                                if (fields.elementType) {\n                                    //member definition is one..many connection\n                                    var referealResolvedType = _index.Container.resolveType(fields.elementType);\n                                    if (referealResolvedType === storageModel.LogicalType) {\n                                        this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                                    } else {\n                                        if (typeof intellisense === 'undefined') {\n                                            _index.Guard.raise(new _index.Exception('Inverse property not valid, refereed item element type not match: ' + storageModel.LogicalTypeName, ', property: ' + memDef.name));\n                                        }\n                                    }\n                                } else {\n                                    //member definition is one..one connection\n                                    this._buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                                }\n                            } else {\n                                if (typeof intellisense === 'undefined') {\n                                    _index.Guard.raise(new _index.Exception('Inverse property not valid'));\n                                }\n                            }\n                        }\n                    } else {\n                        //member definition is a complex type\n                        this._buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                    }\n                }\n            }\n            this._buildDbType_modifyInstanceDefinition(dbEntityInstanceDefinition, storageModel, this);\n            var dbEntityClassDefinition = {};\n            dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\n            this._buildDbType_modifyClassDefinition(dbEntityClassDefinition, storageModel, this);\n\n            //create physical type\n            //TODO\n            storageModel.PhysicalType = _index2.default.Class.define(storageModel.PhysicalTypeName, _index2.default.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\n        }\n    },\n    _initializeActions: function _initializeActions(es, ctor, esDef) {\n        if (esDef && esDef.actions) {\n            var actionKeys = Object.keys(esDef.actions);\n            for (var i = 0; i < actionKeys.length; i++) {\n                var actionName = actionKeys[i];\n                var action = esDef.actions[actionName];\n                if (typeof action === 'function') {\n                    es[actionName] = action;\n                } else {\n                    var actionDef = _index2.default.MemberDefinition.translateDefinition(action, actionName, ctor);\n                    if (actionDef instanceof _index2.default.MemberDefinition && actionDef.kind === _index2.default.MemberTypes.method) {\n                        es[actionName] = actionDef.method;\n                    }\n                }\n            }\n        }\n    },\n    _buildDbType_navigationPropertyComplite: function _buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel) {\n        if (!memDef.inverseProperty) {\n            var refMemDefs = null;\n            if (memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                var refStorageModel = this._storageModel.getStorageModel(_index.Container.resolveType(memDef.elementType));\n                if (refStorageModel) {\n                    refMemDefs = [];\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < pubDefs.length; i++) {\n                        var m = pubDefs[i];\n                        if (m.inverseProperty == memDef.name && _index.Container.resolveType(m.dataType) === _index.Container.resolveType(storageModel.LogicalType)) refMemDefs.push(m);\n                    }\n                }\n            } else {\n                var refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\n                if (refStorageModel) {\n                    refMemDefs = [];\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < pubDefs.length; i++) {\n                        var m = pubDefs[i];\n                        if (m.elementType && m.inverseProperty == memDef.name && _index.Container.resolveType(m.elementType) === storageModel.LogicalType) refMemDefs.push(m);else if (m.inverseProperty == memDef.name && _index.Container.resolveType(m.dataType) === storageModel.LogicalType) refMemDefs.push(m);\n                    }\n                }\n            }\n            if (refMemDefs) {\n                if (refMemDefs.length > 1) {\n                    if (typeof intellisense !== 'undefined') {\n                        _index.Guard.raise(new _index.Exception('More than one inverse property refer to this member definition: ' + memDef.name + ', type: ' + _index.Container.resolveName(storageModel.LogicalType)));\n                    }\n                }\n                var refMemDef = refMemDefs.pop();\n                if (refMemDef) {\n                    memDef.inverseProperty = refMemDef.name;\n                }\n            }\n        } else {\n            var refStorageModel = null;\n            if (memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                refStorageModel = this._storageModel.getStorageModel(_index.Container.resolveType(memDef.elementType));\n            } else {\n                refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\n            }\n\n            var p = refStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\n            if (p) {\n                if (p.inverseProperty) {\n                    if (p.inverseProperty != memDef.name) {\n                        if (typeof intellisense === 'undefined') {\n                            _index.Guard.raise(new _index.Exception('Inverse property mismatch'));\n                        }\n                    }\n                } else {\n                    p.inverseProperty = memDef.name;\n                }\n            }\n        }\n    },\n    _buildDbType_generateConvertToFunction: function _buildDbType_generateConvertToFunction(storageModel) {\n        return function (instance) {\n            return instance;\n        };\n    },\n    _buildDbType_modifyInstanceDefinition: function _buildDbType_modifyInstanceDefinition(instanceDefinition, storageModel) {\n        return;\n    },\n    _buildDbType_modifyClassDefinition: function _buildDbType_modifyClassDefinition(classDefinition, storageModel) {\n        return;\n    },\n    _buildDbType_addComplexTypePropertyDefinition: function _buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name, _index2.default.MemberTypes.complexProperty);\n        var complexType = this._createComplexElement(storageModel.LogicalType, \"\", memDef.name, memDef_dataType, \"\", \"\");\n        storageModel.ComplexTypes[memDef.name] = complexType;\n        storageModel.ComplexTypes.push(complexType);\n    },\n    _buildDbType_Collection_OneManyDefinition: function _buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.elementType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '0..1';\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"*\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _buildDbType_ElementType_OneManyDefinition: function _buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.dataType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '*';\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"0..1\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _buildDbType_ElementType_OneOneDefinition: function _buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.dataType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);;\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        var refereedMemberDefinition = refereedStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\n        if (!refereedMemberDefinition.required && !memDef.required) {\n            if (typeof intellisense === 'undefined') {\n                if (typeof intellisense === 'undefined') {\n                    _index.Guard.raise(new _index.Exception('In one to one connection, one side must required!', 'One to One connection', memDef));\n                }\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n\n        var association = this._addAssociationElement(storageModel.LogicalType, memDef.required ? \"0..1\" : \"1\", memDef.name, refereedStorageModel.LogicalType, memDef.required ? \"1\" : \"0..1\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _addNavigationPropertyDefinition: function _addNavigationPropertyDefinition(definition, member, associationName, kind) {\n        var t = JSON.parse(JSON.stringify(member));\n        t.dataType = _index2.default.EntitySet;\n        t.notMapped = true;\n        t.kind = kind ? kind : _index2.default.MemberTypes.navProperty;\n        t.association = associationName;\n        definition[member.name] = t;\n    },\n    _addAssociationElement: function _addAssociationElement(fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\n        return new _index2.default.Association({\n            From: fromType.name,\n            FromType: fromType,\n            FromMultiplicity: fromMultiplicity,\n            FromPropertyName: fromPropName,\n            To: toType.name,\n            ToType: toType,\n            ToMultiplicity: toMultiplicity,\n            ReferentialConstraint: [],\n            ToPropertyName: toPropName\n        });\n    },\n    _createComplexElement: function _createComplexElement(fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\n        return new _index2.default.ComplexType({\n            From: fromType.name,\n            FromType: fromType,\n            FromMultiplicity: fromMultiplicity,\n            FromPropertyName: fromPropName,\n            To: toType.name,\n            ToType: toType,\n            ToMultiplicity: toMultiplicity,\n            ReferentialConstraint: [],\n            ToPropertyName: toPropName\n        });\n    },\n    _build_EnumDefinition: function _build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef) {\n        storageModel.Enums.push(memDefResolvedDataType);\n\n        var typeName = _index.Container.resolveName(memDefResolvedDataType);\n        var converterGroups = this.storageProvider.fieldConverter;\n\n        var createEnumConverter = function createEnumConverter(converterGroup) {\n            converterGroup[typeName] = function (value) {\n                return converterGroup[\"$data.Enum\"].call(this, value, memDefResolvedDataType);\n            };\n        };\n\n        for (var i in converterGroups) {\n            if (!converterGroups[i][typeName] && converterGroups[i][\"$data.Enum\"]) {\n                createEnumConverter(converterGroups[i]);\n            }\n        }\n    },\n\n    _successInitProvider: function _successInitProvider(context, error) {\n        if (context instanceof _index2.default.EntityContext && context._isOK !== undefined) {\n            if (!error) {\n                context._isOK = true;\n                if (context.onReadyFunction) {\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\n                        context.onReadyFunction[i].success(context);\n                    }\n                    context.onReadyFunction = undefined;\n                }\n            } else {\n                context._isOK = error;\n                if (context.onReadyFunction) {\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\n                        context.onReadyFunction[i].error(error);\n                    }\n                    context.onReadyFunction = undefined;\n                }\n            }\n        }\n    },\n    /**\r\n     * Sets the callback function to be called when the initialization of the {@link $data.EntityContext} has successfully finished.\r\n     * @event $data.EntityContext#onReady\r\n     * @param {function|function[]} fn - Success callback\r\n     * @returns {$.Deferred}\r\n     */\n    onReady: function onReady(fn) {\n        /// <signature>\n        ///     <summary>\n        ///\n        ///     </summary>\n        ///     <param name=\"successCallback\" type=\"Function\">\n        ///         <summary>Success callback</summary>\n        ///         <param name=\"entityContext\" type=\"$data.EntityContext\">Current entityContext object</param>\n        ///     </param>\n        ///     <returns type=\"\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>\n        ///         Sets the callback functions to be called when the initialization of the EntityContext has finished.\n        ///     </summary>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        var pHandler = new _index2.default.PromiseHandler();\n        var callBack = pHandler.createCallback(fn);\n        if (this._isOK === true) {\n            callBack.success(this);\n        } else if (this._isOK !== false) {\n            callBack.error(this._isOK);\n        } else {\n            this.onReadyFunction = this.onReadyFunction || [];\n            this.onReadyFunction.push(callBack);\n        }\n\n        return pHandler.getPromise();\n    },\n    ready: { type: _index2.default.Promise },\n    getEntitySetFromElementType: function getEntitySetFromElementType(elementType) {\n        /// <signature>\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\n        ///     <param name=\"elementType\" type=\"Function\" />\n        ///     <returns type=\"$data.EntitySet\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\n        ///     <param name=\"elementType\" type=\"String\" />\n        ///     <returns type=\"$data.EntitySet\" />\n        /// </signature>\n        var result = this._entitySetReferences[elementType];\n        if (!result) {\n            try {\n                result = this._entitySetReferences[eval(elementType).name];\n            } catch (ex) {}\n        }\n        return result;\n    },\n    executeQuery: function executeQuery(queryable, callBack, transaction) {\n        var query = new _index2.default.Query(queryable.expression, queryable.defaultType, this);\n        query.transaction = transaction instanceof _index2.default.Transaction ? transaction : undefined;\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        callBack = _index2.default.typeSystem.createCallbackSetting(callBack);\n        var that = this;\n        var clbWrapper = {};\n        clbWrapper.success = that.executeQuerySuccess(that, returnTransaction, callBack);\n        clbWrapper.error = that.executeQueryError(that, returnTransaction, callBack);\n\n        var sets = query.getEntitySets();\n\n        var authorizedFn = function authorizedFn() {\n            var ex = true;\n            var wait = false;\n            var ctx = that;\n\n            var readyFn = function readyFn(cancel) {\n                if (cancel === false) ex = false;\n\n                if (ex) {\n                    if (query.transaction) {\n                        if (_index2.default.QueryCache && _index2.default.QueryCache.isInCache(that, query)) {\n                            _index2.default.QueryCache.executeQuery(that, query, clbWrapper);\n                        } else {\n                            ctx.storageProvider.executeQuery(query, clbWrapper);\n                        }\n                    } else {\n                        ctx.beginTransaction(function (tran) {\n                            query.transaction = tran;\n                            if (_index2.default.QueryCache && _index2.default.QueryCache.isInCache(that, query)) {\n                                _index2.default.QueryCache.executeQuery(that, query, clbWrapper);\n                            } else {\n                                ctx.storageProvider.executeQuery(query, clbWrapper);\n                            }\n                        });\n                    }\n                } else {\n                    query.rawDataList = [];\n                    query.result = [];\n                    clbWrapper.success(query);\n                }\n            };\n\n            var i = 0;\n            var callbackFn = function callbackFn(cancel) {\n                if (cancel === false) ex = false;\n\n                var es = sets[i];\n                if (es.beforeRead) {\n                    i++;\n                    var r = es.beforeRead.call(this, sets, query);\n                    if (typeof r === 'function') {\n                        r.call(this, i < sets.length && ex ? callbackFn : readyFn, sets, query);\n                    } else {\n                        if (r === false) ex = false;\n\n                        if (i < sets.length && ex) {\n                            callbackFn();\n                        } else readyFn();\n                    }\n                } else readyFn();\n            };\n\n            if (sets.length) callbackFn();else readyFn();\n        };\n\n        if (this.user && this.checkPermission) {\n            this.checkPermission(query.expression.nodeType === _index2.default.Expressions.ExpressionType.BatchDelete ? _index2.default.Access.DeleteBatch : _index2.default.Access.Read, this.user, sets, {\n                success: authorizedFn,\n                error: clbWrapper.error\n            });\n        } else authorizedFn();\n    },\n    executeQuerySuccess: function executeQuerySuccess(that, returnTransaction, callBack) {\n        return function (query) {\n            if (_index2.default.QueryCache && _index2.default.QueryCache.isCacheable(that, query)) {\n                _index2.default.QueryCache.addToCache(that, query);\n            }\n\n            query.buildResultSet(that);\n\n            if (_index2.default.ItemStore && 'QueryResultModifier' in _index2.default.ItemStore) _index2.default.ItemStore.QueryResultModifier.call(that, query);\n\n            var successResult;\n\n            if (query.expression.nodeType === _index2.default.Expressions.ExpressionType.Single || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Find || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Count || query.expression.nodeType === _index2.default.Expressions.ExpressionType.BatchDelete || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Some || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Every) {\n                if (query.result.length !== 1) {\n                    callBack.error(new _index.Exception('result count failed'));\n                    return;\n                }\n\n                successResult = query.result[0];\n            } else if (query.expression.nodeType === _index2.default.Expressions.ExpressionType.First) {\n                if (query.result.length === 0) {\n                    callBack.error(new _index.Exception('result count failed'));\n                    return;\n                }\n\n                successResult = query.result[0];\n            } else {\n                if (typeof query.__count === 'number' && query.result) query.result.totalCount = query.__count;\n\n                that.storageProvider._buildContinuationFunction(that, query);\n\n                successResult = query.result;\n            }\n\n            var readyFn = function readyFn() {\n                that._applyTransaction(callBack, callBack.success, [successResult], query.transaction, returnTransaction);\n\n                /*if (returnTransaction === true) {\r\n                    if (query.transaction)\r\n                        callBack.success(successResult, query.transaction);\r\n                    else {\r\n                        that.beginTransaction(function (tran) {\r\n                            callBack.success(successResult, tran);\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                    callBack.success(successResult);*/\n            };\n\n            var i = 0;\n            var sets = query.getEntitySets();\n\n            var callbackFn = function callbackFn() {\n                var es = sets[i];\n                if (es.afterRead) {\n                    i++;\n                    var r = es.afterRead.call(this, successResult, sets, query);\n                    if (typeof r === 'function') {\n                        r.call(this, i < sets.length ? callbackFn : readyFn, successResult, sets, query);\n                    } else {\n                        if (i < sets.length) {\n                            callbackFn();\n                        } else readyFn();\n                    }\n                } else readyFn();\n            };\n\n            if (sets.length) callbackFn();else readyFn();\n        };\n    },\n    executeQueryError: function executeQueryError(that, returnTransaction, callBack) {\n        return function () {\n            if (returnTransaction) callBack.error.apply(this, arguments);else callBack.error.apply(this, Array.prototype.filter.call(arguments, function (p) {\n                return !(p instanceof _index2.default.Transaction);\n            }));\n        };\n    },\n\n    batchExecuteQuery: function batchExecuteQuery(queryableOptions, callBack, transaction) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(callBack);\n\n        var self = this;\n        var methodOperationMappings = {\n            count: 'length',\n            length: 'length',\n            forEach: 'forEach',\n            toArray: 'toArray',\n            single: 'single',\n            some: 'some',\n            every: 'every',\n            first: 'first',\n            removeAll: 'batchDelete'\n        };\n        var methodFrameMappings = {\n            count: 'CountExpression',\n            length: 'CountExpression',\n            forEach: 'ForEachExpression',\n            toArray: 'ToArrayExpression',\n            single: 'SingleExpression',\n            some: 'SomeExpression',\n            every: 'EveryExpression',\n            first: 'FirstExpression',\n            removeAll: 'BatchDeleteExpression'\n        };\n\n        var returnFunc = function returnFunc() {\n            return pHandler.getPromise();\n        };\n\n        if (typeof queryableOptions.length != \"number\") {\n            cbWrapper.error(new _index.Exception('QueryableOptions array parameter missing', 'Invalid arguments'));\n            return returnFunc();\n        }\n\n        var qOptions = [];\n        for (var i = 0; i < queryableOptions.length; i++) {\n            var queryOption = {};\n            if (queryableOptions[i] instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i];\n                queryOption.method = 'toArray';\n            } else if (queryableOptions[i].queryable instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i].queryable;\n                queryOption.method = queryableOptions[i].method || 'toArray';\n            } else if (queryableOptions[i][0] instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i][0];\n                queryOption.method = queryableOptions[i][1] || 'toArray';\n            } else {\n                cbWrapper.error(new _index.Exception('$data.Queryable is missing in queryableOptions at index ' + i, 'Invalid arguments'));\n                return returnFunc();\n            }\n\n            if (queryOption.queryable.entityContext !== self) {\n                cbWrapper.error(new _index.Exception('Queryable at index ' + i + ' contains different entity context', 'Invalid arguments'));\n                return returnFunc();\n            }\n\n            queryOption.queryable._checkOperation(methodOperationMappings[queryOption.method] || queryOption.method);\n            qOptions.push(queryOption);\n        }\n\n        var executableQueries = [];\n        for (var i = 0; i < qOptions.length; i++) {\n            var queryOption = qOptions[i];\n\n            var frameExpressionName = methodFrameMappings[queryOption.method] || queryOption.method;\n            if (frameExpressionName && _index2.default.Expressions[frameExpressionName] && _index2.default.Expressions[frameExpressionName].isAssignableTo(_index2.default.Expressions.FrameOperator)) {\n\n                var queryExpression = _index.Container['create' + frameExpressionName](queryOption.queryable.expression);\n                var preparator = _index.Container.createQueryExpressionCreator(queryOption.queryable.entityContext);\n\n                try {\n                    var expression = preparator.Visit(queryExpression);\n                    queryOption.queryable.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n                    var queryable = _index.Container.createQueryable(queryOption.queryable, expression);\n                    executableQueries.push(queryable);\n                } catch (e) {\n                    cbWrapper.error(e);\n                    return returnFunc();\n                }\n            } else {\n                cbWrapper.error(new _index.Exception('Invalid frame method \\'' + frameExpressionName + '\\' in queryableOptions at index ' + i, 'Invalid arguments'));\n                return returnFunc();\n            }\n        }\n\n        var queryResults = [];\n        if (self.storageProvider.supportedContextOperation && self.storageProvider.supportedContextOperation.batchExecuteQuery) {\n            //wrap queries\n            var batchExecuteQueryExpression = _index.Container.createBatchExecuteQueryExpression(executableQueries.map(function (queryable) {\n                return new _index2.default.Query(queryable.expression, queryable.defaultType, self);\n            }));\n\n            var batchExecuteQuery = _index.Container.createQueryable(self, batchExecuteQueryExpression);\n            self.executeQuery(batchExecuteQuery, {\n                success: function success(results) {\n                    var batchResult = [];\n                    var hasError = false;\n                    var errorValue = null;\n                    for (var i = 0; i < results.length && !hasError; i++) {\n                        var query = results[i];\n                        self.executeQuerySuccess(self, returnTransaction, {\n                            success: function success(result) {\n                                batchResult.push(result);\n                            },\n                            error: function error(err) {\n                                hasError = true;\n                                errorValue = err;\n                            }\n                        })(query);\n                    }\n                    if (!hasError) {\n                        self._applyTransaction(cbWrapper, cbWrapper.success, [batchResult], batchExecuteQuery.transaction, returnTransaction);\n                    } else {\n                        cbWrapper.error(errorValue);\n                    }\n                },\n                error: cbWrapper.error\n            }, transaction);\n        } else {\n            var returnTransaction = this._isReturnTransaction(transaction);\n\n            var readIterator = function readIterator(queries, index, iteratorCallback, itTransaction) {\n                var query = queries[index];\n                if (!query) {\n                    return iteratorCallback.success(itTransaction);\n                }\n\n                self.executeQuery(executableQueries[index], {\n                    success: function success(result, tr) {\n                        queryResults.push(result);\n                        readIterator(executableQueries, index + 1, iteratorCallback, tr);\n                    },\n                    error: iteratorCallback.error\n                }, itTransaction);\n            };\n\n            readIterator(executableQueries, 0, {\n                success: function success(lastTran) {\n                    self._applyTransaction(cbWrapper, cbWrapper.success, [queryResults], lastTran, returnTransaction);\n                },\n                error: cbWrapper.error\n            }, transaction);\n        }\n        return returnFunc();\n    },\n\n    /**\r\n     * Saves the changes made to the context.\r\n     *\r\n     * @memberof $data.EntityContext\r\n     * @instance\r\n     * @param {Function|Object} callback - callback function or callback object with success & error properties\r\n     * @param {$data.Transaction} transaction - Transaction object\r\n     * @returns $.Deferred\r\n     *\r\n     * @example <caption>saveChanges with simple callback function</caption>\r\n     * context.saveChanges(function(db) {\r\n     *  //success\r\n     * });\r\n     *\r\n     * @example <caption>saveChanges with callback object</caption>\r\n     * var myCallback = {\r\n     *  success: function(db) { //succeess },\r\n     *  error: function(errors) { console.log(errors); }\r\n     * }\r\n     * context.saveChanges(myCallback);\r\n     */\n    saveChanges: function saveChanges(callback, transaction) {\n        if (_index2.default.QueryCache) {\n            _index2.default.QueryCache.reset(this);\n        }\n\n        var changedEntities = [];\n        var trackedEntities = this.stateManager.trackedEntities;\n        var pHandler = new _index2.default.PromiseHandler();\n        var clbWrapper = pHandler.createCallback(callback);\n        var pHandlerResult = pHandler.getPromise();\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        var skipItems = [];\n        while (trackedEntities.length > 0) {\n            var additionalEntities = [];\n            //trackedEntities.forEach(function (entityCachedItem) {\n            for (var i = 0; i < trackedEntities.length; i++) {\n                var entityCachedItem = trackedEntities[i];\n\n                var sModel = this._storageModel.getStorageModel(entityCachedItem.data.getType());\n                if (entityCachedItem.data.entityState == _index2.default.EntityState.Unchanged) {\n                    entityCachedItem.skipSave = true;\n                    skipItems.push(entityCachedItem.data);\n                } else {\n                    if (entityCachedItem.data.entityState == _index2.default.EntityState.Modified) {\n                        if (entityCachedItem.data.changedProperties) {\n                            var changeStoredProperty = entityCachedItem.data.changedProperties.some(function (p) {\n                                var pMemDef = sModel.PhysicalType.memberDefinitions.getMember(p.name);\n                                if (pMemDef.kind == _index2.default.MemberTypes.navProperty) {\n                                    var a = sModel.Associations[pMemDef.association];\n                                    var multiplicity = a.FromMultiplicity + a.ToMultiplicity;\n                                    return multiplicity == '*0..1' || multiplicity == '0..11';\n                                }\n                                return true;\n                            });\n                            if (!changeStoredProperty) {\n                                entityCachedItem.skipSave = true;\n                                skipItems.push(entityCachedItem.data);\n                            }\n                        } else {\n                            entityCachedItem.skipSave = true;\n                            skipItems.push(entityCachedItem.data);\n                        }\n                    }\n                }\n\n                //type before events with items\n                this.processEntityTypeBeforeEventHandler(skipItems, entityCachedItem);\n\n                var navigationProperties = [];\n                var smPhyMemDefs = sModel.PhysicalType.memberDefinitions.asArray();\n                for (var ism = 0; ism < smPhyMemDefs.length; ism++) {\n                    var p = smPhyMemDefs[ism];\n                    if (p.kind == _index2.default.MemberTypes.navProperty) navigationProperties.push(p);\n                }\n                //var navigationProperties = sModel.PhysicalType.memberDefinitions.asArray().filter(function (p) { return p.kind == $data.MemberTypes.navProperty; });\n                //navigationProperties.forEach(function (navProp) {\n                for (var j = 0; j < navigationProperties.length; j++) {\n                    var navProp = navigationProperties[j];\n\n                    var association = sModel.Associations[navProp.name]; //eg.:\"Profile\"\n                    var name = navProp.name; //eg.: \"Profile\"\n                    var navPropertyName = association.ToPropertyName; //eg.: User\n\n                    var connectedDataList = [].concat(entityCachedItem.data[name]);\n                    //connectedDataList.forEach(function (data) {\n                    for (var k = 0; k < connectedDataList.length; k++) {\n                        var data = connectedDataList[k];\n\n                        if (data) {\n                            var value = data[navPropertyName];\n                            var associationType = association.FromMultiplicity + association.ToMultiplicity;\n                            if (association.FromMultiplicity === '$$unbound') {\n                                if (data instanceof _index2.default.Array) {\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                    //data.forEach(function (dataItem) {\n                                    for (var l = 0; l < data.length; l++) {\n                                        var dataItem = data[l];\n\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                    }\n                                    //}, this);\n                                } else {\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                    }\n                            } else {\n                                switch (associationType) {\n                                    case \"*0..1\":\n                                        //Array\n                                        if (value) {\n                                            if (value instanceof Array) {\n                                                if (value.indexOf(entityCachedItem.data) == -1) {\n                                                    value.push(entityCachedItem.data);\n                                                    data.initData[navPropertyName] = value;\n                                                    data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                                }\n                                            } else {\n                                                if (typeof intellisense === 'undefined') {\n                                                    _index.Guard.raise(\"Item must be array or subtype of array\");\n                                                }\n                                            }\n                                        } else {\n                                            data.initData[navPropertyName] = [entityCachedItem.data];\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                        }\n                                        break;\n                                    default:\n                                        //Item\n                                        if (value) {\n                                            if (value !== entityCachedItem.data) {\n                                                if (typeof intellisense === 'undefined') {\n                                                    _index.Guard.raise(\"Integrity check error! Item assigned to another entity!\");\n                                                }\n                                            }\n                                        } else {\n                                            data.initData[navPropertyName] = entityCachedItem.data; //set back reference for live object\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                        }\n                                        break;\n                                }\n                                switch (associationType) {\n                                    case \"*0..1\":\n                                    case \"0..11\":\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                        break;\n                                }\n                            }\n                            if (!data.entityState) {\n                                //if (data.storeToken === this.storeToken) {\n                                //    data.entityState = $data.EntityState.Modified;\n                                //} else {\n                                //    data.entityState = $data.EntityState.Added;\n                                //}\n                                this.discoverDependentItemEntityState(data);\n                            }\n                            if (additionalEntities.indexOf(data) == -1) {\n                                additionalEntities.push(data);\n                            }\n                        }\n                    }\n                    //}, this);\n                }\n                //}, this);\n            }\n            //}, this);\n\n            //trackedEntities.forEach(function (entity) {\n            for (var i = 0; i < trackedEntities.length; i++) {\n                var entity = trackedEntities[i];\n\n                if (entity.skipSave !== true) {\n                    changedEntities.push(entity);\n                }\n            }\n            //});\n\n            trackedEntities = [];\n            //additionalEntities.forEach(function (item) {\n            for (var i = 0; i < additionalEntities.length; i++) {\n                var item = additionalEntities[i];\n\n                if (!skipItems.some(function (entity) {\n                    return entity == item;\n                })) {\n                    if (!changedEntities.some(function (entity) {\n                        return entity.data == item;\n                    })) {\n                        trackedEntities.push({ data: item, entitySet: this.getEntitySetFromElementType(item.getType().name) });\n                    }\n                }\n            }\n            //}, this);\n        }\n\n        //changedEntities.forEach(function (d) {\n        for (var j = 0; j < changedEntities.length; j++) {\n            var d = changedEntities[j];\n\n            if (d.dependentOn) {\n                var temp = [];\n                for (var i = 0; i < d.dependentOn.length; i++) {\n                    if (skipItems.indexOf(d.dependentOn[i]) < 0) {\n                        temp.push(d.dependentOn[i]);\n                    }\n                }\n                d.dependentOn = temp;\n            }\n        }\n        //});\n        skipItems = null;\n        var ctx = this;\n        if (changedEntities.length == 0) {\n            this.stateManager.trackedEntities.length = 0;\n            ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\n\n            /*if (returnTransaction) {\r\n                clbWrapper.success(0, transaction);\r\n            } else {\r\n                clbWrapper.success(0);\r\n            }*/\n            return pHandlerResult;\n        }\n\n        //validate entities\n        var errors = [];\n        //changedEntities.forEach(function (entity) {\n        for (var i = 0; i < changedEntities.length; i++) {\n            var entity = changedEntities[i];\n\n            if (entity.data.entityState === _index2.default.EntityState.Added) {\n                //entity.data.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                for (var j = 0; j < entity.data.getType().memberDefinitions.getPublicMappedProperties().length; j++) {\n                    var memDef = entity.data.getType().memberDefinitions.getPublicMappedProperties()[j];\n\n                    var memDefType = _index.Container.resolveType(memDef.type);\n                    if (memDef.required && !memDef.computed && !entity.data[memDef.name] && !memDef.isDependentProperty) {\n                        switch (memDefType) {\n                            case _index2.default.String:\n                            case _index2.default.Number:\n                            case _index2.default.Float:\n                            case _index2.default.Decimal:\n                            case _index2.default.Integer:\n                            case _index2.default.Int16:\n                            case _index2.default.Int32:\n                            case _index2.default.Int64:\n                            case _index2.default.Byte:\n                            case _index2.default.SByte:\n                            case _index2.default.Date:\n                            case _index2.default.Boolean:\n                                entity.data[memDef.name] = _index.Container.getDefault(memDef.dataType);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n                //}, this);\n            }\n            if ((entity.data.entityState === _index2.default.EntityState.Added || entity.data.entityState === _index2.default.EntityState.Modified) && !entity.data.isValid()) {\n                errors.push({ item: entity.data, errors: entity.data.ValidationErrors });\n            }\n        }\n        //});\n        if (errors.length > 0) {\n            clbWrapper.error(errors);\n            return pHandlerResult;\n        }\n\n        var access = _index2.default.Access.None;\n\n        var eventData = {};\n        var sets = [];\n        for (var i = 0; i < changedEntities.length; i++) {\n            var it = changedEntities[i];\n            var n = it.entitySet.elementType.name;\n            if (sets.indexOf(it.entitySet) < 0) sets.push(it.entitySet);\n            var es = this._entitySetReferences[n];\n            if (es.beforeCreate || es.beforeUpdate || es.beforeDelete || this.user && this.checkPermission) {\n                if (!eventData[n]) eventData[n] = {};\n\n                switch (it.data.entityState) {\n                    case _index2.default.EntityState.Added:\n                        access |= _index2.default.Access.Create;\n                        if (es.beforeCreate) {\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\n                            eventData[n].createAll.push(it);\n                        }\n                        break;\n                    case _index2.default.EntityState.Modified:\n                        access |= _index2.default.Access.Update;\n                        if (es.beforeUpdate) {\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\n                            eventData[n].modifyAll.push(it);\n                        }\n                        break;\n                    case _index2.default.EntityState.Deleted:\n                        access |= _index2.default.Access.Delete;\n                        if (es.beforeDelete) {\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\n                            eventData[n].deleteAll.push(it);\n                        }\n                        break;\n                }\n            }\n        }\n\n        var readyFn = function readyFn(cancel) {\n            if (cancel === false) {\n                cancelEvent = 'async';\n                changedEntities.length = 0;\n            }\n\n            if (changedEntities.length) {\n                //console.log('changedEntities: ', changedEntities.map(function(it){ return it.data.initData; }));\n\n                var innerCallback = {\n                    success: function success(tran) {\n                        ctx._postProcessSavedItems(clbWrapper, changedEntities, tran, returnTransaction);\n                    },\n                    error: function error() {\n                        //TODO remove trans from args;\n                        if (returnTransaction) clbWrapper.error.apply(this, arguments);else clbWrapper.error.apply(this, Array.prototype.filter.call(arguments, function (p) {\n                            return !(p instanceof _index2.default.Transaction);\n                        }));\n                    }\n                };\n\n                if (transaction instanceof _index2.default.Transaction) {\n                    ctx.storageProvider.saveChanges(innerCallback, changedEntities, transaction);\n                } else {\n                    ctx.beginTransaction(true, function (tran) {\n                        ctx.storageProvider.saveChanges(innerCallback, changedEntities, tran);\n                    });\n                }\n            } else if (cancelEvent) {\n                clbWrapper.error(new _index.Exception('Cancelled event in ' + cancelEvent, 'CancelEvent'));\n            } else {\n                ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\n\n                /*if(returnTransaction)\r\n                    clbWrapper.success(0, transaction);\r\n                else\r\n                    clbWrapper.success(0);*/\n            };\n\n            /*else if (cancelEvent) clbWrapper.error(new $data.Exception('saveChanges cancelled from event [' + cancelEvent + ']'));\r\n            else Guard.raise('No changed entities');*/\n        };\n\n        var cancelEvent;\n        var ies = Object.getOwnPropertyNames(eventData);\n        var i = 0;\n        var cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n        var cmdAll = {\n            beforeCreate: 'createAll',\n            beforeDelete: 'deleteAll',\n            beforeUpdate: 'modifyAll'\n        };\n\n        var callbackFn = function callbackFn(cancel) {\n            if (cancel === false) {\n                cancelEvent = 'async';\n                changedEntities.length = 0;\n\n                readyFn(cancel);\n                return;\n            }\n\n            var es = ctx._entitySetReferences[ies[i]];\n            var c = cmd.pop();\n            var ed = eventData[ies[i]];\n            var all = ed[cmdAll[c]];\n\n            if (all) {\n                var m = [];\n                for (var im = 0; im < all.length; im++) {\n                    m.push(all[im].data);\n                }\n                //var m = all.map(function(it){ return it.data; });\n                if (!cmd.length) {\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n                    i++;\n                }\n\n                var r = es[c].call(ctx, m);\n                if (typeof r === 'function') {\n                    r.call(ctx, i < ies.length && !cancelEvent ? callbackFn : readyFn, m);\n                } else if (r === false) {\n                    cancelEvent = es.name + '.' + c;\n                    //all.forEach(function (it) {\n                    for (var index = 0; index < all.length; index++) {\n                        var it = all[index];\n\n                        var ix = changedEntities.indexOf(it);\n                        changedEntities.splice(ix, 1);\n                    }\n                    //});\n\n                    readyFn();\n                } else {\n                    if (i < ies.length && !cancelEvent) callbackFn();else readyFn();\n                }\n            } else {\n                if (!cmd.length) {\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n                    i++;\n                }\n\n                if (i < ies.length && !cancelEvent) callbackFn();else readyFn();\n            }\n        };\n\n        if (this.user && this.checkPermission) {\n            this.checkPermission(access, this.user, sets, {\n                success: function success() {\n                    if (i < ies.length) callbackFn();else readyFn();\n                },\n                error: clbWrapper.error\n            });\n        } else {\n            if (i < ies.length) callbackFn();else readyFn();\n        }\n\n        return pHandlerResult;\n    },\n    discoverDependentItemEntityState: function discoverDependentItemEntityState(data) {\n        if (data.storeToken === this.storeToken) {\n            data.entityState = data.changedProperties && data.changedProperties.length ? _index2.default.EntityState.Modified : _index2.default.EntityState.Unchanged;\n        } else if (data.storeToken && this.storeToken && data.storeToken.typeName === this.storeToken.typeName && JSON.stringify(data.storeToken.args) === JSON.stringify(this.storeToken.args)) {\n            data.entityState = data.changedProperties && data.changedProperties.length ? _index2.default.EntityState.Modified : _index2.default.EntityState.Unchanged;\n        } else {\n            data.entityState = _index2.default.EntityState.Added;\n        }\n    },\n\n    processEntityTypeBeforeEventHandler: function processEntityTypeBeforeEventHandler(skipItems, entityCachedItem) {\n        if (!entityCachedItem.skipSave) {\n            var entity = entityCachedItem.data;\n            var entityType = entity.getType();\n            var state = entity.entityState;\n\n            switch (true) {\n                case state === _index2.default.EntityState.Added && entityType.onbeforeCreate instanceof _index2.default.Event:\n                    if (entityType.onbeforeCreate.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                case state === _index2.default.EntityState.Modified && entityType.onbeforeUpdate instanceof _index2.default.Event:\n                    if (entityType.onbeforeUpdate.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                case state === _index2.default.EntityState.Deleted && entityType.onbeforeDelete instanceof _index2.default.Event:\n                    if (entityType.onbeforeDelete.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    },\n    processEntityTypeAfterEventHandler: function processEntityTypeAfterEventHandler(entityCachedItem) {\n        var entity = entityCachedItem.data;\n        var entityType = entity.getType();\n        var state = entity.entityState;\n\n        switch (true) {\n            case state === _index2.default.EntityState.Added && entityType.onafterCreate instanceof _index2.default.Event:\n                entityType.onafterCreate.fire(entity);\n                break;\n            case state === _index2.default.EntityState.Modified && entityType.onafterUpdate instanceof _index2.default.Event:\n                entityType.onafterUpdate.fire(entity);\n                break;\n            case state === _index2.default.EntityState.Deleted && entityType.onafterDelete instanceof _index2.default.Event:\n                entityType.onafterDelete.fire(entity);\n                break;\n            default:\n                break;\n        }\n    },\n\n    bulkInsert: function bulkInsert(entitySet, fields, datas, callback) {\n        var pHandler = new _index2.default.PromiseHandler();\n        callback = pHandler.createCallback(callback);\n        if (typeof entitySet === 'string') {\n            var currentEntitySet;\n\n            for (var entitySetName in this._entitySetReferences) {\n                var actualEntitySet = this._entitySetReferences[entitySetName];\n                if (actualEntitySet.tableName === entitySet) {\n                    currentEntitySet = actualEntitySet;\n                    break;\n                }\n            }\n\n            if (!currentEntitySet) currentEntitySet = this[entitySet];\n\n            entitySet = currentEntitySet;\n        }\n        if (entitySet) {\n            this.storageProvider.bulkInsert(entitySet, fields, datas, callback);\n        } else {\n            callback.error(new _index.Exception('EntitySet not found'));\n        }\n        return pHandler.getPromise();\n    },\n\n    prepareRequest: function prepareRequest() {},\n    _postProcessSavedItems: function _postProcessSavedItems(callBack, changedEntities, transaction, returnTransaction) {\n        if (this.ChangeCollector && this.ChangeCollector instanceof _index2.default.Notifications.ChangeCollectorBase) this.ChangeCollector.processChangedData(changedEntities);\n\n        var eventData = {};\n        var ctx = this;\n        //changedEntities.forEach(function (entity) {\n        for (var i = 0; i < changedEntities.length; i++) {\n            var entity = changedEntities[i];\n\n            if (!entity.data.storeToken) entity.data.storeToken = ctx.storeToken;\n\n            //type after events with items\n            this.processEntityTypeAfterEventHandler(entity);\n\n            var oes = entity.data.entityState;\n\n            entity.data.entityState = _index2.default.EntityState.Unchanged;\n            entity.data.changedProperties = [];\n            entity.physicalData = undefined;\n\n            var n = entity.entitySet.elementType.name;\n            var es = ctx._entitySetReferences[n];\n\n            var eventName = undefined;\n            switch (oes) {\n                case _index2.default.EntityState.Added:\n                    eventName = 'added';\n                    break;\n                case _index2.default.EntityState.Deleted:\n                    eventName = 'deleted';\n                    break;\n                case _index2.default.EntityState.Modified:\n                    eventName = 'updated';\n                    break;\n            }\n            if (eventName) {\n                this.raiseEvent(eventName, entity);\n            }\n\n            if (es.afterCreate || es.afterUpdate || es.afterDelete) {\n                if (!eventData[n]) eventData[n] = {};\n\n                switch (oes) {\n                    case _index2.default.EntityState.Added:\n                        if (es.afterCreate) {\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\n                            eventData[n].createAll.push(entity);\n                        }\n                        break;\n                    case _index2.default.EntityState.Modified:\n                        if (es.afterUpdate) {\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\n                            eventData[n].modifyAll.push(entity);\n                        }\n                        break;\n                    case _index2.default.EntityState.Deleted:\n                        if (es.afterDelete) {\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\n                            eventData[n].deleteAll.push(entity);\n                        }\n                        break;\n                }\n            }\n        }\n        //});\n\n        var ies = Object.getOwnPropertyNames(eventData);\n        var i = 0;\n        var ctx = this;\n        var cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n        var cmdAll = {\n            afterCreate: 'createAll',\n            afterDelete: 'deleteAll',\n            afterUpdate: 'modifyAll'\n        };\n\n        var readyFn = function readyFn() {\n            if (!ctx.trackChanges) {\n                ctx.stateManager.reset();\n            }\n\n            ctx._applyTransaction(callBack, callBack.success, [changedEntities.length], transaction, returnTransaction);\n\n            /*if (returnTransaction)\r\n                callBack.success(changedEntities.length, transaction);\r\n            else\r\n                callBack.success(changedEntities.length);*/\n        };\n\n        var callbackFn = function callbackFn() {\n            var es = ctx._entitySetReferences[ies[i]];\n            var c = cmd.pop();\n            var ed = eventData[ies[i]];\n            var all = ed[cmdAll[c]];\n            if (all) {\n                var m = [];\n                for (var im = 0; im < all.length; im++) {\n                    m.push(all[im].data);\n                }\n                //var m = all.map(function(it){ return it.data; });\n                if (!cmd.length) {\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n                    i++;\n                }\n\n                var r = es[c].call(ctx, m);\n                if (typeof r === 'function') {\n                    r.call(ctx, i < ies.length ? callbackFn : readyFn, m);\n                } else {\n                    if (i < ies.length) callbackFn();else readyFn();\n                }\n            } else {\n                if (!cmd.length) {\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n                    i++;\n                }\n\n                if (i < ies.length) callbackFn();else readyFn();\n            }\n        };\n\n        if (i < ies.length) callbackFn();else readyFn();\n    },\n    forEachEntitySet: function forEachEntitySet(fn, ctx) {\n        /// <summary>\n        ///     Iterates over the entity sets' of current EntityContext.\n        /// </summary>\n        /// <param name=\"fn\" type=\"Function\">\n        ///     <param name=\"entitySet\" type=\"$data.EntitySet\" />\n        /// </param>\n        /// <param name=\"ctx\">'this' argument for the 'fn' function.</param>\n        for (var entitySetName in this._entitySetReferences) {\n            var actualEntitySet = this._entitySetReferences[entitySetName];\n            fn.call(ctx, actualEntitySet);\n        }\n    },\n\n    loadItemProperty: function loadItemProperty(entity, property, callback, transaction) {\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>C  allback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        _index.Guard.requireType('entity', entity, _index2.default.Entity);\n\n        var memberDefinition = typeof property === 'string' ? entity.getType().memberDefinitions.getMember(property) : property;\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        if (entity[memberDefinition.name] != undefined) {\n\n            var pHandler = new _index2.default.PromiseHandler();\n            var callBack = pHandler.createCallback(callback);\n            this._applyTransaction(callback, callback.success, [entity[memberDefinition.name]], transaction, returnTransaction);\n            /*if (returnTransaction)\r\n                callback.success(entity[memberDefinition.name], transaction);\r\n            else\r\n                callback.success(entity[memberDefinition.name]);*/\n\n            return pHandler.getPromise();\n        }\n\n        var isSingleSide = true;\n        var storageModel = this._storageModel.getStorageModel(entity.getType().fullName);\n        var elementType = _index.Container.resolveType(memberDefinition.dataType);\n        if (elementType === _index2.default.Array || elementType.isAssignableTo && elementType.isAssignableTo(_index2.default.EntitySet)) {\n            elementType = _index.Container.resolveType(memberDefinition.elementType);\n\n            isSingleSide = false;\n        } else {\n            var associations;\n            for (var i = 0; i < storageModel.Associations.length; i++) {\n                var assoc = storageModel.Associations[i];\n                if (assoc.FromPropertyName == memberDefinition.name) {\n                    associations = assoc;\n                    break;\n                }\n            }\n            //var associations = storageModel.Associations.filter(function (assoc) { return assoc.FromPropertyName == memberDefinition.name; })[0];\n            if (associations && associations.FromMultiplicity === \"0..1\" && associations.ToMultiplicity === \"1\") isSingleSide = false;\n        }\n\n        var keyProp = storageModel.LogicalType.memberDefinitions.getKeyProperties();\n        if (isSingleSide === true) {\n            //singleSide\n\n            var filterFunc = \"function (e) { return\";\n            var filterParams = {};\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\n            for (var index = 0; index < keyProp.length; index++) {\n                var memDefKey = keyProp[index];\n\n                if (index > 0) filterFunc += ' &&';\n                filterFunc += \" e.\" + memDefKey.name + \" == this.key\" + index;\n                filterParams['key' + index] = entity[memDefKey.name];\n            }\n            //});\n            filterFunc += \"; }\";\n\n            var entitySet = this.getEntitySetFromElementType(entity.getType());\n            return entitySet.map('function (e) { return e.' + memberDefinition.name + ' }').single(filterFunc, filterParams, callback, transaction);\n        } else {\n            //multipleSide\n\n            var filterFunc = \"function (e) { return\";\n            var filterParams = {};\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\n            for (var index = 0; index < keyProp.length; index++) {\n                var memDefKey = keyProp[index];\n\n                if (index > 0) filterFunc += ' &&';\n                filterFunc += \" e.\" + memberDefinition.inverseProperty + \".\" + memDefKey.name + \" == this.key\" + index;\n                filterParams['key' + index] = entity[memDefKey.name];\n            }\n            //});\n            filterFunc += \"; }\";\n\n            var entitySet = this.getEntitySetFromElementType(elementType);\n            return entitySet.filter(filterFunc, filterParams).toArray(callback, transaction);\n        }\n    },\n\n    getTraceString: function getTraceString(queryable) {\n        /// <summary>\n        /// Returns a trace string. Used for debugging purposes!\n        /// </summary>\n        /// <param name=\"queryable\" type=\"$data.Queryable\" />\n        /// <returns>Trace string</returns>\n        var query = new _index2.default.Query(queryable.expression, queryable.defaultType, this);\n        return this.storageProvider.getTraceString(query);\n    },\n    log: function log(logInfo) {\n        //noop as do nothing\n    },\n\n    resolveBinaryOperator: function resolveBinaryOperator(operator, expression, frameType) {\n        return this.storageProvider.resolveBinaryOperator(operator, expression, frameType);\n    },\n    resolveUnaryOperator: function resolveUnaryOperator(operator, expression, frameType) {\n        return this.storageProvider.resolveUnaryOperator(operator, expression, frameType);\n    },\n    resolveFieldOperation: function resolveFieldOperation(operation, expression, frameType) {\n        return this.storageProvider.resolveFieldOperation(operation, expression, frameType);\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveSetOperations(operation, expression, frameType);\n    },\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveTypeOperations(operation, expression, frameType);\n    },\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveContextOperations(operation, expression, frameType);\n    },\n\n    _generateServiceOperationQueryable: function _generateServiceOperationQueryable(functionName, returnEntitySet, arg, parameters) {\n        if (typeof console !== 'undefined' && console.log) console.log('Obsolate: _generateServiceOperationQueryable, $data.EntityContext');\n\n        var params = [];\n        for (var i = 0; i < parameters.length; i++) {\n            var obj = {};\n            obj[parameters[i]] = _index.Container.resolveType(_index.Container.getTypeName(arg[i]));\n            params.push(obj);\n        }\n\n        var tempOperation = _index2.default.EntityContext.generateServiceOperation({ serviceName: functionName, returnType: _index2.default.Queryable, elementType: this[returnEntitySet].elementType, params: params });\n        return tempOperation.apply(this, arg);\n    },\n    attach: function attach(entity, mode) {\n        /// <summary>\n        ///     Attaches an entity to its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the attached entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.attach(entity, mode);\n    },\n    attachOrGet: function attachOrGet(entity, mode) {\n        /// <summary>\n        ///     Attaches an entity to its matching entity set, or returns if it's already attached.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.attachOrGet(entity, mode);\n    },\n\n    addMany: function addMany(entities) {\n        /// <summary>\n        ///     Adds several entities to their matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"Array\" />\n        /// <returns type=\"Array\">Returns the added entities.</returns>\n        var self = this;\n        entities.forEach(function (entity) {\n            self.add(entity);\n        });\n        return entities;\n    },\n\n    add: function add(entity) {\n        /// <summary>\n        ///     Adds a new entity to its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the added entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.add(entity);\n    },\n    remove: function remove(entity) {\n        /// <summary>\n        ///     Removes an entity from its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the removed entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.remove(entity);\n    },\n    storeToken: { type: Object },\n\n    getFieldUrl: function getFieldUrl(entity, member, collection) {\n        try {\n            var entitySet = typeof collection === 'string' ? this[collection] : collection;\n            var fieldName = typeof member === 'string' ? member : member.name;\n            if (entity instanceof _index2.default.Entity) {\n                entitySet = this.getEntitySetFromElementType(entity.getType());\n            } else if (!Object.isNullOrUndefined(entity) && entity.constructor !== _index2.default.Object) {\n                //just a single key\n                var keyDef = entitySet.elementType.memberDefinitions.getKeyProperties()[0];\n                var key = {};\n                key[keyDef.name] = entity;\n                entity = key;\n            }\n\n            //key object\n            if (!(entity instanceof _index2.default.Entity)) {\n                entity = new entitySet.elementType(entity);\n            }\n\n            return this.storageProvider.getFieldUrl(entity, fieldName, entitySet);\n        } catch (e) {}\n        return '#';\n    },\n\n    //xxxx\n    _applyRelatedEntityMethodsToContext: function _applyRelatedEntityMethodsToContext() {\n        if (this.storageProvider.name === \"oData\") {\n            for (var esName in this._entitySetReferences) {\n                var es = this._entitySetReferences[esName];\n                var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + es.name;\n                //EntitiySets\n                if (!(newMemberName in es)) {\n                    es[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\n                }\n                //Context\n                if (!(newMemberName in this)) {\n                    this[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\n                }\n            }\n        }\n    },\n    _applyRelatedEntityMethodsToTypes: function _applyRelatedEntityMethodsToTypes() {\n        if (this.storageProvider.name === \"oData\") {\n            for (var esName in this._entitySetReferences) {\n                //add to Type\n                var elementType = this._entitySetReferences[esName].elementType;\n                var members = elementType.memberDefinitions.getPublicMappedProperties();\n                for (var i = 0; i < members.length; i++) {\n                    var member = members[i];\n                    var memberElementType = null;\n                    if (member.inverseProperty && _index.Container.resolveType(member.dataType) === _index2.default.Array && (memberElementType = _index.Container.resolveType(member.elementType)) && memberElementType.isAssignableTo && memberElementType.isAssignableTo(_index2.default.Entity)) {\n                        var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + member.name;\n                        if (!elementType.getMemberDefinition(newMemberName)) {\n                            elementType.addMember(newMemberName, this._relatedEntityGetMethod(memberElementType, member));\n                        }\n                    }\n                }\n            }\n        }\n    },\n    _createRelatedEntityProxyClass: function _createRelatedEntityProxyClass(type) {\n        var proxyClassName = type.namespace + _index2.default.defaults.relatedEntityProxyPrefix + type.name;\n        if (!_index.Container.isTypeRegistered(proxyClassName)) {\n            var definition = {};\n            var members = type.memberDefinitions.getPublicMappedProperties();\n            for (var i = 0; i < members.length; i++) {\n                var member = members[i];\n                var memberElementType = null;\n                if (member.inverseProperty && _index.Container.resolveType(member.dataType) === _index2.default.Array && (memberElementType = _index.Container.resolveType(member.elementType)) && memberElementType.isAssignableTo && memberElementType.isAssignableTo(_index2.default.Entity)) {\n                    var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + member.name;\n                    definition[newMemberName] = this._relatedEntityGetMethod(memberElementType, member);\n                }\n            }\n            _index2.default.Class.define(proxyClassName, _index2.default.RelatedEntityProxy, null, definition, null);\n        }\n\n        return _index.Container.resolveType(proxyClassName);\n    },\n    _relatedEntityGetMethod: function _relatedEntityGetMethod(targetType, navigation, context) {\n        var that = this;\n        var keys = targetType.memberDefinitions.getKeyProperties();\n\n        return function (keyValue) {\n            var proxyClass = that._createRelatedEntityProxyClass(targetType);\n            if (keys.length === 1 && (typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                var keyV = {};\n                keyV[keys[0].name] = keyValue;\n                keyValue = keyV;\n            }\n\n            if ((typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                throw new _index.Exception('Key parameter is invalid');\n            } else {\n                return new proxyClass(keyValue, navigation, targetType, this, context || (this.context instanceof _index2.default.EntityContext ? this.context : undefined));\n            }\n        };\n    }\n}, {\n    inheritedTypeProcessor: function inheritedTypeProcessor(type) {\n        if (type.resolveForwardDeclarations) {\n            type.resolveForwardDeclarations();\n        }\n    },\n    generateServiceOperation: function generateServiceOperation(cfg) {\n\n        var fn;\n        if (cfg.serviceMethod) {\n            var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : {};\n            if (returnType.isAssignableTo && returnType.isAssignableTo(_index2.default.Queryable)) {\n                fn = cfg.serviceMethod;\n            } else {\n                fn = function fn() {\n                    var lastParam = arguments[arguments.length - 1];\n\n                    var pHandler = new _index2.default.PromiseHandler();\n                    var cbWrapper;\n\n                    var args = arguments;\n                    if (typeof lastParam === 'function') {\n                        cbWrapper = pHandler.createCallback(lastParam);\n                        arguments[arguments.length - 1] = cbWrapper;\n                    } else {\n                        cbWrapper = pHandler.createCallback();\n                        arguments.push(cbWrapper);\n                    }\n\n                    try {\n                        var result = cfg.serviceMethod.apply(this, arguments);\n                        if (result !== undefined) cbWrapper.success(result);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n\n                    return pHandler.getPromise();\n                };\n            }\n        } else {\n            fn = function fn() {\n                var context = this;\n\n                var boundItem;\n                if (this instanceof _index2.default.Entity) {\n                    if (!cfg.method) {\n                        cfg.method = 'POST';\n                    }\n\n                    if (this.context) {\n                        context = this.context;\n                    } else {\n                        _index.Guard.raise('entity not attached into context');\n                        return;\n                    }\n\n                    boundItem = {\n                        data: this,\n                        entitySet: context.getEntitySetFromElementType(this.getType())\n                    };\n                }\n\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(_index.Container.resolveType(cfg.elementType)) : null;\n\n                var paramConstExpression = null;\n                if (cfg.params) {\n                    paramConstExpression = [];\n                    for (var i = 0; i < cfg.params.length; i++) {\n                        //TODO: check params type\n                        for (var name in cfg.params[i]) {\n                            paramConstExpression.push(_index.Container.createConstantExpression(arguments[i], _index.Container.resolveType(cfg.params[i][name]), name));\n                        }\n                    }\n                }\n\n                var ec = _index.Container.createEntityContextExpression(context);\n                var memberdef = (boundItem ? boundItem.data : context).getType().getMemberDefinition(cfg.serviceName);\n                var es = _index.Container.createServiceOperationExpression(ec, _index.Container.createMemberInfoExpression(memberdef), paramConstExpression, cfg, boundItem);\n\n                //Get callback function\n                var clb = arguments[arguments.length - 1];\n                if (typeof clb !== 'function') {\n                    clb = undefined;\n                }\n\n                if (virtualEntitySet) {\n                    var q = _index.Container.createQueryable(virtualEntitySet, es);\n                    if (clb) {\n                        es.isTerminated = true;\n                        return q._runQuery(clb);\n                    }\n                    return q;\n                } else {\n                    var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : null;\n\n                    var q = _index.Container.createQueryable(context, es);\n                    q.defaultType = returnType || _index2.default.Object;\n\n                    if (returnType === _index2.default.Queryable) {\n                        q.defaultType = _index.Container.resolveType(cfg.elementType);\n                        if (clb) {\n                            es.isTerminated = true;\n                            return q._runQuery(clb);\n                        }\n                        return q;\n                    }\n                    es.isTerminated = true;\n                    return q._runQuery(clb);\n                }\n            };\n        };\n\n        var params = [];\n        if (cfg.params) {\n            for (var i = 0; i < cfg.params.length; i++) {\n                var param = cfg.params[i];\n                for (var name in param) {\n                    params.push({\n                        name: name,\n                        type: param[name]\n                    });\n                }\n            }\n        }\n        _index2.default.typeSystem.extend(fn, cfg, { params: params });\n\n        return fn;\n    },\n    _convertLogicalTypeNameToPhysical: function _convertLogicalTypeNameToPhysical(name) {\n        return name + '_$db$';\n    },\n    _storageModelCache: {\n        get: function get() {\n            if (!this.__storageModelCache) this.__storageModelCache = {};\n            return this.__storageModelCache;\n        },\n        set: function set() {\n            //todo exception\n        }\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],44:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n///EntitySet is responsible for\n/// -creating and holding entityType through schema\n/// - provide Add method\n/// - provide Delete method\n/// - provide Update method\n/// - provide queryProvider for queryable\n\n_index2.default.EntitySchemaConfig = function EntitySchemaConfig() {\n    this.Name = \"\";\n};\n_index2.default.entitySetState = { created: 0, defined: 1, active: 2 };\n\n_index2.default.Class.defineEx('$data.EntitySet', [{ type: _index2.default.Queryable, params: [new _index2.default.Class.ConstructorParameter(1)] }], null, {\n    constructor: function constructor(elementType, context, collectionName, eventHandlers, roles) {\n        /// <signature>\n        ///     <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations</summary>\n        ///     <param name=\"elementType\" type=\"Function\" subClassOf=\"$data.Entity\">Type of entity set elements, elementType must be subclass of $data.Entity</param>\n        ///     <param name=\"context\" type=\"$data.EntityContext\">Context of the EntitySet</param>\n        ///     <param name=\"collectionName\" type=\"String\">Name of the EntitySet</param>\n        /// </signature>\n        this.createNew = this[elementType.name] = this.elementType = this.defaultType = elementType;\n        var self = this;\n        context['createAdd' + elementType.name] = function (initData) {\n            var entity = new elementType(initData);\n            return self.add(entity);\n        };\n        this.stateManager = new _index2.default.EntityStateManager(this);\n\n        this.collectionName = collectionName;\n        this.roles = roles;\n\n        for (var i in eventHandlers) {\n            this[i] = eventHandlers[i];\n        }\n    },\n\n    addNew: function addNew(item, cb) {\n        var callback = _index2.default.typeSystem.createCallbackSetting(cb);\n        var _item = new this.createNew(item);\n        this.entityContext.saveChanges(cb);\n        return _item;\n    },\n\n    executeQuery: function executeQuery(expression, on_ready) {\n        //var compiledQuery = this.entityContext\n        var callBack = _index2.default.typeSystem.createCallbackSetting(on_ready);\n        this.entityContext.executeQuery(expression, callBack);\n    },\n    getTraceString: function getTraceString(expression) {\n        return this.entityContext.getTraceString(expression);\n    },\n    setContext: function setContext(entityContext) {\n        this.entitySetState = _index2.default.entitySetState.active;\n        this.entityContext = entityContext;\n        this.entityContext[this.schema.name] = this[this.schema.name];\n    },\n    _trackEntity: function _trackEntity(entity) {\n        var trackedEntities = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEntities.length; i++) {\n            if (trackedEntities[i].data === entity) return;\n        }\n        trackedEntities.push({ entitySet: this, data: entity });\n    },\n    add: function add(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the context.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///\n        ///         Persons.add({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Adds the given entity to the context.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to add</param>\n        ///     <example>\n        ///\n        ///         Persons.add(new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' }));\n        ///\n        ///     </example>\n        ///     <example>\n        ///\n        ///         var person = new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\n        ///         Persons.add(person);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n        data.entityState = _index2.default.EntityState.Added;\n        data.changedProperties = undefined;\n        data.context = this.entityContext;\n        this._trackEntity(data);\n        return data;\n    },\n\n    addMany: function addMany(entities) {\n        var result = [];\n        var self = this;\n        entities.forEach(function (entity) {\n            result.push(self.add(entity));\n        });\n        return result;\n    },\n    remove: function remove(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and marks it as Deleted.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///         Person will be marked as Deleted where an id is 5. Id is a key of entity.\n        ///         Persons.remove({ Id: 5 });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Marks the given entity as Deleted.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to remove</param>\n        ///     <example>\n        ///\n        ///         Persons.remove(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Person will be marked as Deleted where an Id is 5. Id is a key of entity.\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n        data.entityState = _index2.default.EntityState.Deleted;\n        data.changedProperties = undefined;\n        this._trackEntity(data);\n    },\n    attach: function attach(entity, mode) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///\n        ///         Persons.attach({ Id: 5, Email: 'newEmail@example.com' });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Adds to the context and sets state Unchanged.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to attach</param>\n        ///     <example>\n        ///\n        ///         Persons.attach(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Set an entity's related entities without loading\n        ///\n        ///         var categoryPromo = new $news.Types.Category({ Id: 5 });\n        ///         Category.attach(categoryPromo);\n        ///         var article = new $news.Types.Article({ Title: 'New Article title', Body: 'Article body', Category: [ categoryPromo ] });\n        ///         Article.attach(article);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        for (var i = 0; i < this.entityContext.stateManager.trackedEntities.length; i++) {\n            var current = this.entityContext.stateManager.trackedEntities[i];\n            if (current.data === data) break;\n            if (current.data.equals(data)) {\n                _index.Guard.raise(new _index.Exception(\"Context already contains this entity!!!\"));\n            }\n        }\n\n        if (mode === true) {\n            if (data.changedProperties && data.changedProperties.length > 0) {\n                data.entityState = _index2.default.EntityState.Modified;\n            } else {\n                data.entityState = _index2.default.EntityState.Unchanged;\n            }\n        } else {\n            if (typeof mode === \"string\") mode = _index2.default.EntityAttachMode[mode];\n            var attachMode = mode || _index2.default.EntityAttachMode[_index2.default.EntityAttachMode.defaultMode];\n            if (typeof attachMode === \"function\") {\n                attachMode.call(_index2.default.EntityAttachMode, data);\n            } else {\n                data.entityState = _index2.default.EntityState.Unchanged;\n                data.changedProperties = undefined;\n            }\n        }\n        /*if (!keepChanges) {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }*/\n        data.context = this.entityContext;\n        this._trackEntity(data);\n    },\n    detach: function detach(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and detach from the Context with Detached state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///         Person will be Detached where an id is 5. Id is a key of entity.\n        ///         Persons.detach({ Id: 5 });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Detach from the context and sets state Detached.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\n        ///     <example>\n        ///\n        ///         Persons.detach(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Person will be Detached where an Id is 5. Id is a key of entity.\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        var existsItem;\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEnt.length; i++) {\n            if (trackedEnt[i].data.equals(data)) existsItem = trackedEnt[i];\n        }\n\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\n        if (existsItem) {\n            var idx = this.entityContext.stateManager.trackedEntities.indexOf(existsItem);\n            entity.entityState = _index2.default.EntityState.Detached;\n            this.entityContext.stateManager.trackedEntities.splice(idx, 1);\n            return;\n        }\n    },\n    attachOrGet: function attachOrGet(entity, mode) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <returns type=\"$data.Entity\" />\n        ///     <example>\n        ///         Id is a key of entity.\n        ///         var person = Persons.attachOrGet({ Id: 5  });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>If not in context then adds to it and sets state Unchanged.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\n        ///     <returns type=\"$data.Entity\" />\n        ///     <example>\n        ///\n        ///         var attachedPerson = Persons.attachOrGet(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Id is a key of entity.\n        ///         var p = new $news.Types.Person({ Id: 5 });\n        ///         var attachedPerson = Persons.attachOrGet(p);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        var existsItem;\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEnt.length; i++) {\n            if (trackedEnt[i].data.equals(data)) existsItem = trackedEnt[i];\n        }\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\n        if (existsItem) {\n            return existsItem.data;\n        }\n\n        if (typeof mode === \"string\") mode = _index2.default.EntityAttachMode[mode];\n        var attachMode = mode || _index2.default.EntityAttachMode[_index2.default.EntityAttachMode.defaultMode];\n        if (typeof attachMode === \"function\") {\n            attachMode.call(_index2.default.EntityAttachMode, data);\n        } else {\n            data.entityState = _index2.default.EntityState.Unchanged;\n            data.changedProperties = undefined;\n        }\n        //data.entityState = $data.EntityState.Unchanged;\n        //data.changedProperties = undefined;\n        data.context = this.entityContext;\n        this._trackEntity(data);\n        return data;\n    },\n    //find: function (keys) {\n    //    //todo global scope\n    //    if (!this.entityKeys) {\n    //        this.entityKeys = this.createNew.memberDefinition.filter(function (prop) { return prop.key; }, this);\n    //    }\n    //    this.entityContext.stateManager.trackedEntities.forEach(function (item) {\n    //        if (item.entitySet == this) {\n    //            var isOk = true;\n    //            this.entityKeys.forEach(function (item, index) { isOK = isOk && (item.data[item.name] == keys[index]); }, this);\n    //            if (isOk) {\n    //                return item.data;\n    //            }\n    //        }\n    //    }, this);\n    //    //TODO: db call\n    //    return null;\n    //},\n    loadItemProperty: function loadItemProperty(entity, memberDefinition, callback) {\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n\n        return this.entityContext.loadItemProperty(entity, memberDefinition, callback);\n    },\n    saveChanges: function saveChanges() {\n        return this.entityContext.saveChanges.apply(this.entityContext, arguments);\n    },\n    addProperty: function addProperty(name, getter, setter) {\n        return this.elementType.addProperty.apply(this.elementType, arguments);\n    },\n    expression: {\n        get: function get() {\n            if (!this._expression) {\n                var ec = _index.Container.createEntityContextExpression(this.entityContext);\n                //var name = entitySet.collectionName;\n                //var entitySet = this.entityContext[entitySetName];\n                var memberdef = this.entityContext.getType().getMemberDefinition(this.collectionName);\n                var es = _index.Container.createEntitySetExpression(ec, _index.Container.createMemberInfoExpression(memberdef), null, this);\n                this._expression = es;\n            }\n\n            return this._expression;\n        },\n        set: function set(value) {\n            this._expression = value;\n        }\n    },\n    getFieldUrl: function getFieldUrl(keys, field) {\n        return this.entityContext.getFieldUrl(keys, field, this);\n    },\n    bulkInsert: function bulkInsert(fields, datas, callback) {\n        return this.entityContext.bulkInsert(this, fields, datas, callback);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],45:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.EntityState = {\n    Detached: 0,\n    Unchanged: 10,\n    Added: 20,\n    Modified: 30,\n    Deleted: 40\n};\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],46:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.EntityStateManager', null, null, {\n    constructor: function constructor(entityContext) {\n        this.entityContext = null;\n        this.trackedEntities = [];\n        this.init(entityContext);\n    },\n    init: function init(entityContext) {\n        this.entityContext = entityContext;\n    },\n    reset: function reset() {\n        this.trackedEntities = [];\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],47:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Base.extend('$data.EntityWrapper', {\n    getEntity: function getEntity() {\n        _index.Guard.raise(\"pure object\");\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],48:[function(require,module,exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Enum = undefined;\n\nvar _index = require(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.createEnum = function (name, container, enumType, enumDefinition) {\n    return _index2.default.Enum.extend(name, container, enumType, enumDefinition);\n};\n\n_index2.default.Enum = _index2.default.Class.define(\"$data.Enum\", null, null, {\n    constructor: function constructor() {\n        return _index.Guard.raise(new _index.Exception(\"Type Error\", \"Cannot create instance from enum type!\"));\n    }\n}, {\n    extend: function extend(name, container, enumType, enumDefinition) {\n        if (!enumDefinition) {\n            if (!enumType) {\n                enumDefinition = container;\n                container = undefined;\n            } else {\n                enumDefinition = enumType;\n                enumType = container;\n                container = undefined;\n            }\n        }\n\n        enumType = enumType || _index2.default.Integer;\n        enumType = _index.Container.resolveType(enumType);\n        var classDefinition = {\n            __enumType: { get: function get() {\n                    return enumType;\n                }, set: function set() {}, enumerable: false, writable: false }\n        };\n\n        var getEnumDef = function getEnumDef(value, index) {\n            return { get: function get() {\n                    return value;\n                }, set: function set() {}, enumMember: true, index: index };\n        };\n\n        var defaultValue = 0;\n        var isValueCalculation = [_index2.default.Byte, _index2.default.SByte, _index2.default.Int16, _index2.default.Integer, _index2.default.Int64].indexOf(enumType) >= 0;\n        var hasIndex = false;\n\n        var enumDef = [];\n        if (Array.isArray(enumDefinition)) {\n            for (var i = 0; i < enumDefinition.length; i++) {\n                var enumValA = enumDefinition[i];\n                if ((typeof enumValA === \"undefined\" ? \"undefined\" : _typeof(enumValA)) === \"object\" && typeof enumValA.name === \"string\") {\n                    enumDef.push({ name: enumValA.name, value: enumValA.value, index: enumValA.index });\n                    if (typeof enumValA.index !== \"undefined\") {\n                        hasIndex = true;\n                    }\n                } else if (typeof enumValA === \"string\") {\n                    enumDef.push({ name: enumValA, value: undefined, index: undefined });\n                } else {\n                    return _index.Guard.raise(new _index.Exception(\"Type Error\", \"Invalid enum member\"));\n                }\n            }\n        } else if ((typeof enumDefinition === \"undefined\" ? \"undefined\" : _typeof(enumDefinition)) === \"object\") {\n            for (var enumName in enumDefinition) {\n                var enumValO = enumDefinition[enumName];\n                if ((typeof enumValO === \"undefined\" ? \"undefined\" : _typeof(enumValO)) === \"object\") {\n                    enumDef.push({ name: enumName, value: enumValO.value, index: enumValO.index });\n                    if (typeof enumValO.index !== \"undefined\") {\n                        hasIndex = true;\n                    }\n                } else {\n                    enumDef.push({ name: enumName, value: enumValO, index: undefined });\n                }\n            }\n        }\n\n        if (hasIndex) {\n            enumDef.sort(function (a, b) {\n                if (a.index < b.index) return -1;\n                if (a.index > b.index) return 1;\n                return 0;\n            });\n        }\n\n        var enumOptions = [];\n        for (var i = 0; i < enumDef.length; i++) {\n            var enumVal = enumDef[i];\n            if (isValueCalculation && typeof enumVal.value !== \"number\" && !enumVal.value) {\n                enumVal.value = defaultValue;\n            }\n            if (typeof enumVal.value === \"number\") {\n                defaultValue = enumVal.value;\n            }\n            defaultValue++;\n            enumOptions.push(enumVal.name);\n            classDefinition[enumVal.name] = getEnumDef(enumVal.value, enumVal.index);\n        }\n\n        var enumClass = _index2.default.Base.extend.call(this, name, container, {}, classDefinition);\n\n        _index2.default.Container.registerConverter(name, {\n            'default': function _default(value) {\n                if (typeof value == \"string\" && enumOptions.indexOf(value) >= 0) {\n                    var enumMember = enumClass.staticDefinitions.getMember(value);\n                    if (enumMember) {\n                        return enumMember.get();\n                    }\n                }\n\n                for (var i = 0; i < enumDef.length; i++) {\n                    var enumVal = enumDef[i];\n                    if (enumVal.value === value) return value;\n                }\n\n                throw 0;\n            }\n        });\n\n        return enumClass;\n    }\n});\n\nvar Enum = exports.Enum = _index2.default.Enum;\nexports.default = _index2.default;\n\n},{\"../TypeSystem/index.js\":28}],49:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ArrayLiteralExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(items) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        ///<field name=\"items\" type=\"Array\" elementType=\"$data.Expression.ExpressionNode\" />\n        this.items = items || [];\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ArrayLiteral, writable: true },\n\n    items: { value: undefined, dataType: Array, elementType: _index2.default.Expressions.ExpressionNode },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        ///<var nam\n        var result = \"[\" + this.items.map(function (item) {\n            return item.toString();\n        }).join(\",\") + \"]\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],50:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CallExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, member, args) {\n        ///<summary>Represents a call to an object or global method</summary>\n        ///<field name=\"object\" type=\"$data.Expressions.ExpressionNode\">The expression for object that has the method</field>\n        ///<field name=\"member\" type=\"$data.MemberDefinition\">The member descriptor</field>\n        this.expression = expression;\n        this.member = member;\n        this.args = args;\n    },\n\n    nodeType: {\n        value: _index2.default.Expressions.ExpressionType.Call\n    },\n\n    expression: {\n        value: undefined,\n        dataType: _index2.default.Expressions.ExpressionNode,\n        writable: true\n    },\n\n    member: {\n        value: undefined,\n        dataType: _index2.default.MemberDefinition,\n        writable: true\n    },\n\n    type: {\n        value: undefined,\n        writable: true\n    },\n\n    implementation: {\n        get: function get() {\n            return function (thisObj, method, args) {\n                if (typeof method !== 'function') {\n                    method = thisObj[method];\n                }\n                _index.Guard.requireType(\"method\", method, Function);\n                return method.apply(thisObj, args);\n            };\n        },\n        set: function set(value) {\n            _index.Guard.raise(\"Property can not be set\");\n        }\n    },\n\n    toString: function toString(debug) {\n        return this.object.toString() + \".\" + this.member.toString() + \"(\" + \")\";\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],51:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeParser', null, null, {\n\n    constructor: function constructor(scopeContext) {\n        ///<signature>\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\n        ///</signature>\n        ///<signature>\n        ///</signature>\n        this.scopeContext = scopeContext;\n        this.lambdaParams = [];\n    },\n\n    log: function log(logInfo) {\n        if (this.scopeContext) this.scopeContext.log(logInfo);\n    },\n\n    parseExpression: function parseExpression(code, resolver) {\n        ///<signature>\n        ///<summary>Parses the provided code and returns a parser result with parser information</summary>\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n        if ((typeof code === 'undefined' ? 'undefined' : _typeof(code)) === 'object') {\n            code = '';\n        }\n        var result = {\n            success: true,\n            errorMessage: '',\n            errorDetails: ''\n        };\n        ///<var name=\"AST\" type=\"Date\" />\n\n        //console.log(code.toString());\n        if (_index2.default.Acorn) {\n            //console.log('using acorn.js');\n            return { success: true, expression: this.ParserBuild(_index2.default.Acorn.parse('(' + code.toString() + ')').body[0]), errors: [] };\n        } else if (_index2.default.Esprima) {\n            //console.log('using esprima.js');\n            return { success: true, expression: this.ParserBuild(_index2.default.Esprima.parse('(' + code.toString() + ')').body[0]), errors: [] };\n        } else {\n            //console.log('using JayLint');\n            var AST = _index2.default.ASTParser.parseCode(code);\n            this.log({ event: \"AST\", data: AST });\n            if (!AST.success) {\n                return {\n                    success: false,\n                    error: \"ASTParser error\",\n                    errorMessage: AST.errors ? JSON.stringify(AST.errors) : \"could not get code\"\n                };\n            }\n            var b = this.Build2(AST.tree.first[0]);\n            result = { success: true, expression: b, errors: AST.errors };\n            return result;\n        }\n    },\n\n    createExpression: function createExpression(code, resolver) {\n        ///<signature>\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"a + b /c\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\n        ///<param name=\"code\" type=\"Function\">The JavaScript function to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n\n        var result = this.parseExpression(code, resolver);\n        if (!result.success) {\n            _index.Guard.raise(\"ExpressionParserError: \" + result.errorMessage);\n        }\n        return result.expression;\n    },\n\n    ParserBuild: function ParserBuild(node) {\n        //console.log(node);\n        return this['Parser' + node.type](node);\n    },\n\n    ParserExpressionStatement: function ParserExpressionStatement(node) {\n        return this.ParserBuild(node.expression);\n    },\n\n    ParserBlockStatement: function ParserBlockStatement(node) {\n        return this.ParserBuild(node.body[0]);\n    },\n\n    ParserReturnStatement: function ParserReturnStatement(node) {\n        return this.ParserBuild(node.argument);\n    },\n\n    ParserMemberExpression: function ParserMemberExpression(node) {\n        return new _index2.default.Expressions.PropertyExpression(this.ParserBuild(node.object), new _index2.default.Expressions.ConstantExpression(node.property.name || node.property.value, _typeof(node.property.name || node.property.value)));\n    },\n\n    ParserIdentifier: function ParserIdentifier(node) {\n        return this.ParserParameter(node, this.lambdaParams.indexOf(node.name) > -1 ? _index2.default.Expressions.ExpressionType.LambdaParameterReference : _index2.default.Expressions.ExpressionType.Parameter);\n    },\n\n    ParserObjectExpression: function ParserObjectExpression(node) {\n        var props = new Array(node.properties.length);\n        for (var i = 0; i < node.properties.length; i++) {\n            props[i] = this.ParserProperty(node.properties[i]);\n        }\n\n        return new _index2.default.Expressions.ObjectLiteralExpression(props);\n    },\n\n    ParserArrayExpression: function ParserArrayExpression(node) {\n        var items = new Array(node.elements.length);\n        for (var i = 0; i < node.elements.length; i++) {\n            items[i] = this.ParserBuild(node.elements[i]);\n        }\n\n        return new _index2.default.Expressions.ArrayLiteralExpression(items);\n    },\n\n    ParserProperty: function ParserProperty(node) {\n        return new _index2.default.Expressions.ObjectFieldExpression(node.key.name, this.ParserBuild(node.value));\n    },\n\n    ParserFunctionExpression: function ParserFunctionExpression(node) {\n        var params = new Array(node.params.length);\n        for (var i = 0; i < node.params.length; i++) {\n            this.lambdaParams.push(node.params[i].name);\n            params[i] = this.ParserParameter(node.params[i], _index2.default.Expressions.ExpressionType.LambdaParameter);\n            params[i].owningFunction = result;\n        }\n        var result = new _index2.default.Expressions.FunctionExpression(node.id ? node.id.name : node.id, params, this.ParserBuild(node.body));\n\n        return result;\n    },\n\n    ParserParameter: function ParserParameter(node, nodeType) {\n        var result = new _index2.default.Expressions.ParameterExpression(node.name, null, nodeType);\n        if (nodeType == _index2.default.Expressions.ExpressionType.LambdaParameterReference) {\n            result.paramIndex = this.lambdaParams.indexOf(node.name);\n        }\n\n        return result;\n    },\n\n    ParserLogicalExpression: function ParserLogicalExpression(node) {\n        return this.ParserBinaryExpression(node);\n    },\n\n    ParserOperators: {\n        value: {\n            \"==\": { expressionType: _index2.default.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a == b;\n                } },\n            \"===\": { expressionType: _index2.default.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a === b;\n                } },\n            \"!=\": { expressionType: _index2.default.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a != b;\n                } },\n            \"!==\": { expressionType: _index2.default.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a !== b;\n                } },\n            \">\": { expressionType: _index2.default.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a > b;\n                } },\n            \">=\": { expressionType: _index2.default.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a >= b;\n                } },\n            \"<=\": { expressionType: _index2.default.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a <= b;\n                } },\n            \"<\": { expressionType: _index2.default.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a < b;\n                } },\n            \"&&\": { expressionType: _index2.default.Expressions.ExpressionType.And, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a && b;\n                } },\n            \"||\": { expressionType: _index2.default.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a || b;\n                } },\n            \"&\": { expressionType: _index2.default.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function implementation(a, b) {\n                    return a & b;\n                } },\n            \"|\": { expressionType: _index2.default.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function implementation(a, b) {\n                    return a | b;\n                } },\n            \"+\": { expressionType: _index2.default.Expressions.ExpressionType.Add, type: \"number\", implementation: function implementation(a, b) {\n                    return a + b;\n                } },\n            \"-\": { expressionType: _index2.default.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function implementation(a, b) {\n                    return a - b;\n                } },\n            \"/\": { expressionType: _index2.default.Expressions.ExpressionType.Divide, type: \"number\", implementation: function implementation(a, b) {\n                    return a / b;\n                } },\n            \"%\": { expressionType: _index2.default.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function implementation(a, b) {\n                    return a % b;\n                } },\n            \"*\": { expressionType: _index2.default.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function implementation(a, b) {\n                    return a * b;\n                } },\n            \"[\": { expressionType: _index2.default.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function implementation(a, b) {\n                    return a[b];\n                } },\n            \"in\": { expressionType: _index2.default.Expressions.ExpressionType.In, type: 'boolean', implementation: function implementation(a, b) {\n                    return a in b;\n                } }\n        }\n    },\n\n    ParserUnaryOperators: {\n        value: {\n            \"+\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Positive, type: \"number\", implementation: function implementation(operand) {\n                    return +operand;\n                } },\n            \"-\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Negative, type: \"number\", implementation: function implementation(operand) {\n                    return -operand;\n                } },\n            \"++true\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n                    return ++operand;\n                } },\n            \"--true\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n                    return --operand;\n                } },\n            \"++false\": { arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n                    return operand++;\n                } },\n            \"!\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function implementation(operand) {\n                    return !operand;\n                } },\n            \"--false\": { arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n                    return operand--;\n                } }\n        }\n    },\n\n    ParserUnaryExpression: function ParserUnaryExpression(node) {\n        return new _index2.default.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator], this.ParserUnaryOperators[node.operator].expressionType);\n    },\n\n    ParserUpdateExpression: function ParserUpdateExpression(node) {\n        return new _index2.default.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator + node.prefix], this.ParserUnaryOperators[node.operator + node.prefix].nodeType);\n    },\n\n    ParserBinaryExpression: function ParserBinaryExpression(node) {\n        return new _index2.default.Expressions.SimpleBinaryExpression(this.ParserBuild(node.left), this.ParserBuild(node.right), this.ParserOperators[node.operator].expressionType, node.operator, this.ParserOperators[node.operator].type);\n    },\n\n    ParserThisExpression: function ParserThisExpression(node) {\n        return new _index2.default.Expressions.ThisExpression();\n    },\n\n    ParserLiteral: function ParserLiteral(node) {\n        return new _index2.default.Expressions.ConstantExpression(node.value, _typeof(node.value));\n    },\n\n    ParserCallExpression: function ParserCallExpression(node) {\n        var method = this.ParserBuild(node.callee);\n        var args = new Array(node.arguments.length);\n        for (var i = 0; i < node.arguments.length; i++) {\n            args[i] = this.ParserBuild(node.arguments[i]);\n        }\n\n        var member;\n        var expression;\n        switch (true) {\n            case method instanceof _index2.default.Expressions.PropertyExpression:\n                expression = method.expression;\n                member = method.member;\n                break;\n            case method instanceof _index2.default.Expressions.ParameterExpression:\n                expression = new _index2.default.Expressions.ConstantExpression(null, _typeof(null));\n                member = method;\n                break;\n        }\n\n        return new _index2.default.Expressions.CallExpression(expression, member, args);\n    } /*,\r\n       Build2: function (node) {\r\n         ///<param name=\"node\" type=\"Lint\" />\r\n         ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n         var n;\r\n         switch (node.arity) {\r\n             case \"number\":\r\n             case \"string\":\r\n                 n = this.BuildConstant(node);\r\n                 break;\r\n             case \"prefix\":\r\n                 switch (node.value) {\r\n                     case \"{\":\r\n                         n = this.BuildObjectLiteral(node);\r\n                         break;\r\n                     case \"[\":\r\n                         n = this.BuildArrayLiteral(node);\r\n                         break;\r\n                     case $data.unaryOperators.resolve(node.value):\r\n                         n = this.BuildUnary(node);\r\n                         break;\r\n                     //TODO: default case\r\n                 }\r\n                 break;\r\n             case \"suffix\":\r\n                 switch (node.value) {\r\n                     case $data.unaryOperators.resolve(node.value):\r\n                         n = this.BuildUnary(node);\r\n                         break;\r\n                     default:\r\n                         Guard.raise(\"Unknown suffix: \" + node.value);\r\n                 }\r\n                 break;\r\n             case \"infix\":\r\n                 switch (node.value) {\r\n                     case \"[\":\r\n                         n = this.BuildArray(node);\r\n                         break;\r\n                     case $data.binaryOperators.resolve(node.value):\r\n                         n = this.BuildSimpleBinary(node);\r\n                         break;\r\n                     case \"function\":\r\n                         Guard.raise(\"Unexpected function arity\");\r\n                     case \"(\":\r\n                         n = this.BuildCall(node);\r\n                         break;\r\n                     case \".\":\r\n                         n = this.BuildProperty(node);\r\n                         break;\r\n                     default:\r\n                         debugger;\r\n                         //TODO: remove debugger, throw exception or break\r\n                 }\r\n                 break;\r\n             case \"statement\":\r\n                 switch (node.value) {\r\n                     case \"function\":\r\n                         n = this.BuildFunction(node);\r\n                         //TODO: consider adding break\r\n                 }\r\n                 break;\r\n             default:\r\n                 switch (node.value) {\r\n                     case \"function\":\r\n                         n = this.BuildFunction(node);\r\n                         break;\r\n                     case \"true\":\r\n                     case \"false\":\r\n                     case \"null\":\r\n                         n = this.BuildConstant(node);\r\n                         break;\r\n                     case \"this\":\r\n                         n = this.BuildThis(node);\r\n                         break;\r\n                     default:\r\n                         n = this.BuildParameter(node);\r\n                         break;\r\n                 }\r\n         }\r\n         return n;\r\n      },\r\n       BuildThis: function (node) {\r\n         var result = Container.createThisExpression();\r\n         return result;\r\n      },\r\n       BuildConstant: function (node) {\r\n         ///<param name=\"node\" type=\"ConstantASTNode\" />\r\n         var value = node.value;\r\n         var type = node.type;\r\n         if (node.reserved === true) {\r\n             switch (node.value) {\r\n                 case \"true\": value = true; type = typeof true; break;\r\n                 case \"false\": value = false; type = typeof false; break;\r\n                 case \"null\": value = null; type = typeof null; break;\r\n                 //TODO: missing default case\r\n             }\r\n         }\r\n         var result = new $data.Expressions.ConstantExpression(value, type);\r\n         return result;\r\n      },\r\n       BuildFunctionParameter: function (node) {\r\n       },\r\n       BuildArray: function (node) {\r\n         switch (node.second.type) {\r\n             case \"string\":\r\n                 return this.BuildProperty(node);\r\n             case \"number\":\r\n             default:\r\n                 return this.BuildSimpleBinary(node);\r\n         }\r\n      },\r\n       BuildParameter: function (node) {\r\n         ///<param name=\"node\" type=\"ParameterASTNode\" />\r\n         ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n         var paramName = node.value;\r\n         //TODO\r\n         //var paramType = this.resolver.resolveParameterType(node);\r\n         var nodeType = node.funct ? $data.Expressions.ExpressionType.LambdaParameter :\r\n                                     this.lambdaParams.indexOf(node.value) > -1 ?\r\n                                                 $data.Expressions.ExpressionType.LambdaParameterReference : $data.Expressions.ExpressionType.Parameter;\r\n         var result = new $data.Expressions.ParameterExpression(node.value, null, nodeType);\r\n           if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference) {\r\n             result.paramIndex = this.lambdaParams.indexOf(node.value);\r\n         }\r\n           return result;\r\n      },\r\n       BuildArrayLiteral: function(node) {\r\n         var self = this;\r\n         var items = node.first.map(function (item) { return self.Build2(item); });\r\n         var result = new $data.Expressions.ArrayLiteralExpression(items);\r\n         return result;\r\n      },\r\n       BuildObjectLiteral: function (node) {\r\n         var self = this;\r\n         var fields = node.first.map(function (item) {\r\n             var eItem = self.Build2(item.first);\r\n             var result = new $data.Expressions.ObjectFieldExpression(item.value, eItem);\r\n             return result;\r\n         });\r\n         var result = new $data.Expressions.ObjectLiteralExpression(fields);\r\n         return result;\r\n      },\r\n       BuildFunction: function (node) {\r\n         ///<param name=\"node\" type=\"FunctionASTNode\"/>\r\n         ///<returns type=\"$data.Expressions.FunctionExpression\" />\r\n         var self = this;\r\n         var paramStack = [];\r\n         var params = node.first && node.first.map(function (paramNode) {\r\n             //paramStack.push(paramNode.value);\r\n             this.lambdaParams.push(paramNode.value);\r\n             return self.BuildParameter(paramNode);\r\n         }, this);\r\n         params = params || [];\r\n           //skipping return for convenience\r\n         //Possible we should raise an error as predicates and selectors can\r\n         //not be code blocks just expressions\r\n           var hasReturn = node.block.length == 0 ? false :\r\n             node.block[0].value === \"return\" ? true : false;\r\n         var body = (node.block.length > 0) ? this.Build2(hasReturn ? node.block[0].first : node.block[0]) : null;\r\n           paramStack.forEach(function () { this.lambdaParams.pop(); }, this);\r\n           var result = new $data.Expressions.FunctionExpression(node.value, params, body);\r\n         params.forEach(function (param) {\r\n             param.owningFunction = result;\r\n         });\r\n           //TODO place on prototyope\r\n         result.name = node.name;\r\n         return result;\r\n      },\r\n       BuildCall: function (node) {\r\n         var self = this;\r\n         var method = self.Build2(node.first);\r\n         var args = node.second.map(function (exp) { return self.Build2(exp); });\r\n         var member;\r\n         var expression;\r\n         switch(true){\r\n             case method instanceof $data.Expressions.PropertyExpression:\r\n                 expression = method.expression;\r\n                 member = method.member;\r\n                 break;\r\n             case method instanceof $data.Expressions.ParameterExpression:\r\n                 expression = Container.createConstantExpression(null, typeof null);\r\n                 member = method;\r\n                 break;\r\n             //TODO: missing default case\r\n         }\r\n           var result = Container.createCallExpression(expression, member, args);\r\n         return result;\r\n      },\r\n       BuildProperty: function (node) {\r\n         ///<summary>Builds a PropertyExpression from the AST node</summary>\r\n         ///<param name=\"node\" type=\"MemberAccessASTNode\" />\r\n         ///<returns type=\"$data.Expressions.PropertyExpression\" />\r\n         var expression = this.Build2(node.first);\r\n         //TODO\r\n         //var type = expression.type;\r\n         //var member = type.getMemberDefinition()\r\n         //TODO how to not if?????\r\n         var member;\r\n         if (node.second.identifier) {\r\n             member = new $data.Expressions.ConstantExpression(node.second.value, \"string\");\r\n         } else {\r\n             member = this.Build2(node.second);\r\n         }\r\n         var result = new $data.Expressions.PropertyExpression(expression, member);\r\n         return result;\r\n      },\r\n         BuildUnary: function(node) {\r\n         var operator = $data.unaryOperators.getOperator(node.value, node.arity);\r\n         var nodeType = operator.expressionType;\r\n         var operand = this.Build2(node.first);\r\n         var result = new $data.Expressions.UnaryExpression(operand, operator, nodeType);\r\n         return result;\r\n      },\r\n       BuildSimpleBinary: function (node) {\r\n         ///<param name=\"node\" type=\"LintInflixNode\" />\r\n           var operator = $data.binaryOperators.getOperator(node.value);\r\n         var nodeType = operator.expressionType;\r\n           var left = this.Build2(node.first || node.left);\r\n         var right = this.Build2(node.second || node.right);\r\n         var result = new $data.Expressions.SimpleBinaryExpression(left, right, nodeType, node.value, operator.type);\r\n         return result;\r\n      }\r\n       //Build: function (node, expNode) {\r\n      //    var n;\r\n      //    switch (node.arity) {\r\n      //        case \"ternary\":\r\n      //            if (node.value == \"?\")\r\n      //                n = this.BuildDecision(node, expNode);\r\n      //            else\r\n      //                Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n      //            break;\r\n      //        case null:\r\n      //        default:\r\n      //            Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n      //    }\r\n      //    return n;\r\n      //},*/\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],52:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ConstantExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(value, type, name) {\n        this.value = value;\n        //TODO\n        //this.type = Container.getTypeName(value);\n\n        this.type = type;\n        this.name = name;\n        if (!Object.isNullOrUndefined(this.value)) {\n            this.type = _index.Container.resolveType(this.type);\n            if (_index.Container.resolveType(_index.Container.getTypeName(this.value)) !== this.type) this.value = _index.Container.convertTo(value, this.type);\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Constant, enumerable: true },\n    type: { value: Object, writable: true },\n    value: { value: undefined, writable: true },\n    toString: function toString(debug) {\n        //return \"[constant: \" + this.value.toString() + \"]\";\n        return this.value.toString();\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],53:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ContinuationExpressionBuilder', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(mode) {\n        this.mode = mode;\n    },\n    compile: function compile(query) {\n\n        var findContext = { mode: \"find\", skipExists: false };\n        this.Visit(query.expression, findContext);\n\n        var result = {\n            skip: findContext.skipSize,\n            take: findContext.pageSize,\n            message: ''\n        };\n\n        if ('pageSize' in findContext) {\n            var expression;\n            var context = { mode: this.mode, pageSize: findContext.pageSize };\n\n            if (!findContext.skipExists && findContext.pageSize) {\n                context.append = true;\n                expression = this.Visit(query.expression, context);\n            } else if (findContext.skipExists) {\n                expression = this.Visit(query.expression, context);\n            }\n\n            if (!context.abort) {\n                result.expression = expression;\n            } else {\n                result.skip = (result.skip || 0) - result.take;\n                result.message = 'Invalid skip value!';\n            }\n        } else {\n            result.message = 'take expression not defined in the chain!';\n        }\n\n        return result;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n\n        switch (context.mode) {\n            case 'find':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Take) {\n                    context.pageSize = expression.amount.value;\n                } else {\n                    context.skipSize = expression.amount.value;\n                    context.skipExists = true;\n                }\n                break;\n            case 'prev':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Skip) {\n                    var amount = expression.amount.value - context.pageSize;\n                    context.abort = amount < 0 && expression.amount.value >= context.pageSize;\n\n                    var constExp = _index.Container.createConstantExpression(Math.max(amount, 0), \"number\");\n                    return _index.Container.createPagingExpression(expression.source, constExp, expression.nodeType);\n                } else if (context.append) {\n                    //no skip expression, skip: 0, no prev\n                    context.abort = true;\n                }\n                break;\n            case 'next':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Skip) {\n                    var amount = context.pageSize + expression.amount.value;\n                    var constExp = _index.Container.createConstantExpression(amount, \"number\");\n                    return _index.Container.createPagingExpression(expression.source, constExp, expression.nodeType);\n                } else if (context.append) {\n                    //no skip expression, skip: 0\n                    var constExp = _index.Container.createConstantExpression(context.pageSize, \"number\");\n                    return _index.Container.createPagingExpression(expression, constExp, _index2.default.Expressions.ExpressionType.Skip);\n                }\n                break;\n            default:\n        }\n\n        this.Visit(expression.source, context);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],54:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.AssociationInfoExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(associationInfo) {\n        this.associationInfo = associationInfo;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.AssociationInfo, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],55:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, parameters) {\n        if (_index.Container.resolveType(_index.Container.getTypeName(source)) == _index2.default.String && source.replace(/^[\\s\\xA0]+/, \"\").match(\"^function\") != \"function\") {\n            source = \"function (it) { return \" + source + \"; }\";\n        }\n\n        this.source = source;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Code, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],56:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeToEntityConverter', _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(scopeContext) {\n        ///<summary>This visitor converts a JS language tree into a semantical Entity Expression Tree &#10;This visitor should be invoked on a CodeExpression</summary>\n        ///<param name=\"context\">context.thisArg contains parameters, context.lambdaParams should have an array value</param>\n        this.scopeContext = scopeContext;\n        this.parameters = [];\n    },\n\n    VisitBinary: function VisitBinary(expression, context) {\n        var left = this.Visit(expression.left, context);\n        var right = this.Visit(expression.right, context);\n\n        if (!(left instanceof _index2.default.Expressions.ConstantExpression) && right instanceof _index2.default.Expressions.ConstantExpression || !(right instanceof _index2.default.Expressions.ConstantExpression) && left instanceof _index2.default.Expressions.ConstantExpression) {\n\n            var refExpression, constExpr;\n            if (right instanceof _index2.default.Expressions.ConstantExpression) {\n                refExpression = left;\n                constExpr = right;\n            } else {\n                refExpression = right;\n                constExpr = left;\n            }\n\n            var memInfo;\n            if ((memInfo = refExpression.selector) instanceof _index2.default.Expressions.MemberInfoExpression || (memInfo = refExpression.operation) instanceof _index2.default.Expressions.MemberInfoExpression) {\n\n                if (memInfo.memberDefinition && (memInfo.memberDefinition.type || memInfo.memberDefinition.dataType)) {\n                    var fieldType = _index.Container.resolveType(memInfo.memberDefinition.type || memInfo.memberDefinition.dataType);\n                    var constExprType = _index.Container.resolveType(constExpr.type);\n\n                    if (fieldType !== constExprType) {\n\n                        var value = constExpr.value;\n                        if (expression.operator === _index2.default.Expressions.ExpressionType.In) {\n                            if (Array.isArray(value)) {\n                                var resultExp = [];\n                                for (var i = 0; i < value.length; i++) {\n                                    resultExp.push(new _index2.default.Expressions.ConstantExpression(value[i], fieldType));\n                                }\n                                value = resultExp;\n                                fieldType = _index2.default.Array;\n                            } else {\n                                fieldType = constExprType;\n                            }\n                        }\n\n                        if (right === constExpr) {\n                            right = new _index2.default.Expressions.ConstantExpression(value, fieldType, right.name);\n                        } else {\n                            left = new _index2.default.Expressions.ConstantExpression(value, fieldType, left.name);\n                        }\n                    }\n                }\n            }\n        }\n\n        var operatorResolution = this.scopeContext.resolveBinaryOperator(expression.nodeType, expression, context.frameType);\n        var result = _index.Container.createSimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, operatorResolution);\n        return result;\n    },\n\n    VisitUnary: function VisitUnary(expression, context) {\n        var operand = this.Visit(expression.operand, context);\n        var operatorResolution = this.scopeContext.resolveUnaryOperator(expression.nodeType, expression, context.frameType);\n        var result = _index.Container.createUnaryExpression(operand, expression.operator, expression.nodeType, operatorResolution);\n        return result;\n    },\n\n    VisitParameter: function VisitParameter(expression, context) {\n        _index.Guard.requireValue(\"context\", context);\n        var et = _index2.default.Expressions.ExpressionType;\n        switch (expression.nodeType) {\n            case et.LambdaParameterReference:\n                var result = _index.Container.createEntityExpression(context.lambdaParameters[expression.paramIndex], { lambda: expression.name });\n                return result;\n            case et.LambdaParameter:\n                //TODO: throw descriptive exception or return a value\n                break;\n            default:\n                _index.Guard.raise(\"Global parameter \" + expression.name + \" not found. For query parameters use 'this.field' notation\");\n                break;\n        }\n    },\n\n    VisitThis: function VisitThis(expression, context) {\n        ///<summary>converts the ThisExpression into a QueryParameterExpression tha't value will be evaluated and stored in this.parameters collection</summary>\n        var index = this.parameters.push({ name: \"\", value: undefined }) - 1;\n        var result = _index.Container.createQueryParameterExpression(\"\", index, context.queryParameters, undefined);\n        return result;\n    },\n\n    VisitFunction: function VisitFunction(expression, context) {\n        var result = _index2.default.Expressions.ExpressionVisitor.prototype.VisitFunction.apply(this, arguments);\n        return result.body;\n    },\n\n    VisitCall: function VisitCall(expression, context) {\n        //var exp = this.Visit(expression.expression);\n        var self = this;\n        var exp = this.Visit(expression.expression, context);\n        var member = this.Visit(expression.member, context);\n        var args = expression.args.map(function (arg) {\n            return self.Visit(arg, context);\n        });\n        var result;\n\n        ///filter=>function(p) { return p.Title == this.xyz.BogusFunction('asd','basd');}\n        switch (true) {\n            case exp instanceof _index2.default.Expressions.QueryParameterExpression:\n                var argValues = args.map(function (a) {\n                    return a.value;\n                });\n                result = expression.implementation(exp.value, member.value, argValues);\n                //var args = expressions\n                return _index.Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n            case exp instanceof _index2.default.Expressions.EntityFieldExpression:\n\n            case exp instanceof _index2.default.Expressions.EntityFieldOperationExpression:\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFieldOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\n                return result;\n\n            case exp instanceof _index2.default.Expressions.EntitySetExpression:\n                var operation = this.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createFrameOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\n                return result;\n\n            case exp instanceof _index2.default.Expressions.EntityExpression:\n                var operation = this.scopeContext.resolveTypeOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\n                }\n\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\n                return result;\n                break;\n            case exp instanceof _index2.default.Expressions.EntityContextExpression:\n                var operation = this.scopeContext.resolveContextOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\n                }\n\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createContextFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\n                return result;\n                break;\n            default:\n                _index.Guard.raise(\"VisitCall: Only fields can have operations: \" + expression.getType().name);\n            //TODO we must not alter the visited tree\n        }\n    },\n    _resolveFunctionArguments: function _resolveFunctionArguments(args, params) {\n        if (params) // remove current field poz\n            params = params.filter(function (p, i) {\n                return p.name !== '@expression';\n            });\n\n        //objectArgs\n        if (args.length === 1 && args[0] instanceof _index2.default.Expressions.ConstantExpression && _typeof(args[0].value) === 'object' && args[0].value && params && params[0] && args[0].value.constructor === _index2.default.Object && params.some(function (param) {\n            return param.name in args[0].value;\n        })) {\n\n            return params.map(function (p) {\n                var type = p.type || p.dataType || args[0].type;\n                return new _index2.default.Expressions.ConstantExpression(args[0].value[p.name], _index.Container.resolveType(type), p.name);\n            });\n        } else {\n            return args.map(function (expr, i) {\n                if (expr instanceof _index2.default.Expressions.ConstantExpression && params && params[i]) {\n                    var type = params[i].type || params[i].dataType || expr.type;\n                    return new _index2.default.Expressions.ConstantExpression(expr.value, _index.Container.resolveType(type), params[i].name);\n                } else {\n                    return expr;\n                }\n            });\n        }\n    },\n\n    VisitProperty: function VisitProperty(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.PropertyExpression\" />\n        var exp = this.Visit(expression.expression, context);\n        var member = this.Visit(expression.member, context);\n\n        //Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\n        _index.Guard.requireType(\"member\", member, _index2.default.Expressions.ConstantExpression);\n\n        function isPrimitiveType(memberDefinitionArg) {\n\n            var t = memberDefinitionArg.dataType;\n            if (typeof t === 'function') {\n                return false;\n            }\n\n            // suspicious code\n            /*switch (t) {\r\n                //TODO: implement this\r\n            }*/\n        }\n\n        switch (exp.expressionType) {\n            case _index2.default.Expressions.EntityExpression:\n                var memberDefinition = exp.getMemberDefinition(member.value);\n                if (!memberDefinition) {\n                    _index.Guard.raise(new _index.Exception(\"Unknown member: \" + member.value, \"MemberNotFound\"));\n                }\n                //var storageMemberDefinition =\n                var storageField = memberDefinition.storageModel.PhysicalType.memberDefinitions.getMember(memberDefinition.name);\n                var res;\n                var memberDefinitionExp;\n                switch (storageField.kind) {\n                    case \"property\":\n                        memberDefinitionExp = _index.Container.createMemberInfoExpression(memberDefinition);\n                        res = _index.Container.createEntityFieldExpression(exp, memberDefinitionExp);\n                        return res;\n                    case \"navProperty\":\n                        var assocInfo = memberDefinition.storageModel.Associations[memberDefinition.name];\n                        var setExpression = _index.Container.createEntitySetExpression(exp, _index.Container.createAssociationInfoExpression(assocInfo));\n                        if (assocInfo.ToMultiplicity !== \"*\") {\n                            var ee = _index.Container.createEntityExpression(setExpression, {});\n                            return ee;\n                        } /* else {\r\n                             context.lambdaParameters.push(setExpression);\r\n                          }*/\n                        return setExpression;\n                    case \"complexProperty\":\n                        memberDefinitionExp = _index.Container.createMemberInfoExpression(memberDefinition);\n                        res = _index.Container.createComplexTypeExpression(exp, memberDefinitionExp);\n                        return res;\n                    //TODO: missing default case\n                }\n\n            //s/switch => property or navigationproperty\n            case _index2.default.Expressions.ComplexTypeExpression:\n                var memDef = exp.getMemberDefinition(member.value);\n                if (!memDef) {\n                    _index.Guard.raise(\"Unknown member \" + member.value + \" on \" + exp.entityType.name);\n                }\n                var memDefExp = _index.Container.createMemberInfoExpression(memDef);\n                var result;\n                //TODO!!!!\n                if (_index.Container.isPrimitiveType(_index.Container.resolveType(memDef.dataType))) {\n                    result = _index.Container.createEntityFieldExpression(exp, memDefExp);\n                    return result;\n                }\n                result = _index.Container.createComplexTypeExpression(exp, memDefExp);\n                return result;\n            case _index2.default.Expressions.QueryParameterExpression:\n                var value = expression.implementation(exp.value, member.value);\n                this.parameters[exp.index].name += \"$\" + member.value;\n                this.parameters[exp.index].value = value;\n                return _index.Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, value, _index.Container.getTypeName(value));\n            case _index2.default.Expressions.EntityFieldExpression:\n            case _index2.default.Expressions.EntityFieldOperationExpression:\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFieldOperationExpression(exp, member, []);\n\n                return result;\n            default:\n                _index.Guard.raise(\"Unknown expression type to handle: \" + exp.expressionType.name);\n        }\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],57:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ComplexTypeExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.ComplexTypeExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityExpression, _index2.default.Expressions.ComplexTypeExpression]);\n        _index.Guard.requireType(\"selector\", selector, [_index2.default.Expressions.EntityExpression, _index2.default.Expressions.MemberInfoExpression]);\n        this.source = source;\n        this.selector = selector;\n        var dt = source.entityType.getMemberDefinition(selector.memberName).dataType;\n        var t = _index.Container.resolveType(dt);\n        this.entityType = t;\n    },\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        return this.entityType.getMemberDefinition(name);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Com }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],58:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityContextExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(instance) {\n        ///<param name=\"instance\" type=\"$data.EntityContext\" />\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false });\n        this.instance = instance;\n        //this.storage_type = {};\n        //this.typeName = this.type.name;\n    },\n    instance: { enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityContext, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],59:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.IndexingExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.AccessorExpression\" />\n        ///</signature>\n        _index.Guard.requireValue(\"source\", source);\n        _index.Guard.requireValue(\"selector\", selector);\n        if (!(source instanceof _index2.default.Expressions.EntitySetExpression) && !(source instanceof _index2.default.Expressions.ServiceOperationExpression)) {\n            _index.Guard.raise(\"Only EntitySetExpressions can be the source for an EntityExpression\");\n        }\n\n        this.source = source;\n        this.selector = selector;\n\n        this.entityType = this.source.elementType;\n        this.storageModel = this.source.storageModel;\n\n        _index.Guard.requireValue(\"entityType\", this.entityType);\n        _index.Guard.requireValue(\"storageModel\", this.storageModel);\n    },\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        var memdef = this.entityType.getMemberDefinition(name);\n        if (!memdef) {\n            _index.Guard.raise(new _index.Exception(\"Unknown member \" + name + \" on type \" + this.entityType.name, \"MemberNotFound\"));\n        };\n        memdef.storageModel = this.storageModel;\n        return memdef;\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Entity }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],60:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityExpressionVisitor', null, null, {\n\n    constructor: function constructor() {\n        this.lambdaTypes = [];\n    },\n\n    canVisit: function canVisit(expression) {\n        return expression instanceof _index2.default.Expressions.ExpressionNode;\n    },\n\n    Visit: function Visit(expression, context) {\n        if (!this.canVisit(expression)) return expression;\n\n        var visitorName = \"Visit\" + expression.getType().name;\n        if (visitorName in this) {\n            var fn = this[visitorName];\n            var result = fn.call(this, expression, context);\n            if (typeof result === 'undefined') {\n                return expression;\n            }\n            return result;\n        }\n        //console.log(\"unhandled expression type:\" + expression.getType().name);\n        return expression;\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createToArrayExpression(source);\n        }\n        return expression;\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createForEachExpression(source);\n        }\n        return expression;\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        return expression;\n    },\n\n    VisitSingleExpression: function VisitSingleExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createSingleExpression(source);\n        return expression;\n    },\n\n    VisitFirstExpression: function VisitFirstExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createFirstExpression(source);\n        return expression;\n    },\n\n    VisitSomeExpression: function VisitSomeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createSomeExpression(source);\n        return expression;\n    },\n\n    VisitFindExpression: function VisitFindExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createFindExpression(source);\n        return expression;\n    },\n\n    VisitEveryExpression: function VisitEveryExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createEveryExpression(source);\n        return expression;\n    },\n\n    VisitCountExpression: function VisitCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createCountExpression(source);\n        return expression;\n    },\n\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createBatchDeleteExpression(source);\n        }\n        return expression;\n    },\n\n    VisitBatchExecuteQueryExpression: function VisitBatchExecuteQueryExpression(expression, context) {\n        var newQueries = expression.members.map(function (expr) {\n            return this.Visit(expr, context);\n        }, this);\n\n        var equal = true;\n        for (var i = 0; i < expression.members.length; i++) {\n            equal = equal && expression.members[i] === newQueries[i];\n        }\n        if (!equal) {\n            return _index.Container.createBatchExecuteQueryExpression(newQueries);\n        }\n\n        return expression;\n    },\n\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        var newValues = expression.members.map(function (ofe) {\n            return this.Visit(ofe, context);\n        }, this);\n        var equal = true;\n        for (var i = 0; i < expression.members.length; i++) {\n            equal = equal && expression.members[i] === newValues[i];\n        }\n        if (!equal) {\n            return _index.Container.createObjectLiteralExpression(newValues);\n        }\n        return expression;\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n        var newExpression = this.Visit(expression.expression, context);\n        if (expression.expression !== newExpression) {\n            return _index.Container.createObjectFieldExpression(expression.fieldName, newExpression);\n        }\n        return expression;\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        var newExpression = this.Visit(expression.source, context);\n        if (newExpression !== expression.source) {\n            return _index.Container.createIncludeExpression(newExpression, expression.selector);\n        }\n        return expression;\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, context) {\n\n        /// <param name=\"expression\" type=\"$data.Expressions.UnaryExpression\"></param>\n        /// <param name=\"context\"></param>\n        var operand = this.Visit(expression.operand, context);\n        if (expression.operand !== operand) {\n            return _index.Container.createUnaryExpression(operand, expression.operator, expression.nodeType, expression.resolution);\n        };\n        return expression;\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<returns type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        var left = this.Visit(expression.left, context);\n        var right = this.Visit(expression.right, context);\n        if (left !== expression.left || right !== expression.right) {\n            return new _index2.default.Expressions.SimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, expression.resolution);\n        }\n        return expression;\n    },\n\n    VisitEntityContextExpression: function VisitEntityContextExpression(expression, context) {\n        return expression;\n    },\n\n    VisitCodeExpression: function VisitCodeExpression(expression, context) {\n        /// <param name=\"expression\" type=\"$data.Expressions.CodeExpression\"></param>\n        /// <param name=\"context\"></param>\n        /// <returns type=\"$data.Expressions.CodeExpression\"></returns>\n        return expression;\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createComplexTypeExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createEntityExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createEntityFieldExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var operation = this.Visit(expression.operation, context);\n        var parameters = expression.parameters.map(function (p) {\n            return this.Visit(p);\n        }, this);\n        var result = _index.Container.createEntityFieldOperationExpression(source, operation, parameters);\n        return result;\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        var exp = this.Visit(expression.expression, context);\n        var args = expression.parameters.map(function (p) {\n            return this.Visit(p);\n        }, this);\n        var result = _index.Container.createParametricQueryExpression(exp, args);\n        return result;\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createEntitySetExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createFilterExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var expr = _index.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n            expr.projectionAs = expression.projectionAs;\n            return expr;\n        }\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createOrderExpression(source, selector, expression.nodeType);\n        }\n        return expression;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var amount = this.Visit(expression.amount, context);\n        if (source !== expression.source || amount !== expression.amount) {\n            return _index.Container.createPagingExpression(source, amount, expression.nodeType);\n        }\n        return expression;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],61:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityFieldExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<param name=\"source\" type=\"$data.Entity.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Entity.MemberInfoExpression\" />\n        this.selector = selector;\n        this.source = source;\n\n        if (this.selector instanceof _index2.default.Expressions.MemberInfoExpression || this.selector.name) {\n            this.memberName = this.selector.name;\n        }\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityField }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],62:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityFieldOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, operation, parameters) {\n        this.source = source;\n        this.operation = operation;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityFieldOperation }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],63:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntitySetExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector, params, instance) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityContextExpression, _index2.default.Expressions.EntitySetExpression]);\n        _index.Guard.requireType(\"selector\", source, [_index2.default.Expressions.MemberInfoExpression, _index2.default.Expressions.CodeExpression, _index2.default.Expressions.ParametricQueryExpression]);\n\n        this.source = source;\n        this.selector = selector;\n        this.params = params;\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false, writable: true });\n        this.instance = instance;\n\n        function findContext() {\n            //TODO: use source from function parameter and return a value at the end of the function\n            var r = source;\n            while (r) {\n                if (r instanceof _index2.default.Expressions.EntityContextExpression) {\n                    return r;\n                }\n                r = r.source;\n            }\n        }\n\n        ///TODO!!!\n        this.storage_type = {};\n        var c = findContext();\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntityContextExpression:\n                _index.Guard.requireType(\"selector\", selector, _index2.default.Expressions.MemberInfoExpression);\n                this.elementType = selector.memberDefinition.elementType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            case this.source instanceof _index2.default.Expressions.EntityExpression:\n                _index.Guard.requireType(\"selector\", selector, _index2.default.Expressions.AssociationInfoExpression);\n                this.elementType = selector.associationInfo.ToType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            case this.source instanceof _index2.default.Expressions.EntitySetExpression:\n                this.elementType = this.source.elementType;\n                this.storageModel = this.source.storageModel;\n                break;\n            case this.source instanceof _index2.default.Expressions.ServiceOperationExpression:\n                this.elementType = this.source.elementType; //?????????\n                this.storageModel = this.source.storageModel;\n                break;\n            default:\n                _index.Guard.raise(\"take and skip must be the last expressions in the chain!\");\n                //Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.getType().name);\n                break;\n        }\n\n        // suspicious code\n        /*if (this.source instanceof $data.Expressions.EntitySetExpression) {\r\n                //TODO: missing operation\r\n        }*/\n        //EntityTypeInfo\n    },\n    instance: { enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntitySet, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],64:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ExpressionMonitor', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(monitorDefinition) {\n        this.Visit = function (expression, context) {\n\n            var result = expression;\n            var methodName;\n            if (this.canVisit(expression)) {\n\n                //if (monitorDefinition.FilterExpressionNode) {\n\n                //};\n\n                if (monitorDefinition.VisitExpressionNode) {\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\n                };\n\n                methodName = \"Visit\" + expression.getType().name;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\n                }\n            }\n\n            //apply is about 3-4 times faster then call on webkit\n\n            var args = arguments;\n            if (result !== expression) args = [result, context];\n            result = _index2.default.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\n\n            args = [result, context];\n\n            if (this.canVisit(result)) {\n                var expressionTypeName = result.getType().name;\n                if (monitorDefinition.MonitorExpressionNode) {\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Monitor\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n\n                if (monitorDefinition.MutateExpressionNode) {\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Mutate\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n            }\n            return result;\n        };\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],65:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FilterExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\n        ///</signature>\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Filter, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.InlineCountExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.InlineCount, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.BatchExecuteQueryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(members) {\n        this.members = members;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.BatchExecuteQuery, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FrameOperator', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor() {\n        this.isTerminated = true;\n    }\n});\n\n(0, _index.$C)('$data.Expressions.CountExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Integer;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Count, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.SingleExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Single, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FindExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source, params, subMember) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.params = params;\n        this.subMember = subMember;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Find, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FirstExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.First, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.ForEachExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ForEach, enumerable: true }\n});\n(0, _index.$C)('$data.Expressions.ToArrayExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ToArray, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.SomeExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Some, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.EveryExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Every, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.BatchDeleteExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Integer;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.BatchDelete, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],66:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FrameOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, operation, parameters) {\n        this.source = source;\n        this.operation = operation;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.FrameOperation }\n\n});\n\n(0, _index.$C)('$data.Expressions.EntityFunctionOperationExpression', _index2.default.Expressions.FrameOperationExpression, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityFunctionOperation }\n});\n\n(0, _index.$C)('$data.Expressions.ContextFunctionOperationExpression', _index2.default.Expressions.FrameOperationExpression, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ContextFunctionOperation }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],67:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.IncludeExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Include, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],68:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.MemberInfoExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(memberDefinition) {\n        this.memberDefinition = memberDefinition;\n        this.memberName = memberDefinition.name;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.MemberInfo, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],69:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.OrderExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, expression, nType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        //this.source = source;\n        //this.selector = expression;\n        this.nodeType = nType;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.OrderBy, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],70:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParametricQueryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, parameters) {\n        this.expression = expression;\n        this.parameters = parameters || [];\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ParametricQuery, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],71:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ProjectionExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector, params, instance) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Projection, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],72:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.QueryExpressionCreator', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(scopeContext) {\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\n        _index.Guard.requireValue(\"scopeContext\", scopeContext);\n        this.scopeContext = scopeContext;\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        if (expression.source instanceof _index2.default.Expressions.EntityContextExpression) {\n            this.lambdaTypes.push(expression);\n        }\n        return expression;\n    },\n\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression, context) {\n        if (expression.source instanceof _index2.default.Expressions.EntityContextExpression) {\n            this.lambdaTypes.push(expression);\n        }\n        return expression;\n    },\n\n    VisitCodeExpression: function VisitCodeExpression(expression, context) {\n        ///<summary>Converts the CodeExpression into an EntityExpression</summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\n        var source = expression.source.toString();\n        var jsCodeTree = _index.Container.createCodeParser(this.scopeContext).createExpression(source);\n        this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\n\n        //TODO rename classes to reflex variable names\n        //TODO engage localValueResolver here\n        //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\n        var constantResolver = _index.Container.createConstantValueResolver(expression.parameters, _index2.default.__global, this.scopeContext);\n        var parameterProcessor = _index.Container.createParameterResolverVisitor();\n\n        jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\n\n        this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\n        var code2entity = _index.Container.createCodeToEntityConverter(this.scopeContext);\n\n        ///user provided query parameter object (specified as thisArg earlier) is passed in\n        var entityExpression = code2entity.Visit(jsCodeTree, { queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\n\n        ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\n        var result = _index.Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\n        this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\n\n        return result;\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createFilterExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var expr = _index.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n            expr.projectionAs = expression.projectionAs;\n            return expr;\n        }\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createOrderExpression(source, selector, expression.nodeType);\n        }\n        return expression;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],73:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.QueryParameterExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, index, value, type) {\n        this.name = name;\n        this.index = index;\n        this.value = value;\n        //TODO\n        this.type = _index.Container.getTypeName(value);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.QueryParameter, writable: false }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],74:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.RepresentationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(kind) {},\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        return this.entityType.getMemberDefinition(name);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Entity }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],75:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ServiceOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector, params, cfg, boundItem) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///<param name=\"params\" type=\"$data.Array\" />\n        ///<param name=\"cfg\" type=\"$data.Object\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityContextExpression]);\n        _index.Guard.requireType(\"selector\", source, [_index2.default.Expressions.MemberInfoExpression]);\n\n        this.source = source;\n        this.selector = selector;\n        this.params = params;\n        this.cfg = cfg;\n        this.boundItem = boundItem;\n\n        function findContext() {\n            //TODO: use source from function parameter and return a value at the end of the function\n            var r = source;\n            while (r) {\n                if (r instanceof _index2.default.Expressions.EntityContextExpression) {\n                    return r;\n                }\n                r = r.source;\n            }\n        }\n\n        var c = findContext();\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntityContextExpression:\n                this.elementType = cfg.elementType ? _index.Container.resolveType(cfg.elementType) : this.elementType ? _index.Container.resolveType(cfg.returnType) : null;\n                this.storageModel = cfg.elementType ? c.instance._storageModel.getStorageModel(_index.Container.resolveType(cfg.elementType)) : null;\n                break;\n            default:\n                _index.Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.source.getType().name);\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ServiceOperation, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],76:[function(require,module,exports){\n'use strict';\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExpressionBuilder', null, null, {\n    constructor: function constructor(context) {\n        this.context = context;\n    },\n    _isLambdaParam: function _isLambdaParam(name) {\n        var p = this.context.lambdaParams;\n        for (var i = 0; i < p.length; i++) {\n            if (p[i] == name) return true;\n        }\n        return false;\n    },\n    _isParam: function _isParam(name) {\n        return this.context.paramContext[name] != undefined;\n    },\n    _isParamRoot: function _isParamRoot(name) {\n        return this.context.paramsName == name;\n    },\n    Build: function Build(node, expNode) {\n        var n;\n        switch (node.arity) {\n            case \"infix\":\n                if (\"(\" == node.value) n = this.BuildMethodCall(node, expNode);else if (\".\" == node.value) n = this.BuildMember(node, expNode);else if ([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"].indexOf(node.value) >= 0) n = this.BuildEquality(node, expNode);else if ([\"&&\", \"||\"].indexOf(node.value) >= 0) n = this.BuildBinary(node, expNode);else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(node.value) >= 0) n = this.BuildBinary(node, expNode);else if (\"[\" == node.value) n = this.BuildArrayAccess(node, expNode);else _index.Guard.raise(\"Value of infix node isn't implemented: \" + node.value);\n                break;\n            case \"prefix\":\n                if ([\"+\", \"-\", \"!\"].indexOf(node.value) >= 0) n = this.BuildUnary(node, expNode);else if ([\"++\", \"--\"].indexOf(node.value) >= 0) n = this.BuildIncDec(node, expNode);else if (\"{\" == node.value /* && \"object\" == node.type*/) //TODO: check the second condition necessity\n                    n = this.BuildNewExpression(node, expNode);else _index.Guard.raise(\"Value of prefix node isn't implemented: \" + node.value);\n                break;\n            case \"suffix\":\n                if ([\"++\", \"--\"].indexOf(node.value) >= 0) n = this.BuildIncDec(node, expNode);else _index.Guard.raise(\"Value of suffix node isn't implemented: \" + node.value);\n                break;\n            case \"string\":\n            case \"number\":\n                n = this.BuildLiteral(node, expNode); //TODO: more arity to literal?\n                break;\n            case \"ternary\":\n                if (node.value == \"?\") n = this.BuildDecision(node, expNode);else _index.Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\n                break;\n            case null:\n            case undefined:\n                if (node.type == \"boolean\" && (node.value == \"true\" || node.value == \"false\")) n = this.BuildBoolLiteral(node, expNode);else n = this.BuildVariable(node, expNode);\n                break;\n            default:\n                _index.Guard.raise(\"Arity isn't implemented: \" + node.arity);\n        }\n        return n;\n    },\n    BuildNewExpression: function BuildNewExpression(node, expNode) {\n        var newExpression = _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, []);\n        var n = node.first;\n        for (var i = 0; i < n.length; i++) {\n            newExpression.values.push(this.Build(n[i], newExpression));\n        }return newExpression;\n    },\n    BuildLiteral: function BuildLiteral(node, expNode) {\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\n    },\n    BuildBoolLiteral: function BuildBoolLiteral(node, expNode) {\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.type, node.value == \"true\" ? true : false);\n    },\n    BuildVariable: function BuildVariable(node, expNode) {\n        if (!node.first) {\n            if (expNode.type == MEMBERACCESS) {\n                var subType;\n                if (this._isLambdaParam(node.value)) subType = \"LAMBDAPARAM\";else if (this._isParamRoot(node.value)) subType = \"PARAMETERROOT\";else if (this._isParam(node.value)) subType = \"PARAMETER\";else subType = \"PROPERTY\";\n            } else {\n                if (this._isLambdaParam(node.value)) subType = \"LAMBDAPARAM\";else if (this._isParamRoot(node.value)) subType = \"PARAMETERROOT\";else if (this._isParam(node.value)) subType = \"PARAMETER\";else if (_index2.default.__global[node.value] != undefined) subType = \"GLOBALOBJECT\";else _index.Guard.raise(new _index.Exception(\"Unknown variable in '\" + this.context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + node.value + \"'.\", \"InvalidOperation\", { operationName: this.context.operation, missingParameterName: node.value }));\n            }\n            return _index2.default.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, node.value, subType);\n        }\n\n        var left = _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, \"name\", node.value);\n\n        var jsonAssign = _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true);\n        var right = this.Build(node.first, jsonAssign);\n        //left.parent = jsonAssign;\n        jsonAssign.left = left;\n        jsonAssign.right = right;\n\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n\n        return jsonAssign;\n    },\n    BuildMember: function BuildMember(node, expNode) {\n        if (node.value != \".\" || node.arity != \"infix\") {\n            if (node.type == \"string\") {\n                //TODO: more types?\n                return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\n            }\n            return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true, null, node.value);\n        }\n        var result = _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true);\n        var expression = this.Build(node.first, result);\n        var member = this.Build(node.second, result);\n        result.expression = expression;\n        result.member = member;\n        return result;\n    },\n    BuildUnary: function BuildUnary(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(true, node.value);\n        result.operand = this.Build(node.first, result);\n        return result;\n    },\n    BuildIncDec: function BuildIncDec(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(true, node.value, null, node.arity == \"suffix\");\n        result.operand = this.Build(node.first, result);\n        return result;\n    },\n    BuildBinary: function BuildBinary(node, expNode) {\n        if (!node.first) _index.Guard.raise(\"Cannot build binary: node.first is null\");\n        if (!node.second) _index.Guard.raise(\"Cannot build binary: node.second is null\");\n        var result = _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(true, node.value);\n        result.left = this.Build(node.first, result);\n        result.right = this.Build(node.second, result);\n        return result;\n    },\n    BuildEquality: function BuildEquality(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(true, node.value);\n        result.left = this.Build(node.first, result);\n        result.right = this.Build(node.second, result);\n        return result;\n    },\n    BuildDecision: function BuildDecision(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(true);\n        result.expression = this.Build(node.first, result);\n        result.left = this.Build(node.second, result);\n        result.right = this.Build(node.third, result);\n        return result;\n    },\n    BuildMethodCall: function BuildMethodCall(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(true);\n        if (node.first.type == \"function\") {\n            //-- object's function\n            result.object = this.Build(node.first.first, result);\n            result.method = node.first.second.value;\n        } else {\n            //-- global function\n            if (node.first.type != null) _index.Guard.raise(\"Cannot build MethodCall because type is \" + type);\n            result.object = null;\n            result.method = node.first.value;\n        }\n        var argNodes = node.second;\n        var args = [];\n        for (var i = 0; i < argNodes.length; i++) {\n            var arg = argNodes[i];\n            args[i] = this.Build(arg, result);\n        }\n        result.args = args;\n        return result;\n    },\n    BuildArrayAccess: function BuildArrayAccess(node, expNode) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var result = _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true);\n        result.array = this.Build(node.first, result);\n        result.index = this.Build(node.second, result);\n        return result;\n    }\n}, null);\n\n},{\"../../TypeSystem/index.js\":28}],77:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//TODO: Finish refactoring ExpressionNode.js\n\n_index2.default.Class.define(\"$data.Expressions.ExpressionType\", null, null, {}, {\n    Constant: \"constant\", // { type:LITERAL, executable:true, valueType:, value: }\n    Variable: \"variable\", // { type:VARIABLE, executable:true, name: }\n    MemberAccess: \"memberAccess\", // { type:MEMBERACCESS, executable:true, expression:, member: }\n    Call: \"call\",\n\n    /* binary operators */\n    Equal: \"equal\",\n    NotEqual: \"notEqual\",\n    EqualTyped: \"equalTyped\",\n    NotEqualTyped: \"notEqualTyped\",\n    GreaterThen: \"greaterThan\",\n    LessThen: \"lessThan\",\n    GreaterThenOrEqual: \"greaterThanOrEqual\",\n    LessThenOrEqual: \"lessThenOrEqual\",\n    Or: \"or\",\n    OrBitwise: \"orBitwise\",\n    And: \"and\",\n    AndBitwise: \"andBitwise\",\n\n    In: \"in\",\n\n    Add: \"add\",\n    Divide: \"divide\",\n    Multiply: \"multiply\",\n    Subtract: \"subtract\",\n    Modulo: \"modulo\",\n    ArrayIndex: \"arrayIndex\",\n\n    /* unary operators */\n    New: \"new\",\n    Positive: \"positive\",\n    Negative: \"negative\",\n    Increment: \"increment\",\n    Decrement: \"decrement\",\n    Not: \"not\",\n\n    This: \"this\",\n    LambdaParameterReference: \"lambdaParameterReference\",\n    LambdaParameter: \"lambdaParameter\",\n    Parameter: \"parameter\",\n\n    ArrayLiteral: \"arrayLiteral\",\n    ObjectLiteral: \"objectLiteral\",\n    ObjectField: \"objectField\",\n    Function: \"Function\",\n    Unknown: \"UNKNOWN\",\n\n    EntitySet: \"EntitySet\",\n    ServiceOperation: \"ServiceOperation\",\n    EntityField: \"EntityField\",\n    EntityContext: \"EntityContext\",\n    Entity: \"Entity\",\n    Filter: \"Filter\",\n    First: \"First\",\n    Count: \"Count\",\n    InlineCount: \"InlineCount\",\n    BatchExecuteQuery: \"BatchExecuteQuery\",\n    Single: \"Single\",\n    Find: \"Find\",\n    Some: \"Some\",\n    Every: \"Every\",\n    ToArray: \"ToArray\",\n    BatchDelete: \"BatchDelete\",\n    ForEach: \"ForEach\",\n    Projection: \"Projection\",\n    EntityMember: \"EntityMember\",\n    EntityFieldOperation: \"EntityFieldOperation\",\n    FrameOperation: \"FrameOperation\",\n    EntityFunctionOperation: \"EntityFunctionOperation\",\n    ContextFunctionOperation: \"ContextFunctionOperation\",\n    EntityBinary: \"EntityBinary\",\n    Code: \"Code\",\n    ParametricQuery: \"ParametricQuery\",\n    MemberInfo: \"MemberInfo\",\n    QueryParameter: \"QueryParameter\",\n    ComplexEntityField: \"ComplexEntityField\",\n\n    Take: \"Take\",\n    Skip: \"Skip\",\n    OrderBy: \"OrderBy\",\n    OrderByDescending: \"OrderByDescending\",\n    Include: \"Include\",\n\n    IndexedPhysicalAnd: \"IndexedDBPhysicalAndFilterExpression\",\n    IndexedLogicalAnd: \"IndexedDBLogicalAndFilterExpression\",\n    IndexedLogicalOr: \"IndexedDBLogicalOrFilterExpression\",\n    IndexedLogicalIn: \"IndexedDBLogicalInFilterExpression\"\n});\n\n_index2.default.BinaryOperator = function () {\n    ///<field name=\"operator\" type=\"string\" />\n    ///<field name=\"expressionType\" type=\"$data.ExpressionType\" />\n    ///<field name=\"type\" type=\"string\" />\n};\n\n_index2.default.binaryOperators = [{ operator: \"==\", expressionType: _index2.default.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function implementation(a, b) {\n        return a == b;\n    } }, { operator: \"===\", expressionType: _index2.default.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n        return a === b;\n    } }, { operator: \"!=\", expressionType: _index2.default.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a != b;\n    } }, { operator: \"!==\", expressionType: _index2.default.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n        return a !== b;\n    } }, { operator: \">\", expressionType: _index2.default.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function implementation(a, b) {\n        return a > b;\n    } }, { operator: \">=\", expressionType: _index2.default.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a >= b;\n    } }, { operator: \"<=\", expressionType: _index2.default.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a <= b;\n    } }, { operator: \"<\", expressionType: _index2.default.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function implementation(a, b) {\n        return a < b;\n    } }, { operator: \"&&\", expressionType: _index2.default.Expressions.ExpressionType.And, type: \"boolean\", implementation: function implementation(a, b) {\n        return a && b;\n    } }, { operator: \"||\", expressionType: _index2.default.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function implementation(a, b) {\n        return a || b;\n    } }, { operator: \"&\", expressionType: _index2.default.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function implementation(a, b) {\n        return a & b;\n    } }, { operator: \"|\", expressionType: _index2.default.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function implementation(a, b) {\n        return a | b;\n    } }, { operator: \"+\", expressionType: _index2.default.Expressions.ExpressionType.Add, type: \"number\", implementation: function implementation(a, b) {\n        return a + b;\n    } }, { operator: \"-\", expressionType: _index2.default.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function implementation(a, b) {\n        return a - b;\n    } }, { operator: \"/\", expressionType: _index2.default.Expressions.ExpressionType.Divide, type: \"number\", implementation: function implementation(a, b) {\n        return a / b;\n    } }, { operator: \"%\", expressionType: _index2.default.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function implementation(a, b) {\n        return a % b;\n    } }, { operator: \"*\", expressionType: _index2.default.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function implementation(a, b) {\n        return a * b;\n    } }, { operator: \"[\", expressionType: _index2.default.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function implementation(a, b) {\n        return a[b];\n    } }, { operator: \"in\", expressionType: _index2.default.Expressions.ExpressionType.In, type: 'boolean', implementation: function implementation(a, b) {\n        return a in b;\n    } }];\n\n_index2.default.binaryOperators.resolve = function (operator) {\n    var result = _index2.default.binaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length > 0) return operator;\n    //Guard.raise(\"Unknown operator: \" + operator);\n};\n\n_index2.default.binaryOperators.contains = function (operator) {\n    return _index2.default.binaryOperators.some(function (item) {\n        return item.operator == operator;\n    });\n};\n\n_index2.default.binaryOperators.getOperator = function (operator) {\n    ///<returns type=\"BinaryOperator\" />\n    var result = _index2.default.binaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length < 1) _index.Guard.raise(\"Unknown operator: \" + operator);\n    return result[0];\n};\n\n_index2.default.unaryOperators = [{ operator: \"+\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Positive, type: \"number\", implementation: function implementation(operand) {\n        return +operand;\n    } }, { operator: \"-\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Negative, type: \"number\", implementation: function implementation(operand) {\n        return -operand;\n    } }, { operator: \"++\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n        return ++operand;\n    } }, { operator: \"--\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n        return --operand;\n    } }, { operator: \"++\", arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n        return operand++;\n    } }, { operator: \"!\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function implementation(operand) {\n        return !operand;\n    } }, { operator: \"--\", arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n        return operand--;\n    } }\n\n//{ operator: \"new\", expressionType : $data.Expressions.ExpressionType.New, type: \"object\", implementation: function(operand) { return new operand; }\n];\n\n_index2.default.unaryOperators.resolve = function (operator) {\n    var result = _index2.default.unaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length > 0) return operator;\n    //Guard.raise(\"Unknown operator: \" + operator);\n};\n\n_index2.default.unaryOperators.contains = function (operator) {\n    return _index2.default.unaryOperators.some(function (item) {\n        return item.operator == operator;\n    });\n};\n\n_index2.default.unaryOperators.getOperator = function (operator, arity) {\n    ///<returns type=\"BinaryOperator\" />\n    var result = _index2.default.unaryOperators.filter(function (item) {\n        return item.operator == operator && (!arity || item.arity == arity);\n    });\n    if (result.length < 1) _index.Guard.raise(\"Unknown operator: \" + operator);\n    return result[0];\n};\n\n_index2.default.timeIt = function (fn, iterations) {\n    iterations = iterations || 1;\n\n    console.time(\"!\");\n    for (var i = 0; i < iterations; i++) {\n        fn();\n    }\n    console.timeEnd(\"!\");\n};\n\n_index2.default.Expressions.OperatorTypes = {\n    UNARY: \"UNARY\", // { type:UNARY, executable:true, operator:, operand: }\n    INCDEC: \"INCDEC\", // { type:INCDEC, executable:true, operator:, operand:, suffix: }\n    DECISION: \"DECISION\", // { type:DECISION, executable:true, expression:, left:, right: }\n    METHODCALL: \"METHODCALL\", // { type:METHODCALL, executable:true, object:, method:, args: }\n    NEW: \"NEW\", // { type:NEW, executable:true, values: [] };\n    JSONASSIGN: \"JSONASSIGN\", // { type:JSONASSIGN, executable:true, left:, right: }\n    ARRAYACCESS: \"ARRAYACCESS\", // { type:ARRAYACCESS, executable:true, array:, index: }\n    UNKNOWN: \"UNKNOWN\"\n};\n\n_index2.default.executable = true;\n\nfunction jsonify(obj) {\n    return JSON.stringify(obj, null, \"\\t\");\n}\n\n(0, _index.$C)('$data.Expressions.ExpressionNode', null, null, {\n    constructor: function constructor() {\n        ///<summary>Provides a base class for all Expressions.</summary>\n        ///<field name=\"nodeType\" type=\"string\">Represents the expression type of the node&#10;\n        ///For the list of expression node types refer to $data.Expressions.ExpressionType\n        ///</field>\n        ///<field name=\"type\" type=\"Function\">The result type of the expression</field>\n        ///<field name=\"executable\" type=\"boolean\">True if the expression can be evaluated to yield a result</field>\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\n        ///this.type = type;\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\n        ///this.executable = (executable === undefined || executable === null) ? true : executable;\n        ///TODO\n        this.expressionType = this.constructor;\n    },\n    toJSON: function toJSON() {\n        var res = JSON.parse(JSON.stringify(this));\n        res.expressionType = _index.Container.resolveName(this._expressionType);\n        return res;\n    },\n    getJSON: function getJSON() {\n        return jsonify(this);\n    },\n\n    //TOBLOG maybe\n    /*expressionType: {\r\n        value: undefined,\r\n        ////OPTIMIZE\r\n        set: function (value) {\r\n            var _expressionType;\r\n            Object.defineProperty(this, \"expressionType\", {\r\n                set: function (value) {\r\n                    if (typeof value === 'string') {\r\n                        value = Container.resolveType(value);\r\n                    }\r\n                    _expressionType = value;\r\n                },\r\n                get: function (value) {\r\n                    //IE ommits listing JSON.stringify in call chain\r\n                          if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n                        return Container.resolveName(_expressionType);\r\n                    }\r\n                    return _expressionType;\r\n                },\r\n                enumerable: true\r\n            });\r\n              this.expressionType = value;\r\n        },\r\n        get: function () { return undefined; },\r\n        enumerable: true\r\n    },*/\n    expressionType: {\n        set: function set(value) {\n            if (typeof value === 'string') {\n                value = _index.Container.resolveType(value);\n            }\n            this._expressionType = value;\n        },\n        get: function get(value) {\n            //IE ommits listing JSON.stringify in call chain\n\n            // if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\n            //     return Container.resolveName(this._expressionType);\n            // }\n            return this._expressionType;\n        },\n        enumerable: true\n    },\n    ///toString: function () { },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Unknown, writable: false },\n\n    type: {},\n\n    isTerminated: { value: false },\n\n    toString: function toString() {\n        return this.value;\n    }\n}, null);\n\n(0, _index.$C)('$data.Expressions.UnaryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(operand, operator, nodeType, resolution) {\n        /// <summary>\n        /// Represents an operation with only one operand and an operator\n        /// </summary>\n        /// <param name=\"operand\"></param>\n        /// <param name=\"operator\"></param>\n        /// <param name=\"nodeType\"></param>\n        /// <param name=\"resolution\"></param>\n        this.operand = operand;\n        this.operator = operator;\n        this.nodeType = nodeType;\n        this.resolution = resolution;\n    },\n\n    operator: { value: undefined, writable: true },\n    operand: { value: undefined, writable: true },\n    nodeType: { value: undefined, writable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],78:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FunctionExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, parameters, body) {\n        ///<signature>\n        ///<summary>Represents a function declaration.</summary>\n        ///<param name=\"name\" type=\"String\">Function name</param>\n        ///<param name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</param>\n        ///<param name=\"body\" type=\"$data.Expressions.ExpressionNode\" />\n        ///</signature>\n        ///<field name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</field>\n        ///<field name=\"body\" type=\"$data.Expressions.ExpressionNode\">The function body</field>\n\n        this.parameters = parameters || [];\n        this.name = name;\n        this.body = body;\n    },\n\n    toString: function toString(debug) {\n        var paramStrings = this.parameters.map(function (p) {\n            return p.toString();\n        });\n        paramStrings = paramStrings.join(\",\");\n        var bodyString = this.body ? this.body.toString(debug) : '';\n        return \"function \" + this.name + \"(\" + paramStrings + \") { \" + bodyString + \"}\";\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Function, writable: true },\n    parameters: { value: undefined, dataType: Array, elementType: _index2.default.Expressions.ParameterExpression },\n    body: { value: undefined, dataType: _index2.default.Expressions.ExpressionNode },\n    type: {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],79:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ObjectFieldExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(fieldName, expression) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        this.fieldName = fieldName;\n        this.expression = expression;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ObjectField, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],80:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ObjectLiteralExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(members) {\n        ///<summary>Represent an object initializer literal expression &#10;Ex: { prop: value}</summary>\n        ///<param name=\"member\" type=\"Array\" elementType=\"$data.Expressions.ObjectFieldExpression\" />\n        this.members = members;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ObjectLiteral, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    },\n\n    implementation: {\n        get: function get() {\n            return function (namesAndValues) {\n                var result = {};\n                namesAndValues.forEach(function (item) {\n                    result[item.name] = item.value;\n                });\n                return result;\n            };\n        },\n        set: function set() {}\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],81:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.PagingExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, expression, nType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        this.source = source;\n        this.amount = expression;\n        this.nodeType = nType;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Unknown, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],82:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParameterExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, type, nodeType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        //this.writePropertyValue(\"name\", name);\n        //this.writePropertyValue(\"type\", type);\n        this.nodeType = nodeType || _index2.default.Expressions.ExpressionType.Parameter;\n        this.name = name;\n        this.type = type || \"unknown\";\n        var _owningFunction;\n    },\n\n    owningFunction: { value: undefined, enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Parameter, writable: true },\n    name: { value: undefined, dataType: String, writable: true },\n    type: { value: undefined, dataType: \"object\", writable: true },\n    toString: function toString(debug) {\n        var result;\n        result = debug ? this.type + \" \" : \"\";\n        result = result + this.name;\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],83:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.PropertyExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, member) {\n        ///<summary>Represents accessing a property or field of an object</summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</param>\n        ///<param name=\"member\" type=\"$data.Expressions.ConstantExpression\">The member descriptor</param>\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</field>\n        ///<field name=\"member\" type=\"$data.Expression.ConstantExpression\">The member descriptor</field>\n\n        this.expression = expression;\n        this.member = member;\n\n        this.type = member.dataType;\n    },\n\n    nodeType: {\n        value: _index2.default.Expressions.ExpressionType.MemberAccess\n    },\n\n    expression: {\n        value: undefined,\n        dataType: _index2.default.Expressions.ExpressionNode,\n        writable: true\n    },\n\n    implementation: {\n        get: function get() {\n            return function (holder, memberName) {\n                if (holder[memberName] === undefined) _index.Guard.raise(new _index.Exception(\"Parameter '\" + memberName + \"' not found in context\", 'Property not found!'));\n                return holder[memberName];\n            };\n        },\n        set: function set() {}\n    },\n\n    member: {\n        value: undefined,\n        dataType: _index2.default.MemberDefinition,\n        writable: true\n    },\n\n    type: {\n        value: undefined,\n        writable: true\n    },\n\n    toString: function toString(debug) {\n        return this.expression.toString() + \".\" + this.member.toString();\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],84:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.SimpleBinaryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(left, right, nodeType, operator, type, resolution) {\n        ///<summary>Represents a bin operation with left and right operands and an operator///</summary>\n        ///<param name=\"left\" type=\"$data.Expression.ExpressionNode\">The left element of the binary operation</param>\n        ///<param name=\"right\" type=\"$data.Expression.ExpressionNode\">The right element of the binary operation</param>\n        ///<field name=\"implementation\" type=\"function\" />\n        this.left = left;\n        this.right = right;\n        this.nodeType = nodeType;\n        this.operator = operator;\n        this.type = type;\n        this.resolution = resolution;\n    },\n\n    implementation: {\n        get: function get() {\n            return _index2.default.binaryOperators.getOperator(this.operator).implementation;\n        },\n        set: function set() {}\n\n    },\n    //nodeType: { value: $data.Expressions.ExpressionType },\n    type: { value: \"number\", writable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],85:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ThisExpression', _index2.default.Expressions.ExpressionNode, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.This }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],86:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExecutorVisitor', _index2.default.Expressions.ExpTreeVisitor, null, {\n    //--\n    VisitVariable: function VisitVariable(eNode, context) {\n        if (!eNode.executable) return eNode;\n        var value = eNode.name == context.paramsName ? context.paramContext : _index2.default.__global[eNode.name];\n        if (typeof value == 'undefined') _index.Guard.raise(new _index.Exception(\"Unknown variable in '\" + context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + eNode.name + \"'.\", \"InvalidOperation\", { operationName: context.operation, missingParameterName: eNode.name }));\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        if (!eNode.executable) return eNode;\n        var chain = this.GetMemberChain(eNode);\n        var value;\n        for (var i = 0; i < chain.length; i++) {\n            if (i == 0) value = context.paramContext;else value = value[chain[i].name];\n        }\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand !== eNode.operand) eNode = _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var operandValue = operand.valueType == \"string\" ? \"'\" + operand.value + \"'\" : operand.value;\n        src = \"value = \" + eNode.operator + \" \" + operandValue;\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand !== eNode.operand) eNode = _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        if (eNode.suffix) value = eNode.operator == \"++\" ? operand.value++ : operand.value--;else value = eNode.operator == \"++\" ? ++operand.value : --operand.value;\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitBinary: function VisitBinary(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var leftValue = left.valueType == \"string\" ? \"'\" + left.value + \"'\" : left.value;\n        var rightValue = right.valueType == \"string\" ? \"'\" + right.value + \"'\" : right.value;\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var leftValue = left.valueType == \"string\" ? \"'\" + left.value + \"'\" : left.value;\n        var rightValue = right.valueType == \"string\" ? \"'\" + right.value + \"'\" : right.value;\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\n        eval(src);\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression !== eNode.expression || left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value = expression.value ? left.value : right.value;\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object !== eNode.object || args != eNode.args) eNode = _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var a = [];\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            var t = _typeof(arg.value);\n            a.push(t == \"string\" ? \"'\" + arg.value + \"'\" : arg.value);\n        }\n        var value;\n        var src = object ? \"value = object.value[eNode.method](\" + a.join(\",\") + \");\" : \"value = \" + eNode.method + \"(\" + a.join(\",\") + \");\";\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var arrayNode = this.Visit(eNode.array, context);\n        var indexNode = this.Visit(eNode.index, context);\n        var value = arrayNode.value[indexNode.value];\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],87:[function(require,module,exports){\n'use strict';\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExpTreeVisitor', null, null, {\n    constructor: function constructor() {\n        this._deep = 0;\n    },\n    Visit: function Visit(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\n        this._deep = this._deep + 1;\n        var result = null;\n        switch (eNode.type) {\n            case LITERAL:\n                result = this.VisitLiteral(eNode, context);break;\n            case VARIABLE:\n                result = this.VisitVariable(eNode, context);break;\n            case MEMBERACCESS:\n                result = this.VisitMember(eNode, context);break;\n            case BINARY:\n                result = this.VisitBinary(eNode, context);break;\n            case UNARY:\n                result = this.VisitUnary(eNode, context);break;\n            case INCDEC:\n                result = this.VisitIncDec(eNode, context);break;\n            case EQUALITY:\n                result = this.VisitEquality(eNode, context);break;\n            case DECISION:\n                result = this.VisitDecision(eNode, context);break;\n            case METHODCALL:\n                result = this.VisitMethodCall(eNode, context);break;\n            case NEW:\n                result = this.VisitNew(eNode, context);break;\n            case JSONASSIGN:\n                result = this.VisitJsonAssign(eNode, context);break;\n            case ARRAYACCESS:\n                result = this.VisitArrayAccess(eNode, context);break;\n            default:\n                _index.Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n        this._deep = this._deep - 1;\n        return result;\n    },\n    VisitLiteral: function VisitLiteral(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\n\n        return eNode;\n    },\n    VisitVariable: function VisitVariable(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\n\n        return eNode;\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        if (expression === eNode.expression && member === eNode.member) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(eNode.executable, expression, member);\n    },\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\n\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object === eNode.object && args === eNode.args) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\n    },\n    VisitNew: function VisitNew(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitJsonAssign: function VisitJsonAssign(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n        return _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n    GetMemberChain: function GetMemberChain(memberAccess, context) {\n        // { type:MEMBERACCESS, executable:true, expression:, member: }\n        if (memberAccess.expression.type == MEMBERACCESS) {\n            var a = this.GetMemberChain(memberAccess.expression, context);\n            a.push(memberAccess.member);\n            return a;\n        }\n        return [memberAccess.expression, memberAccess.member];\n    }\n}, {});\n\n},{\"../../../TypeSystem/index.js\":28}],88:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ExpressionVisitor', null, null, {\n    constructor: function constructor() {\n        this._deep = 0;\n    },\n\n    Visit: function Visit(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNode\"/>\n\n        //this._deep = this._deep + 1;\n        if (!eNode) {\n            return eNode;\n        }\n\n        var result = null;\n\n        switch (eNode.expressionType) {\n            case _index2.default.Expressions.ParameterExpression:\n                result = this.VisitParameter(eNode, context);\n                break;\n            case _index2.default.Expressions.ConstantExpression:\n                result = this.VisitConstant(eNode, context);\n                break;\n            case _index2.default.Expressions.FunctionExpression:\n                result = this.VisitFunction(eNode, context);\n                break;\n            case _index2.default.Expressions.CallExpression:\n                result = this.VisitCall(eNode, context);\n                break;\n            case _index2.default.Expressions.SimpleBinaryExpression:\n                result = this.VisitBinary(eNode, context);\n                break;\n            case _index2.default.Expressions.PropertyExpression:\n                result = this.VisitProperty(eNode, context);\n                break;\n            //result = th\n            case _index2.default.Expressions.ThisExpression:\n                result = this.VisitThis(eNode, context);\n                break;\n            case _index2.default.Expressions.ObjectLiteralExpression:\n                result = this.VisitObjectLiteral(eNode, context);\n                break;\n            case _index2.default.Expressions.ObjectFieldExpression:\n                result = this.VisitObjectField(eNode, context);\n                break;\n            case _index2.default.Expressions.ArrayLiteralExpression:\n                result = this.VisitArrayLiteral(eNode, context);\n                break;\n            case _index2.default.Expressions.UnaryExpression:\n                result = this.VisitUnary(eNode, context);\n                break;\n            case _index2.default.Expressions.EntityContextExpression:\n                result = this.VisitEntityContext(eNode, context);\n                break;\n            default:\n                debugger;\n                break;\n            //case VARIABLE:\n\n            //    result = this.VisitVariable(eNode, context);\n            //    break;\n            //case MEMBERACCESS:\n            //    result = this.VisitMember(eNode, context);\n            //    break;\n            //case BINARY:\n            //    result = this.VisitBinary(eNode, context);\n            //    break;\n            //case UNARY:\n            //    result = this.VisitUnary(eNode, context);\n            //    break;\n            //case INCDEC:\n            //    result = this.VisitIncDec(eNode, context);\n            //    break;\n            //case EQUALITY: result = this.VisitEquality(eNode, context); break;\n            //case DECISION: result = this.VisitDecision(eNode, context); break;\n            //case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\n            //case NEW: result = this.VisitNew(eNode, context); break;\n            //case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\n            //case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\n            //default:\n            //    Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n\n        this._deep = this._deep - 1;\n        return result;\n    },\n\n    VisitArrayLiteral: function VisitArrayLiteral(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ArrayLiteralExpression\" />\n        var self = this;\n        var items = eNode.items.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var result = _index.Container.createArrayLiteralExpression(items);\n        return result;\n    },\n\n    VisitObjectLiteral: function VisitObjectLiteral(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\n        var self = this;\n        var members = eNode.members.map(function (member) {\n            return self.Visit(member, context);\n        });\n        var result = _index.Container.createObjectLiteralExpression(members);\n        return result;\n    },\n\n    VisitObjectField: function VisitObjectField(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var result = _index.Container.createObjectFieldExpression(eNode.fieldName, expression);\n        return result;\n    },\n\n    VisitThis: function VisitThis(eNode, context) {\n        return eNode;\n    },\n    VisitCall: function VisitCall(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\n        var self = this;\n        var args = eNode.args.map(function (arg) {\n            return this.Visit(arg, context);\n        }, this);\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        return new _index2.default.Expressions.CallExpression(expression, member, args);\n    },\n\n    VisitParameter: function VisitParameter(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitConstant: function VisitConstant(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitFunction: function VisitFunction(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\n        var self = this;\n\n        var params = eNode.parameters.map(function (p, i) {\n            return self.Visit(p, context);\n        });\n\n        var body = self.Visit(eNode.body, context);\n        var result = new _index2.default.Expressions.FunctionExpression(eNode.name, params, body);\n        return result;\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        return new _index2.default.Expressions.SimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\n    },\n\n    VisitProperty: function VisitProperty(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        return new _index2.default.Expressions.PropertyExpression(expression, member);\n        //var member =\n    },\n\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.UnaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<returns type=\"$data.Expressions.UnaryExpression\"/>\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return new _index2.default.Expressions.UnaryExpression(operand, eNode.operator, eNode.nodeType);\n    },\n\n    VisitEntityContext: function VisitEntityContext(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.EntityContextExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitDecision: function VisitDecision(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n    },\n\n    VisitNew: function VisitNew(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n    GetMemberChain: function GetMemberChain(memberAccess, context) {\n        // { type:MEMBERACCESS, executable:true, expression:, member: }\n        if (memberAccess.expression.type == MEMBERACCESS) {\n            var a = this.GetMemberChain(memberAccess.expression, context);\n            a.push(memberAccess.member);\n            return a;\n        }\n        return [memberAccess.expression, memberAccess.member];\n    }\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],89:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.GlobalContextProcessor\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(global) {\n        ///<param name=\"global\" type=\"object\" />\n        this.global = global;\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        return paramExpression.nodeType == _index2.default.Expressions.ExpressionType.Parameter && this.global && _typeof(this.global) === 'object' && paramExpression.name in this.global;\n    },\n\n    resolve: function resolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\n        var resultValue = this.global[paramExpression.name];\n        var expression = _index.Container.createConstantExpression(resultValue, typeof resultValue === 'undefined' ? 'undefined' : _typeof(resultValue), paramExpression.name);\n        return expression;\n    }\n\n});\n\n(0, _index.$C)(\"$data.Expressions.ConstantValueResolver\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(paramsObject, global, scopeContext) {\n        ///<param name=\"global\" type=\"object\" />\n        this.globalResolver = _index.Container.createGlobalContextProcessor(global);\n        this.paramResolver = _index.Container.createGlobalContextProcessor(paramsObject);\n        this.paramsObject = paramsObject;\n        this.scopeContext = scopeContext;\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        return paramExpression.name === '$context' || paramExpression.nodeType == _index2.default.Expressions.ExpressionType.This && this.paramsObject ? true : this.paramResolver.canResolve(paramExpression) || this.globalResolver.canResolve(paramExpression);\n    },\n\n    resolve: function resolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\n        if (paramExpression.name === '$context') {\n            return _index.Container.createEntityContextExpression(this.scopeContext);\n        }\n        if (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.This) {\n            return _index.Container.createConstantExpression(this.paramsObject, _typeof(this.paramsObject), 'this');\n        }\n        return this.paramResolver.canResolve(paramExpression) ? this.paramResolver.resolve(paramExpression) : this.globalResolver.resolve(paramExpression);\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],90:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.LambdaParameterProcessor\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(lambdaParameterTypeInfos) {\n        ///<param name=\"global\" />\n        ///<param name=\"evalMethod\" />\n        var paramIndices = {};\n        var $idx = \"name\";\n\n        this.canResolve = function (paramExpression, context) {\n            if (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.LambdaParameter) {\n                var fnParams = paramExpression.owningFunction.parameters;\n\n                if (fnParams.length == 1 && paramExpression.name == fnParams[0].name) {\n                    paramIndices[paramExpression.name] = lambdaParameterTypeInfos[0];\n                    return true;\n                }\n\n                for (var j = 0; j < fnParams.length; j++) {\n                    if (fnParams[j].name == paramExpression.name) {\n                        paramIndices[paramExpression.name] = lambdaParameterTypeInfos[j];\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return false;\n        };\n\n        this.resolve = function (paramExpression, context) {\n            var lambdaParamType = paramIndices[paramExpression.name];\n            var result = _index.Container.createParameterExpression(paramExpression.name, lambdaParamType, _index2.default.Expressions.ExpressionType.LambdaParameter);\n            result.owningFunction = paramExpression.owningFunction;\n            return result;\n        };\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],91:[function(require,module,exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.LocalContextProcessor\", _index2.default.Expressions.GlobalContextProcessor, null, {\n    constructor: function constructor(evalMethod) {\n        ///<param name=\"global\" type=\"object\" />\n        this.canResolve = function (paramExpression) {\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n            return paramExpression.nodeType == _index2.default.Expressions.ExpressionType.Parameter && evalMethod(\"typeof \" + paramExpression.name) !== 'undefined';\n        };\n        this.resolve = function (paramExpression) {\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n            ///<returns type=\"$data.Expressions.ExpressionNode\" />\n            var resultValue = evalMethod(paramExpression.name);\n            var expression = _index.Container.createConstantExpression(resultValue, typeof resultValue === \"undefined\" ? \"undefined\" : _typeof(resultValue));\n            return expression;\n        };\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],92:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\"use strict\"; // suspicious code\n\n(0, _index.$C)('$data.Expressions.LogicalSchemaBinderVisitor', _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(expression, binder) {},\n\n    VisitProperty: function VisitProperty(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        var exp = this.Visit(expression.expression, context);\n        var mem = this.Visit(expression.member, context);\n\n        var type = exp.type;\n        var memberType = context.memberResolver.resolve(type, mem.value);\n        mem.type = memberType;\n        return _index.Container.createPropertyExpression(exp, mem);\n    }\n\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],93:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.ParameterProcessor\", _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor() {\n        ///<summary>Provides a base class for several ParameterProcessors like GlobalParameterProcessor or LambdaParameterProcessor</summary>\n    },\n\n    Visit: function Visit(node, context) {\n        if ((node instanceof _index2.default.Expressions.ParameterExpression || node instanceof _index2.default.Expressions.ThisExpression) && this.canResolve(node)) {\n            var result = this.resolve(node, context);\n            if (result !== node) result[\"resolvedBy\"] = this.constructor.name;\n            return result;\n        } else {\n            return node;\n        }\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<returns type=\"boolean\" />\n        _index.Guard.raise(\"Pure method\");\n    },\n    resolve: function resolve(paramExpression) {\n        ///<returns type=\"XXX\" />\n        _index.Guard.raise(\"Pure method\");\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],94:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParameterResolverVisitor', _index2.default.Expressions.ExpressionVisitor, null, {\n\n    constructor: function constructor(expression, resolver) {\n        /// <summary>\n        /// ParameterResolverVisitor traverses the JavaScript Code Expression tree and converts\n        /// outer but otherwise execution local variable references into ConstantExpressions-t.\n        /// for example: context.Persons.filter(function(p) { return p.Name == document.location.href })\n        /// is transformed into a constant that has the current href as its value\n        /// </summary>\n        /// <param name=\"expression\"></param>\n        /// <param name=\"resolver\"></param>\n        this.lambdaParamCache = {};\n    },\n\n    Visit: function Visit(expression, resolver) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        ///<param name=\"resolver\" type=\"$data.Expressions.Resolver\" />\n        //TODO base call is just ugly\n        return _index2.default.Expressions.ExpressionVisitor.prototype.Visit.call(this, expression, resolver);\n    },\n\n    VisitArrayLiteral: function VisitArrayLiteral(eNode, context) {\n        var self = this;\n        var items = eNode.items.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var allLocal = items.every(function (item) {\n            return item instanceof _index2.default.Expressions.ConstantExpression;\n        });\n\n        if (allLocal) {\n            items = items.map(function (item) {\n                return item.value;\n            });\n            return _index.Container.createConstantExpression(items, \"array\");\n        } else {\n            return _index.Container.createArrayLiteralExpression(items);\n        }\n    },\n\n    VisitObjectLiteral: function VisitObjectLiteral(eNode, context) {\n        var self = this;\n        var members = eNode.members.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var allLocal = members.every(function (member) {\n            return member.expression instanceof _index2.default.Expressions.ConstantExpression;\n        });\n\n        if (allLocal) {\n            var params = members.map(function (member) {\n                return { name: member.fieldName, value: member.expression.value };\n            });\n            var value = eNode.implementation(params);\n            return _index.Container.createConstantExpression(value, typeof value === 'undefined' ? 'undefined' : _typeof(value));\n        } else {\n            return _index.Container.createObjectLiteralExpression(members);\n        }\n    },\n\n    VisitThis: function VisitThis(eNode, resolver) {\n        return resolver.Visit(eNode, resolver);\n    },\n\n    VisitParameter: function VisitParameter(eNode, resolver) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<param name=\"resovler\" type=\"$data.Expressions.ParameterResolver\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n\n        var node;\n        ///TODO let the resolver handle lambdaReferences if it wants to deal with it\n        switch (eNode.nodeType) {\n            case _index2.default.Expressions.ExpressionType.Parameter:\n            case _index2.default.Expressions.ExpressionType.LambdaParameter:\n                node = resolver.Visit(eNode, resolver);\n                if (node.nodeType == _index2.default.Expressions.ExpressionType.LambdaParameter) {\n                    this.lambdaParamCache[node.name] = node;\n                }\n                return node;\n            case _index2.default.Expressions.ExpressionType.LambdaParameterReference:\n                var lambdaParam = this.lambdaParamCache[eNode.name];\n                if (lambdaParam) {\n                    node = _index.Container.createParameterExpression(eNode.name, lambdaParam.type, _index2.default.Expressions.ExpressionType.LambdaParameterReference);\n                    node.paramIndex = eNode.paramIndex;\n                    //node.typeName = lambdaParam.type.name || lambdaParam.type;\n                    return node;\n                }\n                break;\n            default:\n                return eNode;\n\n        }\n\n        return eNode;\n    },\n\n    VisitConstant: function VisitConstant(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        return eNode;\n    },\n\n    VisitFunction: function VisitFunction(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\n\n        var self = this;\n        var params = eNode.parameters.map(function (p, i) {\n            var result = self.Visit(p, context);\n            return result;\n        });\n        var body = self.Visit(eNode.body, context);\n        var result = new _index2.default.Expressions.FunctionExpression(eNode.name, params, body);\n\n        return result;\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        var expr = _index2.default.Expressions;\n\n        if (left instanceof expr.ConstantExpression && right instanceof expr.ConstantExpression) {\n            var result = eNode.implementation(left.value, right.value);\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n        }\n        return new _index.Container.createSimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\n    },\n\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        //var imp = $data.unaryOperators.getOperator(\n        var expr = _index2.default.Expressions;\n        if (operand instanceof expr.ConstantExpression) {\n            var result = eNode.operator.implementation(operand.value);\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n        }\n        return new _index.Container.createUnaryExpression(operand, eNode.operator, eNode.nodeType);\n    },\n\n    VisitProperty: function VisitProperty(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        var result;\n        if (expression instanceof _index2.default.Expressions.ConstantExpression && member instanceof _index2.default.Expressions.ConstantExpression) {\n            ///TODO implement checking for the member, throw on error\n            result = eNode.implementation(expression.value, member.value);\n\n            //Method call processed before\n            //if (typeof result === 'function') {\n            //    return new $data.Expressions.ConstantExpression(\n            //        function () { return result.apply(expression.value, arguments); });\n            //}\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result), expression.name + '$' + member.value);\n        }\n        if (expression === eNode.expression && member === eNode.member) return eNode;\n\n        result = _index.Container.createPropertyExpression(expression, member);\n        return result;\n    },\n\n    VisitCall: function VisitCall(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\n        function isExecutable(args, body, obj) {\n            return body instanceof _index2.default.Expressions.ConstantExpression && (\n            //global methods will not have a this.\n            !obj || obj instanceof _index2.default.Expressions.ConstantExpression) && args.every(function (item) {\n                return item instanceof _index2.default.Expressions.ConstantExpression;\n            });\n        }\n        var call = _index2.default.Expressions.ExpressionVisitor.prototype.VisitCall.apply(this, arguments);\n        var obj = call.expression;\n        var body = call.member;\n        var args = call.args;\n\n        function convertToValue(arg) {\n            if (arg instanceof _index2.default.Expressions.ConstantExpression) return arg.value;\n            return arg;\n        };\n\n        if (isExecutable(args, body, obj)) {\n            var fn = body.value;\n            if (typeof fn === 'string' && obj.value) {\n                fn = obj.value[fn];\n            }\n            if (typeof fn !== 'function') {\n                //TODO dig that name out from somewhere\n                _index.Guard.raise(\"Constant expression is not a method...\");\n            }\n            var value = eNode.implementation(obj.value, fn, args.map(convertToValue));\n            return new _index2.default.Expressions.ConstantExpression(value, typeof value === 'undefined' ? 'undefined' : _typeof(value));\n        }\n        return call;\n    }\n}, {});\n(0, _index.$C)(\"$data.Expressions.AggregatedVisitor\", _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(visitors) {\n        ///<param name=\"resolver\" type=\"Array\" elementType=\"$data.Expression.ParameterResolver\" />\n\n        this.Visit = function (node, context) {\n            for (var i = 0; i < visitors.length; i++) {\n                var n = visitors[i].Visit(node, context);\n                if (n !== node) return n;\n            }\n            return node;\n        };\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],95:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.SetExecutableVisitor', _index2.default.Expressions.ExpTreeVisitor, null, {\n    Visit: function Visit(eNode, context) {\n        switch (eNode.type) {\n            case LITERAL:\n                return this.VisitLiteral(eNode, context);\n            case VARIABLE:\n                return this.VisitVariable(eNode, context);\n            case MEMBERACCESS:\n                return this.VisitMember(eNode, context);\n            case BINARY:\n                return this.VisitBinary(eNode, context);\n            case UNARY:\n                return this.VisitUnary(eNode, context);\n            case INCDEC:\n                return this.VisitIncDec(eNode, context);\n            case EQUALITY:\n                return this.VisitEquality(eNode, context);\n            case DECISION:\n                return this.VisitDecision(eNode, context);\n            case METHODCALL:\n                return this.VisitMethodCall(eNode, context);\n            case NEW:\n                return this.VisitNew(eNode, context);\n            case JSONASSIGN:\n                return this.VisitJsonAssign(eNode, context);\n            case ARRAYACCESS:\n                return this.VisitArrayAccess(eNode, context);\n            default:\n                _index.Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right && left.executable && right.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(operand.executable, eNode.operator, operand);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(operand.executable, eNode.operator, operand, eNode.suffix);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right && left.executable && right.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right && left.executable && right.executable && expression.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(left.executable && right.executable && expression.executable, expression, left, right);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object === eNode.object && args === eNode.args && (object == null ? true : object.executable) == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(object == null ? true : object.executable, object, eNode.method, args);\n    },\n    VisitNew: function VisitNew(eNode, context) {\n        // { type:NEW, executable:true, values: [] };\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitJsonAssign: function VisitJsonAssign(eNode, context) {\n        // { type:JSONASSIGN, executable:true, left: variable, right: right }\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n        return _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n\n    VisitLiteral: function VisitLiteral(eNode, context) {\n        return { type: eNode.type, executable: true, value: eNode.value, valueType: eNode.valueType };\n    },\n    VisitVariable: function VisitVariable(eNode, context) {\n        if (_typeof(context.paramContext[eNode.name]) == undefined) // isn't param  //TODO: check ParamContext\n            _index.Guard.raise(\"Variable is not defined in the paramContext: \" + eNode.name);\n        //this._setExecutable(eNode, true);\n        return _index2.default.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, \"Math\", \"GLOBALOBJECT\");\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        var chain = this.GetMemberChain(eNode);\n        var firstMember = chain[0].name;\n        var isLambdaParam = context.lambdaParams.indexOf(firstMember) >= 0;\n        var isLocalParam = firstMember == context.paramsName; //TODO: check ParamContext // old: typeof context.paramContext[firstMember] != \"undefined\";\n        if (!isLocalParam && !isLambdaParam) _index.Guard.raise(\"Variable is not defined in the paramContext or the lambda parameters: \" + firstMember);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(isLocalParam, eNode.expression, eNode.member);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":28}],96:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _ExpressionNode = require('./ExpressionNode2.js');\n\nvar _ExpressionNode2 = _interopRequireDefault(_ExpressionNode);\n\nvar _ArrayLiteralExpression = require('./ArrayLiteralExpression.js');\n\nvar _ArrayLiteralExpression2 = _interopRequireDefault(_ArrayLiteralExpression);\n\nvar _CallExpression = require('./CallExpression.js');\n\nvar _CallExpression2 = _interopRequireDefault(_CallExpression);\n\nvar _CodeParser = require('./CodeParser.js');\n\nvar _CodeParser2 = _interopRequireDefault(_CodeParser);\n\nvar _ConstantExpression = require('./ConstantExpression.js');\n\nvar _ConstantExpression2 = _interopRequireDefault(_ConstantExpression);\n\nvar _FunctionExpression = require('./FunctionExpression.js');\n\nvar _FunctionExpression2 = _interopRequireDefault(_FunctionExpression);\n\nvar _ObjectFieldExpression = require('./ObjectFieldExpression.js');\n\nvar _ObjectFieldExpression2 = _interopRequireDefault(_ObjectFieldExpression);\n\nvar _ObjectLiteralExpression = require('./ObjectLiteralExpression.js');\n\nvar _ObjectLiteralExpression2 = _interopRequireDefault(_ObjectLiteralExpression);\n\nvar _PagingExpression = require('./PagingExpression.js');\n\nvar _PagingExpression2 = _interopRequireDefault(_PagingExpression);\n\nvar _ParameterExpression = require('./ParameterExpression.js');\n\nvar _ParameterExpression2 = _interopRequireDefault(_ParameterExpression);\n\nvar _PropertyExpression = require('./PropertyExpression.js');\n\nvar _PropertyExpression2 = _interopRequireDefault(_PropertyExpression);\n\nvar _SimpleBinaryExpression = require('./SimpleBinaryExpression.js');\n\nvar _SimpleBinaryExpression2 = _interopRequireDefault(_SimpleBinaryExpression);\n\nvar _ThisExpression = require('./ThisExpression.js');\n\nvar _ThisExpression2 = _interopRequireDefault(_ThisExpression);\n\nvar _ExpressionVisitor = require('./Visitors/ExpressionVisitor.js');\n\nvar _ExpressionVisitor2 = _interopRequireDefault(_ExpressionVisitor);\n\nvar _ParameterProcessor = require('./Visitors/ParameterProcessor.js');\n\nvar _ParameterProcessor2 = _interopRequireDefault(_ParameterProcessor);\n\nvar _GlobalContextProcessor = require('./Visitors/GlobalContextProcessor.js');\n\nvar _GlobalContextProcessor2 = _interopRequireDefault(_GlobalContextProcessor);\n\nvar _LocalContextProcessor = require('./Visitors/LocalContextProcessor.js');\n\nvar _LocalContextProcessor2 = _interopRequireDefault(_LocalContextProcessor);\n\nvar _LambdaParameterProcessor = require('./Visitors/LambdaParameterProcessor.js');\n\nvar _LambdaParameterProcessor2 = _interopRequireDefault(_LambdaParameterProcessor);\n\nvar _ParameterResolverVisitor = require('./Visitors/ParameterResolverVisitor.js');\n\nvar _ParameterResolverVisitor2 = _interopRequireDefault(_ParameterResolverVisitor);\n\nvar _LogicalSchemaBinderVisitor = require('./Visitors/LogicalSchemaBinderVisitor.js');\n\nvar _LogicalSchemaBinderVisitor2 = _interopRequireDefault(_LogicalSchemaBinderVisitor);\n\nvar _ExpTreeVisitor = require('./Visitors/ExpTreeVisitor.js');\n\nvar _ExpTreeVisitor2 = _interopRequireDefault(_ExpTreeVisitor);\n\nvar _SetExecutableVisitor = require('./Visitors/SetExecutableVisitor.js');\n\nvar _SetExecutableVisitor2 = _interopRequireDefault(_SetExecutableVisitor);\n\nvar _ExecutorVisitor = require('./Visitors/ExecutorVisitor.js');\n\nvar _ExecutorVisitor2 = _interopRequireDefault(_ExecutorVisitor);\n\nvar _ExpressionBuilder = require('./ExpressionBuilder.js');\n\nvar _ExpressionBuilder2 = _interopRequireDefault(_ExpressionBuilder);\n\nvar _AssociationInfoExpression = require('./EntityExpressions/AssociationInfoExpression.js');\n\nvar _AssociationInfoExpression2 = _interopRequireDefault(_AssociationInfoExpression);\n\nvar _CodeExpression = require('./EntityExpressions/CodeExpression.js');\n\nvar _CodeExpression2 = _interopRequireDefault(_CodeExpression);\n\nvar _CodeToEntityConverter = require('./EntityExpressions/CodeToEntityConverter.js');\n\nvar _CodeToEntityConverter2 = _interopRequireDefault(_CodeToEntityConverter);\n\nvar _ComplexTypeExpression = require('./EntityExpressions/ComplexTypeExpression.js');\n\nvar _ComplexTypeExpression2 = _interopRequireDefault(_ComplexTypeExpression);\n\nvar _EntityContextExpression = require('./EntityExpressions/EntityContextExpression.js');\n\nvar _EntityContextExpression2 = _interopRequireDefault(_EntityContextExpression);\n\nvar _EntityExpression = require('./EntityExpressions/EntityExpression.js');\n\nvar _EntityExpression2 = _interopRequireDefault(_EntityExpression);\n\nvar _EntityExpressionVisitor = require('./EntityExpressions/EntityExpressionVisitor.js');\n\nvar _EntityExpressionVisitor2 = _interopRequireDefault(_EntityExpressionVisitor);\n\nvar _ExpressionMonitor = require('./EntityExpressions/ExpressionMonitor.js');\n\nvar _ExpressionMonitor2 = _interopRequireDefault(_ExpressionMonitor);\n\nvar _EntityFieldExpression = require('./EntityExpressions/EntityFieldExpression.js');\n\nvar _EntityFieldExpression2 = _interopRequireDefault(_EntityFieldExpression);\n\nvar _EntityFieldOperationExpression = require('./EntityExpressions/EntityFieldOperationExpression.js');\n\nvar _EntityFieldOperationExpression2 = _interopRequireDefault(_EntityFieldOperationExpression);\n\nvar _EntitySetExpression = require('./EntityExpressions/EntitySetExpression.js');\n\nvar _EntitySetExpression2 = _interopRequireDefault(_EntitySetExpression);\n\nvar _FrameOperationExpression = require('./EntityExpressions/FrameOperationExpression.js');\n\nvar _FrameOperationExpression2 = _interopRequireDefault(_FrameOperationExpression);\n\nvar _FilterExpression = require('./EntityExpressions/FilterExpression.js');\n\nvar _FilterExpression2 = _interopRequireDefault(_FilterExpression);\n\nvar _IncludeExpression = require('./EntityExpressions/IncludeExpression.js');\n\nvar _IncludeExpression2 = _interopRequireDefault(_IncludeExpression);\n\nvar _MemberInfoExpression = require('./EntityExpressions/MemberInfoExpression.js');\n\nvar _MemberInfoExpression2 = _interopRequireDefault(_MemberInfoExpression);\n\nvar _OrderExpression = require('./EntityExpressions/OrderExpression.js');\n\nvar _OrderExpression2 = _interopRequireDefault(_OrderExpression);\n\nvar _ParametricQueryExpression = require('./EntityExpressions/ParametricQueryExpression.js');\n\nvar _ParametricQueryExpression2 = _interopRequireDefault(_ParametricQueryExpression);\n\nvar _ProjectionExpression = require('./EntityExpressions/ProjectionExpression.js');\n\nvar _ProjectionExpression2 = _interopRequireDefault(_ProjectionExpression);\n\nvar _QueryExpressionCreator = require('./EntityExpressions/QueryExpressionCreator.js');\n\nvar _QueryExpressionCreator2 = _interopRequireDefault(_QueryExpressionCreator);\n\nvar _QueryParameterExpression = require('./EntityExpressions/QueryParameterExpression.js');\n\nvar _QueryParameterExpression2 = _interopRequireDefault(_QueryParameterExpression);\n\nvar _RepresentationExpression = require('./EntityExpressions/RepresentationExpression.js');\n\nvar _RepresentationExpression2 = _interopRequireDefault(_RepresentationExpression);\n\nvar _ServiceOperationExpression = require('./EntityExpressions/ServiceOperationExpression.js');\n\nvar _ServiceOperationExpression2 = _interopRequireDefault(_ServiceOperationExpression);\n\nvar _ContinuationExpressionBuilder = require('./ContinuationExpressionBuilder.js');\n\nvar _ContinuationExpressionBuilder2 = _interopRequireDefault(_ContinuationExpressionBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28,\"./ArrayLiteralExpression.js\":49,\"./CallExpression.js\":50,\"./CodeParser.js\":51,\"./ConstantExpression.js\":52,\"./ContinuationExpressionBuilder.js\":53,\"./EntityExpressions/AssociationInfoExpression.js\":54,\"./EntityExpressions/CodeExpression.js\":55,\"./EntityExpressions/CodeToEntityConverter.js\":56,\"./EntityExpressions/ComplexTypeExpression.js\":57,\"./EntityExpressions/EntityContextExpression.js\":58,\"./EntityExpressions/EntityExpression.js\":59,\"./EntityExpressions/EntityExpressionVisitor.js\":60,\"./EntityExpressions/EntityFieldExpression.js\":61,\"./EntityExpressions/EntityFieldOperationExpression.js\":62,\"./EntityExpressions/EntitySetExpression.js\":63,\"./EntityExpressions/ExpressionMonitor.js\":64,\"./EntityExpressions/FilterExpression.js\":65,\"./EntityExpressions/FrameOperationExpression.js\":66,\"./EntityExpressions/IncludeExpression.js\":67,\"./EntityExpressions/MemberInfoExpression.js\":68,\"./EntityExpressions/OrderExpression.js\":69,\"./EntityExpressions/ParametricQueryExpression.js\":70,\"./EntityExpressions/ProjectionExpression.js\":71,\"./EntityExpressions/QueryExpressionCreator.js\":72,\"./EntityExpressions/QueryParameterExpression.js\":73,\"./EntityExpressions/RepresentationExpression.js\":74,\"./EntityExpressions/ServiceOperationExpression.js\":75,\"./ExpressionBuilder.js\":76,\"./ExpressionNode2.js\":77,\"./FunctionExpression.js\":78,\"./ObjectFieldExpression.js\":79,\"./ObjectLiteralExpression.js\":80,\"./PagingExpression.js\":81,\"./ParameterExpression.js\":82,\"./PropertyExpression.js\":83,\"./SimpleBinaryExpression.js\":84,\"./ThisExpression.js\":85,\"./Visitors/ExecutorVisitor.js\":86,\"./Visitors/ExpTreeVisitor.js\":87,\"./Visitors/ExpressionVisitor.js\":88,\"./Visitors/GlobalContextProcessor.js\":89,\"./Visitors/LambdaParameterProcessor.js\":90,\"./Visitors/LocalContextProcessor.js\":91,\"./Visitors/LogicalSchemaBinderVisitor.js\":92,\"./Visitors/ParameterProcessor.js\":93,\"./Visitors/ParameterResolverVisitor.js\":94,\"./Visitors/SetExecutableVisitor.js\":95}],97:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ItemStoreClass', null, null, {\n    constructor: function constructor() {\n        var self = this;\n        self.itemStoreConfig = {\n            aliases: {},\n            contextTypes: {}\n        };\n\n        self.resetStoreToDefault('local', true);\n        _index2.default.addStore = function () {\n            return self.addItemStoreAlias.apply(self, arguments);\n        };\n        _index2.default.implementation = self.implementation;\n\n        _index2.default.Entity.addMember('storeToken', {\n            get: function get() {\n                if (this.storeConfigs && this.storeConfigs['default']) return this.storeConfigs.stores[this.storeConfigs['default']];\n            },\n            set: function set(value) {\n                self._setTypeStoreConfig(this, 'default', value);\n            }\n        }, true);\n    },\n    itemStoreConfig: {},\n    attachMode: _index2.default.EntityAttachMode ? _index2.default.EntityAttachMode.KeepChanges : true,\n\n    addItemStoreAlias: function addItemStoreAlias(name, contextFactoryOrToken, isDefault) {\n        var self = this;\n        var promise = new _index2.default.PromiseHandler();\n        var callback = promise.createCallback();\n\n        if ('string' === typeof name) {\n            //storeToken\n            if ('object' === (typeof contextFactoryOrToken === 'undefined' ? 'undefined' : _typeof(contextFactoryOrToken)) && 'factory' in contextFactoryOrToken) {\n                var type = _index.Container.resolveType(contextFactoryOrToken.typeName);\n\n                self.itemStoreConfig.aliases[name] = contextFactoryOrToken.factory;\n                self.itemStoreConfig.contextTypes[name] = type;\n                if (isDefault) {\n                    self.itemStoreConfig['default'] = name;\n                }\n\n                callback.success();\n                return promise.getPromise();\n            }\n            //contextFactory\n            else if ('function' === typeof contextFactoryOrToken) {\n                    var preContext = contextFactoryOrToken();\n                    var contextPromise;\n                    if (preContext && preContext instanceof _index2.default.EntityContext) {\n                        callback.success(preContext);\n                        contextPromise = promise.getPromise();\n                    } else {\n                        contextPromise = preContext;\n                    }\n\n                    return contextPromise.then(function (ctx) {\n                        if (typeof ctx === 'function') {\n                            //factory resolve factory\n                            return self.addItemStoreAlias(name, ctx, isDefault);\n                        }\n\n                        if (ctx instanceof _index2.default.EntityContext) {\n                            return ctx.onReady().then(function (ctx) {\n                                self.itemStoreConfig.aliases[name] = contextFactoryOrToken;\n                                self.itemStoreConfig.contextTypes[name] = ctx.getType();\n                                if (isDefault) {\n                                    self.itemStoreConfig['default'] = name;\n                                }\n\n                                return ctx;\n                            });\n                        } else {\n                            promise = new _index2.default.PromiseHandler();\n                            callback = promise.createCallback();\n                            callback.error(new _index.Exception('factory dont have context instance', 'Invalid arguments'));\n                            return promise.getPromise();\n                        }\n                    });\n                }\n        }\n\n        callback.error(new _index.Exception('Name or factory missing', 'Invalid arguments'));\n        return promise.getPromise();\n    },\n    resetStoreToDefault: function resetStoreToDefault(name, isDefault) {\n        this.itemStoreConfig.aliases[name] = this._getDefaultItemStoreFactory;\n        delete this.itemStoreConfig.contextTypes[name];\n        if (isDefault) {\n            this.itemStoreConfig['default'] = name;\n        }\n    },\n    _setStoreAlias: function _setStoreAlias(entity, storeToken) {\n        if ('object' === (typeof storeToken === 'undefined' ? 'undefined' : _typeof(storeToken)) && !entity.storeToken) entity.storeToken = storeToken;\n        return entity;\n    },\n    _getStoreAlias: function _getStoreAlias(entity, storeAlias) {\n        var type;\n        if (entity instanceof _index2.default.Entity) {\n            var alias = storeAlias || entity.storeToken;\n            if (alias) {\n                return alias;\n            } else {\n                type = entity.getType();\n            }\n        } else {\n            type = entity;\n        }\n\n        return storeAlias || (type.storeConfigs ? type.storeConfigs['default'] : undefined) || type.storeToken;\n    },\n    _getStoreContext: function _getStoreContext(aliasOrToken, type, nullIfInvalid) {\n        var contextPromise = this._getContextPromise(aliasOrToken, type);\n\n        if (!contextPromise || contextPromise instanceof _index2.default.EntityContext) {\n            var promise = new _index2.default.PromiseHandler();\n            var callback = promise.createCallback();\n            callback.success(contextPromise);\n            contextPromise = promise.getPromise();\n        }\n\n        return contextPromise.then(function (context) {\n            if (context instanceof _index2.default.EntityContext) {\n                return context.onReady();\n            } else if (nullIfInvalid) {\n                return null;\n            } else {\n                var promise = new _index2.default.PromiseHandler();\n                var callback = promise.createCallback();\n                callback.error(new _index.Exception('factory return type error', 'Error'));\n                return promise.getPromise();\n            }\n        });\n    },\n    _getContextPromise: function _getContextPromise(aliasOrToken, type) {\n        /*Token*/\n        if (aliasOrToken && 'object' === (typeof aliasOrToken === 'undefined' ? 'undefined' : _typeof(aliasOrToken)) && 'function' === typeof aliasOrToken.factory) {\n            return aliasOrToken.factory(type);\n        } else if (aliasOrToken && 'object' === (typeof aliasOrToken === 'undefined' ? 'undefined' : _typeof(aliasOrToken)) && 'object' === _typeof(aliasOrToken.args) && 'string' === typeof aliasOrToken.typeName) {\n            var type = _index.Container.resolveType(aliasOrToken.typeName);\n            return new type(JSON.parse(JSON.stringify(aliasOrToken.args)));\n        }\n        /*resolve alias from type (Token)*/\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken] && typeof type.storeConfigs.stores[aliasOrToken].factory === 'function') {\n                return type.storeConfigs.stores[aliasOrToken].factory();\n            }\n            /*resolve alias from type (constructor options)*/\n            else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken]) {\n                    return this._getDefaultItemStoreFactory(type, type.storeConfigs.stores[aliasOrToken]);\n                }\n                /*resolve alias from ItemStore (factories)*/\n                else if (aliasOrToken && 'string' === typeof aliasOrToken && this.itemStoreConfig.aliases[aliasOrToken]) {\n                        return this.itemStoreConfig.aliases[aliasOrToken](type);\n                    }\n                    /*token is factory*/\n                    else if (aliasOrToken && 'function' === typeof aliasOrToken) {\n                            return aliasOrToken();\n                        }\n                        /*default no hint*/\n                        else {\n                                return this.itemStoreConfig.aliases[this.itemStoreConfig['default']](type);\n                            }\n    },\n    _getStoreEntitySet: function _getStoreEntitySet(storeAlias, instanceOrType) {\n        var aliasOrToken = this._getStoreAlias(instanceOrType, storeAlias);\n        var type = \"function\" === typeof instanceOrType ? instanceOrType : instanceOrType.getType();;\n\n        return this._getStoreContext(aliasOrToken, type).then(function (ctx) {\n            var entitySet = ctx.getEntitySetFromElementType(type);\n            if (!entitySet) {\n                var d = new _index2.default.PromiseHandler();\n                var callback = d.createCallback();\n                callback.error(\"EntitySet not exist for \" + type.fullName);\n                return d.getPromise();\n            }\n            return entitySet;\n        });\n    },\n    _getDefaultItemStoreFactory: function _getDefaultItemStoreFactory(instanceOrType, initStoreConfig) {\n        if (instanceOrType) {\n            var type = \"function\" === typeof instanceOrType ? instanceOrType : instanceOrType.getType();\n            var typeName = _index2.default.Container.resolveName(type) + \"_items\";\n            var typeName = typeName.replace(/\\./g, \"_\");\n\n            var storeConfig = _index2.default.typeSystem.extend({\n                collectionName: initStoreConfig && initStoreConfig.collectionName ? initStoreConfig.collectionName : 'Items',\n                tableName: typeName,\n                initParam: { provider: 'local', databaseName: typeName }\n            }, initStoreConfig);\n\n            var contextDef = {};\n            contextDef[storeConfig.collectionName] = { type: _index2.default.EntitySet, elementType: type };\n            if (storeConfig.tableName) contextDef[storeConfig.collectionName]['tableName'] = storeConfig.tableName;\n\n            var inMemoryType = _index2.default.EntityContext.extend(typeName, contextDef);\n            var ctx = new inMemoryType(storeConfig.initParam);\n            if (initStoreConfig && (typeof initStoreConfig === 'undefined' ? 'undefined' : _typeof(initStoreConfig)) === 'object') initStoreConfig.factory = ctx._storeToken.factory;\n            return ctx;\n        }\n        return undefined;\n    },\n    implementation: function implementation(name, contextOrAlias) {\n        var self = _index2.default.ItemStore;\n        var result;\n\n        if (typeof contextOrAlias === 'string') {\n            contextOrAlias = self.itemStoreConfig.contextTypes[contextOrAlias];\n        } else if (contextOrAlias instanceof _index2.default.EntityContext) {\n            contextOrAlias = contextOrAlias.getType();\n        } else if (!(typeof contextOrAlias === 'function' && contextOrAlias.isAssignableTo)) {\n            contextOrAlias = self.itemStoreConfig.contextTypes[self.itemStoreConfig['default']];\n        }\n\n        if (contextOrAlias) {\n            result = self._resolveFromContext(contextOrAlias, name);\n        }\n\n        if (!result) {\n            result = _index.Container.resolveType(name);\n        }\n\n        return result;\n    },\n    _resolveFromContext: function _resolveFromContext(contextType, name) {\n        var memDefs = contextType.memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < memDefs.length; i++) {\n            var memDef = memDefs[i];\n            if (memDef.type) {\n                var memDefType = _index.Container.resolveType(memDef.type);\n                if (memDefType.isAssignableTo && memDefType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(memDef.elementType);\n                    if (elementType.name === name) {\n                        return elementType;\n                    }\n                }\n            }\n        }\n        return null;\n    },\n\n    //Entity Instance\n    EntityInstanceSave: function EntityInstanceSave(storeAlias, hint, attachMode) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        return self._getStoreEntitySet(storeAlias, entity).then(function (entitySet) {\n            return self._getSaveMode(entity, entitySet, hint, storeAlias).then(function (mode) {\n                mode = mode || 'add';\n                switch (mode) {\n                    case 'add':\n                        entitySet.add(entity);\n                        break;\n                    case 'attach':\n                        entitySet.attach(entity, attachMode || true);\n                        break;\n                    default:\n                        var d = new _index2.default.PromiseHandler();\n                        var callback = d.createCallback();\n                        callback.error('save mode not supported: ' + mode);\n                        return d.getPromise();\n                }\n\n                return entitySet.entityContext.saveChanges().then(function () {\n                    self._setStoreAlias(entity, entitySet.entityContext.storeToken);return entity;\n                });\n            });\n        });\n    },\n    EntityInstanceRemove: function EntityInstanceRemove(storeAlias) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        return self._getStoreEntitySet(storeAlias, entity).then(function (entitySet) {\n            entitySet.remove(entity);\n\n            return entitySet.entityContext.saveChanges().then(function () {\n                return entity;\n            });\n        });\n    },\n    EntityInstanceRefresh: function EntityInstanceRefresh(storeAlias, keepStore) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        var entityType = entity.getType();\n\n        var key = self._getKeyObjectFromEntity(entity, entityType);\n\n        return entityType.read(key, storeAlias).then(function (loadedEntity) {\n            entityType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                entity[memDef.name] = loadedEntity[memDef.name];\n            });\n            entity.storeToken = (keepStore ? entity.storeToken : undefined) || loadedEntity.storeToken;\n            entity.changedProperties = undefined;\n            return entity;\n        });\n    },\n\n    //Entity Type\n    EntityInheritedTypeProcessor: function EntityInheritedTypeProcessor(type) {\n        var self = _index2.default.ItemStore;\n        type.readAll = self.EntityTypeReadAll(type);\n        type.read = self.EntityTypeRead(type);\n        type.removeAll = self.EntityTypeRemoveAll(type);\n        type.remove = self.EntityTypeRemove(type);\n        type.get = self.EntityTypeGet(type); //Not complete\n        type.save = self.EntityTypeSave(type);\n        type.addMany = self.EntityTypeAddMany(type);\n        type.itemCount = self.EntityTypeItemCount(type);\n        type.query = self.EntityTypeQuery(type);\n        type.takeFirst = self.EntityTypeTakeFirst(type);\n\n        type.setStore = self.EntityTypeSetStore(type);\n    },\n    EntityTypeReadAll: function EntityTypeReadAll(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.forEach(function (item) {\n                    self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n    EntityTypeRemoveAll: function EntityTypeRemoveAll(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.toArray().then(function (items) {\n                    items.forEach(function (item) {\n                        entitySet.remove(item);\n                    });\n\n                    return entitySet.entityContext.saveChanges().then(function () {\n                        return items;\n                    });\n                });\n            });\n        };\n    },\n    EntityTypeRead: function EntityTypeRead(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                try {\n                    var singleParam = self._findByIdQueryable(entitySet, key);\n                    return entitySet.single(singleParam.predicate, singleParam.thisArgs).then(function (item) {\n                        return self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                    });\n                } catch (e) {\n                    var d = new _index2.default.PromiseHandler();\n                    var callback = d.createCallback();\n                    callback.error(e);\n                    return d.getPromise();\n                }\n            });\n        };\n    },\n    EntityTypeGet: function EntityTypeGet(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            var item = new type(self._getKeyObjectFromEntity(key));\n            item.refresh(storeAlias);\n            return item;\n        };\n    },\n    EntityTypeSave: function EntityTypeSave(type) {\n        return function (initData, storeAlias, hint) {\n\n            var self = _index2.default.ItemStore;\n            var instance = new type(initData);\n            return instance.save(storeAlias, hint);\n        };\n    },\n    EntityTypeAddMany: function EntityTypeAddMany(type) {\n        return function (initDatas, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                var items = entitySet.addMany(initDatas);\n                return entitySet.entityContext.saveChanges().then(function () {\n                    return items;\n                });\n            });\n        };\n    },\n    EntityTypeRemove: function EntityTypeRemove(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            var entityPk = type.memberDefinitions.getKeyProperties();\n            var entity;\n            if (entityPk.length === 1) {\n                var obj = {};\n                obj[entityPk[0].name] = key;\n                entity = new type(obj);\n            } else {\n                entity = new type(key);\n            }\n            return entity.remove(storeAlias);\n        };\n    },\n    EntityTypeItemCount: function EntityTypeItemCount(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.length();\n            });\n        };\n    },\n    EntityTypeQuery: function EntityTypeQuery(type) {\n        return function (predicate, thisArg, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.filter(predicate, thisArg).forEach(function (item) {\n                    self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n    EntityTypeTakeFirst: function EntityTypeTakeFirst(type) {\n        return function (predicate, thisArg, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.first(predicate, thisArg).then(function (item) {\n                    return self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n\n    EntityTypeSetStore: function EntityTypeSetStore(type) {\n        return function (name, config) {\n            if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object' && typeof config === 'undefined') {\n                config = name;\n                name = 'default';\n            }\n\n            var self = _index2.default.ItemStore;\n\n            var defStoreConfig = {};\n            if (config) {\n                if (config.tableName) {\n                    defStoreConfig.tableName = config.tableName;\n                    delete config.tableName;\n                }\n\n                if (config.collectionName) {\n                    defStoreConfig.collectionName = config.collectionName;\n                    delete config.collectionName;\n                }\n\n                if (typeof config.dataSource === 'string') {\n                    var ds = config.dataSource;\n                    if (ds.lastIndexOf('/') === ds.length - 1) {\n                        ds = ds.substring(0, ds.lastIndexOf('/'));\n                    }\n                    var parsedApiUrl = ds.substring(0, ds.lastIndexOf('/'));\n                    if (!defStoreConfig.tableName) defStoreConfig.tableName = ds.substring(ds.lastIndexOf('/') + 1);\n\n                    var provider = config.provider || config.name;\n                    switch (provider) {\n                        case 'oData':\n                            config.oDataServiceHost = config.oDataServiceHost || parsedApiUrl;\n                            break;\n                        case 'webApi':\n                            config.apiUrl = config.apiUrl || parsedApiUrl;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            } else {\n                config = { name: 'local' };\n            }\n\n            defStoreConfig.initParam = config;\n            self._setTypeStoreConfig(type, name, defStoreConfig);\n\n            return type;\n        };\n    },\n    _setTypeStoreConfig: function _setTypeStoreConfig(type, name, config) {\n        if (!type.storeConfigs) {\n            type.storeConfigs = {\n                stores: {}\n            };\n        }\n        type.storeConfigs.stores[name] = config;\n        if (name === 'default') {\n            type.storeConfigs['default'] = name;\n        }\n    },\n\n    _findByIdQueryable: function _findByIdQueryable(set, keys) {\n        var keysProps = set.defaultType.memberDefinitions.getKeyProperties();\n        if (keysProps.length > 1 && keys && 'object' === (typeof keys === 'undefined' ? 'undefined' : _typeof(keys))) {\n            var predicate = \"\",\n                thisArgs = {};\n            for (var i = 0; i < keysProps.length; i++) {\n                if (i > 0) predicate += \" && \";\n\n                var key = keysProps[i];\n                predicate += \"it.\" + key.name + \" == this.\" + key.name;\n                thisArgs[key.name] = keys[key.name];\n            }\n\n            return {\n                predicate: predicate,\n                thisArgs: thisArgs\n            };\n        } else if (keysProps.length === 1) {\n            return {\n                predicate: \"it.\" + keysProps[0].name + \" == this.value\",\n                thisArgs: { value: keys }\n            };\n        } else {\n            throw 'invalid keys';\n        }\n    },\n    _getKeyObjectFromEntity: function _getKeyObjectFromEntity(obj, entityType) {\n        var key;\n        var keyDefs = entityType.memberDefinitions.getKeyProperties();\n        if (keyDefs.length === 1) key = obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' ? obj[keyDefs[0].name] : obj;else {\n            key = {};\n\n            for (var i = 0; i < keyDefs.length; i++) {\n                key[keyDefs[0].name] = obj ? obj[keyDefs[0].name] : obj;\n            }\n        }\n\n        return key;\n    },\n    _getSaveMode: function _getSaveMode(entity, entitySet, hint, storeAlias) {\n        var self = this;\n        var promise = new _index2.default.PromiseHandler();\n        var callback = promise.createCallback();\n        var entityType = entity.getType();\n\n        switch (true) {\n            case hint === 'update':\n                callback.success('attach');break;\n            case hint === 'new':\n                callback.success('add');break;\n            case false === entityType.memberDefinitions.getKeyProperties().every(function (keyDef) {\n                return entity[keyDef.name];\n            }):\n                callback.success('add');break;\n            case !!entity.storeToken:\n                callback.success('attach');break;\n                break;\n            default:\n                //use the current entity store informations\n                storeAlias = this._getStoreAlias(entity, storeAlias);\n                entityType.read(self._getKeyObjectFromEntity(entity, entityType), storeAlias).then(function () {\n                    callback.success('attach');\n                }).fail(function () {\n                    callback.success('add');\n                });\n                break;\n        }\n\n        return promise.getPromise();\n    },\n\n    //EntityContext\n    ContextRegister: function ContextRegister(storageProviderCfg) {\n        //context instance\n        var self = this;\n        if (typeof storageProviderCfg.name === \"string\") {\n            storageProviderCfg.name = [storageProviderCfg.name];\n        }\n\n        var args = JSON.parse(JSON.stringify(storageProviderCfg));\n        this.storeToken = {\n            typeName: this.getType().fullName,\n            args: args,\n            factory: function factory() {\n                return new (self.getType())(args);\n            }\n        };\n\n        //set elementType storetoken\n        var members = this.getType().memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < members.length; i++) {\n            var item = members[i];\n            if (item.type) {\n                var itemResolvedDataType = _index.Container.resolveType(item.type);\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(item.elementType);\n                    if (!elementType.storeToken) {\n                        elementType.storeToken = this.storeToken;\n                    }\n                }\n            }\n        }\n    },\n    QueryResultModifier: function QueryResultModifier(query) {\n        var self = _index2.default.ItemStore;\n        var context = query.context;\n        var type = query.modelBinderConfig.$type;\n        if ('string' === typeof type) {\n            type = _index.Container.resolveType(type);\n        }\n\n        if (type === _index2.default.Array && query.modelBinderConfig.$item && query.modelBinderConfig.$item.$type) {\n            type = query.modelBinderConfig.$item.$type;\n        }\n\n        //TODO: runs when model binding missed (inmemory)\n        if (typeof type === 'undefined' && query.result && query.result[0] instanceof _index2.default.Entity) {\n            var navProps = !type ? [] : type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                return !!memDef.inverseProperty;\n            });\n\n            for (var i = 0; i < query.result.length; i++) {\n                self._setStoreAlias(query.result[i], context.storeToken);\n\n                for (var j = 0; j < navProps.length; j++) {\n                    var navProp = navProps[j];\n                    if (query.result[i][navProp.name] instanceof _index2.default.Entity) {\n                        self._setStoreAlias(query.result[i][navProp.name], context.storeToken);\n                    } else if (Array.isArray(query.result[i][navProp.name])) {\n                        for (var k = 0; k < query.result[i][navProp.name].length; k++) {\n                            if (query.result[i][navProp.name][k] instanceof _index2.default.Entity) {\n                                self._setStoreAlias(query.result[i][navProp.name][k], context.storeToken);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n_index2.default.ItemStore = new _index2.default.ItemStoreClass();\n\n_index2.default.Entity.addMember('field', function (propName) {\n    var def = this.memberDefinitions.getMember(propName);\n    if (def) {\n        if (def.definedBy === this) {\n            return new _index2.default.MemberWrapper(def);\n        } else {\n            _index.Guard.raise(new _index.Exception(\"Member '\" + propName + \"' defined on '\" + def.definedBy.fullName + \"'!\", 'Invalid Operation'));\n        }\n    } else {\n        _index.Guard.raise(new _index.Exception(\"Member '\" + propName + \"' not exists!\", 'Invalid Operation'));\n    }\n\n    return this;\n}, true);\n\n_index2.default.Class.define('$data.MemberWrapper', null, null, {\n    constructor: function constructor(memberDefinition) {\n        this.memberDefinition = memberDefinition;\n    },\n    setKey: function setKey(value) {\n        this.memberDefinition.key = value || value === undefined ? true : false;\n        return this;\n    },\n    setComputed: function setComputed(value) {\n        this.memberDefinition.computed = value || value === undefined ? true : false;\n        return this;\n    },\n    setRequired: function setRequired(value) {\n        this.memberDefinition.required = value || value === undefined ? true : false;\n        return this;\n    },\n    setNullable: function setNullable(value) {\n        this.memberDefinition.nullable = value || value === undefined ? true : false;\n        return this;\n    },\n    changeDefinition: function changeDefinition(attr, value) {\n        this.memberDefinition[attr] = value;\n        return this;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],98:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ModelBinder', null, null, {\n\n    constructor: function constructor(context) {\n        this.context = context;\n        this.providerName = null;\n        if (this.context.storageProvider && typeof this.context.storageProvider.getType === 'function') {\n            this.references = !(this.context.storageProvider.providerConfiguration.modelBinderOptimization || false);\n            this.providerName = this.context.storageProvider.providerName;\n            if (!this.providerName) {\n                for (var i in _index2.default.RegisteredStorageProviders) {\n                    if (_index2.default.RegisteredStorageProviders[i] === this.context.storageProvider.getType()) {\n                        this.providerName = i;\n                        break;\n                    }\n                }\n            }\n        }\n    },\n\n    _deepExtend: function _deepExtend(o, r) {\n        if (o === null || o === undefined) {\n            return r;\n        }\n        for (var i in r) {\n            if (o.hasOwnProperty(i)) {\n                if (_typeof(r[i]) === 'object') {\n                    if (Array.isArray(r[i])) {\n                        for (var j = 0; j < r[i].length; j++) {\n                            if (o[i].indexOf(r[i][j]) < 0) {\n                                o[i].push(r[i][j]);\n                            }\n                        }\n                    } else this._deepExtend(o[i], r[i]);\n                }\n            } else {\n                o[i] = r[i];\n            }\n        }\n        return this._finalize(o);\n    },\n\n    _finalize: function _finalize(o) {\n        if (o instanceof _index2.default.Entity) {\n            o.changedProperties = undefined;\n            o.storeToken = this.context.storeToken;\n        }\n        return o;\n    },\n\n    _buildSelector: function _buildSelector(meta, context) {\n        if (meta.$selector) {\n            if (!Array.isArray(meta.$selector)) {\n                meta.$selector = [meta.$selector];\n            }\n\n            for (var i = 0; i < meta.$selector.length; i++) {\n                var selector = meta.$selector[i].replace('json:', '');\n                context.src += 'if(';\n                var path = selector.split('.');\n                for (var j = 0; j < path.length; j++) {\n                    context.src += 'di.' + path.slice(0, j + 1).join('.') + (j < path.length - 1 ? ' && ' : ' !== undefined && typeof di.' + selector + ' === \"object\"');\n                }\n                context.src += '){di = di.' + selector + ';}' + (i < meta.$selector.length - 1 ? 'else ' : '');\n            }\n\n            context.src += 'if (di === null){';\n            if (context.iter) context.src += context.iter + ' = null;';\n            context.src += 'return null;';\n            context.src += '}';\n        }\n    },\n\n    _buildKey: function _buildKey(name, type, keys, context, data) {\n        if (keys) {\n            var type = _index.Container.resolveType(type);\n            var typeIndex = _index.Container.getIndex(type);\n            type = type.fullName || type.name;\n            context.src += 'var ' + name + 'Fn = function(di){';\n            if (!Array.isArray(keys) || keys.length == 1) {\n                if (typeof keys !== 'string') keys = keys[0];\n                context.src += 'if (typeof di.' + keys + ' === \"undefined\") return undefined;';\n                context.src += 'if (di.' + keys + ' === null) return null;';\n                context.src += 'var key = (\"' + type + '_' + typeIndex + '_' + keys + '#\" + di.' + keys + ');';\n            } else {\n                context.src += 'var key = \"\";';\n                for (var i = 0; i < keys.length; i++) {\n                    var id = _typeof(keys[i]) !== 'object' ? keys[i] : keys[i].$source;\n                    context.src += 'if (typeof di.' + id + ' === \"undefined\") return undefined;';\n                    context.src += 'if (di.' + id + ' === null) return null;';\n                    context.src += 'key += (\"' + type + '_' + typeIndex + '_' + id + '#\" + di.' + id + ');';\n                }\n            }\n\n            context.src += 'return key;};';\n        }\n\n        context.src += 'var ' + name + ' = ' + (keys ? name + 'Fn(' + (data || 'di') + ')' : 'undefined') + ';';\n    },\n\n    build: function build(meta, context) {\n        if (meta.$selector) {\n            if (!Array.isArray(meta.$selector)) meta.$selector = [meta.$selector];\n            for (var i = 0; i < meta.$selector.length; i++) {\n                meta.$selector[i] = meta.$selector[i].replace('json:', '');\n            }\n        }\n\n        if (meta.$value) {\n            if (typeof meta.$value === 'function') {\n                context.src += 'var di = di || data;';\n                context.src += 'var fn = function(){ return meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + '.$value.call(self, meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + ', di); };';\n                if (meta.$type) {\n                    var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n                    var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n                    var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                    if (converter) {\n                        context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](fn())';\n                    } else {\n                        context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(fn())';\n                    }\n                } else context.item = 'fn()';\n            } else if (meta.$type) {\n                var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                if (converter) {\n                    context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](' + meta.$value + ')';\n                } else {\n                    context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(' + meta.$value + ')';\n                }\n            } else context.item = meta.$value;\n        } else if (meta.$source) {\n            var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n            var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\n            if (!context.forEach) context.src += 'var di = data;';\n            context.item = item;\n            this._buildSelector(meta, context);\n            if (converter) {\n                context.src += 'var ' + item + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di.' + meta.$source + ');';\n            } else {\n                context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(di.' + meta.$source + ');';\n            }\n        } else if (meta.$item) {\n            context.meta.push('$item');\n            var iter = context.item && context.current ? context.item + '.' + context.current : context.item ? context.item : 'result';\n            context.iter = iter;\n            if (iter.indexOf('.') < 0) context.src += 'var ' + iter + ';';\n            context.src += 'var fn = function(di){';\n            if (meta.$selector) {\n                context.src += 'if (typeof di !== \"undefined\" && !(Array.isArray(di))){';\n                this._buildSelector(meta, context);\n                context.src += '}';\n            }\n            if (this.references && meta.$keys) this._buildKey('forKey', meta.$type, meta.$keys, context);\n            context.src += iter + ' = typeof ' + iter + ' == \"undefined\" ? [] : ' + iter + ';';\n            if (this.references && meta.$item.$keys) {\n                var keycacheName = 'keycache_' + iter.replace(/\\./gi, '_');\n                context.src += 'var ' + keycacheName + ';';\n                context.src += 'var kci = keycacheIter.indexOf(' + iter + ');';\n                context.src += 'if (kci < 0){';\n                context.src += keycacheName + ' = [];';\n                context.src += 'keycache.push(' + keycacheName + ');';\n                context.src += 'keycacheIter.push(' + iter + ');';\n                context.src += '}else{';\n                context.src += keycacheName + ' = keycache[kci];';\n                context.src += '}';\n            }\n            context.iter = undefined;\n            context.forEach = true;\n            var itemForKey = 'itemForKey_' + iter.replace(/\\./gi, '_');\n            context.src += 'var forEachFn = function(di, i){';\n            context.src += 'var diBackup = di;';\n            if (this.providerName == \"sqLite\" && this.references && meta.$item.$keys) this._buildKey(itemForKey, meta.$type, meta.$item.$keys, context);\n            var item = context.item || 'iter';\n            context.item = item;\n            if (!meta.$item.$source) {\n                this._buildSelector(meta.$item, context);\n            }\n            this.build(meta.$item, context);\n            if (this.references && meta.$keys) {\n                context.src += 'if (forKey){';\n                context.src += 'if (cache[forKey]){';\n                context.src += iter + ' = cache[forKey];';\n                context.src += 'if (' + iter + '.indexOf(' + (context.item || item) + ') < 0){';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}}else{';\n                context.src += 'cache[forKey] = ' + iter + ';';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}}else{';\n                if (this.references && meta.$item.$keys) this._buildKey('cacheKey', meta.$type, meta.$item.$keys, context, 'diBackup');\n                context.src += 'if (typeof cacheKey != \"undefined\" && cacheKey !== null){';\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + ' && cacheKey){';\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(cacheKey) < 0){';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(cacheKey);';\n                context.src += '}';\n                context.src += '}else{';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}';\n                context.src += '}';\n                context.src += '}';\n            } else {\n                if (this.references && meta.$item.$keys) {\n                    context.src += 'if (typeof ' + itemForKey + ' !== \"undefined\" && ' + itemForKey + ' !== null){';\n                    context.src += 'if (typeof keycache_' + iter.replace(/\\./gi, '_') + ' !== \"undefined\" && ' + itemForKey + '){';\n                    context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(' + itemForKey + ') < 0){';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(' + itemForKey + ');';\n                    context.src += '}}else{';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += '}}else{';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += '}';\n                } else {\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                }\n            }\n            context.src += '};';\n            context.src += 'if (Array.isArray(di)) di.forEach(forEachFn);';\n            context.src += 'else forEachFn(di, 0);';\n            context.forEach = false;\n            context.item = null;\n            context.src += '};fn(typeof di === \"undefined\" ? data : di);';\n            context.meta.pop();\n        } else if (meta.$type) {\n            if (!context.forEach) {\n                context.src += 'if (typeof di === \"undefined\"){';\n                context.src += 'var di = data;';\n                this._buildSelector(meta, context);\n                context.src += '}';\n            }\n            var resolvedType = _index.Container.resolveType(meta.$type);\n            var type = _index.Container.resolveName(resolvedType);\n            var typeIndex = _index.Container.getIndex(resolvedType);\n            var isEntityType = resolvedType.isAssignableTo && resolvedType.isAssignableTo(_index2.default.Entity);\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\n            if (context.item == item) item += 'new_';\n            context.item = item;\n\n            var isPrimitive = false;\n            if (!meta.$source && !meta.$value && resolvedType !== _index2.default.Array && resolvedType !== _index2.default.Object && !resolvedType.isAssignableTo) isPrimitive = true;\n            if (resolvedType === _index2.default.Object || resolvedType === _index2.default.Array) {\n                var keys = Object.keys(meta);\n                if (keys.length == 1 || keys.length == 2 && meta.$selector) isPrimitive = true;\n            }\n\n            if (isPrimitive) {\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                if (converter) {\n                    context.src += 'var ' + item + ' = di != undefined ? self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di) : di;';\n                } else {\n                    context.src += 'var ' + item + ' = di;';\n                }\n            } else {\n                if (this.references && meta.$keys) {\n                    this._buildKey('itemKey', meta.$type, meta.$keys, context);\n                    context.src += 'if (itemKey === null) return null;';\n                    context.src += 'var ' + item + ';';\n                    context.src += 'if (itemKey && cache[itemKey]){';\n                    context.src += item + ' = cache[itemKey];';\n                    context.src += '}else{';\n                    if (isEntityType) {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\n                    } else {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\n                    }\n                    context.src += 'if (itemKey){';\n                    context.src += 'cache[itemKey] = ' + item + ';';\n                    context.src += '}';\n                    context.src += '}';\n                } else {\n                    if (isEntityType) {\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\n                    } else {\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\n                    }\n                }\n            }\n            var openTypeProperty = null;\n            if (this.providerName == \"oData\" && resolvedType && resolvedType.openType) {\n                openTypeProperty = resolvedType.openType === true ? _index2.default.defaults.openTypeDefaultPropertyName : resolvedType.openType;\n                context.src += item + '.' + openTypeProperty + ' = {};';\n                context.src += 'for (var prop in di){ if ([' + resolvedType.memberDefinitions.getPublicMappedPropertyNames().map(function (prop) {\n                    return '\"' + prop + '\"';\n                }).join(',') + '].indexOf(prop) < 0 && prop.indexOf(\"@\") < 0 && prop.indexOf(\"#\") < 0){ ' + item + '.' + openTypeProperty + '[prop] = di[prop]; } };';\n            }\n            for (var i in meta) {\n                if (i.indexOf('$') < 0 && i != openTypeProperty) {\n                    context.current = i;\n                    if (!meta[i].$item) {\n                        if (meta[i].$value) {\n                            context.meta.push(i);\n                            var item = context.item;\n                            this.build(meta[i], context);\n                            context.src += item + '.' + i + ' = ' + context.item + ';';\n                            context.item = item;\n                            context.meta.pop();\n                        } else if (meta[i].$source) {\n                            context.src += 'var fn = function(di){';\n                            this._buildSelector(meta[i], context);\n                            if (meta[i].$type) {\n                                var type = _index.Container.resolveName(_index.Container.resolveType(meta[i].$type));\n                                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta[i].$type));\n                                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                                if (converter) {\n                                    context.src += 'return self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di.' + meta[i].$source + ');';\n                                } else {\n                                    context.src += 'return new (Container.resolveByIndex(' + typeIndex + '))(di.' + meta[i].$source + ');';\n                                }\n                            } else {\n                                context.src += item + '.' + i + ' = di.' + meta[i].$source + ';';\n                            }\n                            context.src += '};';\n                            if (meta[i].$type) context.src += item + '.' + i + ' = fn(di);';else context.src += 'fn(di);';\n                        } else if (meta[i].$type) {\n                            context.meta.push(i);\n                            context.src += 'var fn = function(di){';\n                            this._buildSelector(meta[i], context);\n                            this.build(meta[i], context);\n                            context.src += 'return ' + context.item + ';};';\n                            if (meta[i].$type === _index2.default.Object) context.src += item + '.' + i + ' = self._deepExtend(' + item + '.' + i + ', fn(di));';else context.src += item + '.' + i + ' = fn(di);';\n                            context.item = item;\n                            context.meta.pop();\n                        } else if (meta.$type) {\n                            var memDef = _index.Container.resolveType(meta.$type).memberDefinitions.getMember(i);\n                            var type = _index.Container.resolveName(memDef.type);\n                            var entityType = _index.Container.resolveType(meta.$type);\n                            var entityTypeIndex = _index.Container.getIndex(meta.$type);\n                            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                            if (this.providerName && memDef && memDef.converter && memDef.converter[this.providerName] && typeof memDef.converter[this.providerName].fromDb == 'function') {\n                                context.src += item + '.' + i + ' = Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\").converter.' + this.providerName + '.fromDb(di.' + meta[i] + ', Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\"), self.context, Container.resolveByIndex(\"' + entityTypeIndex + '\"));';\n                            } else if (converter) {\n                                context.src += item + '.' + i + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di.' + meta[i] + ');';\n                            } else {\n                                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(type.memberDefinitions.getMember(i).type));\n                                context.src += item + '.' + i + ' = new (Container.resolveByIndex(' + typeIndex + '))(di.' + meta[i] + ');';\n                            }\n                        }\n                    } else {\n                        context.meta.push(i);\n                        this.build(meta[i], context);\n                        context.item = item;\n                        context.meta.pop();\n                    }\n                }\n            }\n            context.src += item + ' = self._finalize(' + item + ');';\n        }\n    },\n\n    call: function call(data, meta) {\n        if (!Object.getOwnPropertyNames(meta).length) {\n            return data;\n        }\n        var context = {\n            src: '',\n            meta: []\n        };\n        context.src += 'var self = this;';\n        context.src += 'var result;';\n        context.src += 'var cache = {};';\n        context.src += 'var keycache = [];';\n        context.src += 'var keycacheIter = [];';\n        this.build(meta, context);\n        if (context.item) context.src += 'if (typeof result === \"undefined\") result = ' + context.item + ';';\n        context.src += 'return result;';\n\n        var fn = new Function('meta', 'data', 'Container', context.src).bind(this);\n        var ret = fn(meta, data, _index.Container);\n        return ret;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],99:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeCollector', _index2.default.Notifications.ChangeCollectorBase, null, {\n    buildData: function buildData(entities) {\n        var result = [];\n        entities.forEach(function (element) {\n            var resObj = { entityState: element.data.entityState, typeName: element.data.getType().name };\n            var enumerableMemDefCollection = [];\n\n            switch (element.data.entityState) {\n                case _index2.default.EntityState.Added:\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getPublicMappedProperties();\n                    break;\n                case _index2.default.EntityState.Modified:\n                    enumerableMemDefCollection = element.data.changedProperties;\n                    break;\n                case _index2.default.EntityState.Deleted:\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getKeyProperties();\n                    break;\n                default:\n                    break;\n            }\n\n            enumerableMemDefCollection.forEach(function (memDef) {\n                resObj[memDef.name] = element.data[memDef.name];\n            });\n\n            result.push(resObj);\n        });\n\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],100:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeCollectorBase', null, null, {\n    buildData: function buildData(entityContextData) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    processChangedData: function processChangedData(entityData) {\n        if (this.Distrbutor && this.Distrbutor.distributeData) this.Distrbutor.distributeData(this.buildData(entityData));\n    },\n    Distrbutor: { enumerable: false, dataType: _index2.default.Notifications.ChangeDistributorBase, storeOnObject: true }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],101:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeDistributor', _index2.default.Notifications.ChangeDistributorBase, null, {\n    constructor: function constructor(broadcastUrl) {\n        this.broadcastUrl = broadcastUrl;\n    },\n    distributeData: function distributeData(data) {\n        _index2.default.ajax({\n            url: this.broadcastUrl,\n            type: \"POST\",\n            data: 'data=' + JSON.stringify(data),\n            succes: this.success,\n            error: this.error\n        });\n    },\n    broadcastUrl: { dataType: \"string\" },\n    success: function success() {},\n    error: function error() {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],102:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeDistributorBase', null, null, {\n    distributeData: function distributeData(collectorData) {\n        _index.Guard.raise(\"Pure class\");\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],103:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Promise', null, null, {\n    always: function always() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.always', 'Not implemented!'));\n    },\n    done: function done() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.done', 'Not implemented!'));\n    },\n    fail: function fail() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.fail', 'Not implemented!'));\n    },\n    isRejected: function isRejected() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.isRejected', 'Not implemented!'));\n    },\n    isResolved: function isResolved() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.isResolved', 'Not implemented!'));\n    },\n    //notify: function () { Guard.raise(new Exception('$data.Promise.notify', 'Not implemented!')); },\n    //notifyWith: function () { Guard.raise(new Exception('$data.Promise.notifyWith', 'Not implemented!')); },\n    pipe: function pipe() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.pipe', 'Not implemented!'));\n    },\n    progress: function progress() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.progress', 'Not implemented!'));\n    },\n    promise: function promise() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.promise', 'Not implemented!'));\n    },\n    //reject: function () { Guard.raise(new Exception('$data.Promise.reject', 'Not implemented!')); },\n    //rejectWith: function () { Guard.raise(new Exception('$data.Promise.rejectWith', 'Not implemented!')); },\n    //resolve: function () { Guard.raise(new Exception('$data.Promise.resolve', 'Not implemented!')); },\n    //resolveWith: function () { Guard.raise(new Exception('$data.Promise.resolveWith', 'Not implemented!')); },\n    state: function state() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.state', 'Not implemented!'));\n    },\n    then: function then() {\n        _index.Guard.raise(new _index.Exception('$data.Promise.then', 'Not implemented!'));\n    }\n}, null);\n\n_index2.default.Class.define('$data.PromiseHandlerBase', null, null, {\n    constructor: function constructor() {},\n    createCallback: function createCallback(callBack) {\n        callBack = _index2.default.typeSystem.createCallbackSetting(callBack);\n\n        return {\n            success: callBack.success,\n            error: callBack.error,\n            notify: callBack.notify\n        };\n    },\n    getPromise: function getPromise() {\n        return new _index2.default.Promise();\n    }\n}, null);\n\n_index2.default.PromiseHandler = _index2.default.PromiseHandlerBase;\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],104:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Query', null, null, {\n    constructor: function constructor(expression, defaultType, context) {\n        ///<param name=\"context\" type=\"$data.EntityContext\" />\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        ///<field name=\"context\" type=\"$data.EntityContext\" />\n\n        this.expression = expression;\n        this.context = context;\n\n        //TODO: expressions get as JSON string?!\n\n        this.expressions = expression;\n        this.defaultType = defaultType;\n        this.result = [];\n        this.rawDataList = [];\n        this.modelBinderConfig = {};\n        this.context = context;\n    },\n\n    rawDataList: { dataType: \"Array\" },\n    result: { dataType: \"Array\" },\n    resultType: {},\n    buildResultSet: function buildResultSet(ctx) {\n        var converter = new _index2.default.ModelBinder(this.context);\n        this.result = converter.call(this.rawDataList, this.modelBinderConfig);\n        return;\n    },\n    getEntitySets: function getEntitySets() {\n        var ret = [];\n        var ctx = this.context;\n\n        var fn = function fn(expression) {\n            if (expression instanceof _index2.default.Expressions.EntitySetExpression) {\n                if (ret.indexOf(ctx._entitySetReferences[expression.elementType.name]) < 0) ret.push(ctx._entitySetReferences[expression.elementType.name]);\n            }\n            if (expression.source) fn(expression.source);\n            if (expression.members) {\n                for (var i = 0; i < expression.members.length; i++) {\n                    fn(expression.members[i].expression);\n                }\n            }\n        };\n\n        fn(this.expression);\n\n        return ret;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],105:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.queryBuilder', null, null, {\n    constructor: function constructor() {\n        this._fragments = {};\n        this.selectedFragment = null;\n        this._binderConfig = {};\n        this.modelBinderConfig = this._binderConfig;\n        this._binderConfigPropertyStack = [];\n    },\n    selectTextPart: function selectTextPart(name) {\n        if (!this._fragments[name]) {\n            this._fragments[name] = { text: '', params: [] };\n        }\n        this.selectedFragment = this._fragments[name];\n    },\n    getTextPart: function getTextPart(name) {\n        return this._fragments[name];\n    },\n    addText: function addText(textParticle) {\n        this.selectedFragment.text += textParticle;\n    },\n    addParameter: function addParameter(param) {\n        this.selectedFragment.params.push(param);\n    },\n    selectModelBinderProperty: function selectModelBinderProperty(name) {\n        this._binderConfigPropertyStack.push(this.modelBinderConfig);\n        if (!(name in this.modelBinderConfig)) {\n            this.modelBinderConfig[name] = {};\n        }\n        this.modelBinderConfig = this.modelBinderConfig[name];\n    },\n    popModelBinderProperty: function popModelBinderProperty() {\n        if (this._binderConfigPropertyStack.length === 0) {\n            this.modelBinderConfig = this._binderConfig();\n        } else {\n            this.modelBinderConfig = this._binderConfigPropertyStack.pop();\n        }\n    },\n    resetModelBinderProperty: function resetModelBinderProperty(name) {\n        this._binderConfigPropertyStack = [];\n        this.modelBinderConfig = this._binderConfig;\n    },\n    addKeyField: function addKeyField(name) {\n        if (!this.modelBinderConfig['$keys']) {\n            this.modelBinderConfig['$keys'] = new Array();\n        }\n        this.modelBinderConfig['$keys'].push(name);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],106:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.QueryProvider', null, null, {\n    //TODO: instance member?????\n    constructor: function constructor() {\n        this.requiresExpressions = false;\n    },\n    executeQuery: function executeQuery(queryable, resultHandler) {},\n    getTraceString: function getTraceString(queryable) {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],107:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Queryable', null, null, {\n    constructor: function constructor(source, rootExpression) {\n        ///\t<signature>\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\n        /// <param name=\"source\" type=\"$data.EntitySet\" />\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\n        ///\t</signature>\n        ///\t<signature>\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\n        /// <param name=\"source\" type=\"$data.EntityContext\" />\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\n        ///\t</signature>\n\n        var context = source instanceof _index2.default.EntityContext ? source : source.entityContext;\n        this.defaultType = source instanceof _index2.default.EntityContext ? null : source.defaultType;\n        this.entityContext = context;\n        this.expression = rootExpression;\n    },\n\n    filter: function filter(predicate, thisArg) {\n        ///<summary>Filters a set of entities using a boolean expression.</summary>\n        ///<param name=\"predicate\" type=\"Function\">A boolean query expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Filters a set of entities using a boolean expression formulated as string.</summary>\n        ///<param name=\"predicate\" type=\"string\">\n        ///The expression body of the predicate function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: filter(\"it.Title == 'Hello'\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Filters a set of entities using a bool expression formulated as a JavaScript function.</summary>\n        ///<param name=\"predicate\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Filtering a set of entities with a predicate function&#10;\n        ///var males = Persons.filter( function( person ) { return person.Gender == 'Male' } );\n        ///</example>\n        ///<example>\n        ///Filtering a set of entities with a predicate function and parameters&#10;\n        ///var draftables = Persons.filter( function( person ) {\n        ///     return person.Gender == this.gender &amp;&amp; person.Age &gt; this.age\n        /// }, { gender: 'Male',  age: 21 });\n        ///</example>\n        ///<example>\n        ///Filtering a set of entities with a predicate as a string and parameters&#10;\n        ///var draftables = Persons.filter(\"it.Gender == this.gender &amp;&amp;  it.Age &gt; this.age\",\n        /// { gender: 'Male',  age: 21 });\n        ///</example>\n        ///</signature>\n        if (arguments.length === 3) {\n            predicate = \"it.\" + arguments[0] + (arguments[1][0] === \".\" ? arguments[1] + \"(param)\" : \" \" + arguments[1] + \" param\");\n            thisArg = { param: arguments[2] };\n        }\n        this._checkOperation('filter');\n        var expression = _index.Container.createCodeExpression(predicate, thisArg);\n        var expressionSource = this.expression;\n        if (this.expression instanceof _index2.default.Expressions.FilterExpression) {\n            expressionSource = this.expression.source;\n\n            var operatorResolution = this.entityContext.storageProvider.resolveBinaryOperator(\"and\");\n            expression = _index.Container.createSimpleBinaryExpression(this.expression.selector, expression, \"and\", \"filter\", \"boolean\", operatorResolution);\n        }\n        var exp = _index.Container.createFilterExpression(expressionSource, expression);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    where: function where(predicate, params) {\n        ///<summary>Where is a convenience alias for C# developers. Use filter instead.</summary>\n        ///<returns type=\"$data.Queryable\" />\n        return this.filter(predicate, params);\n    },\n\n    map: function map(projection, thisArg, mappedTo) {\n        ///\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t<param name=\"projection\" type=\"Function\">A projection expression</param>\n        ///\t<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t\t<param name=\"projection\" type=\"string\">\n        ///\t\t\tThe expression body of the projection function in string. &#10;\n        ///\t\t\tTo reference the lambda parameter use the 'it' context variable. &#10;\n        ///\t\t\tExample: map(\"{ i: it.Id, t: it.Title }\")\n        ///\t\t</param>\n        ///\t\t<param name=\"thisArg\" type=\"Object\" />\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t\t<param name=\"projection\" type=\"Function\">\n        ///\t\t\tProjection function to specify the shape or type of each returned element.\n        ///\t\t</param>\n        ///\t\t<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///\t\t\tContains the projection parameters.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tProjection to get an array of the full name property of a set of Person entities&#10;\n        ///\t\t\tvar personFullNames = Persons.map( function( person ) { return person.FullName; } );\n        ///\t\t</example>\n        ///\t\t<example>\n        ///\t\t\tProjection to get an array of the required fields of Person entities in an anonymous type.&#10;\n        ///\t\t\tvar custom = Persons.map( function( person ) {\n        ///\t\t\t\treturn { FullName: person.FullName, Info: { Address: person.Location.Address, Phone: person.Phone } };\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('map');\n        var codeExpression = _index.Container.createCodeExpression(projection, thisArg);\n        var exp = _index.Container.createProjectionExpression(this.expression, codeExpression);\n\n        if (mappedTo === 'default') exp.projectionAs = this.defaultType;else if (mappedTo) exp.projectionAs = _index.Container.resolveType(mappedTo);else exp.projectionAs = _index2.default.Object;\n\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    select: function select(projection, thisArg, mappedTo) {\n        ///<summary>Select is a convenience alias for C# developers. Use map instead.</summary>\n        ///<returns type=\"$data.Queryable\" />\n        return this.map(projection, thisArg, mappedTo);\n    },\n\n    length: function length(onResult, transaction) {\n        ///\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(cnt) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet the count of Person entities. &#10;\n        ///\t\t\tPersons.length( function( cnt ) { alert(\"There are \" + cnt + \" person(s) in the database.\"); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('length');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var countExpression = _index.Container.createCountExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(countExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    count: function count(onResult, transaction) {\n        ///<summary>Count is a convenience alias for C# developers. Use length instead.</summary>\n        ///<returns type=\"$data.Integer\" />\n        return this.length(onResult, transaction);\n    },\n\n    forEach: function forEach(iterator, transaction) {\n        ///\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\n        ///\t<param name=\"iterator\" type=\"Function\">Iterator function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\n        ///\t\t<param name=\"iterator\" type=\"Function\">\n        ///\t\t\tIterator function to handle the result elements.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('forEach');\n        var pHandler = new _index2.default.PromiseHandler();\n        function iteratorFunc(items) {\n            items.forEach(iterator);\n        }\n        var cbWrapper = pHandler.createCallback(iteratorFunc);\n\n        var forEachExpression = _index.Container.createForEachExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(forEachExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    toArray: function toArray(onResult_items, transaction) {\n        ///\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult_items\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult_items\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet all Person entities. &#10;\n        ///\t\t\tPersons.toArray( function( result ) { console.dir(result); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        if (onResult_items instanceof _index2.default.Array) {\n            return this.toArray(function (results) {\n                onResult_items.length = 0;\n                results.forEach(function (item, idx) {\n                    onResult_items.push(item);\n                });\n            });\n        }\n\n        this._checkOperation('toArray');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult_items);\n\n        var toArrayExpression = _index.Container.createToArrayExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(toArrayExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    toLiveArray: function toLiveArray(onResult, transaction) {\n        var self = this;\n        var result = [];\n\n        var doAction = function doAction(action) {\n            return function (onResult) {\n                var pHandler = new _index2.default.PromiseHandler();\n                var callback = pHandler.createCallback(onResult);\n\n                var successFunc = function successFunc(res) {\n                    result.length = 0;\n\n                    var data = res;\n                    _index2.default.typeSystem.extend(result, data);\n\n                    result.prev = doAction(function (cb) {\n                        data.prev(cb);\n                    });\n                    result.next = doAction(function (cb) {\n                        data.next(cb);\n                    });\n\n                    callback.success.apply(this, [result].concat(Array.prototype.slice.call(arguments, 1)));\n                };\n\n                action({\n                    success: successFunc,\n                    error: callback.error\n                }, transaction);\n\n                var promise = pHandler.getPromise();\n                _index2.default.typeSystem.extend(result, promise);\n\n                return result;\n            };\n        };\n\n        result.refresh = doAction(function (cb) {\n            self.toArray(cb);\n        });\n\n        return result.refresh.apply(result, arguments);\n    },\n\n    single: function single(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet \"George\" from the Person entity set. &#10;\n        ///\t\t\tPersons.single( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('single');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(2);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var singleExpression = _index.Container.createSingleExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(singleExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    some: function some(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///         Is there any person who's first name is \"George\"? &#10;\n        ///\t\t\tPersons.some( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('some');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var someExpression = _index.Container.createSomeExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(someExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    every: function every(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if all elements of the EntitySet is in the result set.</summary>\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a </summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tResult is true when all person are married. &#10;\n        ///\t\t\tPersons.every( function( person ) { return person.Married == true; }, null, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('every');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var everyExpression = _index.Container.createEveryExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(everyExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    take: function take(amount) {\n        ///\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to return.</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\n        ///\t\t\tThe number of elements to skip.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.take(10).forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('take');\n        var constExp = _index.Container.createConstantExpression(amount, \"integer\");\n        var takeExp = _index.Container.createPagingExpression(this.expression, constExp, _index2.default.Expressions.ExpressionType.Take);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n    skip: function skip(amount) {\n        ///\t<summary>Skip a specified number of elements from the start of the result set.</summary>\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to skip.</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Skip a specified number of elements from the start of the result set.</summary>\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\n        ///\t\t\tThe number of elements to skip.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.skip(1).take(5).forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('skip');\n        var constExp = _index.Container.createConstantExpression(amount, \"integer\");\n        var takeExp = _index.Container.createPagingExpression(this.expression, constExp, _index2.default.Expressions.ExpressionType.Skip);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n\n    order: function order(selector) {\n        if (selector === '' || selector === undefined || selector === null) {\n            return this;\n        }\n        if (selector[0] === \"-\") {\n            var orderString = \"it.\" + selector.replace(\"-\", \"\");\n            return this.orderByDescending(orderString);\n        } else {\n            return this.orderBy(\"it.\" + selector);\n        }\n    },\n\n    orderBy: function orderBy(selector, thisArg) {\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"string\">\n        ///The expression body of the order function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: orderBy(\"it.Id\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Ordering a set of entities with a predicate function&#10;\n        ///var males = Persons.orderBy( function( person ) { return person.Id; } );\n        ///</example>\n        ///</signature>\n\n        this._checkOperation('orderBy');\n        var codeExpression = _index.Container.createCodeExpression(selector, thisArg);\n        var exp = _index.Container.createOrderExpression(this.expression, codeExpression, _index2.default.Expressions.ExpressionType.OrderBy);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    orderByDescending: function orderByDescending(selector, thisArg) {\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"string\">\n        ///The expression body of the order function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: orderBy(\"it.Id\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Ordering a set of entities with a predicate function&#10;\n        ///var males = Persons.orderByDescending( function( person ) { return person.Id; } );\n        ///</example>\n        ///</signature>\n\n        this._checkOperation('orderByDescending');\n        var codeExpression = _index.Container.createCodeExpression(selector, thisArg);\n        var exp = _index.Container.createOrderExpression(this.expression, codeExpression, _index2.default.Expressions.ExpressionType.OrderByDescending);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n\n    first: function first(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet \"George\" from the Person entity set. &#10;\n        ///\t\t\tPersons.first( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, function ( result ){ ... });\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('first');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var firstExpression = _index.Container.createFirstExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(firstExpression);\n            q.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    find: function find(keyValue, onResult, transaction) {\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var keys = this.defaultType.memberDefinitions.getKeyProperties();\n\n        try {\n\n            if (keys.length === 1 && (typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                var keyV = {};\n                keyV[keys[0].name] = keyValue;\n                keyValue = keyV;\n            }\n\n            if ((typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                throw new _index.Exception('Key parameter is invalid');\n            } else {\n\n                var parameters = [];\n                for (var i = 0; i < keys.length; i++) {\n                    var keyProp = keys[i];\n                    if (!(keyProp.name in keyValue)) {\n                        throw new _index.Exception('Key value missing');\n                    }\n                    parameters.push(_index.Container.createConstantExpression(keyValue[keyProp.name], keyProp.type, keyProp.name));\n                }\n\n                var operation = this.entityContext.storageProvider.supportedSetOperations['find'];\n                if (operation) {\n\n                    var findExpression = _index.Container.createFindExpression(this.expression, parameters);\n                    var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n                    try {\n                        var expression = preparator.Visit(findExpression);\n                        this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n                        this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n                } else {\n                    var predicate = '';\n                    var params = {};\n                    for (var i = 0; i < parameters.length; i++) {\n                        var param = parameters[i];\n                        params[param.name] = param.value;\n                        if (i > 0) predicate += ' && ';\n                        predicate += \"it.\" + param.name + \" == this.\" + param.name;\n                    }\n\n                    this.single(predicate, params, cbWrapper, transaction);\n                }\n            }\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    include: function include(selector) {\n        ///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\n        ///\t\t\tThe name of the entity set you want to include in the query.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tInclude the Category on every Article. &#10;\n        ///\t\t\tArticles.include(\"Category\");\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('include');\n        var constExp = _index.Container.createConstantExpression(selector, \"string\");\n        var takeExp = _index.Container.createIncludeExpression(this.expression, constExp);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n\n    withInlineCount: function withInlineCount(selector) {\n        this._checkOperation('withInlineCount');\n        var constExp = _index.Container.createConstantExpression(selector || 'allpages', \"string\");\n        var inlineCountExp = _index.Container.createInlineCountExpression(this.expression, constExp);\n        return _index.Container.createQueryable(this, inlineCountExp);\n    },\n    withCount: function withCount(selector) {\n        return this.withInlineCount(selector);\n    },\n\n    removeAll: function removeAll(onResult, transaction) {\n        ///\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tDelete all People who are younger than 18 years old. &#10;\n        ///\t\t\tPersons.filter( function( p ){ return p.Age &#60; 18; } ).removeAll( function( result ) { console.dir(result); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('batchDelete');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var batchDeleteExpression = _index.Container.createBatchDeleteExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(batchDeleteExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    _runQuery: function _runQuery(onResult_items, transaction) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult_items);\n\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(this.expression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    toTraceString: function toTraceString(name) {\n        ///\t<summary>Returns the trace string of the query.</summary>\n        ///\t<param name=\"name\" type=\"$data.String\">Name of the execution method (toArray, length, etc.).</param>\n        ///\t<returns type=\"$data.String\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the trace string of the query.</summary>\n        ///\t\t<param name=\"name\" type=\"$data.String\">\n        ///\t\t\tName of the execution method (toArray, length, etc.). Optional. Default value is \"toArray\".\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.String\" />\n        ///\t\t<example>\n        ///\t\t\tGet the trace string for Articles.toArray() &#10;\n        ///\t\t\tArticles.toTraceString();\n        ///\t\t</example>\n        ///\t</signature>\n\n        var expression = this.expression;\n\n        if (name) {\n            expression = _index.Container['create' + name + 'Expression'](expression);\n        } else {\n            expression = _index.Container.createToArrayExpression(expression);\n        }\n\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        expression = preparator.Visit(expression);\n\n        //this.expression = expression;\n        var q = _index.Container.createQueryable(this, expression);\n        return q.entityContext.getTraceString(q);\n    },\n\n    _checkOperation: function _checkOperation(name) {\n        var operation = this.entityContext.resolveSetOperations(name);\n        if (operation.invokable != undefined && !operation.invokable) _index.Guard.raise(new _index.Exception(\"Operation '\" + name + \"' is not invokable with the provider\"));\n    },\n    defaultType: {}\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],108:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.RelatedEntityProxy\", null, null, {\n    constructor: function constructor(entityKeyObject, navigationProperty, type, parent, context) {\n        this._entityKeyObject = entityKeyObject;\n        this._navigationProperty = navigationProperty;\n        this._type = type;\n        this._parent = parent;\n        this._context = context;\n    },\n    _entityKeyObject: { type: _index2.default.Object },\n    _ctxFactory: {},\n    _type: {},\n    _navigationProperty: { type: _index2.default.String },\n    _parent: { type: '$data.RelatedEntityProxy' },\n    _context: { type: '$data.EntityContext' },\n\n    read: function read(onResult) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        try {\n            var proxyChains = this._chainToArray();\n            var firstProxy = proxyChains[0];\n            var context = firstProxy._context;\n            if (!context) {\n                var storeToken = firstProxy._parent instanceof _index2.default.Entity ? firstProxy._parent.storeToken : firstProxy._type.storeToken;\n                if (storeToken && typeof storeToken.factory === 'function') {\n                    context = storeToken.factory();\n                }\n            }\n\n            if (!context) throw new _index.Exception('ContextNotExists');\n\n            var entitySet = null;\n            var expression = null;\n            if (firstProxy._parent instanceof _index2.default.Entity) {\n                entitySet = context.getEntitySetFromElementType(firstProxy._parent.getType());\n\n                var proxyClass = context._createRelatedEntityProxyClass(entitySet.elementType);\n                proxyChains.unshift(new proxyClass(firstProxy._parent, undefined, entitySet.elementType));\n            } else {\n                entitySet = context.getEntitySetFromElementType(firstProxy._type);\n            }\n\n            expression = entitySet.expression;\n            var returnType = null;\n\n            for (var i = 0; i < proxyChains.length; i++) {\n                var item = proxyChains[i];\n                var keys = item._type.memberDefinitions.getKeyProperties();\n\n                var parameters = [];\n                for (var j = 0; j < keys.length; j++) {\n                    var keyProp = keys[j];\n                    if (!(keyProp.name in item._entityKeyObject)) {\n                        throw new _index.Exception('Key value missing');\n                    }\n                    parameters.push(_index.Container.createConstantExpression(item._entityKeyObject[keyProp.name], keyProp.type, keyProp.name));\n                }\n\n                var member = undefined;\n                if (item._navigationProperty) {\n                    member = _index.Container.createMemberInfoExpression(item._navigationProperty);\n                    returnType = item._navigationProperty.elementType;\n                }\n                expression = _index.Container.createFindExpression(expression, parameters, member);\n            }\n\n            var preparator = _index.Container.createQueryExpressionCreator(context);\n            expression = preparator.Visit(expression);\n            //context.log({ event: \"EntityExpression\", data: expression });\n\n            var queryable = _index.Container.createQueryable(entitySet, expression);\n            queryable.defaultType = returnType || queryable.defaultType;\n            context.executeQuery(queryable, cbWrapper);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    _chainToArray: function _chainToArray(result) {\n        result = result || [];\n        if (this._parent instanceof _index2.default.RelatedEntityProxy) {\n            this._parent._chainToArray(result);\n        }\n\n        result.push(this);\n        return result;\n    }\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],109:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ServiceOperation', null, null, {}, {\n    translateDefinition: function translateDefinition(propertyDef, name, definedBy) {\n        propertyDef.serviceName = name;\n        var memDef = new _index2.default.MemberDefinition(this.generateServiceOperation(propertyDef), this);\n        memDef.name = name;\n        return memDef;\n    },\n    generateServiceOperation: function generateServiceOperation(cfg) {\n\n        var fn;\n        if (cfg.serviceMethod) {\n            var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : {};\n            if (returnType.isAssignableTo && returnType.isAssignableTo(_index2.default.Queryable)) {\n                fn = cfg.serviceMethod;\n            } else {\n                fn = function fn() {\n                    var lastParam = arguments[arguments.length - 1];\n\n                    var pHandler = new _index2.default.PromiseHandler();\n                    var cbWrapper;\n\n                    var args = arguments;\n                    if (typeof lastParam === 'function') {\n                        cbWrapper = pHandler.createCallback(lastParam);\n                        arguments[arguments.length - 1] = cbWrapper;\n                    } else {\n                        cbWrapper = pHandler.createCallback();\n                        arguments.push(cbWrapper);\n                    }\n\n                    try {\n                        var result = cfg.serviceMethod.apply(this, arguments);\n                        if (result !== undefined) cbWrapper.success(result);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n\n                    return pHandler.getPromise();\n                };\n            }\n        } else {\n            fn = function fn() {\n                var context = this;\n                var memberdef;\n\n                var boundItem;\n                if (this instanceof _index2.default.Entity || this instanceof _index2.default.EntitySet) {\n                    var entitySet;\n                    if (this instanceof _index2.default.Entity) {\n                        if (this.context) {\n                            context = this.context;\n                            entitySet = context.getEntitySetFromElementType(this.getType());\n                        } else if (this.storeToken && typeof this.storeToken.factory === 'function') {\n                            context = this.storeToken.factory();\n                            entitySet = context.getEntitySetFromElementType(this.getType());\n                        } else {\n                            _index.Guard.raise(new _index.Exception(\"entity can't resolve context\", 'Not Found!', this));\n                            return;\n                        }\n                    } else if (this instanceof _index2.default.EntitySet) {\n                        context = this.entityContext;\n                        entitySet = this;\n\n                        var esDef = context.getType().getMemberDefinition(entitySet.name);\n                        memberdef = _index2.default.MemberDefinition.translateDefinition(esDef.actions[cfg.serviceName], cfg.serviceName, entitySet.getType());\n                    }\n\n                    boundItem = {\n                        data: this,\n                        entitySet: entitySet\n                    };\n                }\n\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(_index.Container.resolveType(cfg.elementType)) : null;\n\n                var paramConstExpression = null;\n                if (cfg.params) {\n                    paramConstExpression = [];\n                    //object as parameter\n                    //FIX: object type parameters with the same property name as the name of the first parameter\n                    if (arguments[0] && _typeof(arguments[0]) === 'object' && arguments[0].constructor === _index2.default.Object && cfg.params && cfg.params[0] && cfg.params[0].name in arguments[0]) {\n                        var argObj = arguments[0];\n                        for (var i = 0; i < cfg.params.length; i++) {\n                            var paramConfig = cfg.params[i];\n                            if (paramConfig.name && paramConfig.type && paramConfig.name in argObj) {\n                                paramConstExpression.push(_index.Container.createConstantExpression(argObj[paramConfig.name], _index.Container.resolveType(paramConfig.type), paramConfig.name));\n                            }\n                        }\n                    }\n                    //arg params\n                    else {\n                            for (var i = 0; i < cfg.params.length; i++) {\n                                if (typeof arguments[i] == 'function') break;\n\n                                //TODO: check params type\n                                var paramConfig = cfg.params[i];\n                                if (paramConfig.name && paramConfig.type && arguments[i] !== undefined) {\n                                    paramConstExpression.push(_index.Container.createConstantExpression(arguments[i], _index.Container.resolveType(paramConfig.type), paramConfig.name));\n                                }\n                            }\n                        }\n                }\n\n                var ec = _index.Container.createEntityContextExpression(context);\n                if (!memberdef) {\n                    if (boundItem && boundItem.data) {\n                        memberdef = boundItem.data.getType().getMemberDefinition(cfg.serviceName);\n                    } else {\n                        memberdef = context.getType().getMemberDefinition(cfg.serviceName);\n                    }\n                }\n                var es = _index.Container.createServiceOperationExpression(ec, _index.Container.createMemberInfoExpression(memberdef), paramConstExpression, cfg, boundItem);\n\n                //Get callback function\n                var clb = arguments[arguments.length - 1];\n                if (!(typeof clb === 'function' || (typeof clb === 'undefined' ? 'undefined' : _typeof(clb)) === 'object' /*&& clb.constructor === $data.Object*/ && (typeof clb.success === 'function' || typeof clb.error === 'function'))) {\n                    clb = undefined;\n                }\n\n                if (virtualEntitySet) {\n                    var q = _index.Container.createQueryable(virtualEntitySet, es);\n                    if (clb) {\n                        es.isTerminated = true;\n                        return q._runQuery(clb);\n                    }\n                    return q;\n                } else {\n                    var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : null;\n\n                    var q = _index.Container.createQueryable(context, es);\n                    q.defaultType = returnType || _index2.default.Object;\n\n                    if (returnType === _index2.default.Queryable) {\n                        q.defaultType = _index.Container.resolveType(cfg.elementType);\n                        if (clb) {\n                            es.isTerminated = true;\n                            return q._runQuery(clb);\n                        }\n                        return q;\n                    }\n                    es.isTerminated = true;\n                    return q._runQuery(clb);\n                }\n            };\n        };\n\n        var params = cfg.params || [];\n        _index2.default.typeSystem.extend(fn, cfg, { params: params });\n\n        return fn;\n    }\n});\n\n_index2.default.Class.define('$data.ServiceAction', _index2.default.ServiceOperation, null, {}, {\n    generateServiceOperation: function generateServiceOperation(cfg) {\n        if (!cfg.method) {\n            cfg.method = 'POST'; //default Action method is POST\n        }\n\n        return _index2.default.ServiceOperation.generateServiceOperation.apply(this, arguments);\n    }\n});\n\n_index2.default.Class.define('$data.ServiceFunction', _index2.default.ServiceOperation, null, {}, {\n    generateServiceOperation: function generateServiceOperation(cfg) {\n        if (!cfg.method) {\n            cfg.method = 'GET'; //default Function method is GET\n        }\n\n        return _index2.default.ServiceOperation.generateServiceOperation.apply(this, arguments);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],110:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.storageProviders = {\n    DbCreationType: {\n        Merge: 10,\n        DropTableIfChanged: 20,\n        DropTableIfChange: 20,\n        DropAllExistingTables: 30,\n        ErrorIfChange: 40,\n        DropDbIfChange: 50\n    }\n};\n\n_index2.default.ConcurrencyMode = { Fixed: 'fixed', None: 'none' };\n_index2.default.Class.define('$data.StorageProviderBase', null, null, {\n    constructor: function constructor(schemaConfiguration, context) {\n        this.providerConfiguration = schemaConfiguration || {};\n\n        this.name = this.getType().name;\n        if (_index2.default.RegisteredStorageProviders) {\n            var keys = Object.keys(_index2.default.RegisteredStorageProviders);\n            for (var i = 0; i < keys.length; i++) {\n                if (this instanceof _index2.default.RegisteredStorageProviders[keys[i]]) {\n                    this.name = keys[i];\n                    break;\n                }\n            }\n        }\n    },\n    providers: {},\n    supportedDataTypes: { value: [], writable: false },\n    initializeStore: function initializeStore(callBack) {\n        _index.Guard.raise(\"Pure class\");\n    },\n\n    executeQuery: function executeQuery(queryable, callBack) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    loadRawData: function loadRawData(tableName, callBack) {\n        callBack = _index2.default.typeSystem.createCallbackSetting(callBack);\n        callBack.error(new _index.Exception('loadRawData is not supported', 'Invalid Operation'));\n    },\n\n    buildIndependentBlocks: function buildIndependentBlocks(changedItems) {\n        /// <summary>\n        /// Build and processes a dependency graph from the changed items,\n        /// and generates blocks that can be inserted to the database sequentially.\n        /// </summary>\n        /// <param name=\"changedItems\">Array of changed items to build independent blocks from.</param>\n        var edgesTo = [];\n        var edgesFrom = [];\n\n        function hasOwnProperty(obj) {\n            /// <summary>\n            /// Returns true if object has own property (used for 'hashset'-like objects)\n            /// </summary>\n            /// <param name=\"obj\">Target object</param>\n            /// <returns>True if the object has own property</returns>\n            for (var p in obj) {\n                if (obj.hasOwnProperty(p)) return true;\n            }\n            return false;\n        }\n\n        // Building edgesTo and edgesFrom arrays (containing only indeces of items in changedItems array.\n        for (var i = 0; i < changedItems.length; i++) {\n            var current = changedItems[i];\n            if (!current.dependentOn || current.dependentOn.length == 0) {\n                // This item is independent\n                continue;\n            }\n\n            var to = null;\n            // Iterating over items 'current' depends on\n            for (var j = 0; j < current.dependentOn.length; j++) {\n                var currentDependency = current.dependentOn[j];\n                if (currentDependency.entityState == _index2.default.EntityState.Unchanged) {\n                    continue;\n                }\n                to = to || {};\n                // Getting the index of current dependency\n                var ixDependendOn = -1;\n                for (var k = 0; k < changedItems.length; k++) {\n                    if (changedItems[k].data == currentDependency) {\n                        ixDependendOn = k;\n                        break;\n                    }\n                }\n                // Sanity check\n                if (ixDependendOn == -1) {\n                    _index.Guard.raise(new _index.Exception('Dependent object not found', 'ObjectNotFound', current.dependentOn[j]));\n                }\n                // Setting edge in 'to' array\n                to[ixDependendOn] = true;\n                // Setting edge in 'from' array\n                var from = edgesFrom[ixDependendOn] || {};\n                from[i] = true;\n                edgesFrom[ixDependendOn] = from;\n            }\n            // Persisting found edges in edgesTo array\n            if (to !== null) edgesTo[i] = to;\n        }\n\n        // Array of sequentialyl independent blocks (containing objects, not just their id's)\n        var independentBlocks = [];\n        // Objects getting their dependency resolved in the current cycle.\n        var currentBlock = [];\n        // Filling currentBlock with initially independent objects.\n        for (var x = 0; x < changedItems.length; x++) {\n            if (!edgesTo.hasOwnProperty(x)) {\n                currentBlock.push(x);\n            }\n        }\n        while (currentBlock.length > 0) {\n            // Shifting currentBlock to cbix,\n            // and clearing currentBlock for next independent block\n            var cbix = [].concat(currentBlock);\n            currentBlock = [];\n            // Iterating over previous independent block, to generate the new one\n            for (var b = 0; b < cbix.length; b++) {\n                var dependentNodes = edgesFrom[cbix[b]];\n                if (typeof dependentNodes !== 'undefined') {\n                    for (var d in dependentNodes) {\n                        // Removing edge from 'edgesTo'\n                        delete edgesTo[d][cbix[b]];\n                        // Check if has any more dependency\n                        if (!hasOwnProperty(edgesTo[d])) {\n                            // It doesn't, so let's clean up a bit\n                            delete edgesTo[d];\n                            // and push the item to 'currentBlock'\n                            currentBlock.push(d);\n                        }\n                    }\n                }\n                // Clearing processed item from 'edgesFrom'\n                delete edgesFrom[cbix[b]];\n            }\n            // Push cbix t to independentBlocks\n            var cb = [];\n            for (var c = 0; c < cbix.length; c++) {\n                var item = changedItems[cbix[c]];\n                if (item.data.entityState != _index2.default.EntityState.Unchanged) cb.push(item);\n            }\n            if (cb.length > 0) independentBlocks.push(cb);\n        }\n        return independentBlocks;\n    },\n    getTraceString: function getTraceString(queryable) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    setContext: function setContext(ctx) {\n        this.context = ctx;\n    },\n\n    _buildContinuationFunction: function _buildContinuationFunction(context, query) {\n        if (Array.isArray(query.result)) {\n            query.result.next = this._buildPagingMethod(context, query, 'next');\n            query.result.prev = this._buildPagingMethod(context, query, 'prev');\n        }\n    },\n    _buildPagingMethod: function _buildPagingMethod(context, query, mode) {\n        return function (onResult_items) {\n            var pHandler = new _index2.default.PromiseHandler();\n            var cbWrapper = pHandler.createCallback(onResult_items);\n\n            var continuation = new _index2.default.Expressions.ContinuationExpressionBuilder(mode);\n            var continuationResult = continuation.compile(query);\n            if (continuationResult.expression) {\n                var queryable = _index.Container.createQueryable(context, continuationResult.expression);\n                queryable.defaultType = query.defaultType;\n                context.executeQuery(queryable, cbWrapper);\n            } else {\n                cbWrapper.error(new _index.Exception(continuationResult.message, 'Invalid Operation', continuationResult));\n            }\n\n            return pHandler.getPromise();\n        };\n    },\n\n    buildDbType_modifyInstanceDefinition: function buildDbType_modifyInstanceDefinition(instanceDefinition, storageModel) {\n        var buildDbType_copyPropertyDefinition = function buildDbType_copyPropertyDefinition(propertyDefinition, refProp) {\n            var cPropertyDef;\n            if (refProp) {\n                cPropertyDef = JSON.parse(JSON.stringify(instanceDefinition[refProp]));\n                cPropertyDef.kind = propertyDefinition.kind;\n                cPropertyDef.name = propertyDefinition.name;\n                cPropertyDef.notMapped = false;\n            } else {\n                cPropertyDef = JSON.parse(JSON.stringify(propertyDefinition));\n            }\n\n            cPropertyDef.dataType = _index.Container.resolveType(propertyDefinition.dataType);\n            cPropertyDef.type = cPropertyDef.dataType;\n            cPropertyDef.key = false;\n            cPropertyDef.computed = false;\n            return cPropertyDef;\n        };\n        var buildDbType_createConstrain = function buildDbType_createConstrain(foreignType, dataType, propertyName, prefix, keyPropertyName) {\n            var constrain = new Object();\n            constrain[foreignType.name] = propertyName;\n            constrain[dataType.name] = keyPropertyName ? keyPropertyName : prefix + '__' + propertyName;\n            return constrain;\n        };\n\n        if (storageModel.Associations) {\n            storageModel.Associations.forEach(function (association) {\n                var addToEntityDef = false;\n                var foreignType = association.FromType;\n                var dataType = association.ToType;\n                var foreignPropName = association.ToPropertyName;\n\n                var memDef = association.FromType.getMemberDefinition(association.FromPropertyName);\n                var keyProperties = [];\n                if (memDef && typeof memDef.keys === \"string\" && memDef.keys) {\n                    keyProperties = [memDef.keys];\n                } else if (memDef && Array.isArray(memDef.keys)) {\n                    keyProperties = [].concat(memDef.keys);\n                }\n\n                association.ReferentialConstraint = association.ReferentialConstraint || [];\n\n                if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") {\n                    foreignType = association.ToType;\n                    dataType = association.FromType;\n                    foreignPropName = association.FromPropertyName;\n                    addToEntityDef = true;\n                }\n\n                foreignType.memberDefinitions.getPublicMappedProperties().filter(function (d) {\n                    return d.key;\n                }).forEach(function (d, i) {\n                    var constraint = buildDbType_createConstrain(foreignType, dataType, d.name, foreignPropName, keyProperties[i]);\n                    if (addToEntityDef) {\n                        //instanceDefinition[foreignPropName + '__' + d.name] = buildDbType_copyPropertyDefinition(d, foreignPropName);\n                        instanceDefinition[constraint[dataType.name]] = buildDbType_copyPropertyDefinition(d, foreignPropName);\n\n                        var dependentMemDef = dataType.getMemberDefinition(keyProperties[i]);\n                        if (dependentMemDef) {\n                            dependentMemDef.isDependentProperty = true;\n                            dependentMemDef.navigationPropertyName = association.FromPropertyName;\n                        }\n                    }\n                    association.ReferentialConstraint.push(constraint);\n                }, this);\n            }, this);\n        }\n        //Copy complex type properties\n        if (storageModel.ComplexTypes) {\n            storageModel.ComplexTypes.forEach(function (complexType) {\n                complexType.ReferentialConstraint = complexType.ReferentialConstraint || [];\n\n                complexType.ToType.memberDefinitions.getPublicMappedProperties().forEach(function (d) {\n                    instanceDefinition[complexType.FromPropertyName + '__' + d.name] = buildDbType_copyPropertyDefinition(d);\n                    complexType.ReferentialConstraint.push(buildDbType_createConstrain(complexType.ToType, complexType.FromType, d.name, complexType.FromPropertyName));\n                }, this);\n            }, this);\n        }\n    },\n    buildDbType_generateConvertToFunction: function buildDbType_generateConvertToFunction(storageModel) {\n        return function (logicalEntity) {\n            var dbInstance = new storageModel.PhysicalType();\n            dbInstance.entityState = logicalEntity.entityState;\n\n            //logicalEntity.changedProperties.forEach(function(memberDef){\n            //}, this);\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\n                if (logicalEntity[property.name] !== undefined) {\n                    dbInstance[property.name] = logicalEntity[property.name];\n                }\n            }, this);\n\n            if (storageModel.Associations) {\n                storageModel.Associations.forEach(function (association) {\n                    if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") {\n                        var complexInstance = logicalEntity[association.FromPropertyName];\n                        if (complexInstance !== undefined) {\n                            association.ReferentialConstraint.forEach(function (constrain) {\n                                if (complexInstance !== null) {\n                                    dbInstance[constrain[association.From]] = complexInstance[constrain[association.To]];\n                                } else {\n                                    dbInstance[constrain[association.From]] = null;\n                                }\n                            }, this);\n                        }\n                    }\n                }, this);\n            }\n            if (storageModel.ComplexTypes) {\n                storageModel.ComplexTypes.forEach(function (cmpType) {\n                    var complexInstance = logicalEntity[cmpType.FromPropertyName];\n                    if (complexInstance !== undefined) {\n                        cmpType.ReferentialConstraint.forEach(function (constrain) {\n                            if (complexInstance !== null) {\n                                dbInstance[constrain[cmpType.From]] = complexInstance[constrain[cmpType.To]];\n                            } else {\n                                dbInstance[constrain[cmpType.From]] = null;\n                            }\n                        }, this);\n                    }\n                }, this);\n            }\n            return dbInstance;\n        };\n    },\n\n    bulkInsert: function bulkInsert(a, b, c, callback) {\n        callback.error(new _index.Exception('Not Implemented'));\n    },\n\n    supportedFieldOperations: {\n        value: {\n            length: { dataType: \"number\", allowedIn: \"filter, map\" },\n            substr: { dataType: \"string\", allowedIn: \"filter\", parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }] },\n            toLowerCase: { dataType: \"string\" }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    resolveFieldOperation: function resolveFieldOperation(operationName, expression, frameType) {\n        ///<summary></summary>\n        var result = this.supportedFieldOperations[operationName];\n        if (Array.isArray(result)) {\n            var i = 0;\n            for (; i < result.length; i++) {\n                if (result[i].allowedType === 'default' || _index.Container.resolveType(result[i].allowedType) === _index.Container.resolveType(expression.selector.memberDefinition.type) && frameType && result[i].allowedIn && (Array.isArray(result[i].allowedIn) && result[i].allowedIn.some(function (type) {\n                    return frameType === _index.Container.resolveType(type);\n                }) || !Array.isArray(result[i].allowedIn) && frameType === _index.Container.resolveType(result[i].allowedIn))) {\n                    result = result[i];\n                    break;\n                }\n            }\n            if (i === result.length) {\n                result = undefined;\n            }\n        }\n\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Field operation '\" + operationName + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operationName + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operationName;\n        return result;\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: 'eq', dataType: \"boolean\" }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    resolveBinaryOperator: function resolveBinaryOperator(operator, expression, frameType) {\n        var result = this.supportedBinaryOperators[operator];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Binary operator '\" + operator + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operator + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operator;\n        return result;\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' }\n        },\n        enumerable: true,\n        writable: true\n    },\n    resolveUnaryOperator: function resolveUnaryOperator(operator, expression, frameType) {\n        var result = this.supportedUnaryOperators[operator];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Unary operator '\" + operator + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operator + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operator;\n        return result;\n    },\n\n    supportedSetOperations: {\n        value: {\n            toArray: { invokable: true, allowedIn: [] }\n        },\n        enumerable: true,\n        writable: true\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        var result = this.supportedSetOperations[operation];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Operation '\" + operation + \"' is not supported by the provider\"));\n        };\n        var allowedIn = result.allowedIn || [];\n        if (frameType && allowedIn) {\n            if (allowedIn instanceof Array && !allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(allowedIn instanceof Array) && frameType !== _index.Container.resolveType(allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operation + \" not supported in: \" + frameType.name));\n            }\n        }\n        return result;\n    },\n\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        _index.Guard.raise(new _index.Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n    },\n\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        _index.Guard.raise(new _index.Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n    },\n\n    makePhysicalTypeDefinition: function makePhysicalTypeDefinition(entityDefinition, association) {},\n\n    _beginTran: function _beginTran(tables, isWrite, callBack) {\n        callBack.success(new _index2.default.Transaction());\n    },\n\n    getFieldUrl: function getFieldUrl() {\n        return '#';\n    },\n\n    supportedAutoincrementKeys: {\n        value: {}\n    }\n}, {\n    onRegisterProvider: { value: new _index2.default.Event() },\n    registerProvider: function registerProvider(name, provider) {\n        this.onRegisterProvider.fire({ name: name, provider: provider }, this);\n        _index2.default.RegisteredStorageProviders = _index2.default.RegisteredStorageProviders || [];\n        _index2.default.RegisteredStorageProviders[name] = provider;\n    },\n    getProvider: function getProvider(name) {\n        var provider = _index2.default.RegisteredStorageProviders[name];\n        if (!provider) console.warn(\"Provider not found: '\" + name + \"'\");\n        return provider;\n        /*var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            Guard.raise(new Exception(\"Provider not found: '\" + name + \"'\", \"Not Found\"));\r\n        return provider;*/\n    },\n    isSupported: {\n        get: function get() {\n            return true;\n        },\n        set: function set() {}\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],111:[function(require,module,exports){\n(function (process){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.StorageProviderLoaderBase', null, null, {\n    isSupported: function isSupported(providerName) {\n        _index2.default.Trace.log('Detecting ' + providerName + ' provider support');\n        var supported = true;\n        switch (providerName) {\n            case 'indexedDb':\n                supported = _index2.default.__global.indexedDB || _index2.default.__global.webkitIndexedDB || _index2.default.__global.mozIndexedDB || _index2.default.__global.msIndexedDB && !/^file:/.test(_index2.default.__global.location && _index2.default.__global.location.href);\n                break;\n            case 'storm':\n                supported = 'XMLHttpRequest' in _index2.default.__global;\n                break;\n            case 'webSql':\n            case 'sqLite':\n                supported = 'openDatabase' in _index2.default.__global;\n                break;\n            case 'LocalStore':\n                supported = 'localStorage' in _index2.default.__global && _index2.default.__global.localStorage ? true : false;\n                break;\n            case 'sqLite':\n                supported = 'openDatabase' in _index2.default.__global;\n                break;\n            case 'mongoDB':\n                supported = _index2.default.mongoDBDriver;\n                break;\n            default:\n                break;\n        }\n        _index2.default.Trace.log(providerName + ' provider is ' + (supported ? '' : 'not') + ' supported');\n        return supported;\n    },\n    scriptLoadTimeout: { type: 'int', value: 1000 },\n    scriptLoadInterval: { type: 'int', value: 50 },\n    npmModules: {\n        value: {\n            'indexedDb': 'jaydata-indexeddb',\n            'InMemory': 'jaydata-inmemory',\n            'LocalStore': 'jaydata-inmemory',\n            'mongoDB': 'jaydata-mongodb',\n            'oData': 'jaydata-odata',\n            'webApi': 'jaydata-webapi',\n            'sqLite': 'jaydata-sqlite',\n            'webSql': 'jaydata-sqlite',\n            'storm': 'jaydata-storm'\n        }\n    },\n    ProviderNames: {\n        value: {\n            'indexedDb': 'IndexedDb',\n            'InMemory': 'InMemory',\n            'LocalStore': 'InMemory',\n            'oData': 'oData',\n            'webApi': 'WebApi',\n            'sqLite': 'SqLite',\n            'webSql': 'SqLite',\n            'storm': 'Storm'\n        }\n    },\n    load: function load(providerList, callback) {\n        _index2.default.RegisteredStorageProviders = _index2.default.RegisteredStorageProviders || {};\n\n        _index2.default.Trace.log('Loading provider(s): ' + providerList);\n        callback = _index2.default.typeSystem.createCallbackSetting(callback);\n\n        var self = this;\n        var cacheKey = providerList.join(',');\n        self._fallbackCache = self._fallbackCache || {};\n\n        if (self._fallbackCache[cacheKey]) {\n            callback.success(self._fallbackCache[cacheKey]);\n        } else {\n            this.find(providerList, {\n                success: function success(provider, selectedProvider) {\n                    self._fallbackCache[cacheKey] = provider;\n                    callback.success.call(this, provider);\n                },\n                error: callback.error\n            });\n        }\n    },\n    find: function find(providerList, callback) {\n        var currentProvider = providerList.shift();\n        var currentProvider = this.getVirtual(currentProvider);\n        if (Array.isArray(currentProvider)) {\n            providerList = currentProvider;\n            currentProvider = providerList.shift();\n        }\n\n        while (currentProvider && !this.isSupported(currentProvider)) {\n            currentProvider = providerList.shift();\n        }\n\n        _index2.default.Trace.log('First supported provider is ' + currentProvider);\n\n        if (!currentProvider) {\n            _index2.default.Trace.log('Provider fallback failed');\n            callback.error();\n        }\n\n        if (_index2.default.RegisteredStorageProviders) {\n            _index2.default.Trace.log('Is the ' + currentProvider + ' provider already registered?');\n            var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            if (provider) {\n                _index2.default.Trace.log(currentProvider + ' provider registered');\n                callback.success(provider);\n                return;\n            } else {\n                _index2.default.Trace.log(currentProvider + ' provider not registered');\n            }\n        }\n\n        if (!process.browser) {\n            // NodeJS\n            _index2.default.Trace.log('node.js detected trying to load NPM module');\n            this.loadNpmModule(currentProvider, providerList, callback);\n        } else {\n            _index2.default.Trace.log('Browser detected trying to load provider');\n            this.loadProvider(currentProvider, providerList, callback);\n        }\n    },\n    loadProvider: function loadProvider(currentProvider, providerList, callback) {\n        var self = this;\n        var mappedName = _index2.default.StorageProviderLoader.ProviderNames[currentProvider] || currentProvider;\n        _index2.default.Trace.log(currentProvider + ' provider is mapped to name ' + mappedName + 'Provider');\n        if (mappedName) {\n            var url = this.getUrl(mappedName);\n            _index2.default.Trace.log(currentProvider + ' provider from URL: ' + url);\n\n            var loader = this.loadScript;\n            if (document && document.createElement) {\n                _index2.default.Trace.log('document and document.createElement detected, using script element loader method');\n                loader = this.loadScriptElement;\n            }\n\n            loader.call(this, url, currentProvider, function (successful) {\n                var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n                if (successful && provider) {\n                    _index2.default.Trace.log(currentProvider + ' provider successfully registered');\n                    callback.success(provider);\n                } else if (providerList.length > 0) {\n                    _index2.default.Trace.log(currentProvider + ' provider failed to load, trying to fallback to ' + providerList + ' provider(s)');\n                    self.find(providerList, callback);\n                } else {\n                    _index2.default.Trace.log(currentProvider + ' provider failed to load');\n                    callback.error();\n                }\n            });\n        }\n    },\n    getUrl: function getUrl(providerName) {\n        var jaydataScriptMin = document.querySelector('script[src$=\"jaydata.min.js\"]');\n        var jaydataScript = document.querySelector('script[src$=\"jaydata.js\"]');\n        if (jaydataScriptMin) return jaydataScriptMin.src.substring(0, jaydataScriptMin.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.min.js';else if (jaydataScript) return jaydataScript.src.substring(0, jaydataScript.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.js';else return 'jaydataproviders/' + providerName + 'Provider.js';\n    },\n    loadScript: function loadScript(url, currentProvider, callback) {\n        if (!url) {\n            callback(false);\n            return;\n        }\n\n        function getHttpRequest() {\n            if (_index2.default.__global.XMLHttpRequest) return new XMLHttpRequest();else if (_index2.default.__global.ActiveXObject !== undefined) return new ActiveXObject(\"MsXml2.XmlHttp\");else {\n                _index2.default.Trace.log('XMLHttpRequest or MsXml2.XmlHttp ActiveXObject not found');\n                callback(false);\n                return;\n            }\n        }\n\n        var oXmlHttp = getHttpRequest();\n        oXmlHttp.onreadystatechange = function () {\n            _index2.default.Trace.log('HTTP request is in state: ' + oXmlHttp.readyState);\n            if (oXmlHttp.readyState == 4) {\n                if (oXmlHttp.status == 200 || oXmlHttp.status == 304) {\n                    _index2.default.Trace.log('HTTP request succeeded');\n                    _index2.default.Trace.log('HTTP request response text: ' + oXmlHttp.responseText);\n                    eval.call(_index2.default.__global, oXmlHttp.responseText);\n                    if (typeof callback === 'function') callback(true);else _index2.default.Trace.log('Callback function is undefined');\n                } else {\n                    _index2.default.Trace.log('HTTP request status: ', oXmlHttp.status);\n                    if (typeof callback === 'function') callback(false);else _index2.default.Trace.log('Callback function is undefined');\n                }\n            }\n        };\n        oXmlHttp.open('GET', url, true);\n        oXmlHttp.send(null);\n    },\n    loadScriptElement: function loadScriptElement(url, currentProvider, callback) {\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\n\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        _index2.default.Trace.log('Appending child ' + script + ' to ' + head);\n        head.appendChild(script);\n\n        var loadInterval = this.scriptLoadInterval || 50;\n        var iteration = Math.ceil(this.scriptLoadTimeout / loadInterval);\n        _index2.default.Trace.log('Script element watcher iterating ' + iteration + ' times');\n        function watcher() {\n            _index2.default.Trace.log('Script element watcher iteration ' + iteration);\n            var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            if (provider) {\n                _index2.default.Trace.log(currentProvider + ' provider registered');\n                callback(true);\n            } else {\n                iteration--;\n                if (iteration > 0) {\n                    _index2.default.Trace.log('Script element watcher next iteration');\n                    setTimeout(watcher, loadInterval);\n                } else {\n                    _index2.default.Trace.log('Script element loader failed');\n                    callback(false);\n                }\n            }\n        }\n        setTimeout(watcher, loadInterval);\n    },\n\n    loadNpmModule: function loadNpmModule(currentProvider, providerList, callback) {\n        var provider = null;\n        try {\n            require(this.npmModules[currentProvider]);\n            provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            _index2.default.Trace.log('NPM module loader successfully registered ' + currentProvider + ' provider');\n        } catch (e) {\n            _index2.default.Trace.log('NPM module loader failed for ' + currentProvider + ' provider');\n        }\n\n        if (provider) {\n            callback.success(provider);\n        } else if (providerList.length > 0) {\n            this.find(providerList, callback);\n        } else {\n            callback.error();\n        }\n    },\n\n    virtualProviders: {\n        type: _index2.default.Array,\n        value: {\n            local: {\n                fallbacks: ['webSql', 'indexedDb', 'LocalStore']\n            }\n        }\n    },\n    getVirtual: function getVirtual(name) {\n        if (this.virtualProviders[name]) return [].concat(this.virtualProviders[name].fallbacks);\n\n        return name;\n    }\n});\n\n_index2.default.StorageProviderLoader = new _index2.default.StorageProviderLoaderBase();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n}).call(this,require('_process'))\n\n},{\"../TypeSystem/index.js\":28,\"_process\":5}],112:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.modelBinder.FindProjectionVisitor', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    VisitProjectionExpression: function VisitProjectionExpression(expression) {\n        this.projectionExpression = expression;\n    }\n});\n\n(0, _index.$C)('$data.modelBinder.ModelBinderConfigCompiler', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(query, includes, oDataProvider) {\n        this._query = query;\n        this._includes = includes;\n        this._isoDataProvider = oDataProvider || false;\n    },\n    VisitSingleExpression: function VisitSingleExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitSomeExpression: function VisitSomeExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFindExpression: function VisitFindExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitEveryExpression: function VisitEveryExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFirstExpression: function VisitFirstExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression) {\n        if (expression.cfg.returnType) {\n            var returnType = _index.Container.resolveType(expression.cfg.returnType);\n            if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo(_index2.default.Queryable) || returnType === _index2.default.Array) {\n                this._defaultModelBinder(expression);\n            } else {\n                var builder = _index.Container.createqueryBuilder();\n                builder.modelBinderConfig['$type'] = returnType;\n                if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo(_index2.default.Entity)) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + expression.cfg.serviceName];\n                } else {\n                    builder.modelBinderConfig['$type'] = returnType;\n                    builder.modelBinderConfig['$value'] = function (a, v) {\n                        return expression.cfg.serviceName in v ? v[expression.cfg.serviceName] : v.value;\n                    };\n                }\n                this.VisitExpression(expression, builder);\n                builder.resetModelBinderProperty();\n                this._query.modelBinderConfig = builder.modelBinderConfig;\n            }\n        }\n    },\n    VisitCountExpression: function VisitCountExpression(expression) {\n        var builder = _index.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _index2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression) {\n        var builder = _index.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _index2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.type;\n        builder.modelBinderConfig['$value'] = expression.value;\n    },\n\n    VisitExpression: function VisitExpression(expression, builder) {\n        var projVisitor = _index.Container.createFindProjectionVisitor();\n        projVisitor.Visit(expression);\n\n        if (projVisitor.projectionExpression) {\n            this.Visit(projVisitor.projectionExpression, builder);\n        } else {\n            this.DefaultSelection(builder, this._query.defaultType, this._includes);\n        }\n    },\n    _defaultModelBinder: function _defaultModelBinder(expression) {\n        var builder = _index.Container.createqueryBuilder();\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        if (this._isoDataProvider) {\n            builder.modelBinderConfig['$selector'] = ['json:d.results', 'json:d', 'json:results', 'json:value'];\n        }\n        builder.modelBinderConfig['$item'] = {};\n        builder.selectModelBinderProperty('$item');\n\n        this.VisitExpression(expression, builder);\n\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    _addPropertyToModelBinderConfig: function _addPropertyToModelBinderConfig(elementType, builder) {\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\n        if (elementType.memberDefinitions) {\n            elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\n                if (!storageModel || storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name]) {\n\n                    var type = _index.Container.resolveType(prop.dataType);\n                    if (!storageModel && this._query.context.storageProvider.supportedDataTypes.indexOf(type) < 0) {\n                        //complex type\n                        builder.selectModelBinderProperty(prop.name);\n                        builder.modelBinderConfig['$type'] = type;\n                        if (this._isoDataProvider) {\n                            builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\n                        } else {\n                            builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\n                        }\n                        this._addPropertyToModelBinderConfig(type, builder);\n                        builder.popModelBinderProperty();\n                    } else {\n                        if (prop.key) {\n                            builder.addKeyField(prop.name);\n                        }\n                        if (prop.concurrencyMode === _index2.default.ConcurrencyMode.Fixed) {\n                            builder.modelBinderConfig[prop.name] = { $selector: 'json:__metadata', $source: 'etag' };\n                        } else if (type === _index2.default.Array && prop.elementType) {\n                            builder.selectModelBinderProperty(prop.name);\n                            builder.modelBinderConfig['$type'] = type;\n                            if (this._isoDataProvider) {\n                                builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\n                            } else {\n                                builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\n                            }\n                            builder.selectModelBinderProperty('$item');\n                            var arrayElementType = _index.Container.resolveType(prop.elementType);\n                            builder.modelBinderConfig['$type'] = arrayElementType;\n                            this._addPropertyToModelBinderConfig(arrayElementType, builder);\n                            builder.popModelBinderProperty();\n                            builder.popModelBinderProperty();\n                        } else {\n                            builder.modelBinderConfig[prop.name] = prop.name;\n                        }\n                    }\n                }\n            }, this);\n        } else {\n            /*builder._binderConfig = {\r\n                $selector: ['json:results'],\r\n                $type: $data.Array,\r\n                $item:{\r\n                    $type: elementType,\r\n                    $value: function (meta, data) { return data; }\r\n                }\r\n            }*/\n            if (builder._binderConfig.$type === _index2.default.Array) {\n                builder._binderConfig.$item = builder._binderConfig.$item || {};\n                builder.modelBinderConfig = builder._binderConfig.$item;\n            }\n        }\n        if (storageModel) {\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\n        }\n    },\n    _addComplexTypeProperties: function _addComplexTypeProperties(complexTypes, builder) {\n        complexTypes.forEach(function (ct) {\n            if (ct.ToType !== _index2.default.Array) {\n                builder.selectModelBinderProperty(ct.FromPropertyName);\n                builder.modelBinderConfig['$type'] = ct.ToType;\n                if (this._isoDataProvider) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + ct.FromPropertyName + '.results', 'json:' + ct.FromPropertyName];\n                } else {\n                    builder.modelBinderConfig['$selector'] = 'json:' + ct.FromPropertyName;\n                }\n                this._addPropertyToModelBinderConfig(ct.ToType, builder);\n\n                builder.popModelBinderProperty();\n            } else {\n                var dt = ct.ToType;\n                var et = _index.Container.resolveType(ct.FromType.memberDefinitions.getMember(ct.FromPropertyName).elementType);\n                if (dt === _index2.default.Array && et && et.isAssignableTo && et.isAssignableTo(_index2.default.Entity)) {\n                    config = {\n                        $type: _index2.default.Array,\n                        $selector: 'json:' + ct.FromPropertyName,\n                        $item: {\n                            $type: et\n                        }\n                    };\n                    var md = et.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < md.length; i++) {\n                        config.$item[md[i].name] = { $type: md[i].type, $source: md[i].name };\n                    }\n                    builder.modelBinderConfig[ct.FromPropertyName] = config;\n                } else {\n                    builder.modelBinderConfig[ct.FromPropertyName] = {\n                        $type: ct.ToType,\n                        $source: ct.FromPropertyName\n                    };\n                }\n            }\n        }, this);\n    },\n    DefaultSelection: function DefaultSelection(builder, type, allIncludes) {\n        //no projection, get all item from entitySet\n        builder.modelBinderConfig['$type'] = type;\n\n        var storageModel = this._query.context._storageModel.getStorageModel(type);\n        this._addPropertyToModelBinderConfig(type, builder);\n        if (allIncludes) {\n            allIncludes.forEach(function (include) {\n                var includes = include.name.split('.');\n                var association = null;\n                var tmpStorageModel = storageModel;\n                var itemCount = 0;\n                for (var i = 0; i < includes.length; i++) {\n                    if (builder.modelBinderConfig.$item) {\n                        builder.selectModelBinderProperty('$item');\n                        itemCount++;\n                    }\n                    builder.selectModelBinderProperty(includes[i]);\n                    association = tmpStorageModel.Associations[includes[i]];\n                    tmpStorageModel = this._query.context._storageModel.getStorageModel(association.ToType);\n                }\n                if (this._isoDataProvider) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + includes[includes.length - 1] + '.results', 'json:' + includes[includes.length - 1]];\n                } else {\n                    builder.modelBinderConfig['$selector'] = 'json:' + includes[includes.length - 1];\n                }\n                if (association.ToMultiplicity === '*') {\n                    builder.modelBinderConfig['$type'] = _index2.default.Array;\n                    builder.selectModelBinderProperty('$item');\n                    builder.modelBinderConfig['$type'] = include.type;\n                    this._addPropertyToModelBinderConfig(include.type, builder);\n                    builder.popModelBinderProperty();\n                } else {\n                    builder.modelBinderConfig['$type'] = include.type;\n                    this._addPropertyToModelBinderConfig(include.type, builder);\n                }\n\n                for (var i = 0; i < includes.length + itemCount; i++) {\n                    builder.popModelBinderProperty();\n                }\n            }, this);\n        }\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, builder) {\n        this.hasProjection = true;\n        this.Visit(expression.selector, builder);\n\n        if (expression.selector && expression.selector.expression instanceof _index2.default.Expressions.ObjectLiteralExpression) {\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || _index2.default.Object;\n        }\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, builder) {\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression || expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            this.VisitEntityAsProjection(expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n    },\n    VisitEntityAsProjection: function VisitEntityAsProjection(expression, builder) {\n        this.mapping = '';\n        this.Visit(expression.expression, builder);\n        var includes;\n        if (this.mapping && this._includes instanceof Array) {\n            includes = this._includes.filter(function (inc) {\n                return inc.name.indexOf(this.mapping + '.') === 0;\n            }, this);\n            includes = includes.map(function (inc) {\n                return { name: inc.name.replace(this.mapping + '.', ''), type: inc.type };\n            }, this);\n\n            if (includes.length > 0) {\n                this.DefaultSelection(builder, expression.expression.entityType, includes);\n                //console.warn('WARN: include for mapped properties is not supported!');\n            }\n        }\n\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression) {\n            this.DefaultSelection(builder, expression.expression.entityType /*, includes*/);\n        } else if (expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n                builder.modelBinderConfig.$type = _index2.default.Array;\n                builder.modelBinderConfig.$item = {};\n                builder.selectModelBinderProperty('$item');\n                this.DefaultSelection(builder, expression.expression.elementType /*, includes*/);\n                builder.popModelBinderProperty();\n            }\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\n        if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\n            this._addPropertyToModelBinderConfig(_index.Container.resolveType(expression.memberDefinition.type), builder);\n        } else {\n            if (!(builder.modelBinderConfig.$type && _index.Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo && _index.Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo(_index2.default.Entity))) builder.modelBinderConfig['$source'] = expression.memberName;\n        }\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, builder) {\n        if (expression.source instanceof _index2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, builder);\n            this.Visit(expression.selector, builder);\n        }\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            if (builder.modelBinderConfig.$selector instanceof _index2.default.Array) {\n                var temp = builder.modelBinderConfig.$selector[1];\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.selector.memberName + '.results';\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.selector.memberName;\n            } else {\n                builder.modelBinderConfig.$selector += '.' + expression.selector.memberName;\n            }\n        } else {\n            if (this._isoDataProvider) {\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.selector.memberName + '.results', 'json:' + expression.selector.memberName];\n            } else {\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.selector.memberName;\n            }\n        }\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, builder) {\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            if (builder.modelBinderConfig.$selector instanceof _index2.default.Array) {\n                var temp = builder.modelBinderConfig.$selector[1];\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.associationInfo.FromPropertyName + '.results';\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.associationInfo.FromPropertyName;\n            } else {\n                builder.modelBinderConfig.$selector += '.' + expression.associationInfo.FromPropertyName;\n            }\n        } else {\n            if (this._isoDataProvider) {\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.associationInfo.FromPropertyName + '.results', 'json:' + expression.associationInfo.FromPropertyName];\n            } else {\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.associationInfo.FromPropertyName;\n            }\n        }\n\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.associationInfo.FromPropertyName;\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = _index2.default.Object;\n        expression.members.forEach(function (of) {\n            this.Visit(of, builder);\n        }, this);\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, builder) {\n        builder.selectModelBinderProperty(expression.fieldName);\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression || expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            this.VisitEntityAsProjection(expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n        builder.popModelBinderProperty();\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],113:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Transaction', null, null, {\n    constructor: function constructor() {\n        this._objectId = new Date().getTime();\n        _index2.default.Trace.log(\"create: \", this._objectId);\n\n        this.oncomplete = new _index2.default.Event(\"oncomplete\", this);\n        this.onerror = new _index2.default.Event(\"onerror\", this);\n    },\n    abort: function abort() {\n        _index.Guard.raise(new _index.Exception('Not Implemented', 'Not Implemented', arguments));\n    },\n\n    _objectId: { type: _index2.default.Integer },\n    transaction: { type: _index2.default.Object },\n\n    oncomplete: { type: _index2.default.Event },\n    onerror: { type: _index2.default.Event }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":28}],114:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Validation.Defaults', null, null, null, {\n    validators: {\n        value: {\n            required: function required(value, definedValue) {\n                return !Object.isNullOrUndefined(value);\n            },\n            customValidator: function customValidator(value, definedValue) {\n                return Object.isNullOrUndefined(value) || typeof definedValue == \"function\" ? definedValue(value) : true;\n            },\n\n            minValue: function minValue(value, definedValue) {\n                return Object.isNullOrUndefined(value) || value >= definedValue;\n            },\n            maxValue: function maxValue(value, definedValue) {\n                return Object.isNullOrUndefined(value) || value <= definedValue;\n            },\n\n            minLength: function minLength(value, definedValue) {\n                return Object.isNullOrUndefined(value) || value.length >= definedValue;\n            },\n            maxLength: function maxLength(value, definedValue) {\n                return Object.isNullOrUndefined(value) || value.length <= definedValue;\n            },\n            length: function length(value, definedValue) {\n                return Object.isNullOrUndefined(value) || value.length == definedValue;\n            },\n            regex: function regex(value, definedValue) {\n                return Object.isNullOrUndefined(value) || value.match(typeof definedValue === 'string' ? new RegExp(definedValue.indexOf('/') === 0 && definedValue.lastIndexOf('/') === definedValue.length - 1 ? definedValue.slice(1, -1) : definedValue) : definedValue);\n            }\n        }\n    },\n\n    _getGroupValidations: function _getGroupValidations(validations) {\n        var validators = {};\n        if (Array.isArray(validations)) {\n            for (var i = 0; i < validations.length; i++) {\n                var validator = validations[i];\n                if (typeof this.validators[validator] === 'function') {\n                    validators[validator] = this.validators[validator];\n                }\n            }\n        }\n\n        return validators;\n    }\n});\n\n_index2.default.Class.define('$data.Validation.EntityValidation', _index2.default.Validation.EntityValidationBase, null, {\n\n    ValidateEntity: function ValidateEntity(entity) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n\n        var errors = [];\n        entity.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            errors = errors.concat(this.ValidateEntityField(entity, memDef, undefined, true));\n        }, this);\n        return errors;\n    },\n    ValidateEntityField: function ValidateEntityField(entity, memberDefinition, newValue, valueNotSet) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        var errors = [];\n        var resolvedType = _index.Container.resolveType(memberDefinition.dataType);\n        var typeName = _index.Container.resolveName(resolvedType);\n        var value = !valueNotSet ? newValue : entity[memberDefinition.name];\n\n        if (!memberDefinition.inverseProperty && resolvedType && typeof resolvedType.isAssignableTo === 'function' && resolvedType.isAssignableTo(_index2.default.Entity)) {\n            typeName = _index2.default.Entity.fullName;\n        }\n\n        this.fieldValidate(entity, memberDefinition, value, errors, typeName);\n        return errors;\n    },\n\n    getValidationValue: function getValidationValue(memberDefinition, validationName) {\n        var value;\n        if (memberDefinition[validationName] && memberDefinition[validationName].value) value = memberDefinition[validationName].value;else value = memberDefinition[validationName];\n\n        if (this.convertableValidation[validationName]) {\n            var typeToConvert;\n            if (this.convertableValidation[validationName] === true) {\n                typeToConvert = memberDefinition.type;\n            } else {\n                typeToConvert = this.convertableValidation[validationName];\n            }\n\n            if (typeToConvert) value = _index.Container.convertTo(value, typeToConvert, memberDefinition.elementType);\n        }\n\n        return value;\n    },\n    getValidationMessage: function getValidationMessage(memberDefinition, validationName, defaultMessage) {\n        var eMessage = defaultMessage;\n        if (_typeof(memberDefinition[validationName]) == \"object\" && memberDefinition[validationName].message) eMessage = memberDefinition[validationName].message;else if (memberDefinition.errorMessage) eMessage = memberDefinition.errorMessage;\n\n        return eMessage;\n    },\n    createValidationError: function createValidationError(memberDefinition, validationName, defaultMessage) {\n        return new _index2.default.Validation.ValidationError(this.getValidationMessage(memberDefinition, validationName, defaultMessage), memberDefinition, validationName);\n    },\n\n    convertableValidation: {\n        value: {\n            required: '$data.Boolean',\n            minValue: true,\n            maxValue: true,\n            minLength: '$data.Integer',\n            maxLength: '$data.Integer',\n            length: '$data.Integer'\n        }\n\n    },\n    supportedValidations: {\n        value: {\n            //'$data.Entity': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.ObjectID': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Byte': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.SByte': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Decimal': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Float': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Number': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int16': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Integer': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int32': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int64': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.String': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length', 'regex']),\n            '$data.Date': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.DateTimeOffset': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Time': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Day': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Duration': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Boolean': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Array': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'length']),\n            '$data.Object': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Guid': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Blob': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length']),\n            '$data.GeographyPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyCollection': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryCollection': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator'])\n        }\n    },\n\n    fieldValidate: function fieldValidate(entity, memberDefinition, value, errors, validationTypeName) {\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        ///<param name=\"value\" type=\"Object\" />\n        ///<param name=\"errors\" type=\"Array\" />\n        ///<param name=\"validationTypeName\" type=\"string\" />\n        if (entity.entityState == _index2.default.EntityState.Modified && entity.changedProperties && entity.changedProperties.indexOf(memberDefinition) < 0) return;\n\n        var validatonGroup = this.supportedValidations[validationTypeName];\n        if (validatonGroup) {\n            var validations = Object.keys(validatonGroup);\n            validations.forEach(function (validation) {\n                if (memberDefinition[validation] && validatonGroup[validation] && !validatonGroup[validation].call(entity, value, this.getValidationValue(memberDefinition, validation))) errors.push(this.createValidationError(memberDefinition, validation, 'Validation error!'));\n            }, this);\n\n            if (validationTypeName === _index2.default.Entity.fullName && value instanceof _index2.default.Entity && !value.isValid()) {\n                errors.push(this.createValidationError(memberDefinition, 'ComplexProperty', 'Validation error!'));\n            }\n        }\n    }\n\n}, null);\n\n_index2.default.Validation.Entity = new _index2.default.Validation.EntityValidation();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],115:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Validation.ValidationError', null, null, {\n    constructor: function constructor(message, propertyDefinition, type) {\n        ///<param name=\"message\" type=\"string\" />\n        ///<param name=\"propertyDefinition\" type=\"$data.MemberDefinition\" />\n\n        this.Message = message;\n        this.PropertyDefinition = propertyDefinition;\n        this.Type = type;\n    },\n    Type: { dataType: 'string' },\n    Message: { dataType: \"string\" },\n    PropertyDefinition: { dataType: _index2.default.MemberDefinition }\n}, null);\n\n_index2.default.Class.define('$data.Validation.EntityValidationBase', null, null, {\n\n    ValidateEntity: function ValidateEntity(entity) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        return [];\n    },\n\n    ValidateEntityField: function ValidateEntityField(entity, memberDefinition) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        return [];\n    },\n\n    getValidationValue: function getValidationValue(memberDefinition, validationName) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    getValidationMessage: function getValidationMessage(memberDefinition, validationName, defaultMessage) {\n        _index.Guard.raise(\"Pure class\");\n    }\n\n}, null);\n\n_index2.default.Validation = _index2.default.Validation || {};\n_index2.default.Validation.Entity = new _index2.default.Validation.EntityValidationBase();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":28}],116:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('./Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _EntityValidationBase = require('./Validation/EntityValidationBase.js');\n\nvar _EntityValidationBase2 = _interopRequireDefault(_EntityValidationBase);\n\nvar _EntityValidation = require('./Validation/EntityValidation.js');\n\nvar _EntityValidation2 = _interopRequireDefault(_EntityValidation);\n\nvar _ChangeDistributorBase = require('./Notifications/ChangeDistributorBase.js');\n\nvar _ChangeDistributorBase2 = _interopRequireDefault(_ChangeDistributorBase);\n\nvar _ChangeCollectorBase = require('./Notifications/ChangeCollectorBase.js');\n\nvar _ChangeCollectorBase2 = _interopRequireDefault(_ChangeCollectorBase);\n\nvar _ChangeDistributor = require('./Notifications/ChangeDistributor.js');\n\nvar _ChangeDistributor2 = _interopRequireDefault(_ChangeDistributor);\n\nvar _ChangeCollector = require('./Notifications/ChangeCollector.js');\n\nvar _ChangeCollector2 = _interopRequireDefault(_ChangeCollector);\n\nvar _Transaction = require('./Transaction.js');\n\nvar _Transaction2 = _interopRequireDefault(_Transaction);\n\nvar _Access = require('./Access.js');\n\nvar _Access2 = _interopRequireDefault(_Access);\n\nvar _Promise = require('./Promise.js');\n\nvar _Promise2 = _interopRequireDefault(_Promise);\n\nvar _Entity = require('./Entity.js');\n\nvar _Entity2 = _interopRequireDefault(_Entity);\n\nvar _Enum = require('./Enum.js');\n\nvar _Enum2 = _interopRequireDefault(_Enum);\n\nvar _RelatedEntityProxy = require('./RelatedEntityProxy.js');\n\nvar _RelatedEntityProxy2 = _interopRequireDefault(_RelatedEntityProxy);\n\nvar _EntityContext = require('./EntityContext.js');\n\nvar _EntityContext2 = _interopRequireDefault(_EntityContext);\n\nvar _QueryProvider = require('./QueryProvider.js');\n\nvar _QueryProvider2 = _interopRequireDefault(_QueryProvider);\n\nvar _ModelBinder = require('./ModelBinder.js');\n\nvar _ModelBinder2 = _interopRequireDefault(_ModelBinder);\n\nvar _QueryBuilder = require('./QueryBuilder.js');\n\nvar _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);\n\nvar _Query = require('./Query.js');\n\nvar _Query2 = _interopRequireDefault(_Query);\n\nvar _Queryable = require('./Queryable.js');\n\nvar _Queryable2 = _interopRequireDefault(_Queryable);\n\nvar _EntitySet = require('./EntitySet.js');\n\nvar _EntitySet2 = _interopRequireDefault(_EntitySet);\n\nvar _EntityState = require('./EntityState.js');\n\nvar _EntityState2 = _interopRequireDefault(_EntityState);\n\nvar _EntityAttachModes = require('./EntityAttachModes.js');\n\nvar _EntityAttachModes2 = _interopRequireDefault(_EntityAttachModes);\n\nvar _EntityStateManager = require('./EntityStateManager.js');\n\nvar _EntityStateManager2 = _interopRequireDefault(_EntityStateManager);\n\nvar _ItemStore = require('./ItemStore.js');\n\nvar _ItemStore2 = _interopRequireDefault(_ItemStore);\n\nvar _StorageProviderLoader = require('./StorageProviderLoader.js');\n\nvar _StorageProviderLoader2 = _interopRequireDefault(_StorageProviderLoader);\n\nvar _StorageProviderBase = require('./StorageProviderBase.js');\n\nvar _StorageProviderBase2 = _interopRequireDefault(_StorageProviderBase);\n\nvar _ServiceOperation = require('./ServiceOperation.js');\n\nvar _ServiceOperation2 = _interopRequireDefault(_ServiceOperation);\n\nvar _EntityWrapper = require('./EntityWrapper.js');\n\nvar _EntityWrapper2 = _interopRequireDefault(_EntityWrapper);\n\nvar _jQueryAjaxWrapper = require('./Ajax/jQueryAjaxWrapper.js');\n\nvar _jQueryAjaxWrapper2 = _interopRequireDefault(_jQueryAjaxWrapper);\n\nvar _WinJSAjaxWrapper = require('./Ajax/WinJSAjaxWrapper.js');\n\nvar _WinJSAjaxWrapper2 = _interopRequireDefault(_WinJSAjaxWrapper);\n\nvar _ExtJSAjaxWrapper = require('./Ajax/ExtJSAjaxWrapper.js');\n\nvar _ExtJSAjaxWrapper2 = _interopRequireDefault(_ExtJSAjaxWrapper);\n\nvar _AjaxStub = require('./Ajax/AjaxStub.js');\n\nvar _AjaxStub2 = _interopRequireDefault(_AjaxStub);\n\nvar _modelBinderConfigCompiler = require('./StorageProviders/modelBinderConfigCompiler.js');\n\nvar _modelBinderConfigCompiler2 = _interopRequireDefault(_modelBinderConfigCompiler);\n\nvar _AuthenticationBase = require('./Authentication/AuthenticationBase.js');\n\nvar _AuthenticationBase2 = _interopRequireDefault(_AuthenticationBase);\n\nvar _Anonymous = require('./Authentication/Anonymous.js');\n\nvar _Anonymous2 = _interopRequireDefault(_Anonymous);\n\nvar _FacebookAuth = require('./Authentication/FacebookAuth.js');\n\nvar _FacebookAuth2 = _interopRequireDefault(_FacebookAuth);\n\nvar _BasicAuth = require('./Authentication/BasicAuth.js');\n\nvar _BasicAuth2 = _interopRequireDefault(_BasicAuth);\n\nvar _deferred = require('../JayDataModules/deferred.js');\n\nvar _deferred2 = _interopRequireDefault(_deferred);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import JayStorm from './JayStorm.js';\n\nexports.default = _index2.default;\n//import JaySvcUtil from '../JaySvcUtil/JaySvcUtil.js';\n\nmodule.exports = exports['default'];\n\n},{\"../JayDataModules/deferred.js\":8,\"../TypeSystem/index.js\":28,\"./Access.js\":32,\"./Ajax/AjaxStub.js\":33,\"./Ajax/ExtJSAjaxWrapper.js\":34,\"./Ajax/WinJSAjaxWrapper.js\":35,\"./Ajax/jQueryAjaxWrapper.js\":36,\"./Authentication/Anonymous.js\":37,\"./Authentication/AuthenticationBase.js\":38,\"./Authentication/BasicAuth.js\":39,\"./Authentication/FacebookAuth.js\":40,\"./Entity.js\":41,\"./EntityAttachModes.js\":42,\"./EntityContext.js\":43,\"./EntitySet.js\":44,\"./EntityState.js\":45,\"./EntityStateManager.js\":46,\"./EntityWrapper.js\":47,\"./Enum.js\":48,\"./Expressions/index.js\":96,\"./ItemStore.js\":97,\"./ModelBinder.js\":98,\"./Notifications/ChangeCollector.js\":99,\"./Notifications/ChangeCollectorBase.js\":100,\"./Notifications/ChangeDistributor.js\":101,\"./Notifications/ChangeDistributorBase.js\":102,\"./Promise.js\":103,\"./Query.js\":104,\"./QueryBuilder.js\":105,\"./QueryProvider.js\":106,\"./Queryable.js\":107,\"./RelatedEntityProxy.js\":108,\"./ServiceOperation.js\":109,\"./StorageProviderBase.js\":110,\"./StorageProviderLoader.js\":111,\"./StorageProviders/modelBinderConfigCompiler.js\":112,\"./Transaction.js\":113,\"./Validation/EntityValidation.js\":114,\"./Validation/EntityValidationBase.js\":115}],\"jaydata/core\":[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('./TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('./Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = require('./JaySvcUtil/index.js');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nvar _index7 = require('./Types/index.js');\n\nvar _index8 = _interopRequireDefault(_index7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"./JaySvcUtil/index.js\":12,\"./TypeSystem/index.js\":28,\"./Types/Expressions/index.js\":96,\"./Types/index.js\":116}]},{},[])\n\n\t/*var $data = require('jaydata/core');\r\n\t$data.version = 'JayData 1.5.0';\r\n\t$data.versionNumber = '1.5.0';*/\r\n\r\n\tif (typeof window !== \"undefined\"){\r\n\t\twindow.require = require;\r\n\t}\r\n\r\n\tif (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n\t\tmodule.exports = require('jaydata/core')\r\n\t} else if (typeof define === \"function\" && define.amd) {\r\n\t\tvar interopRequire = require;\r\n\t\tdefine([], function(){\r\n\t\t\treturn interopRequire('jaydata/core');\r\n\t\t});\r\n\r\n\t\tdefine('jaydata/core', [], function(){\r\n\t\t\treturn interopRequire('jaydata/core');\r\n\t\t});\r\n\t} else {\r\n\t\tvar g;\r\n\t\tif (typeof window !== \"undefined\") {\r\n\t\t\tg = window\r\n\t\t} else if (typeof global !== \"undefined\") {\r\n\t\t\tg = global\r\n\t\t} else if (typeof self !== \"undefined\") {\r\n\t\t\tg = self\r\n\t\t} else {\r\n\t\t\tg = this\r\n\t\t}\r\n\t\tg.$data = require('jaydata/core');\r\n\t}\r\n})();\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.acorn = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar pp = _state.Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp.checkPropClash = function (prop, propHash) {\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n  var key = prop.key;var name = undefined;\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;break;\n    case \"Literal\":\n      name = String(key.value);break;\n    default:\n      return;\n  }\n  var kind = prop.kind;\n\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n      propHash.proto = true;\n    }\n    return;\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var isGetSet = kind !== \"init\";\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raise(key.start, \"Redefinition of property\");\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp.parseExpression = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === _tokentype.types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(_tokentype.types.comma)) node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.type == _tokentype.types._yield && this.inGenerator) return this.parseYield();\n\n  var validateDestructuring = false;\n  if (!refDestructuringErrors) {\n    refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n    validateDestructuring = true;\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name) this.potentialArrowAt = this.start;\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.type.isAssign) {\n    if (validateDestructuring) this.checkPatternErrors(refDestructuringErrors, true);\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;\n    refDestructuringErrors.shorthandAssign = 0; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else {\n    if (validateDestructuring) this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  if (this.eat(_tokentype.types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(_tokentype.types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp.parseExprOps = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.left = left;\n      node.operator = this.value;\n      var op = this.type;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n      this.finishNode(node, op === _tokentype.types.logicalOR || op === _tokentype.types.logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp.parseMaybeUnary = function (refDestructuringErrors) {\n  if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === _tokentype.types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary();\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raise(node.start, \"Deleting local variable in strict mode\");\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprSubscripts(refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  while (this.type.postfix && !this.canInsertSemicolon()) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.prefix = false;\n    node.argument = expr;\n    this.checkLVal(expr);\n    this.next();\n    expr = this.finishNode(node, \"UpdateExpression\");\n  }\n  return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp.parseExprSubscripts = function (refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (this.eat(_tokentype.types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseIdent(true);\n      node.computed = false;\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(_tokentype.types.bracketL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(_tokentype.types.bracketR);\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(_tokentype.types.parenL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseExprList(_tokentype.types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (this.type === _tokentype.types.backQuote) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate();\n      base = this.finishNode(node, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp.parseExprAtom = function (refDestructuringErrors) {\n  var node = undefined,\n      canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n    case _tokentype.types._super:\n      if (!this.inFunction) this.raise(this.start, \"'super' outside of function or class\");\n    case _tokentype.types._this:\n      var type = this.type === _tokentype.types._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case _tokentype.types._yield:\n      if (this.inGenerator) this.unexpected();\n\n    case _tokentype.types.name:\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var id = this.parseIdent(this.type !== _tokentype.types.name);\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);\n      return id;\n\n    case _tokentype.types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = { pattern: value.pattern, flags: value.flags };\n      return node;\n\n    case _tokentype.types.num:case _tokentype.types.string:\n      return this.parseLiteral(this.value);\n\n    case _tokentype.types._null:case _tokentype.types._true:case _tokentype.types._false:\n      node = this.startNode();\n      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _tokentype.types.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow);\n\n    case _tokentype.types.bracketL:\n      node = this.startNode();\n      this.next();\n      // check whether this is array comprehension or regular array\n      if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {\n        return this.parseComprehension(node, false);\n      }\n      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(false, refDestructuringErrors);\n\n    case _tokentype.types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case _tokentype.types._class:\n      return this.parseClass(this.startNode(), false);\n\n    case _tokentype.types._new:\n      return this.parseNew();\n\n    case _tokentype.types.backQuote:\n      return this.parseTemplate();\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp.parseParenExpression = function () {\n  this.expect(_tokentype.types.parenL);\n  var val = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  return val;\n};\n\npp.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val = undefined;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {\n      return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);\n    }\n\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true;\n    var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 },\n        spreadStart = undefined,\n        innerParenStart = undefined;\n    while (this.type !== _tokentype.types.parenR) {\n      first ? first = false : this.expect(_tokentype.types.comma);\n      if (this.type === _tokentype.types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRest()));\n        break;\n      } else {\n        if (this.type === _tokentype.types.parenL && !innerParenStart) {\n          innerParenStart = this.start;\n        }\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(_tokentype.types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, true);\n      if (innerParenStart) this.unexpected(innerParenStart);\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length) this.unexpected(this.lastTokStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp.parseParenItem = function (item) {\n  return item;\n};\n\npp.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\") this.raise(node.property.start, \"The only valid meta property for new is new.target\");\n    if (!this.inFunction) this.raise(node.start, \"new.target can only be used in functions\");\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, false);else node.arguments = empty;\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp.parseTemplateElement = function () {\n  var elem = this.startNode();\n  elem.value = {\n    raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.value\n  };\n  this.next();\n  elem.tail = this.type === _tokentype.types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp.parseTemplate = function () {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(_tokentype.types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(_tokentype.types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement());\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp.parseObj = function (isPattern, refDestructuringErrors) {\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var prop = this.startNode(),\n        isGenerator = undefined,\n        startPos = undefined,\n        startLoc = undefined;\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern) isGenerator = this.eat(_tokentype.types.star);\n    }\n    this.parsePropertyName(prop);\n    this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors);\n    this.checkPropClash(prop, propHash);\n    node.properties.push(this.finishNode(prop, \"Property\"));\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n  if (this.eat(_tokentype.types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator);\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR)) {\n    if (isGenerator || isPattern) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\") this.raise(start, \"getter should have no params\");else this.raise(start, \"setter should have exactly one param\");\n    }\n    if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raise(prop.value.params[0].start, \"Setter cannot use rest params\");\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    prop.kind = \"init\";\n    if (isPattern) {\n      if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name)) this.raise(prop.key.start, \"Binding \" + prop.key.name);\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {\n      if (!refDestructuringErrors.shorthandAssign) refDestructuringErrors.shorthandAssign = this.start;\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else this.unexpected();\n};\n\npp.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(_tokentype.types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(_tokentype.types.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);\n};\n\n// Initialize empty function node.\n\npp.initFunction = function (node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n};\n\n// Parse object or class method.\n\npp.parseMethod = function (isGenerator) {\n  var node = this.startNode();\n  this.initFunction(node);\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false);\n  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n  this.parseFunctionBody(node, false);\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\n// Parse arrow function expression with given parameters.\n\npp.parseArrowExpression = function (node, params) {\n  this.initFunction(node);\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\n// Parse function body and check parameters.\n\npp.parseFunctionBody = function (node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.inFunction,\n        oldInGen = this.inGenerator,\n        oldLabels = this.labels;\n    this.inFunction = true;this.inGenerator = node.generator;this.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.inFunction = oldInFunc;this.inGenerator = oldInGen;this.labels = oldLabels;\n  }\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {\n    var oldStrict = this.strict;\n    this.strict = true;\n    if (node.id) this.checkLVal(node.id, true);\n    this.checkParams(node);\n    this.strict = oldStrict;\n  } else if (isArrowFunction) {\n    this.checkParams(node);\n  }\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp.checkParams = function (node) {\n  var nameHash = {};\n  for (var i = 0; i < node.params.length; i++) {\n    this.checkLVal(node.params[i], true, nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.type === close && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n        refDestructuringErrors.trailingComma = this.lastTokStart;\n      }\n      if (allowTrailingComma && this.afterTrailingComma(close)) break;\n    } else first = false;\n\n    var elt = undefined;\n    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) elt = this.parseSpread(refDestructuringErrors);else elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    elts.push(elt);\n  }\n  return elts;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp.parseIdent = function (liberal) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") liberal = false;\n  if (this.type === _tokentype.types.name) {\n    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1)) this.raise(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n    node.name = this.value;\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\n// Parses yield expression inside generator.\n\npp.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(_tokentype.types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n// Parses array and generator comprehensions.\n\npp.parseComprehension = function (node, isGenerator) {\n  node.blocks = [];\n  while (this.type === _tokentype.types._for) {\n    var block = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    block.left = this.parseBindingAtom();\n    this.checkLVal(block.left, true);\n    this.expectContextual(\"of\");\n    block.right = this.parseExpression();\n    this.expect(_tokentype.types.parenR);\n    node.blocks.push(this.finishNode(block, \"ComprehensionBlock\"));\n  }\n  node.filter = this.eat(_tokentype.types._if) ? this.parseParenExpression() : null;\n  node.body = this.parseExpression();\n  this.expect(isGenerator ? _tokentype.types.parenR : _tokentype.types.bracketR);\n  node.generator = isGenerator;\n  return this.finishNode(node, \"ComprehensionExpression\");\n};\n\n},{\"./state\":10,\"./tokentype\":14}],2:[function(_dereq_,module,exports){\n// This is a trick taken from Esprima. It turns out that, on\n// non-Chrome browsers, to check whether a string is in a set, a\n// predicate containing a big ugly `switch` statement is faster than\n// a regular expression, and on Chrome the two are about on par.\n// This function uses `eval` (non-lexical) to produce such a\n// predicate from a space-separated string of words.\n//\n// It starts by sorting the words by length.\n\n// Reserved word lists for various dialects of the language\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isIdentifierChar = isIdentifierChar;\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\nexports.reservedWords = reservedWords;\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" let const class extends export import yield super\"\n};\n\nexports.keywords = keywords;\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\nvar nonASCIIidentifierChars = \"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by tools/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.parse = parse;\nexports.parseExpressionAt = parseExpressionAt;\nexports.tokenizer = tokenizer;\n\nvar _state = _dereq_(\"./state\");\n\n_dereq_(\"./parseutil\");\n\n_dereq_(\"./statement\");\n\n_dereq_(\"./lval\");\n\n_dereq_(\"./expression\");\n\n_dereq_(\"./location\");\n\nexports.Parser = _state.Parser;\nexports.plugins = _state.plugins;\n\nvar _options = _dereq_(\"./options\");\n\nexports.defaultOptions = _options.defaultOptions;\n\nvar _locutil = _dereq_(\"./locutil\");\n\nexports.Position = _locutil.Position;\nexports.SourceLocation = _locutil.SourceLocation;\nexports.getLineInfo = _locutil.getLineInfo;\n\nvar _node = _dereq_(\"./node\");\n\nexports.Node = _node.Node;\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nexports.TokenType = _tokentype.TokenType;\nexports.tokTypes = _tokentype.types;\n\nvar _tokencontext = _dereq_(\"./tokencontext\");\n\nexports.TokContext = _tokencontext.TokContext;\nexports.tokContexts = _tokencontext.types;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nexports.isIdentifierChar = _identifier.isIdentifierChar;\nexports.isIdentifierStart = _identifier.isIdentifierStart;\n\nvar _tokenize = _dereq_(\"./tokenize\");\n\nexports.Token = _tokenize.Token;\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nexports.isNewLine = _whitespace.isNewLine;\nexports.lineBreak = _whitespace.lineBreak;\nexports.lineBreakG = _whitespace.lineBreakG;\nvar version = \"2.7.0\";\n\nexports.version = version;\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new _state.Parser(options, input).parse();\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new _state.Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression();\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new _state.Parser(options, input);\n}\n\n},{\"./expression\":1,\"./identifier\":2,\"./location\":4,\"./locutil\":5,\"./lval\":6,\"./node\":7,\"./options\":8,\"./parseutil\":9,\"./state\":10,\"./statement\":11,\"./tokencontext\":12,\"./tokenize\":13,\"./tokentype\":14,\"./whitespace\":16}],4:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar pp = _state.Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp.raise = function (pos, message) {\n  var loc = _locutil.getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;\n  throw err;\n};\n\npp.curPosition = function () {\n  if (this.options.locations) {\n    return new _locutil.Position(this.curLine, this.pos - this.lineStart);\n  }\n};\n\n},{\"./locutil\":5,\"./state\":10}],5:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getLineInfo = getLineInfo;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = (function () {\n  function Position(line, col) {\n    _classCallCheck(this, Position);\n\n    this.line = line;\n    this.column = col;\n  }\n\n  Position.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n  };\n\n  return Position;\n})();\n\nexports.Position = Position;\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) this.source = p.sourceFile;\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\n;\n\nexports.SourceLocation = SourceLocation;\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    _whitespace.lineBreakG.lastIndex = cur;\n    var match = _whitespace.lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\n},{\"./whitespace\":16}],6:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _util = _dereq_(\"./util\");\n\nvar pp = _state.Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp.toAssignable = function (node, isBinding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i];\n          if (prop.kind !== \"init\") this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          this.toAssignable(prop.value, isBinding);\n        }\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          // falls through to AssignmentPattern\n        } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n            break;\n          }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\") this.raise(node.right.start, \"Yield expression cannot be a default value\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp.toAssignableList = function (exprList, isBinding) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type == \"RestElement\") {\n      --end;\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") this.unexpected(arg.start);\n      --end;\n    }\n\n    if (isBinding && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding);\n  }\n  return exprList;\n};\n\n// Parses spread element.\n\npp.parseSpread = function (refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp.parseRest = function (allowNonIdent) {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (allowNonIdent) node.argument = this.type === _tokentype.types.name ? this.parseIdent() : this.unexpected();else node.argument = this.type === _tokentype.types.name || this.type === _tokentype.types.bracketL ? this.parseBindingAtom() : this.unexpected();\n\n  return this.finishNode(node, \"RestElement\");\n};\n\n// Parses lvalue (assignable) atom.\n\npp.parseBindingAtom = function () {\n  if (this.options.ecmaVersion < 6) return this.parseIdent();\n  switch (this.type) {\n    case _tokentype.types.name:\n      return this.parseIdent();\n\n    case _tokentype.types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (first) first = false;else this.expect(_tokentype.types.comma);\n    if (allowEmpty && this.type === _tokentype.types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break;\n    } else if (this.type === _tokentype.types.ellipsis) {\n      var rest = this.parseRest(allowNonIdent);\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      this.expect(close);\n      break;\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts;\n};\n\npp.parseBindingListItem = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp.parseMaybeDefault = function (startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp.checkLVal = function (expr, isBinding, checkClashes) {\n  switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raise(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      if (checkClashes) {\n        if (_util.has(checkClashes, expr.name)) this.raise(expr.start, \"Argument name clash\");\n        checkClashes[expr.name] = true;\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++) {\n        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n      }break;\n\n    case \"ArrayPattern\":\n      for (var i = 0; i < expr.elements.length; i++) {\n        var elem = expr.elements[i];\n        if (elem) this.checkLVal(elem, isBinding, checkClashes);\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./util\":15}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar Node = function Node(parser, pos, loc) {\n  _classCallCheck(this, Node);\n\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);\n  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n  if (parser.options.ranges) this.range = [pos, 0];\n}\n\n// Start an AST node, attaching a start offset.\n\n;\n\nexports.Node = Node;\nvar pp = _state.Parser.prototype;\n\npp.startNode = function () {\n  return new Node(this, this.start, this.startLoc);\n};\n\npp.startNodeAt = function (pos, loc) {\n  return new Node(this, pos, loc);\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations) node.loc.end = loc;\n  if (this.options.ranges) node.range[1] = pos;\n  return node;\n}\n\npp.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\n},{\"./locutil\":5,\"./state\":10}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getOptions = getOptions;\n\nvar _util = _dereq_(\"./util\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, or 5, or 6. This influences support for strict\n  // mode, the set of reserved words, support for getters and\n  // setters and other features.\n  ecmaVersion: 5,\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\nexports.defaultOptions = defaultOptions;\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var opt in defaultOptions) {\n    options[opt] = opts && _util.has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n\n  if (_util.isArray(options.onToken)) {\n    (function () {\n      var tokens = options.onToken;\n      options.onToken = function (token) {\n        return tokens.push(token);\n      };\n    })();\n  }\n  if (_util.isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? 'Block' : 'Line',\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);\n    if (options.ranges) comment.range = [start, end];\n    array.push(comment);\n  };\n}\n\n},{\"./locutil\":5,\"./util\":15}],9:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ## Parser utilities\n\n// Test whether a statement node is the string literal `\"use strict\"`.\n\npp.isUseStrict = function (stmt) {\n  return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && stmt.expression.raw.slice(1, -1) === \"use strict\";\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.type === _tokentype.types.name && this.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.value === name && this.eat(_tokentype.types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) this.unexpected();\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    return true;\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();\n};\n\npp.afterTrailingComma = function (tokType) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    this.next();\n    return true;\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\npp.checkPatternErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.trailingComma;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Trailing comma is not permitted in destructuring patterns\");\n};\n\npp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\");\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar _options = _dereq_(\"./options\");\n\n// Registered plugins\nvar plugins = {};\n\nexports.plugins = plugins;\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\");\n}\n\nvar Parser = (function () {\n  function Parser(options, input, startPos) {\n    _classCallCheck(this, Parser);\n\n    this.options = options = _options.getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n    var reserved = options.allowReserved ? \"\" : _identifier.reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\");\n    this.reservedWords = keywordRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + _identifier.reservedWords.strict;\n    this.reservedWordsStrict = keywordRegexp(reservedStrict);\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + _identifier.reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Load plugins\n    this.loadPlugins(options.plugins);\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos));\n      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = _tokentype.types.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\";\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false;\n    // Labels in scope.\n    this.labels = [];\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') this.skipLineComment(2);\n  }\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\n  Parser.prototype.isKeyword = function isKeyword(word) {\n    return this.keywords.test(word);\n  };\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    return this.reservedWords.test(word);\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n    for (var _name in pluginConfigs) {\n      var plugin = plugins[_name];\n      if (!plugin) throw new Error(\"Plugin '\" + _name + \"' not found\");\n      plugin(this, pluginConfigs[_name]);\n    }\n  };\n\n  Parser.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n  };\n\n  return Parser;\n})();\n\nexports.Parser = Parser;\n\n},{\"./identifier\":2,\"./options\":8,\"./tokentype\":14,\"./whitespace\":16}],11:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function (node) {\n  var first = true;\n  if (!node.body) node.body = [];\n  while (this.type !== _tokentype.types.eof) {\n    var stmt = this.parseStatement(true, true);\n    node.body.push(stmt);\n    if (first) {\n      if (this.isUseStrict(stmt)) this.setStrict(true);\n      first = false;\n    }\n  }\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = { kind: \"loop\" },\n    switchLabel = { kind: \"switch\" };\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function (declaration, topLevel) {\n  var starttype = this.type,\n      node = this.startNode();\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _tokentype.types._break:case _tokentype.types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case _tokentype.types._debugger:\n      return this.parseDebuggerStatement(node);\n    case _tokentype.types._do:\n      return this.parseDoStatement(node);\n    case _tokentype.types._for:\n      return this.parseForStatement(node);\n    case _tokentype.types._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n      return this.parseFunctionStatement(node);\n    case _tokentype.types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n    case _tokentype.types._if:\n      return this.parseIfStatement(node);\n    case _tokentype.types._return:\n      return this.parseReturnStatement(node);\n    case _tokentype.types._switch:\n      return this.parseSwitchStatement(node);\n    case _tokentype.types._throw:\n      return this.parseThrowStatement(node);\n    case _tokentype.types._try:\n      return this.parseTryStatement(node);\n    case _tokentype.types._let:case _tokentype.types._const:\n      if (!declaration) this.unexpected(); // NOTE: falls through to _var\n    case _tokentype.types._var:\n      return this.parseVarStatement(node, starttype);\n    case _tokentype.types._while:\n      return this.parseWhileStatement(node);\n    case _tokentype.types._with:\n      return this.parseWithStatement(node);\n    case _tokentype.types.braceL:\n      return this.parseBlock();\n    case _tokentype.types.semi:\n      return this.parseEmptyStatement(node);\n    case _tokentype.types._export:\n    case _tokentype.types._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n      }\n      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node);\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value,\n          expr = this.parseExpression();\n      if (starttype === _tokentype.types.name && expr.type === \"Identifier\" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(_tokentype.types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  this.expect(_tokentype.types.parenL);\n  if (this.type === _tokentype.types.semi) return this.parseFor(node, null);\n  if (this.type === _tokentype.types._var || this.type === _tokentype.types._let || this.type === _tokentype.types._const) {\n    var _init = this.startNode(),\n        varKind = this.type;\n    this.next();\n    this.parseVar(_init, true, varKind);\n    this.finishNode(_init, \"VariableDeclaration\");\n    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && _init.declarations.length === 1 && !(varKind !== _tokentype.types._var && _init.declarations[0].init)) return this.parseForIn(node, _init);\n    return this.parseFor(node, _init);\n  }\n  var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n    this.toAssignable(init);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return this.parseFor(node, init);\n};\n\npp.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {\n    node.argument = this.parseExpression();this.semicolon();\n  }\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(_tokentype.types.braceL);\n  this.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != _tokentype.types.braceR;) {\n    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {\n      var isCase = this.type === _tokentype.types._case;\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raise(this.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(_tokentype.types.colon);\n    } else {\n      if (!cur) this.unexpected();\n      cur.consequent.push(this.parseStatement(true));\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp.parseThrowStatement = function (node) {\n  this.next();\n  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === _tokentype.types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true);\n    this.expect(_tokentype.types.parenR);\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp.parseWithStatement = function (node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var i = 0; i < this.labels.length; ++i) {\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  }var kind = this.type.isLoop ? \"loop\" : this.type === _tokentype.types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label = this.labels[i];\n    if (label.statementStart == node.start) {\n      label.statementStart = this.start;\n      label.kind = kind;\n    } else break;\n  }\n  this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });\n  node.body = this.parseStatement(true);\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function (allowStrict) {\n  var node = this.startNode(),\n      first = true,\n      oldStrict = undefined;\n  node.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    var stmt = this.parseStatement(true);\n    node.body.push(stmt);\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict;\n      this.setStrict(this.strict = true);\n    }\n    first = false;\n  }\n  if (oldStrict === false) this.setStrict(false);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(_tokentype.types.semi);\n  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();\n  this.expect(_tokentype.types.semi);\n  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function (node, init) {\n  var type = this.type === _tokentype.types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind.keyword;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl);\n    if (this.eat(_tokentype.types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === _tokentype.types._const && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === _tokentype.types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(_tokentype.types.comma)) break;\n  }\n  return node;\n};\n\npp.parseVarId = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function (node, isStatement, allowExpressionBody) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) node.generator = this.eat(_tokentype.types.star);\n  if (isStatement || this.type === _tokentype.types.name) node.id = this.parseIdent();\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp.parseFunctionParams = function (node) {\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false, true);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function (node, isStatement) {\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (this.eat(_tokentype.types.semi)) continue;\n    var method = this.startNode();\n    var isGenerator = this.eat(_tokentype.types.star);\n    var isMaybeStatic = this.type === _tokentype.types.name && this.value === \"static\";\n    this.parsePropertyName(method);\n    method[\"static\"] = isMaybeStatic && this.type !== _tokentype.types.parenL;\n    if (method[\"static\"]) {\n      if (isGenerator) this.unexpected();\n      isGenerator = this.eat(_tokentype.types.star);\n      this.parsePropertyName(method);\n    }\n    method.kind = \"method\";\n    var isGetSet = false;\n    if (!method.computed) {\n      var key = method.key;\n\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== _tokentype.types.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true;\n        method.kind = key.name;\n        key = this.parsePropertyName(method);\n      }\n      if (!method[\"static\"] && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\");\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n        method.kind = \"constructor\";\n        hadConstructor = true;\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator);\n    if (isGetSet) {\n      var paramCount = method.kind === \"get\" ? 0 : 1;\n      if (method.value.params.length !== paramCount) {\n        var start = method.value.start;\n        if (method.kind === \"get\") this.raise(start, \"getter should have no params\");else this.raise(start, \"setter should have exactly one param\");\n      }\n      if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this.raise(method.value.params[0].start, \"Setter cannot use rest params\");\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp.parseClassMethod = function (classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp.parseClassId = function (node, isStatement) {\n  node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n};\n\npp.parseClassSuper = function (node) {\n  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.eat(_tokentype.types.star)) {\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n  if (this.eat(_tokentype.types._default)) {\n    // export default ...\n    var expr = this.parseMaybeAssign();\n    var needsSemi = true;\n    if (expr.type == \"FunctionExpression\" || expr.type == \"ClassExpression\") {\n      needsSemi = false;\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\" ? \"FunctionDeclaration\" : \"ClassDeclaration\";\n      }\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0; i < node.specifiers.length; i++) {\n        if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {\n          this.unexpected(node.specifiers[i].local.start);\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp.shouldParseExportStatement = function () {\n  return this.type.keyword;\n};\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  // export { x, y as z } [from '...']\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.local = this.parseIdent(this.type === _tokentype.types._default);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes;\n};\n\n// Parses import declaration.\n\npp.parseImport = function (node) {\n  this.next();\n  // import '...'\n  if (this.type === _tokentype.types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  if (this.type === _tokentype.types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(_tokentype.types.comma)) return nodes;\n  }\n  if (this.type === _tokentype.types.star) {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent();\n    } else {\n      node.local = node.imported;\n      if (this.isKeyword(node.local.name)) this.unexpected(node.local.start);\n      if (this.reservedWordsStrict.test(node.local.name)) this.raise(node.local.start, \"The keyword '\" + node.local.name + \"' is reserved\");\n    }\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"));\n  }\n  return nodes;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],12:[function(_dereq_,module,exports){\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nexports.TokContext = TokContext;\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  f_expr: new TokContext(\"function\", true)\n};\n\nexports.types = types;\nvar pp = _state.Parser.prototype;\n\npp.initialContext = function () {\n  return [types.b_stat];\n};\n\npp.braceIsBlock = function (prevType) {\n  if (prevType === _tokentype.types.colon) {\n    var _parent = this.curContext();\n    if (_parent === types.b_stat || _parent === types.b_expr) return !_parent.isExpr;\n  }\n  if (prevType === _tokentype.types._return) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR) return true;\n  if (prevType == _tokentype.types.braceL) return this.curContext() === types.b_stat;\n  return !this.exprAllowed;\n};\n\npp.updateContext = function (prevType) {\n  var update = undefined,\n      type = this.type;\n  if (type.keyword && prevType == _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;\n};\n\n// Token-specific context update code\n\n_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return;\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop();\n    this.exprAllowed = false;\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true;\n  } else {\n    this.exprAllowed = !out.isExpr;\n  }\n};\n\n_tokentype.types.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.dollarBraceL.updateContext = function () {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\n_tokentype.types._function.updateContext = function () {\n  if (this.curContext() !== types.b_stat) this.context.push(types.f_expr);\n  this.exprAllowed = false;\n};\n\n_tokentype.types.backQuote.updateContext = function () {\n  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);\n  this.exprAllowed = false;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],13:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  _classCallCheck(this, Token);\n\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);\n  if (p.options.ranges) this.range = [p.start, p.end];\n}\n\n// ## Tokenizer\n\n;\n\nexports.Token = Token;\nvar pp = _state.Parser.prototype;\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\";\n\n// Move to the next token\n\npp.next = function () {\n  if (this.options.onToken) this.options.onToken(new Token(this));\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function () {\n  this.next();\n  return new Token(this);\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") pp[Symbol.iterator] = function () {\n  var self = this;\n  return { next: function next() {\n      var token = self.getToken();\n      return {\n        done: token.type === _tokentype.types.eof,\n        value: token\n      };\n    } };\n};\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function (strict) {\n  this.strict = strict;\n  if (this.type !== _tokentype.types.num && this.type !== _tokentype.types.string) return;\n  this.pos = this.start;\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n      --this.curLine;\n    }\n  }\n  this.nextToken();\n};\n\npp.curContext = function () {\n  return this.context[this.context.length - 1];\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function () {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n  this.start = this.pos;\n  if (this.options.locations) this.startLoc = this.curPosition();\n  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);\n\n  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());\n};\n\npp.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (_identifier.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */) return this.readWord();\n\n  return this.getTokenFromCode(code);\n};\n\npp.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) return code;\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00;\n};\n\npp.skipBlockComment = function () {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n  this.pos = end + 2;\n  if (this.options.locations) {\n    _whitespace.lineBreakG.lastIndex = start;\n    var match = undefined;\n    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n};\n\npp.skipLineComment = function (startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos;\n    ch = this.input.charCodeAt(this.pos);\n  }\n  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function () {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n      case 32:case 160:\n        // ' '\n        ++this.pos;\n        break;\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10:case 8232:case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break;\n      case 47:\n        // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42:\n            // '*'\n            this.skipBlockComment();\n            break;\n          case 47:\n            this.skipLineComment(2);\n            break;\n          default:\n            break loop;\n        }\n        break;\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop;\n        }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function (type, val) {\n  this.end = this.pos;\n  if (this.options.locations) this.endLoc = this.curPosition();\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) return this.readNumber(true);\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(_tokentype.types.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(_tokentype.types.dot);\n  }\n};\n\npp.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) {\n    ++this.pos;return this.readRegexp();\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.slash, 1);\n};\n\npp.readToken_mult_modulo = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 42 ? _tokentype.types.star : _tokentype.types.modulo, 1);\n};\n\npp.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);\n};\n\npp.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.bitwiseXOR, 1);\n};\n\npp.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n    return this.finishOp(_tokentype.types.incDec, 2);\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.plusMin, 1);\n};\n\npp.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);\n    return this.finishOp(_tokentype.types.bitShift, size);\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected();\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n  if (next === 61) size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2;\n  return this.finishOp(_tokentype.types.relational, size);\n};\n\npp.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(_tokentype.types.arrow);\n  }\n  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);\n};\n\npp.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n\n    // Punctuation tokens.\n    case 40:\n      ++this.pos;return this.finishToken(_tokentype.types.parenL);\n    case 41:\n      ++this.pos;return this.finishToken(_tokentype.types.parenR);\n    case 59:\n      ++this.pos;return this.finishToken(_tokentype.types.semi);\n    case 44:\n      ++this.pos;return this.finishToken(_tokentype.types.comma);\n    case 91:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketL);\n    case 93:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketR);\n    case 123:\n      ++this.pos;return this.finishToken(_tokentype.types.braceL);\n    case 125:\n      ++this.pos;return this.finishToken(_tokentype.types.braceR);\n    case 58:\n      ++this.pos;return this.finishToken(_tokentype.types.colon);\n    case 63:\n      ++this.pos;return this.finishToken(_tokentype.types.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) break;\n      ++this.pos;\n      return this.finishToken(_tokentype.types.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n      // 1-9\n      return this.readNumber(false);\n\n    // Quotes produce strings.\n    case 34:case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:case 42:\n      // '%*'\n      return this.readToken_mult_modulo(code);\n\n    case 124:case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(_tokentype.types.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags);\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n      throw e;\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"￿\", \"u\");\n\npp.readRegexp = function () {\n  var _this = this;\n\n  var escaped = undefined,\n      inClass = undefined,\n      start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n    var ch = this.input.charAt(this.pos);\n    if (_whitespace.lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\");\n    if (!escaped) {\n      if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n      escaped = ch === \"\\\\\";\n    } else escaped = false;\n    ++this.pos;\n  }\n  var content = this.input.slice(start, this.pos);\n  ++this.pos;\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1();\n  var tmp = content;\n  if (mods) {\n    var validFlags = /^[gim]*$/;\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n        code = Number(\"0x\" + code);\n        if (code > 0x10FFFF) _this.raise(start + offset + 3, \"Code point out of bounds\");\n        return \"x\";\n      });\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null;\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, undefined, start, this);\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods);\n  }\n  return this.finishToken(_tokentype.types.regexp, { pattern: content, flags: mods, value: value });\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function (radix, len) {\n  var start = this.pos,\n      total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this.input.charCodeAt(this.pos),\n        val = undefined;\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n        else val = Infinity;\n    if (val >= radix) break;\n    ++this.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null;\n\n  return total;\n};\n\npp.readRadixNumber = function (radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function (startsWithDot) {\n  var start = this.pos,\n      isFloat = false,\n      octal = this.input.charCodeAt(this.pos) === 48;\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46) {\n    // '.'\n    ++this.pos;\n    this.readInt(10);\n    isFloat = true;\n    next = this.input.charCodeAt(this.pos);\n  }\n  if (next === 69 || next === 101) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    isFloat = true;\n  }\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n\n  var str = this.input.slice(start, this.pos),\n      val = undefined;\n  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");else val = parseInt(str, 8);\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code = undefined;\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected();\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\");\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code;\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code);\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n\npp.readString = function (quote) {\n  var out = \"\",\n      chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) break;\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (_whitespace.isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\");\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(_tokentype.types.string, out);\n};\n\n// Reads template string tokens.\n\npp.readTmplToken = function () {\n  var out = \"\",\n      chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n      // '`', '${'\n      if (this.pos === this.start && this.type === _tokentype.types.template) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(_tokentype.types.dollarBraceL);\n        } else {\n          ++this.pos;\n          return this.finishToken(_tokentype.types.backQuote);\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(_tokentype.types.template, out);\n    }\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (_whitespace.isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n        case 10:\n          out += \"\\n\";\n          break;\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function (inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n    case 110:\n      return \"\\n\"; // 'n' -> '\\n'\n    case 114:\n      return \"\\r\"; // 'r' -> '\\r'\n    case 120:\n      return String.fromCharCode(this.readHexChar(2)); // 'x'\n    case 117:\n      return codePointToString(this.readCodePoint()); // 'u'\n    case 116:\n      return \"\\t\"; // 't' -> '\\t'\n    case 98:\n      return \"\\b\"; // 'b' -> '\\b'\n    case 118:\n      return \"\\u000b\"; // 'v' -> '\\u000b'\n    case 102:\n      return \"\\f\"; // 'f' -> '\\f'\n    case 13:\n      if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n    case 10:\n      // ' \\n'\n      if (this.options.locations) {\n        this.lineStart = this.pos;++this.curLine;\n      }\n      return \"\";\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\");\n        }\n        this.pos += octalStr.length - 1;\n        return String.fromCharCode(octal);\n      }\n      return String.fromCharCode(ch);\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function (len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\");\n  return n;\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function () {\n  this.containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (_identifier.isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.raise(escStart, \"Invalid Unicode escape\");\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break;\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos);\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function () {\n  var word = this.readWord1();\n  var type = _tokentype.types.name;\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word)) type = _tokentype.keywords[word];\n  return this.finishToken(type, word);\n};\n\n},{\"./identifier\":2,\"./locutil\":5,\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],14:[function(_dereq_,module,exports){\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  _classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nexports.TokenType = TokenType;\n\nfunction binop(name, prec) {\n  return new TokenType(name, { beforeExpr: true, binop: prec });\n}\nvar beforeExpr = { beforeExpr: true },\n    startsExpr = { startsExpr: true };\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: true, startsExpr: true }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: true, startsExpr: true }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: true, startsExpr: true }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: true, startsExpr: true }),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: true, isAssign: true }),\n  assign: new TokenType(\"_=\", { beforeExpr: true, isAssign: true }),\n  incDec: new TokenType(\"++/--\", { prefix: true, postfix: true, startsExpr: true }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: true, prefix: true, startsExpr: true }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10)\n};\n\nexports.types = types;\n// Map keyword names to token types.\n\nvar keywords = {};\n\nexports.keywords = keywords;\n// Succinct definitions of keyword token types\nfunction kw(name) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  options.keyword = name;\n  keywords[name] = types[\"_\" + name] = new TokenType(name, options);\n}\n\nkw(\"break\");\nkw(\"case\", beforeExpr);\nkw(\"catch\");\nkw(\"continue\");\nkw(\"debugger\");\nkw(\"default\", beforeExpr);\nkw(\"do\", { isLoop: true, beforeExpr: true });\nkw(\"else\", beforeExpr);\nkw(\"finally\");\nkw(\"for\", { isLoop: true });\nkw(\"function\", startsExpr);\nkw(\"if\");\nkw(\"return\", beforeExpr);\nkw(\"switch\");\nkw(\"throw\", beforeExpr);\nkw(\"try\");\nkw(\"var\");\nkw(\"let\");\nkw(\"const\");\nkw(\"while\", { isLoop: true });\nkw(\"with\");\nkw(\"new\", { beforeExpr: true, startsExpr: true });\nkw(\"this\", startsExpr);\nkw(\"super\", startsExpr);\nkw(\"class\");\nkw(\"extends\", beforeExpr);\nkw(\"export\");\nkw(\"import\");\nkw(\"yield\", { beforeExpr: true, startsExpr: true });\nkw(\"null\", startsExpr);\nkw(\"true\", startsExpr);\nkw(\"false\", startsExpr);\nkw(\"in\", { beforeExpr: true, binop: 7 });\nkw(\"instanceof\", { beforeExpr: true, binop: 7 });\nkw(\"typeof\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"void\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"delete\", { beforeExpr: true, prefix: true, startsExpr: true });\n\n},{}],15:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.isArray = isArray;\nexports.has = has;\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n}\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName);\n}\n\n},{}],16:[function(_dereq_,module,exports){\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isNewLine = isNewLine;\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nexports.lineBreak = lineBreak;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nexports.lineBreakG = lineBreakG;\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code == 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nexports.nonASCIIwhitespace = nonASCIIwhitespace;\n\n},{}]},{},[3])(3)\n});","var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar metacode = require('./metacode');\r\nvar Edm;\r\n(function (Edm) {\r\n    var PrimitiveType = (function () {\r\n        function PrimitiveType(className) {\r\n            this.className = className;\r\n        }\r\n        PrimitiveType.prototype.toString = function () { return this.className; };\r\n        return PrimitiveType;\r\n    })();\r\n    Edm.PrimitiveType = PrimitiveType;\r\n    Edm.Binary = new PrimitiveType('Edm.Binary');\r\n    Edm.Boolean = new PrimitiveType('Edm.Boolean');\r\n    Edm.Byte = new PrimitiveType('Edm.Byte');\r\n    Edm.Date = new PrimitiveType('Edm.Date');\r\n    Edm.DateTimeOffset = new PrimitiveType('Edm.DateTimeOffset');\r\n    Edm.Decimal = new PrimitiveType('Edm.Decimal');\r\n    Edm.Double = new PrimitiveType('Edm.Double');\r\n    Edm.Duration = new PrimitiveType('Edm.Duration');\r\n    Edm.Guid = new PrimitiveType('Edm.Guid');\r\n    Edm.Int16 = new PrimitiveType('Edm.Int16');\r\n    Edm.Int32 = new PrimitiveType('Edm.Int32');\r\n    Edm.Int64 = new PrimitiveType('Edm.Int64');\r\n    Edm.SByte = new PrimitiveType('Edm.SByte');\r\n    Edm.Single = new PrimitiveType('Edm.Single');\r\n    Edm.Stream = new PrimitiveType('Edm.Stream');\r\n    Edm.String = new PrimitiveType('Edm.String');\r\n    Edm.TimeOfDay = new PrimitiveType('Edm.TimeOfDay');\r\n    Edm.Geography = new PrimitiveType('Edm.Geography');\r\n    Edm.GeographyPoint = new PrimitiveType('Edm.GeographyPoint');\r\n    Edm.GeographyLineString = new PrimitiveType('Edm.GeographyLineString');\r\n    Edm.GeographyPolygon = new PrimitiveType('Edm.GeographyPolygon');\r\n    Edm.GeographyMultiPoint = new PrimitiveType('Edm.GeographyMultiPoint');\r\n    Edm.GeographyMultiLineString = new PrimitiveType('Edm.GeographyMultiLineString');\r\n    Edm.GeographyMultiPolygon = new PrimitiveType('Edm.GeographyMultiPolygon');\r\n    Edm.GeographyCollection = new PrimitiveType('Edm.GeographyCollection');\r\n    Edm.Geometry = new PrimitiveType('Edm.Geometry');\r\n    Edm.GeometryPoint = new PrimitiveType('Edm.GeometryPoint');\r\n    Edm.GeometryLineString = new PrimitiveType('Edm.GeometryLineString');\r\n    Edm.GeometryPolygon = new PrimitiveType('Edm.GeometryPolygon');\r\n    Edm.GeometryMultiPoint = new PrimitiveType('Edm.GeometryMultiPoint');\r\n    Edm.GeometryMultiLineString = new PrimitiveType('Edm.GeometryMultiLineString');\r\n    Edm.GeometryMultiPolygon = new PrimitiveType('Edm.GeometryMultiPolygon');\r\n    Edm.GeometryCollection = new PrimitiveType('Edm.GeometryCollection');\r\n    var MemberAttribute = metacode.MemberAttribute;\r\n    var parse = metacode.parse;\r\n    var required = metacode.required;\r\n    var defaultValue = metacode.defaultValue;\r\n    var parseAs = metacode.parseAs;\r\n    var AttributeFunctionChain = metacode.AttributeFunctionChain;\r\n    var mapArray = function (sourceField, factory) { return new metacode.AttributeFunctionChain(function (d, i) { return d[sourceField]; }, function (props, i) { return Array.isArray(props) ? props : (props ? [props] : []); }, function (props, i) { return props.map(function (prop) { return factory(prop, i); }); }); };\r\n    var EdmItemBase = (function () {\r\n        function EdmItemBase(definition, parent) {\r\n            this.parent = parent;\r\n            definition && this.loadFrom(definition);\r\n        }\r\n        EdmItemBase.prototype.loadFrom = function (definition) {\r\n            var _this = this;\r\n            var proto = Object.getPrototypeOf(this);\r\n            MemberAttribute.getMembers(proto).forEach(function (membername) {\r\n                var parser = MemberAttribute.getAttributeValue(proto, membername, \"serialize\");\r\n                var v = parser.invoke(definition, _this);\r\n                _this[membername] = v;\r\n            });\r\n        };\r\n        return EdmItemBase;\r\n    })();\r\n    Edm.EdmItemBase = EdmItemBase;\r\n    var Property = (function (_super) {\r\n        __extends(Property, _super);\r\n        function Property() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"defaultValue\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"concurrencyMode\", void 0);\r\n        return Property;\r\n    })(EdmItemBase);\r\n    Edm.Property = Property;\r\n    var NavigationProperty = (function (_super) {\r\n        __extends(NavigationProperty, _super);\r\n        function NavigationProperty() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"partner\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"containsTarget\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"referentialConstraint\", function (prop, i) { return new ReferentialConstraint(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"referentialConstraints\", void 0);\r\n        return NavigationProperty;\r\n    })(EdmItemBase);\r\n    Edm.NavigationProperty = NavigationProperty;\r\n    var ReferentialConstraint = (function (_super) {\r\n        __extends(ReferentialConstraint, _super);\r\n        function ReferentialConstraint() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"property\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"referencedProperty\", void 0);\r\n        return ReferentialConstraint;\r\n    })(EdmItemBase);\r\n    Edm.ReferentialConstraint = ReferentialConstraint;\r\n    var PropertyRef = (function (_super) {\r\n        __extends(PropertyRef, _super);\r\n        function PropertyRef() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"alias\", void 0);\r\n        return PropertyRef;\r\n    })(EdmItemBase);\r\n    Edm.PropertyRef = PropertyRef;\r\n    var Key = (function (_super) {\r\n        __extends(Key, _super);\r\n        function Key() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"propertyRef\", function (prop, i) { return new PropertyRef(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Key.prototype, \"propertyRefs\", void 0);\r\n        return Key;\r\n    })(EdmItemBase);\r\n    Edm.Key = Key;\r\n    var EntityType = (function (_super) {\r\n        __extends(EntityType, _super);\r\n        function EntityType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.key; }, function (props, i) { return props || []; }, function (props, i) { return props.map(function (prop) { return new Key(prop, i); }); }, function (props) { return props[0]; })), \r\n            __metadata('design:type', Key)\r\n        ], EntityType.prototype, \"key\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"navigationProperties\", void 0);\r\n        return EntityType;\r\n    })(EdmItemBase);\r\n    Edm.EntityType = EntityType;\r\n    var ComplexType = (function (_super) {\r\n        __extends(ComplexType, _super);\r\n        function ComplexType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"navigationProperties\", void 0);\r\n        return ComplexType;\r\n    })(EdmItemBase);\r\n    Edm.ComplexType = ComplexType;\r\n    var Parameter = (function (_super) {\r\n        __extends(Parameter, _super);\r\n        function Parameter() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"SRID\", void 0);\r\n        return Parameter;\r\n    })(EdmItemBase);\r\n    Edm.Parameter = Parameter;\r\n    var ReturnType = (function (_super) {\r\n        __extends(ReturnType, _super);\r\n        function ReturnType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReturnType.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], ReturnType.prototype, \"nullable\", void 0);\r\n        return ReturnType;\r\n    })(EdmItemBase);\r\n    Edm.ReturnType = ReturnType;\r\n    var Invokable = (function (_super) {\r\n        __extends(Invokable, _super);\r\n        function Invokable() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        return Invokable;\r\n    })(EdmItemBase);\r\n    Edm.Invokable = Invokable;\r\n    var Action = (function (_super) {\r\n        __extends(Action, _super);\r\n        function Action() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Action.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Action.prototype, \"returnType\", void 0);\r\n        return Action;\r\n    })(Invokable);\r\n    Edm.Action = Action;\r\n    var Function = (function (_super) {\r\n        __extends(Function, _super);\r\n        function Function() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Function.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isComposable\", void 0);\r\n        return Function;\r\n    })(Invokable);\r\n    Edm.Function = Function;\r\n    var Member = (function (_super) {\r\n        __extends(Member, _super);\r\n        function Member() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Member.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Member.prototype, \"value\", void 0);\r\n        return Member;\r\n    })(EdmItemBase);\r\n    Edm.Member = Member;\r\n    var EnumType = (function (_super) {\r\n        __extends(EnumType, _super);\r\n        function EnumType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(Edm.Int32), \r\n            __metadata('design:type', PrimitiveType)\r\n        ], EnumType.prototype, \"underlyingType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EnumType.prototype, \"isFlags\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"member\", function (prop, i) { return new Member(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"members\", void 0);\r\n        return EnumType;\r\n    })(EdmItemBase);\r\n    Edm.EnumType = EnumType;\r\n    var EntitySet = (function (_super) {\r\n        __extends(EntitySet, _super);\r\n        function EntitySet() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"entityType\", void 0);\r\n        return EntitySet;\r\n    })(EdmItemBase);\r\n    Edm.EntitySet = EntitySet;\r\n    var ActionImport = (function (_super) {\r\n        __extends(ActionImport, _super);\r\n        function ActionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"action\", void 0);\r\n        return ActionImport;\r\n    })(EdmItemBase);\r\n    Edm.ActionImport = ActionImport;\r\n    var FunctionImport = (function (_super) {\r\n        __extends(FunctionImport, _super);\r\n        function FunctionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"function\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(false), \r\n            __metadata('design:type', Boolean)\r\n        ], FunctionImport.prototype, \"includeInServiceDocument\", void 0);\r\n        return FunctionImport;\r\n    })(EdmItemBase);\r\n    Edm.FunctionImport = FunctionImport;\r\n    var EntityContainer = (function (_super) {\r\n        __extends(EntityContainer, _super);\r\n        function EntityContainer() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityContainer.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entitySet\", function (prop, i) { return new EntitySet(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"entitySets\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"actionImport\", function (prop, i) { return new ActionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"actionImports\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"functionImport\", function (prop, i) { return new FunctionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"functionImports\", void 0);\r\n        return EntityContainer;\r\n    })(EdmItemBase);\r\n    Edm.EntityContainer = EntityContainer;\r\n    var Schema = (function (_super) {\r\n        __extends(Schema, _super);\r\n        function Schema() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"alias\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"enumType\", function (prop, i) { return new EnumType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"enumTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"complexType\", function (prop, i) { return new ComplexType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"complexTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityType\", function (prop, i) { return new EntityType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"action\", function (prop, i) { return new Action(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"actions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"function\", function (prop, i) { return new Edm.Function(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"functions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityContainer\", function (prop, i) { return new Edm.EntityContainer(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityContainer\", void 0);\r\n        return Schema;\r\n    })(EdmItemBase);\r\n    Edm.Schema = Schema;\r\n    var DataServices = (function (_super) {\r\n        __extends(DataServices, _super);\r\n        function DataServices() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"schema\", function (prop, i) { return new Schema(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], DataServices.prototype, \"schemas\", void 0);\r\n        return DataServices;\r\n    })(EdmItemBase);\r\n    Edm.DataServices = DataServices;\r\n    var Edmx = (function (_super) {\r\n        __extends(Edmx, _super);\r\n        function Edmx() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (edm) { return new Edm.DataServices(edm.dataServices); })), \r\n            __metadata('design:type', Array)\r\n        ], Edmx.prototype, \"dataServices\", void 0);\r\n        return Edmx;\r\n    })(EdmItemBase);\r\n    Edm.Edmx = Edmx;\r\n})(Edm = exports.Edm || (exports.Edm = {}));\r\n//# sourceMappingURL=edm.js.map","var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../node_modules/reflect-metadata/reflect-metadata.d.ts\" />\r\nrequire('reflect-metadata');\r\nfunction isFunction(o) {\r\n    return \"function\" === typeof o;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === undefined;\r\n}\r\nvar MemberAttribute = (function () {\r\n    function MemberAttribute(attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n    MemberAttribute.prototype.registerMember = function (target, key) {\r\n        var md = (Reflect.getMetadata(\"members\", target) || []);\r\n        if (md.indexOf(key) < 0) {\r\n            md.push(key);\r\n        }\r\n        Reflect.defineMetadata(\"members\", md, target);\r\n    };\r\n    MemberAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        return presentedValue;\r\n    };\r\n    MemberAttribute.prototype.decorate = function (value) {\r\n        var _this = this;\r\n        return function (target, key, descriptor) {\r\n            _this.registerMember(target, key);\r\n            var decoratorValue = _this.getDecoratorValue(target, key, value);\r\n            //console.log(\"decorator runs\",key, this.attributeName, decoratorValue, value)\r\n            Reflect.defineMetadata(_this.attributeName, decoratorValue, target, key);\r\n        };\r\n    };\r\n    Object.defineProperty(MemberAttribute.prototype, \"decorator\", {\r\n        get: function () {\r\n            return this.decorate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MemberAttribute.prototype.isApplied = function (instance, memberName) {\r\n        return Reflect.getMetadataKeys(Object.getPrototypeOf(instance), memberName).indexOf(this.attributeName) > -1;\r\n    };\r\n    MemberAttribute.getMembers = function (target) {\r\n        return Reflect.getMetadata(\"members\", isFunction(target) ? target.prototype : target);\r\n    };\r\n    MemberAttribute.getAttributeNames = function (target, memberName) {\r\n        return Reflect.getMetadataKeys(target, memberName);\r\n    };\r\n    MemberAttribute.getAttributeValue = function (target, memberName, attributeName) {\r\n        return Reflect.getMetadata(attributeName, target, memberName);\r\n    };\r\n    return MemberAttribute;\r\n})();\r\nexports.MemberAttribute = MemberAttribute;\r\nvar AttributeFunctionChain = (function () {\r\n    function AttributeFunctionChain() {\r\n        var steps = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            steps[_i - 0] = arguments[_i];\r\n        }\r\n        this.steps = [];\r\n        this.steps = steps;\r\n    }\r\n    AttributeFunctionChain.prototype.invoke = function (definition, instance) {\r\n        var result = definition;\r\n        this.steps.forEach(function (fn) {\r\n            result = fn(result, instance);\r\n        });\r\n        return result;\r\n    };\r\n    return AttributeFunctionChain;\r\n})();\r\nexports.AttributeFunctionChain = AttributeFunctionChain;\r\nvar ParseAttribute = (function (_super) {\r\n    __extends(ParseAttribute, _super);\r\n    function ParseAttribute() {\r\n        _super.call(this, \"serialize\");\r\n    }\r\n    ParseAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        if (!isUndefined(presentedValue)) {\r\n            return presentedValue;\r\n        }\r\n        return new AttributeFunctionChain(function (d) { return d[key]; });\r\n    };\r\n    return ParseAttribute;\r\n})(MemberAttribute);\r\nexports.ParseAttribute = ParseAttribute;\r\nexports.required = new MemberAttribute(\"required\").decorate(true);\r\nexports.defaultValueAttribute = new MemberAttribute(\"defaultValue\");\r\nexports.defaultValue = exports.defaultValueAttribute.decorate.bind(exports.defaultValueAttribute);\r\nexports.parseAttribute = new ParseAttribute();\r\nexports.parse = exports.parseAttribute.decorator;\r\nexports.parseAs = exports.parseAttribute.decorate.bind(exports.parseAttribute);\r\nexports.typeArgument = new MemberAttribute(\"typeArgument\");\r\n//# sourceMappingURL=metacode.js.map","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\nvar Reflect;\r\n(function (Reflect) {\r\n    \"use strict\";\r\n    // Load global or shim versions of Map, Set, and WeakMap\r\n    var functionPrototype = Object.getPrototypeOf(Function);\r\n    var _Map = typeof Map === \"function\" ? Map : CreateMapPolyfill();\r\n    var _Set = typeof Set === \"function\" ? Set : CreateSetPolyfill();\r\n    var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n    // [[Metadata]] internal slot\r\n    var __Metadata__ = new _WeakMap();\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param targetKey (Optional) The property key to decorate.\r\n      * @param targetDescriptor (Optional) The property descriptor for the target key\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     C = Reflect.decorate(decoratorsArray, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(C, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, C, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(C, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(C.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, C.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(C.prototype, \"method\")));\r\n      *\r\n      */\r\n    function decorate(decorators, target, targetKey, targetDescriptor) {\r\n        if (!IsUndefined(targetDescriptor)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (IsUndefined(targetKey)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(targetDescriptor)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);\r\n        }\r\n        else {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsConstructor(target)) {\r\n                throw new TypeError();\r\n            }\r\n            return DecorateConstructor(decorators, target);\r\n        }\r\n    }\r\n    Reflect.decorate = decorate;\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class C {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    function metadata(metadataKey, metadataValue) {\r\n        function decorator(target, targetKey) {\r\n            if (!IsUndefined(targetKey)) {\r\n                if (!IsObject(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                targetKey = ToPropertyKey(targetKey);\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n            }\r\n            else {\r\n                if (!IsConstructor(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);\r\n            }\r\n        }\r\n        return decorator;\r\n    }\r\n    Reflect.metadata = metadata;\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): Decorator {\r\n      *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    function defineMetadata(metadataKey, metadataValue, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n    }\r\n    Reflect.defineMetadata = defineMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasMetadata = hasMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasOwnMetadata = hasOwnMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getMetadata = getMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadata = getOwnMetadata;\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getMetadataKeys = getMetadataKeys;\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryOwnMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function deleteMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        if (IsUndefined(metadataMap)) {\r\n            return false;\r\n        }\r\n        if (!metadataMap.delete(metadataKey)) {\r\n            return false;\r\n        }\r\n        if (metadataMap.size > 0) {\r\n            return true;\r\n        }\r\n        var targetMetadata = __Metadata__.get(target);\r\n        targetMetadata.delete(targetKey);\r\n        if (targetMetadata.size > 0) {\r\n            return true;\r\n        }\r\n        __Metadata__.delete(target);\r\n        return true;\r\n    }\r\n    Reflect.deleteMetadata = deleteMetadata;\r\n    function DecorateConstructor(decorators, target) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsConstructor(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                target = decorated;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target, propertyKey, descriptor);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsObject(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                descriptor = decorated;\r\n            }\r\n        }\r\n        return descriptor;\r\n    }\r\n    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            decorator(target, propertyKey);\r\n        }\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-\r\n    function GetOrCreateMetadataMap(target, targetKey, create) {\r\n        var targetMetadata = __Metadata__.get(target);\r\n        if (!targetMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            targetMetadata = new _Map();\r\n            __Metadata__.set(target, targetMetadata);\r\n        }\r\n        var keyMetadata = targetMetadata.get(targetKey);\r\n        if (!keyMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            keyMetadata = new _Map();\r\n            targetMetadata.set(targetKey, keyMetadata);\r\n        }\r\n        return keyMetadata;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-\r\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return true;\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n        }\r\n        return false;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-\r\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return false;\r\n        }\r\n        return Boolean(metadataMap.has(MetadataKey));\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-\r\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n        }\r\n        return undefined;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-\r\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return undefined;\r\n        }\r\n        return metadataMap.get(MetadataKey);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-\r\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);\r\n        metadataMap.set(MetadataKey, MetadataValue);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-\r\n    function OrdinaryMetadataKeys(O, P) {\r\n        var ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent === null) {\r\n            return ownKeys;\r\n        }\r\n        var parentKeys = OrdinaryMetadataKeys(parent, P);\r\n        if (parentKeys.length <= 0) {\r\n            return ownKeys;\r\n        }\r\n        if (ownKeys.length <= 0) {\r\n            return parentKeys;\r\n        }\r\n        var set = new _Set();\r\n        var keys = [];\r\n        for (var _i = 0; _i < ownKeys.length; _i++) {\r\n            var key = ownKeys[_i];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (var _a = 0; _a < parentKeys.length; _a++) {\r\n            var key = parentKeys[_a];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-\r\n    function OrdinaryOwnMetadataKeys(target, targetKey) {\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        var keys = [];\r\n        if (metadataMap) {\r\n            metadataMap.forEach(function (_, key) { return keys.push(key); });\r\n        }\r\n        return keys;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type\r\n    function IsUndefined(x) {\r\n        return x === undefined;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\r\n    function IsArray(x) {\r\n        return Array.isArray(x);\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type\r\n    function IsObject(x) {\r\n        return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\r\n    function IsConstructor(x) {\r\n        return typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type\r\n    function IsSymbol(x) {\r\n        return typeof x === \"symbol\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\r\n    function ToPropertyKey(value) {\r\n        if (IsSymbol(value)) {\r\n            return value;\r\n        }\r\n        return String(value);\r\n    }\r\n    function GetPrototypeOf(O) {\r\n        var proto = Object.getPrototypeOf(O);\r\n        if (typeof O !== \"function\" || O === functionPrototype) {\r\n            return proto;\r\n        }\r\n        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. \r\n        // Try to determine the superclass constructor. Compatible implementations\r\n        // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n        // or ensure each class has a valid `constructor` property on its prototype that\r\n        // points back to the constructor.\r\n        // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n        // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n        if (proto !== functionPrototype) {\r\n            return proto;\r\n        }\r\n        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n        var prototype = O.prototype;\r\n        var prototypeProto = Object.getPrototypeOf(prototype);\r\n        if (prototypeProto == null || prototypeProto === Object.prototype) {\r\n            return proto;\r\n        }\r\n        // if the constructor was not a function, then we cannot determine the heritage.\r\n        var constructor = prototypeProto.constructor;\r\n        if (typeof constructor !== \"function\") {\r\n            return proto;\r\n        }\r\n        // if we have some kind of self-reference, then we cannot determine the heritage.\r\n        if (constructor === O) {\r\n            return proto;\r\n        }\r\n        // we have a pretty good guess at the heritage.\r\n        return constructor;\r\n    }\r\n    // naive Map shim\r\n    function CreateMapPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Map() {\r\n            this._keys = [];\r\n            this._values = [];\r\n            this._cache = cacheSentinel;\r\n        }\r\n        Map.prototype = {\r\n            get size() {\r\n                return this._keys.length;\r\n            },\r\n            has: function (key) {\r\n                if (key === this._cache) {\r\n                    return true;\r\n                }\r\n                if (this._find(key) >= 0) {\r\n                    this._cache = key;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._cache = key;\r\n                    return this._values[index];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (key, value) {\r\n                this.delete(key);\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n                this._cache = key;\r\n                return this;\r\n            },\r\n            delete: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._keys.splice(index, 1);\r\n                    this._values.splice(index, 1);\r\n                    this._cache = cacheSentinel;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                this._keys.length = 0;\r\n                this._values.length = 0;\r\n                this._cache = cacheSentinel;\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                var size = this.size;\r\n                for (var i = 0; i < size; ++i) {\r\n                    var key = this._keys[i];\r\n                    var value = this._values[i];\r\n                    this._cache = key;\r\n                    callback.call(this, value, key, this);\r\n                }\r\n            },\r\n            _find: function (key) {\r\n                var keys = this._keys;\r\n                var size = keys.length;\r\n                for (var i = 0; i < size; ++i) {\r\n                    if (keys[i] === key) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n        };\r\n        return Map;\r\n    }\r\n    // naive Set shim\r\n    function CreateSetPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Set() {\r\n            this._map = new _Map();\r\n        }\r\n        Set.prototype = {\r\n            get size() {\r\n                return this._map.length;\r\n            },\r\n            has: function (value) {\r\n                return this._map.has(value);\r\n            },\r\n            add: function (value) {\r\n                this._map.set(value, value);\r\n                return this;\r\n            },\r\n            delete: function (value) {\r\n                return this._map.delete(value);\r\n            },\r\n            clear: function () {\r\n                this._map.clear();\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                this._map.forEach(callback, thisArg);\r\n            }\r\n        };\r\n        return Set;\r\n    }\r\n    // naive WeakMap shim\r\n    function CreateWeakMapPolyfill() {\r\n        var UUID_SIZE = 16;\r\n        var isNode = typeof global !== \"undefined\" && Object.prototype.toString.call(global.process) === '[object process]';\r\n        var nodeCrypto = isNode && require(\"crypto\");\r\n        var hasOwn = Object.prototype.hasOwnProperty;\r\n        var keys = {};\r\n        var rootKey = CreateUniqueKey();\r\n        function WeakMap() {\r\n            this._key = CreateUniqueKey();\r\n        }\r\n        WeakMap.prototype = {\r\n            has: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return this._key in table;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return table[this._key];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (target, value) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ true);\r\n                table[this._key] = value;\r\n                return this;\r\n            },\r\n            delete: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table && this._key in table) {\r\n                    return delete table[this._key];\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                // NOTE: not a real clear, just makes the previous data unreachable\r\n                this._key = CreateUniqueKey();\r\n            }\r\n        };\r\n        function FillRandomBytes(buffer, size) {\r\n            for (var i = 0; i < size; ++i) {\r\n                buffer[i] = Math.random() * 255 | 0;\r\n            }\r\n        }\r\n        function GenRandomBytes(size) {\r\n            if (nodeCrypto) {\r\n                var data = nodeCrypto.randomBytes(size);\r\n                return data;\r\n            }\r\n            else if (typeof Uint8Array === \"function\") {\r\n                var data = new Uint8Array(size);\r\n                if (typeof crypto !== \"undefined\") {\r\n                    crypto.getRandomValues(data);\r\n                }\r\n                else if (typeof msCrypto !== \"undefined\") {\r\n                    msCrypto.getRandomValues(data);\r\n                }\r\n                else {\r\n                    FillRandomBytes(data, size);\r\n                }\r\n                return data;\r\n            }\r\n            else {\r\n                var data = new Array(size);\r\n                FillRandomBytes(data, size);\r\n                return data;\r\n            }\r\n        }\r\n        function CreateUUID() {\r\n            var data = GenRandomBytes(UUID_SIZE);\r\n            // mark as random - RFC 4122 § 4.4\r\n            data[6] = data[6] & 0x4f | 0x40;\r\n            data[8] = data[8] & 0xbf | 0x80;\r\n            var result = \"\";\r\n            for (var offset = 0; offset < UUID_SIZE; ++offset) {\r\n                var byte = data[offset];\r\n                if (offset === 4 || offset === 6 || offset === 8) {\r\n                    result += \"-\";\r\n                }\r\n                if (byte < 16) {\r\n                    result += \"0\";\r\n                }\r\n                result += byte.toString(16).toLowerCase();\r\n            }\r\n            return result;\r\n        }\r\n        function CreateUniqueKey() {\r\n            var key;\r\n            do {\r\n                key = \"@@WeakMap@@\" + CreateUUID();\r\n            } while (hasOwn.call(keys, key));\r\n            keys[key] = true;\r\n            return key;\r\n        }\r\n        function GetOrCreateWeakMapTable(target, create) {\r\n            if (!hasOwn.call(target, rootKey)) {\r\n                if (!create) {\r\n                    return undefined;\r\n                }\r\n                Object.defineProperty(target, rootKey, { value: Object.create(null) });\r\n            }\r\n            return target[rootKey];\r\n        }\r\n        return WeakMap;\r\n    }\r\n    // hook global Reflect\r\n    (function (__global) {\r\n        if (typeof __global.Reflect !== \"undefined\") {\r\n            if (__global.Reflect !== Reflect) {\r\n                for (var p in Reflect) {\r\n                    __global.Reflect[p] = Reflect[p];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            __global.Reflect = Reflect;\r\n        }\r\n    })(typeof window !== \"undefined\" ? window :\r\n        typeof WorkerGlobalScope !== \"undefined\" ? self :\r\n            typeof global !== \"undefined\" ? global :\r\n                Function(\"return this;\")());\r\n})(Reflect || (Reflect = {}));\r\n//# sourceMappingURL=Reflect.js.map","module.exports={\r\n  \"name\": \"jaydata\",\r\n  \"description\": \"Cross-platform HTML5 data-management, JavaScript Language Query (JSLQ) support for OData, SQLite, WebSQL, IndexedDB, YQL and Facebook (packaged for Node.JS)\",\r\n  \"keywords\": [\r\n    \"HTML5 data management\",\r\n    \"JavaScript\",\r\n    \"JavaScript Language Query\",\r\n    \"JSLQ\",\r\n    \"OData\",\r\n    \"SQLite\",\r\n    \"WebSQL\",\r\n    \"IndexedDB\",\r\n    \"YQL\",\r\n    \"Facebook\",\r\n    \"cross-platform\",\r\n    \"iPhone\",\r\n    \"Android\"\r\n  ],\r\n  \"version\": \"1.5.0\",\r\n  \"homepage\": \"http://jaydata.org\",\r\n  \"author\": {\r\n    \"name\": \"JayData\",\r\n    \"url\": \"http://jaydata.org\"\r\n  },\r\n  \"dependencies\": {\r\n    \"acorn\": \"^2.6.4\",\r\n    \"atob\": \"^2.0.0\",\r\n    \"btoa\": \"^1.1.2\",\r\n    \"dot\": \"^1.0.3\",\r\n    \"odata-metadata\": \"^0.1.0\",\r\n    \"jaydata-odatajs\": \"^4.0.0\",\r\n    \"xmldom\": \"^0.1.19\"\r\n  },\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Dániel József\"\r\n    },\r\n    {\r\n      \"name\": \"Hajnalka Battancs\"\r\n    },\r\n    {\r\n      \"name\": \"János Roden\"\r\n    },\r\n    {\r\n      \"name\": \"László Horváth\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Zentai\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Nochta\"\r\n    },\r\n    {\r\n      \"name\": \"Róbert Bónay\"\r\n    },\r\n    {\r\n      \"name\": \"Szabolcs Czinege\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Borza\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Lázár\"\r\n    },\r\n    {\r\n      \"name\": \"Zoltán Gyebrovszki\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/jaydata/jaydata.git\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=0.6.0\"\r\n  },\r\n  \"license\": \"(MIT OR GPL-2.0)\",\r\n  \"devDependencies\": {\r\n    \"babel\": \"^6.1.18\",\r\n    \"babel-eslint\": \"^5.0.0-beta4\",\r\n    \"babel-plugin-add-module-exports\": \"^0.1.1\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-register\": \"^6.2.0\",\r\n    \"babelify\": \"^7.2.0\",\r\n    \"browserify\": \"^12.0.1\",\r\n    \"browserify-derequire\": \"^0.9.4\",\r\n    \"browserify-shim\": \"^3.8.11\",\r\n    \"chai\": \"^3.4.1\",\r\n    \"del\": \"^2.2.0\",\r\n    \"google-closure-compiler\": \"^20151015.0.0\",\r\n    \"gulp\": \"^3.9.0\",\r\n    \"gulp-babel\": \"^6.1.1\",\r\n    \"gulp-browserify\": \"^0.5.1\",\r\n    \"gulp-closure-compiler\": \"^0.3.1\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-derequire\": \"^2.1.0\",\r\n    \"gulp-eslint\": \"^1.1.1\",\r\n    \"gulp-footer\": \"^1.0.5\",\r\n    \"gulp-header\": \"^1.7.1\",\r\n    \"gulp-nightwatch\": \"^0.2.6\",\r\n    \"gulp-nuget-pack\": \"0.0.6\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-replace\": \"^0.5.4\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-uglify\": \"^1.5.1\",\r\n    \"gulp-vinyl-zip\": \"^1.1.2\",\r\n    \"gulp-webserver\": \"^0.9.1\",\r\n    \"istanbul\": \"^0.4.1\",\r\n    \"jaguarjs-jsdoc\": \"0.0.1\",\r\n    \"jsdoc\": \"^3.4.0\",\r\n    \"minimist\": \"^1.2.0\",\r\n    \"nightwatch\": \"^0.8.8\",\r\n    \"npm\": \"^3.5.2\",\r\n    \"selenium-standalone\": \"^4.7.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"^1.1.0\",\r\n    \"yargs\": \"^3.31.0\"\r\n  },\r\n  \"browserify\": {\r\n    \"transform\": [\r\n      \"browserify-shim\"\r\n    ]\r\n  },\r\n  \"browserify-shim\": {\r\n    \"atob\": \"global:atob\",\r\n    \"btoa\": \"global:btoa\",\r\n    \"jQuery\": \"global:jQuery\",\r\n    \"jaydata-odatajs\": \"global:odatajs\",\r\n    \"angular\": \"global:angular\",\r\n    \"Handlebars\": \"global:Handlebars\",\r\n    \"kendo\": \"global:kendo\",\r\n    \"ko\": \"global:ko\",\r\n    \"q\": \"global:Q\",\r\n    \"Ext\": \"global:Ext\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"mocha --compilers js:babel-register\"\r\n  }\r\n}\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\nvar jQuery = $data.__global['jQuery'];\r\n\r\n(function ($data) {\r\n    if (typeof jQuery !== 'undefined') {\r\n        $data.Class.define('$data.Deferred', $data.PromiseHandlerBase, null, {\r\n            constructor: function () {\r\n                this.deferred = new jQuery.Deferred();\r\n            },\r\n            deferred: {},\r\n            createCallback: function (callBack) {\r\n                callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n                var self = this;\r\n\r\n                return {\r\n                    success: function () {\r\n                        callBack.success.apply(self.deferred, arguments);\r\n                        self.deferred.resolve.apply(self.deferred, arguments);\r\n                    },\r\n                    error: function () {\r\n                        Array.prototype.push.call(arguments, self.deferred);\r\n                        callBack.error.apply(self.deferred, arguments);\r\n                    },\r\n                    notify: function () {\r\n                        callBack.notify.apply(self.deferred, arguments);\r\n                        self.deferred.notify.apply(self.deferred, arguments);\r\n                    }\r\n                };\r\n            },\r\n            getPromise: function () {\r\n                return this.deferred.promise();\r\n            }\r\n        }, null);\r\n\r\n        $data.PromiseHandler = $data.Deferred;\r\n    }\r\n})($data);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\nvar containsField = (obj, field, cb) => {\r\n    // if (field in (obj || {})) {\r\n    //     cb(obj[field])\r\n    // }\r\n    if (obj && field in obj && typeof obj[field] !== \"undefined\") {\r\n        cb(obj[field])\r\n    }\r\n}\r\n\r\nvar parsebool = (b,d) => {\r\n    if (\"boolean\" === typeof b) {\r\n        return b\r\n    }\r\n    switch(b) {\r\n        case \"true\": return true\r\n        case \"false\": return false\r\n        default: return d\r\n    }\r\n}\r\n\r\nvar _collectionRegex = /^Collection\\((.*)\\)$/\r\n\r\nexport class Metadata {\r\n\r\n    constructor(options, metadata) {\r\n        this.options = options || {}\r\n        this.metadata = metadata\r\n        this.options.container = Container //this.options.container || $data.createContainer()\r\n    }\r\n\r\n    _getMaxValue(maxValue) {\r\n        if (\"number\" === typeof maxValue) return maxValue\r\n        if (\"max\" === maxValue) return Number.MAX_VALUE\r\n        return parseInt(maxValue)\r\n    }\r\n    \r\n    \r\n    createTypeDefinition(propertySchema, definition){\r\n        containsField(propertySchema, \"type\", v => {\r\n            var match = _collectionRegex.exec(v)\r\n            if(match){\r\n                definition.type = this.options.collectionBaseType || 'Array'\r\n                definition.elementType = match[1]\r\n            } else {\r\n                definition.type = v\r\n            }\r\n        })\r\n    }\r\n    \r\n    createReturnTypeDefinition(propertySchema, definition){\r\n        containsField(propertySchema, \"type\", v => {\r\n            var match = _collectionRegex.exec(v)\r\n            if(match){\r\n                definition.returnType = $data.Queryable\r\n                definition.elementType = match[1]\r\n            } else {\r\n                definition.returnType = v\r\n            }\r\n        })\r\n    }\r\n    \r\n\r\n    createProperty(entitySchema, propertySchema) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema\r\n            entitySchema = undefined\r\n        }\r\n\r\n        var definition = {}\r\n        \r\n        this.createTypeDefinition(propertySchema, definition)\r\n\r\n        containsField(propertySchema, \"nullable\", v => {\r\n            definition.nullable = parsebool(v, true),\r\n            definition.required = parsebool(v, true) === false\r\n        })\r\n\r\n        containsField(propertySchema, \"maxLength\", v => {\r\n            definition.maxLength = this._getMaxValue(v)\r\n        })\r\n\r\n        containsField(entitySchema, \"key\", keys => {\r\n            if (keys.propertyRefs.some(pr => pr.name === propertySchema.name)) {\r\n                definition.key = true\r\n            }\r\n        })\r\n        \r\n        containsField(propertySchema, \"concurrencyMode\", v => {\r\n            definition.concurrencyMode = $data.ConcurrencyMode[v]\r\n        })\r\n        \r\n        return {\r\n            name: propertySchema.name,\r\n            definition\r\n        }\r\n    }\r\n    \r\n    createNavigationProperty(entitySchema, propertySchema) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema\r\n            entitySchema = undefined\r\n        }\r\n\r\n        var definition = {}\r\n        \r\n        this.createTypeDefinition(propertySchema, definition)\r\n\r\n        containsField(propertySchema, \"nullable\", v => {\r\n            definition.nullable = parsebool(v, true),\r\n            definition.required = parsebool(v, true) === false\r\n        })\r\n\r\n        containsField(propertySchema, \"partner\", p => {\r\n            definition.inverseProperty = p\r\n        })\r\n        \r\n        if(!definition.inverseProperty) {\r\n            definition.inverseProperty = '$$unbound'\r\n        }\r\n\r\n        return {\r\n            name: propertySchema.name,\r\n            definition\r\n        }\r\n    }\r\n\r\n    createEntityDefinition(entitySchema) {\r\n        var props = (entitySchema.properties || []).map(this.createProperty.bind(this, entitySchema))\r\n        var navigationProps = (entitySchema.navigationProperties || []).map(this.createNavigationProperty.bind(this, entitySchema))\r\n        props = props.concat(navigationProps)\r\n        var result = props.reduce( (p, c) => {\r\n            p[c.name] = c.definition\r\n            return p\r\n         }, {})\r\n        return result\r\n    }\r\n\r\n    createEntityType(entitySchema, namespace) {\r\n        let baseType = (entitySchema.baseType ? entitySchema.baseType : this.options.baseType) || $data.Entity\r\n        let definition = this.createEntityDefinition(entitySchema)\r\n        let entityFullName = `${namespace}.${entitySchema.name}`\r\n        \r\n        let staticDefinition = {}\r\n        \r\n        containsField(entitySchema, \"openType\", v => {\r\n            if(parsebool(v, false)){\r\n                staticDefinition.openType = { value: true }\r\n            }\r\n        })\r\n        \r\n        return {\r\n            namespace,\r\n            typeName: entityFullName,\r\n            baseType,\r\n            params: [entityFullName, this.options.container, definition, staticDefinition],\r\n            definition,\r\n            type: 'entity'\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    createEnumOption(entitySchema, propertySchema, i) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema\r\n            entitySchema = undefined\r\n        }\r\n\r\n        var definition = {\r\n            name: propertySchema.name,\r\n            index: i\r\n        }\r\n\r\n        containsField(entitySchema, \"value\", value => {\r\n            var v = +value\r\n            if (!isNaN(v)) {\r\n                definition.value = v\r\n            }\r\n        })\r\n\r\n        return definition\r\n    }\r\n    \r\n    createEnumDefinition(enumSchema) {\r\n        var props = (enumSchema.members || []).map(this.createEnumOption.bind(this, enumSchema))\r\n        return props\r\n    }\r\n    \r\n    createEnumType(enumSchema, namespace) {\r\n        let definition = this.createEnumDefinition(enumSchema)\r\n        let enumFullName = `${namespace}.${enumSchema.name}`\r\n        \r\n        return {\r\n            namespace,\r\n            typeName: enumFullName,\r\n            baseType: $data.Enum,\r\n            params: [enumFullName, this.options.container, enumSchema.underlyingType, definition],\r\n            definition,\r\n            type: 'enum'\r\n        }\r\n    }\r\n\r\n\r\n    createEntitySetProperty(entitySetSchema, contextSchema) {\r\n        //var c = this.options.container\r\n        var t = entitySetSchema.entityType //c.classTypes[c.classNames[entitySetSchema.entityType]] // || entitySetSchema.entityType\r\n        var prop = {\r\n            name: entitySetSchema.name,\r\n            definition: {\r\n                type: this.options.entitySetType || $data.EntitySet,\r\n                elementType: t\r\n            }\r\n        }\r\n        return prop\r\n    }\r\n\r\n    indexBy(fieldName, pick) {\r\n        return [(p, c) => { p[c[fieldName]] = c[pick];  return p }, {}]\r\n    }\r\n\r\n    createContextDefinition(contextSchema, namespace) {\r\n        var props = (contextSchema.entitySets || []).map( es => this.createEntitySetProperty(es, contextSchema))\r\n\r\n        var result = props.reduce(...this.indexBy(\"name\",\"definition\"))\r\n        return result\r\n    }\r\n\r\n    createContextType(contextSchema, namespace) {\r\n        if (Array.isArray(contextSchema)) {\r\n            throw new Error(\"Array type is not supported here\")\r\n        }\r\n        var definition = this.createContextDefinition(contextSchema, namespace)\r\n        var baseType = this.options.contextType || $data.EntityContext\r\n        var typeName = `${namespace}.${contextSchema.name}`\r\n        var contextImportMethods = []\r\n        contextSchema.actionImports && contextImportMethods.push(...contextSchema.actionImports)\r\n        contextSchema.functionImports && contextImportMethods.push(...contextSchema.functionImports)\r\n\r\n        return {\r\n            namespace,\r\n            typeName,\r\n            baseType,\r\n            params: [typeName, this.options.container, definition],\r\n            definition,\r\n            type: 'context',\r\n            contextImportMethods\r\n        }\r\n    }\r\n    \r\n    \r\n    createMethodParameter(parameter, definition) {\r\n        var paramDef = {\r\n            name: parameter.name\r\n        }\r\n        \r\n        this.createTypeDefinition(parameter, paramDef)\r\n        \r\n        definition.params.push(paramDef)\r\n    }\r\n    \r\n    applyBoundMethod(actionInfo, ns, typeDefinitions, type) {\r\n        let definition = {\r\n            type,\r\n            namespace: ns,\r\n            returnType: null,\r\n            params: []\r\n        }\r\n        \r\n        containsField(actionInfo, \"returnType\", value => {\r\n            this.createReturnTypeDefinition(value, definition)\r\n        })\r\n    \r\n        let parameters = [].concat(actionInfo.parameters)\r\n        parameters.forEach((p) => this.createMethodParameter(p, definition))\r\n        \r\n        if(parsebool(actionInfo.isBound, false)) {\r\n            let bindingParameter = definition.params.shift()\r\n            \r\n            if(bindingParameter.type === (this.options.collectionBaseType || 'Array')){\r\n                let filteredContextDefinitions = typeDefinitions.filter((d) => d.namespace === ns && d.type === 'context')\r\n                filteredContextDefinitions.forEach(ctx => {\r\n                    for(var setName in ctx.definition) {\r\n                        let set = ctx.definition[setName]\r\n                        if(set.elementType === bindingParameter.elementType) {\r\n                            set.actions = set.actions = {}\r\n                            set.actions[actionInfo.name] = definition\r\n                        }\r\n                    }\r\n                })\r\n            } else {\r\n                let filteredTypeDefinitions = typeDefinitions.filter((d) => d.typeName === bindingParameter.type && d.type === 'entity')\r\n                filteredTypeDefinitions.forEach(t => {\r\n                    t.definition[actionInfo.name] = definition\r\n                })\r\n            }\r\n        } else {\r\n            delete definition.namespace\r\n            \r\n            let methodFullName = ns + '.' + actionInfo.name\r\n            let filteredContextDefinitions = typeDefinitions.filter((d) => d.type === 'context')\r\n            filteredContextDefinitions.forEach((ctx) => {\r\n                ctx.contextImportMethods.forEach(methodImportInfo => {\r\n                    if(methodImportInfo.action === methodFullName || methodImportInfo.function === methodFullName){\r\n                        ctx.definition[actionInfo.name] = definition\r\n                    }\r\n                })\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n    processMetadata(createdTypes) {\r\n        var types = createdTypes || []\r\n        var typeDefinitions = []\r\n        var serviceMethods = []\r\n        \r\n        this.metadata.dataServices.schemas.forEach(schema => {\r\n            var ns = schema.namespace\r\n            \r\n            if (schema.enumTypes) {\r\n                let enumTypes = schema.enumTypes.map(ct => this.createEnumType(ct, ns))\r\n                typeDefinitions.push(...enumTypes)\r\n            }\r\n            \r\n            if (schema.complexTypes) {\r\n                let complexTypes = schema.complexTypes.map(ct => this.createEntityType(ct, ns))\r\n                typeDefinitions.push(...complexTypes)\r\n            }\r\n            \r\n            if (schema.entityTypes) {\r\n                let entityTypes = schema.entityTypes.map(et => this.createEntityType(et, ns))\r\n                typeDefinitions.push(...entityTypes)\r\n            }\r\n            \r\n            if(schema.actions){\r\n                serviceMethods.push(...schema.actions.map(m => defs => this.applyBoundMethod(m, ns, defs, $data.ServiceAction)))\r\n            }\r\n            \r\n            if(schema.functions){\r\n                serviceMethods.push(...schema.functions.map(m => defs => this.applyBoundMethod(m, ns, defs, $data.ServiceFunction)))\r\n            }\r\n\r\n            if (schema.entityContainer) {\r\n                let contexts = schema.entityContainer.map(ctx => this.createContextType(ctx, ns))\r\n                typeDefinitions.push(...contexts)\r\n            }\r\n        })\r\n        \r\n        serviceMethods.forEach(m => m(typeDefinitions))\r\n        \r\n        types.push(...typeDefinitions.map((d) => {\r\n            \r\n            if(this.options.debug) {\r\n                console.log('---------------')\r\n                console.log('    ' + d.params[0] + \" : \" + this.options.container.resolveName(d.baseType))\r\n                d.params[2] && Object.keys(d.params[2]).forEach(function(dp){ console.log(dp + \": \" + JSON.stringify(d.params[2][dp])) })\r\n                d.params[3] && Object.keys(d.params[3]).forEach(function(dp){ console.log(dp + \": \" + JSON.stringify(d.params[3][dp])) })\r\n            }\r\n            \r\n            var baseType = this.options.container.resolveType(d.baseType)\r\n            return baseType.extend.apply(baseType, d.params)\r\n        }))\r\n        \r\n        return types;\r\n    }\r\n\r\n    convertToSourceCode(done) {\r\n\r\n    }\r\n}\r\n\r\n$data.Metadata = Metadata\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\nimport { Edm } from 'odata-metadata'\r\nimport { Metadata } from './Metadata.js'\r\nimport odatajs from 'jaydata-odatajs';\r\n\r\nexport class MetadataDownloader {\r\n    constructor(options) {\r\n        this.options = options || {}\r\n        this.prepareRequest = options.prepareRequest || function() { }\r\n\r\n        if (typeof odatajs === 'undefined' || typeof odatajs.oData === 'undefined') {\r\n            Guard.raise(new Exception('odatajs is required', 'Not Found!'));\r\n        } else {\r\n            this.oData = odatajs.oData\r\n        }\r\n\r\n    }\r\n\r\n    load(callBack) {\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        callBack = pHandler.createCallback(callBack);\r\n\r\n        var serviceUrl = this.options.url.replace('/$metadata', '')\r\n        var metadataUrl = serviceUrl.replace(/\\/+$/, '') + '/$metadata'\r\n        this.options.SerivceUri = serviceUrl\r\n\r\n\r\n        var requestData = [\r\n            {\r\n                requestUri: metadataUrl,\r\n                method: this.options.method || \"GET\",\r\n                headers: this.options.headers || {}\r\n            },\r\n            (data) => {\r\n                var edmMetadata = new Edm.Edmx(data)\r\n                var metadata = new Metadata(this.options, edmMetadata);\r\n                var types = metadata.processMetadata()\r\n\r\n                var contextType = types.filter((t)=> t.isAssignableTo($data.EntityContext))[0]\r\n\r\n                var factory = this._createFactoryFunc(contextType);\r\n                factory.type = contextType;\r\n\r\n                callBack.success(factory)\r\n            },\r\n            callBack.error,\r\n            this.oData.metadataHandler\r\n        ]\r\n\r\n        this._appendBasicAuth(requestData[0], this.options.user, this.options.password, this.options.withCredentials);\r\n\r\n        this.prepareRequest.call(this, requestData);\r\n\r\n        this.oData.request.apply(this.oData, requestData);\r\n\r\n        return pHandler.getPromise();\r\n    }\r\n\r\n    _createFactoryFunc(ctxType){\r\n        return (config) => {\r\n            if (ctxType) {\r\n                var cfg = $data.typeSystem.extend({\r\n                    name: 'oData',\r\n                    oDataServiceHost: this.options.SerivceUri,\r\n                    user: this.options.user,\r\n                    password: this.options.password,\r\n                    withCredentials: this.options.withCredentials,\r\n                    maxDataServiceVersion: this.options.maxDataServiceVersion || '4.0'\r\n                }, config)\r\n\r\n                return new ctxType(cfg);\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    _appendBasicAuth(request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials){\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    }\r\n\r\n    __encodeBase64 (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n                           \"QRSTUVWXYZabcdef\" +\r\n                           \"ghijklmnopqrstuv\" +\r\n                           \"wxyz0123456789+/\" +\r\n                           \"=\";\r\n\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            base64 = base64 +\r\n                        b64array.charAt(enc1) +\r\n                        b64array.charAt(enc2) +\r\n                        b64array.charAt(enc3) +\r\n                        b64array.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return base64;\r\n    }\r\n}\r\n\r\n$data.MetadataDownloader = MetadataDownloader\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.service = function (serviceUri, config, cb) {\r\n    var _url, _config, _callback;\r\n    function getParam(paramValue) {\r\n        switch (typeof paramValue) {\r\n            case 'object':\r\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\r\n                    _callback = paramValue;\r\n                } else {\r\n                    _config = paramValue;\r\n                }\r\n                break;\r\n            case 'function':\r\n                _callback = paramValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    getParam(config);\r\n    getParam(cb);\r\n\r\n    if (typeof serviceUri === 'object') {\r\n        _config = $data.typeSystem.extend(serviceUri, _config);\r\n    } else if (typeof serviceUri === \"string\") {\r\n        _config = _config || {}\r\n        _config.url = serviceUri;\r\n    }\r\n\r\n    var pHandler = new $data.PromiseHandler();\r\n    _callback = pHandler.createCallback(_callback);\r\n\r\n\r\n    var downloader = new $data.MetadataDownloader(_config)\r\n    downloader.load({\r\n        success: (factory) => {\r\n            var type = factory.type;\r\n            //register to local store\r\n            if (_config) {\r\n                var storeAlias = _config.serviceName || _config.storeAlias;\r\n                if (storeAlias && 'addStore' in $data) {\r\n                    $data.addStore(storeAlias, factory, _config.isDefault === undefined || _config.isDefault)\r\n                }\r\n            }\r\n\r\n            _callback.success(factory, type);\r\n        },\r\n        error: _callback.error\r\n    })\r\n\r\n    return pHandler.getPromise();\r\n};\r\n\r\n$data.initService = function(serviceUri, config, cb){\r\n    var _config, _callback;\r\n    function getParam(paramValue) {\r\n        switch (typeof paramValue) {\r\n            case 'object':\r\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\r\n                    _callback = paramValue;\r\n                } else {\r\n                    _config = paramValue;\r\n                }\r\n                break;\r\n            case 'function':\r\n                _callback = paramValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    getParam(config);\r\n    getParam(cb);\r\n    \r\n    var d = new $data.PromiseHandler();\r\n    var clb = d.createCallback(_callback);\r\n    \r\n    \r\n    $data.service(serviceUri, _config, {\r\n        success: function(factory){\r\n            var ctx = factory()\r\n            if(ctx){\r\n                return ctx.onReady(clb)    \r\n            }\r\n            return clb.error(new Exception(\"Missing Context Type\"))\r\n        }, \r\n        error: clb.error\r\n    })\r\n    \r\n    return d.getPromise();\r\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('../Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _Metadata = require('./Metadata.js');\n\nvar _Metadata2 = _interopRequireDefault(_Metadata);\n\nvar _MetadataDownloader = require('./MetadataDownloader.js');\n\nvar _MetadataDownloader2 = _interopRequireDefault(_MetadataDownloader);\n\nvar _Service = require('./Service.js');\n\nvar _Service2 = _interopRequireDefault(_Service);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0=","import $data from './initializeJayData.js';\r\nimport Exception from './Exception.js';\r\nimport { Guard } from './utils.js';\r\nimport { StringFunctions } from './Extensions.js'\r\n\r\n\r\nvar Container = new ContainerCtor()\r\n\r\nexport var ContainerInstance = Container\r\n\r\nexport function ContainerCtor(parentContainer) {\r\n    var parent = parentContainer;\r\n    if (parent) {\r\n      parent.addChildContainer(this);\r\n    }\r\n\r\n    var classNames = {};\r\n    var consolidatedClassNames = [];\r\n    var classTypes = [];\r\n\r\n    this.classNames = classNames;\r\n    this.consolidatedClassNames = consolidatedClassNames;\r\n    this.classTypes = classTypes;\r\n\r\n    var mappedTo = [];\r\n    this.mappedTo = mappedTo;\r\n\r\n    var self = this;\r\n\r\n    this[\"holder\"] = null;\r\n\r\n    var IoC = function(type, parameters) {\r\n      var t = self.resolveType(type);\r\n      var inst = Object.create(t.prototype);\r\n      t.apply(inst, parameters);\r\n      return inst;\r\n    };\r\n\r\n    var pendingResolutions = {};\r\n    this.pendingResolutions = pendingResolutions;\r\n\r\n    function addPendingResolution(name, onResolved) {\r\n      pendingResolutions[name] = pendingResolutions[name] || [];\r\n      pendingResolutions[name].push(onResolved);\r\n    }\r\n\r\n    this.addChildContainer = function(container) {\r\n      //children.push(container);\r\n    }\r\n\r\n    this.createInstance = function(type, parameters) {\r\n      return IoC(type, parameters);\r\n    };\r\n\r\n    this.mapType = function(aliasTypeOrName, realTypeOrName) {\r\n        Guard.requireValue(\"aliasType\", aliasTypeOrName);\r\n        Guard.requireValue(\"realType\", realTypeOrName);\r\n        var aliasT = this.getType(aliasTypeOrName);\r\n        var realT = this.getType(realTypeOrName);\r\n        var aliasPos = classTypes.indexOf(aliasT);\r\n        var realPos = classTypes.indexOf(realT);\r\n        mappedTo[aliasPos] = realPos;\r\n      },\r\n\r\n      //this.resolve = function (type, parameters) {\r\n      //    var classFunction = this.resolveType(type, parameters);\r\n      //    return new classFunction(parameters);\r\n      //};\r\n\r\n\r\n\r\n      this.isPrimitiveType = function(type) {\r\n        var t = this.resolveType(type);\r\n\r\n        switch (true) {\r\n          case t === Number:\r\n          case t === String:\r\n          case t === Date:\r\n          case t === Boolean:\r\n          case t === Array:\r\n          case t === Object:\r\n\r\n          case t === $data.Number:\r\n          case t === $data.Integer:\r\n          case t === $data.Date:\r\n          case t === $data.String:\r\n          case t === $data.Boolean:\r\n          case t === $data.Array:\r\n          case t === $data.Object:\r\n          case t === $data.Guid:\r\n\r\n          case t === $data.Byte:\r\n          case t === $data.SByte:\r\n          case t === $data.Decimal:\r\n          case t === $data.Float:\r\n          case t === $data.Int16:\r\n          case t === $data.Int32:\r\n          case t === $data.Int64:\r\n          case t === $data.DateTimeOffset:\r\n          case t === $data.Time:\r\n          case t === $data.Day:\r\n          case t === $data.Duration:\r\n\r\n          case t === $data.SimpleBase:\r\n          case t === $data.Geospatial:\r\n          case t === $data.GeographyBase:\r\n          case t === $data.GeographyPoint:\r\n          case t === $data.GeographyLineString:\r\n          case t === $data.GeographyPolygon:\r\n          case t === $data.GeographyMultiPoint:\r\n          case t === $data.GeographyMultiLineString:\r\n          case t === $data.GeographyMultiPolygon:\r\n          case t === $data.GeographyCollection:\r\n          case t === $data.GeometryBase:\r\n          case t === $data.GeometryPoint:\r\n          case t === $data.GeometryLineString:\r\n          case t === $data.GeometryPolygon:\r\n          case t === $data.GeometryMultiPoint:\r\n          case t === $data.GeometryMultiLineString:\r\n          case t === $data.GeometryMultiPolygon:\r\n          case t === $data.GeometryCollection:\r\n\r\n            return true;\r\n          default:\r\n            return false;\r\n        }\r\n      };\r\n\r\n\r\n    this.resolveName = function(type) {\r\n      var t = this.resolveType(type);\r\n      var tPos = classTypes.indexOf(t);\r\n      return consolidatedClassNames[tPos];\r\n    };\r\n\r\n    this.resolveType = function(typeOrName, onResolved) {\r\n      var t = typeOrName;\r\n      t = this.getType(t, onResolved ? true : false, onResolved);\r\n      var posT = classTypes.indexOf(t);\r\n      return typeof mappedTo[posT] === 'undefined' ? t : classTypes[mappedTo[posT]];\r\n    };\r\n\r\n\r\n\r\n    this.getType = function(typeOrName, doNotThrow, onResolved) {\r\n      Guard.requireValue(\"typeOrName\", typeOrName);\r\n      if (typeof typeOrName === 'function') {\r\n        return typeOrName;\r\n      };\r\n\r\n      if (!(typeOrName in classNames)) {\r\n        if (parent) {\r\n          var tp = parent.getType(typeOrName, true);\r\n          if (tp) return tp;\r\n        }\r\n        if (onResolved) {\r\n          addPendingResolution(typeOrName, onResolved);\r\n          return;\r\n        } else if (doNotThrow) {\r\n          return undefined;\r\n        } else {\r\n          Guard.raise(new Exception(\"Unable to resolve type:\" + typeOrName));\r\n        }\r\n      };\r\n      var result = classTypes[classNames[typeOrName]];\r\n      if (onResolved) {\r\n        onResolved(result);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    this.getName = function(typeOrName) {\r\n      var t = this.getType(typeOrName);\r\n      var tPos = classTypes.indexOf(t);\r\n      if (tPos == -1)\r\n        Guard.raise(\"unknown type to request name for: \" + typeOrName);\r\n      return consolidatedClassNames[tPos];\r\n    };\r\n\r\n    this.getTypes = function() {\r\n      var keys = Object.keys(classNames);\r\n      var ret = [];\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var className = keys[i];\r\n        ret.push({\r\n          name: className,\r\n          type: classTypes[classNames[className]],\r\n          toString: function() {\r\n            return this.name;\r\n          }\r\n        });\r\n      }\r\n      return ret;\r\n    };\r\n\r\n    //this.getTypeName( in type);\r\n    //this.resolveType()\r\n    //this.inferTypeFromValue = function (value) {\r\n\r\n    this.getTypeName = function(value) {\r\n      //TODO refactor\r\n      switch (typeof value) {\r\n        case 'object':\r\n          if (value == null) return '$data.Object';\r\n          if (value instanceof Array) return '$data.Array';\r\n          if (value.getType) return value.getType().fullName;\r\n          if (value instanceof Date) return '$data.Date';\r\n          if (value instanceof $data.Guid) return '$data.Guid';\r\n          if (value instanceof $data.DateTimeOffset) return '$data.DateTimeOffset';\r\n          if (value instanceof $data.GeographyPoint) return '$data.GeographyPoint';\r\n          if (value instanceof $data.GeographyLineString) return '$data.GeographyLineString';\r\n          if (value instanceof $data.GeographyPolygon) return '$data.GeographyPolygon';\r\n          if (value instanceof $data.GeographyMultiPoint) return '$data.GeographyMultiPoint';\r\n          if (value instanceof $data.GeographyMultiLineString) return '$data.GeographyMultiLineString';\r\n          if (value instanceof $data.GeographyMultiPolygon) return '$data.GeographyMultiPolygon';\r\n          if (value instanceof $data.GeographyCollection) return '$data.GeographyCollection';\r\n          if (value instanceof $data.GeographyBase) return '$data.GeographyBase';\r\n          if (value instanceof $data.GeometryPoint) return '$data.GeometryPoint';\r\n          if (value instanceof $data.GeometryLineString) return '$data.GeometryLineString';\r\n          if (value instanceof $data.GeometryPolygon) return '$data.GeometryPolygon';\r\n          if (value instanceof $data.GeometryMultiPoint) return '$data.GeometryMultiPoint';\r\n          if (value instanceof $data.GeometryMultiLineString) return '$data.GeometryMultiLineString';\r\n          if (value instanceof $data.GeometryMultiPolygon) return '$data.GeometryMultiPolygon';\r\n          if (value instanceof $data.GeometryCollection) return '$data.GeometryCollection';\r\n          if (value instanceof $data.GeometryBase) return '$data.GeometryBase';\r\n          if (value instanceof $data.Geospatial) return '$data.Geospatial';\r\n          if (value instanceof $data.SimpleBase) return '$data.SimpleBase';\r\n          if (typeof value.toHexString === 'function') return '$data.ObjectID';\r\n          //if(value instanceof \"number\") return\r\n        default:\r\n          return typeof value;\r\n      }\r\n    };\r\n\r\n    this.isTypeRegistered = function(typeOrName) {\r\n      if (typeof typeOrName === 'function') {\r\n        return classTypes.indexOf(typeOrName) > -1;\r\n      } else {\r\n        return typeOrName in classNames;\r\n      }\r\n    };\r\n\r\n    this.unregisterType = function(type) {\r\n      Guard.raise(\"Unimplemented\");\r\n    };\r\n\r\n\r\n\r\n    this.getDefault = function(typeOrName) {\r\n      var t = this.resolveType(typeOrName);\r\n      switch (t) {\r\n        case $data.Number:\r\n          return 0.0;\r\n        case $data.Float:\r\n          return 0.0;\r\n        case $data.Decimal:\r\n          return '0.0';\r\n        case $data.Integer:\r\n          return 0;\r\n        case $data.Int16:\r\n          return 0;\r\n        case $data.Int32:\r\n          return 0;\r\n        case $data.Int64:\r\n          return '0';\r\n        case $data.Byte:\r\n          return 0;\r\n        case $data.SByte:\r\n          return 0;\r\n        case $data.String:\r\n          return null;\r\n        case $data.Boolean:\r\n          return false;\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n    //name array ['', '', '']\r\n    this.getIndex = function(typeOrName) {\r\n      var t = this.resolveType(typeOrName);\r\n      return classTypes.indexOf(t);\r\n    }\r\n\r\n    this.resolveByIndex = function(index) {\r\n      return classTypes[index];\r\n    }\r\n\r\n    this.registerType = function(nameOrNamesArray, type, factoryFunc) {\r\n      ///<signature>\r\n      ///<summary>Registers a type and optionally a lifetimeManager with a name\r\n      ///that can be used to later resolve the type or create new instances</summary>\r\n      ///<param name=\"nameOrNamesArray\" type=\"Array\">The names of the type</param>\r\n      ///<param name=\"type\" type=\"Function\">The type to register</param>\r\n      ///<param name=\"instanceManager\" type=\"Function\"></param>\r\n      ///</signature>\r\n      ///<signature>\r\n      ///<summary>Registers a new type that </summary>\r\n      ///<param name=\"aliasType\" type=\"Function\">The name of the type</param>\r\n      ///<param name=\"actualType\" type=\"Function\">The type to register</param>\r\n      ///</signature>\r\n\r\n\r\n      ///TODO remove\r\n      /*if (typeof typeNameOrAlias === 'string') {\r\n          if (classNames.indexOf(typeNameOrAlias) > -1) {\r\n              Guard.raise(\"Type already registered. Remove first\");\r\n          }\r\n      }*/\r\n\r\n      if (!nameOrNamesArray) {\r\n        return;\r\n      }\r\n\r\n      //todo add ('number', 'number')\r\n      if (typeof type === \"string\") {\r\n        type = self.resolveType(type);\r\n      }\r\n\r\n      var namesArray = [];\r\n      if (typeof nameOrNamesArray === 'string') {\r\n        var tmp = [];\r\n        tmp.push(nameOrNamesArray);\r\n        namesArray = tmp;\r\n      } else {\r\n        namesArray = nameOrNamesArray;\r\n      }\r\n\r\n      for (var i = 0; i < namesArray.length; i++) {\r\n        var parts = namesArray[i].split('.');\r\n        var item = {};\r\n        item.shortName = parts[parts.length - 1];\r\n        item.fullName = namesArray[i];\r\n        namesArray[i] = item;\r\n      }\r\n\r\n      //if (type.\r\n\r\n\r\n      var creatorFnc = function() {\r\n        return IoC(type, arguments);\r\n      };\r\n\r\n      if (typeof intellisense !== 'undefined') {\r\n        intellisense.annotate(creatorFnc, type);\r\n      }\r\n\r\n      for (var i = 0, l = namesArray.length; i < l; i++) {\r\n        var item = namesArray[i];\r\n        if (!((\"create\" + item.shortName) in self)) {\r\n          if (typeof factoryFunc === 'function') {\r\n            self[\"create\" + item.shortName] = factoryFunc;\r\n          } else {\r\n            self[\"create\" + item.shortName] = creatorFnc;\r\n          }\r\n        }\r\n\r\n        var typePos = classTypes.indexOf(type);\r\n        if (typePos == -1) {\r\n          //new type\r\n          typePos = classTypes.push(type) - 1;\r\n          var fn = item.fullName;\r\n          consolidatedClassNames[typePos] = item.fullName;\r\n        };\r\n\r\n        classNames[item.fullName] = typePos;\r\n\r\n        var pending = pendingResolutions[item.fullName] || [];\r\n        if (pending.length > 0) {\r\n          pending.forEach(function(t) {\r\n            t(type);\r\n          });\r\n          pendingResolutions[item.fullName] = [];\r\n        }\r\n      }\r\n      if (parent) {\r\n        parent.registerType.apply(parent, arguments);\r\n      }\r\n      if (!type.name) {\r\n        try{ type.name = namesArray[0].shortName; }catch(err){ }\r\n      }\r\n    };\r\n\r\n\r\n    var _converters = {\r\n      from: {},\r\n      to: {}\r\n    };\r\n    this.converters = _converters;\r\n\r\n    this.convertTo = function(value, tType, eType /*if Array*/ , options) {\r\n      Guard.requireValue(\"typeOrName\", tType);\r\n\r\n      if (Object.isNullOrUndefined(value))\r\n        return value;\r\n\r\n      var sourceTypeName = Container.getTypeName(value);\r\n      var sourceType = Container.resolveType(sourceTypeName);\r\n      var sourceTypeName = Container.resolveName(sourceType);\r\n      var targetType = Container.resolveType(tType);\r\n      var targetTypeName = Container.resolveName(targetType);\r\n\r\n      var result;\r\n      try {\r\n        if (typeof targetType['from' + sourceTypeName] === 'function') {\r\n          // target from\r\n          result = targetType['from' + sourceTypeName].apply(targetType, arguments);\r\n\r\n        } else if (typeof sourceType['to' + targetTypeName] === 'function') {\r\n          // source to\r\n          result = sourceType['to' + targetTypeName].apply(sourceType, arguments);\r\n\r\n        } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName][sourceTypeName]) {\r\n          // target from source\r\n          result = _converters.to[targetTypeName][sourceTypeName].apply(_converters, arguments);\r\n\r\n        } else if (_converters.from[sourceTypeName] && _converters.from[sourceTypeName][targetTypeName]) {\r\n          // source to target\r\n          result = _converters.from[sourceTypeName][targetTypeName].apply(_converters, arguments);\r\n\r\n        } else if (targetTypeName === sourceTypeName || value instanceof targetType) {\r\n          result = value;\r\n\r\n        } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName]['default']) {\r\n          // target from anything\r\n          result = _converters.to[targetTypeName]['default'].apply(_converters, arguments);\r\n\r\n        } else {\r\n          throw \"converter not found\";\r\n        }\r\n      } catch (e) {\r\n        Guard.raise(new Exception(\"Value '\" + sourceTypeName + \"' not convertable to '\" + targetTypeName + \"'\", 'TypeError', value));\r\n      }\r\n\r\n      if (targetType === $data.Array && eType && Array.isArray(result)) {\r\n        for (var i = 0; i < result.length; i++) {\r\n          result[i] = this.convertTo.call(this, result[i], eType, undefined, options);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n    this.registerConverter = function(target, sourceOrToConverters, toConverterOrFromConverters, fromConverter) {\r\n      //registerConverter($data.Guid, { $data.String: fn, int: fn }, { string: fn, int:fn })\r\n      //registerConverter($data.Guid, $data.String, fn, fn);\r\n\r\n      var targetName = Container.resolveName(target);\r\n      if (Container.isTypeRegistered(sourceOrToConverters)) {\r\n        //isSource\r\n        _converters.to[targetName] = _converters.to[targetName] || {};\r\n        _converters.from[targetName] = _converters.from[targetName] || {};\r\n\r\n        var sourceName = Container.resolveName(sourceOrToConverters);\r\n\r\n        if (toConverterOrFromConverters)\r\n          _converters.to[targetName][sourceName] = toConverterOrFromConverters;\r\n        if (fromConverter)\r\n          _converters.from[targetName][sourceName] = fromConverter;\r\n\r\n      } else {\r\n        // converterGroup\r\n\r\n        //fromConverters\r\n        if (_converters.to[targetName]) {\r\n          _converters.to[targetName] = $data.typeSystem.extend(_converters.to[targetName], sourceOrToConverters);\r\n        } else {\r\n          _converters.to[targetName] = sourceOrToConverters;\r\n        }\r\n\r\n        //toConverters\r\n        if (_converters.from[targetName]) {\r\n          _converters.from[targetName] = $data.typeSystem.extend(_converters.from[targetName], toConverterOrFromConverters);\r\n        } else {\r\n          _converters.from[targetName] = toConverterOrFromConverters;\r\n        }\r\n      }\r\n    };\r\n\r\n    this.createOrGetNamespace = function(parts, root) {\r\n      for (var i = 0; i < parts.length; i++) {\r\n        var part = parts[i];\r\n        if (!root[part]) {\r\n          var ns = {};\r\n          ns.__namespace = true;\r\n          root[part] = ns;\r\n        }\r\n        root = root[part];\r\n      }\r\n      return root;\r\n    };\r\n  }\r\n","let Exception = function(message, name, data) {\r\n  Error.call(this);\r\n  if (Error.captureStackTrace)\r\n    Error.captureStackTrace(this, this.constructor);\r\n\r\n  this.name = name || \"Exception\";\r\n  this.message = message;\r\n  this.data = data;\r\n\r\n  //this.toString = function() { return JSON.stringify(this); };\r\n\r\n}\r\n\r\nException.prototype.__proto__ = Error.prototype;\r\n\r\nException.prototype._getStackTrace = function() {\r\n  var callstack = [];\r\n  var isCallstackPopulated = false;\r\n  // unreachable code\r\n  //return;\r\n  /*try {\r\n      i.dont.exist += 0;\r\n  }\r\n  catch (e) {\r\n      if (e.stack) { // Firefox, Chrome\r\n          var lines = e.stack.split('\\n');\r\n          for (var i = 0, len = lines.length; i < len; i++) {\r\n              //if (lines[i].match(/^\\s*[A-Za-z0-9\\-_\\$]+\\(/)) {\r\n              if (lines[i].indexOf(\" at \") >= 0)\r\n                  callstack.push(lines[i]);\r\n          }\r\n          //Remove call to printStackTrace()\r\n          callstack.shift();\r\n          //TODO: Remove call to new Exception( chain\r\n          //callstack.shift();\r\n          isCallstackPopulated = true;\r\n      }\r\n      else if (window.opera && e.message) { //Opera\r\n          var lines = e.message.split('\\n');\r\n          for (var i = 0, len = lines.length; i < len; i++) {\r\n              if (lines[i].match(/^\\s*[A-Za-z0-9\\-_\\$]+\\(/)) {\r\n                  var entry = lines[i];\r\n                  //Append next line also since it has the file info\r\n                  if (lines[i + 1]) {\r\n                      entry += ' at ' + lines[i + 1];\r\n                      i++;\r\n                  }\r\n                  callstack.push(entry);\r\n              }\r\n          }\r\n          //Remove call to printStackTrace()\r\n          callstack.shift();\r\n          //TODO: Remove call to new Exception( chain\r\n          //callstack.shift();\r\n          isCallstackPopulated = true;\r\n      }\r\n  }\r\n\r\n  //if (!isCallstackPopulated) { //IE and Safari\r\n  //    var currentFunction = arguments.callee.caller;\r\n  //    while (currentFunction) {\r\n  //        var fn = currentFunction.toString();\r\n  //        var fname = fn.substring(fn.indexOf(\"function\") + 8, fn.indexOf('(')) || 'anonymous';\r\n  //        callstack.push(fname);\r\n  //        if (currentFunction == currentFunction.caller) {\r\n  //            Guard.raise(\"Infinite loop\");\r\n  //        }\r\n  //        currentFunction = currentFunction.caller;\r\n  //    }\r\n  //}\r\n  return callstack.join(\"\\n\\r\");\t */\r\n};\r\nexport default Exception;\r\n","export var StringFunctions = {\r\n    startsWith: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.indexOf(str) === 0;\r\n    },\r\n    endsWith: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.slice(-str.length) === str;\r\n    },\r\n    contains: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.indexOf(str) >= 0;\r\n    }\r\n};\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Class.define('$data.Logger', $data.TraceBase, null, {\r\n    log: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.log.apply(console, arguments);\r\n    },\r\n    warn: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.warn.apply(console, arguments);\r\n    },\r\n    error: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.error.apply(console, arguments);\r\n    },\r\n\r\n    getDateFormat: function () {\r\n        var date = new Date();\r\n        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Class.define('$data.TraceBase', null, null, {\r\n    log: function () { },\r\n    warn: function () { },\r\n    error: function () { }\r\n});\r\n\r\n$data.Trace = new $data.TraceBase();\r\n\r\nexport default $data\r\n","import $data from './initializeJayData.js';\r\nimport Exception from './Exception.js';\r\nimport { Guard } from './utils.js';\r\nimport { StringFunctions } from './Extensions.js'\r\nimport {ContainerInstance, ContainerCtor} from './Container.js'\r\n\r\n\r\n$data.StringFunctions = StringFunctions\r\n\r\nvar _modelHolder = null;\r\n$data.setModelContainer = function(modelHolder){\r\n  _modelHolder = modelHolder;\r\n};\r\n\r\n$data.defaults = $data.defaults || {}\r\n$data.defaults.openTypeDefaultPropertyName = \"dynamicProperties\";\r\n$data.defaults.openTypeDefaultType = '$data.Object';\r\n$data.defaults.openTypeDefaultValue = {};\r\n\r\n$data.__global = process.browser ? window : global\r\n$data.setGlobal = function(obj){\r\n  $data.__global = obj;\r\n};\r\n\r\n(function init($data) {\r\n\r\n  function il(msg) {\r\n    if (typeof intellisense !== 'undefined') {\r\n      if (!intellisense.i) {\r\n        intellisense.i = 0;\r\n      }\r\n      intellisense.i = intellisense.i + 1;\r\n      intellisense.logMessage(msg + \":\" + intellisense.i);\r\n    }\r\n  }\r\n\r\n  function MemberDefinition(memberDefinitionData, definedClass) {\r\n\r\n    ///<field name=\"name\" type=\"String\">*</field>\r\n    ///<field name=\"dataType\" type=\"Object\">*</field>\r\n    ///<field name=\"elementType\" type=\"Object\"></field>\r\n    ///<field name=\"kind\" type=\"String\" />\r\n    ///<field name=\"classMember\" type=\"Boolean\" />\r\n    ///<field name=\"set\" type=\"Function\" />\r\n    ///<field name=\"get\" type=\"Function\" />\r\n    ///<field name=\"value\" type=\"Object\" />\r\n    ///<field name=\"initialValue\" type=\"Object\" />\r\n    ///<field name=\"method\" type=\"Function\" />\r\n    ///<field name=\"enumerable\" type=\"Boolean\" />\r\n    ///<field name=\"configurable\" type=\"Boolean\" />\r\n    ///<field name=\"key\" type=\"Boolean\" />\r\n    ///<field name=\"computed\" type=\"Boolean\" />\r\n    ///<field name=\"storeOnObject\" type=\"Boolean\">[false] if false value is stored in initData, otherwise on the object</field>\r\n    ///<field name=\"monitorChanges\" type=\"Boolean\">[true] if set to false propertyChange events are not raise and property tracking is disabled</field>\r\n\r\n    this.kind = MemberTypes.property;\r\n    //this.definedBy = definedClass;\r\n    Object.defineProperty(this, 'definedBy', {\r\n      value: definedClass,\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false\r\n    });\r\n    if (memberDefinitionData) {\r\n      if (typeof memberDefinitionData === 'function' || typeof memberDefinitionData.asFunction === 'function') {\r\n        this.method = memberDefinitionData;\r\n        this.kind = MemberTypes.method;\r\n      } else {\r\n        this.enumerable = true;\r\n        this.configurable = true;\r\n        if (typeof memberDefinitionData === \"number\") {\r\n          this.value = memberDefinitionData;\r\n          this.type = $data.Number;\r\n          this.dataType = $data.Number;\r\n        } else if (typeof memberDefinitionData === \"string\") {\r\n          this.value = memberDefinitionData;\r\n          this.dataType = $data.String;\r\n          this.type = $data.String;\r\n        } else {\r\n          for (var item in memberDefinitionData) {\r\n            if (memberDefinitionData.hasOwnProperty(item)) {\r\n              this[item] = memberDefinitionData[item];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (this.type !== undefined) {\r\n        this.dataType = this.dataType || this.type;\r\n      } else {\r\n        this.type = this.dataType;\r\n      }\r\n\r\n      this.originalType = this.type;\r\n      if (this.elementType !== undefined) {\r\n        this.originalElementType = this.elementType;\r\n      }\r\n    }\r\n  }\r\n  MemberDefinition.prototype.createPropertyDescriptor = function(classFunction, value) {\r\n    ///<returns type=\"Object\" />\r\n    var pd = this;\r\n    var result = {\r\n      enumerable: this.enumerable == undefined ? true : this.enumerable,\r\n      configurable: this.configurable == undefined ? true : this.configurable\r\n    };\r\n    if (this.set && this.get) {\r\n      result.set = this.set;\r\n      result.get = this.get;\r\n    } else if (\"value\" in this || value) {\r\n      result.value = value || this.value;\r\n      //TODO\r\n      //result.writable = this.writable;\r\n      result.writable = true;\r\n    } else {\r\n      result.set = function(value) {\r\n        this.storeProperty(pd, value);\r\n      };\r\n      result.get = function() {\r\n        return this.retrieveProperty(pd);\r\n      };\r\n    }\r\n    return result;\r\n  };\r\n  MemberDefinition.prototype.createStorePropertyDescriptor = function(value) {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: pd.configurable,\r\n      value: value\r\n    };\r\n  };\r\n  MemberDefinition.prototype.createGetMethod = function() {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: false,\r\n      value: function(callback, tran) {\r\n        return this.getProperty(pd, callback, tran);\r\n      }\r\n    };\r\n  };\r\n  MemberDefinition.prototype.createSetMethod = function() {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: false,\r\n      value: function(value, callback, tran) {\r\n        return this.setProperty(pd, value, callback, tran);\r\n      }\r\n    };\r\n  };\r\n  MemberDefinition.translateDefinition = function(memDef, name, classFunction) {\r\n    var holder = classFunction;\r\n    var memberDefinition;\r\n\r\n    if (memDef.type && Container.isTypeRegistered(memDef.type)) {\r\n      holder = Container.resolveType(memDef.type);\r\n      if (typeof holder.translateDefinition === 'function') {\r\n        memberDefinition = holder.translateDefinition.apply(holder, arguments);\r\n        memberDefinition.name = memberDefinition.name || name;\r\n      } else {\r\n        holder = classFunction;\r\n      }\r\n    }\r\n\r\n\r\n    if (!(memberDefinition instanceof MemberDefinition)) {\r\n      memberDefinition = new MemberDefinition(memberDefinition || memDef, holder);\r\n      memberDefinition.name = name;\r\n    }\r\n    classFunction.resolverThunks = classFunction.resolverThunks || [];\r\n    classFunction.childResolverThunks = classFunction.childResolverThunks || [];\r\n\r\n\r\n    var t = memberDefinition.type;\r\n    var et = memberDefinition.elementType;\r\n\r\n    function addChildThunk(referencedType) {\r\n      if (referencedType && referencedType.isAssignableTo && $data.Entity && referencedType.isAssignableTo($data.Entity)) {\r\n        classFunction.childResolverThunks.push(function() {\r\n          if (referencedType.resolveForwardDeclarations) {\r\n            referencedType.resolveForwardDeclarations();\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    addChildThunk(t);\r\n    addChildThunk(et);\r\n\r\n    if (\"string\" === typeof t) {\r\n      if (\"@\" === t[0]) {\r\n        memberDefinition.type = t.substr(1);\r\n        memberDefinition.dataType = t.substr(1);\r\n      } else {\r\n        //forward declared types get this callback when type is registered\r\n        classFunction.resolverThunks.push(function() {\r\n          var rt = classFunction.container.resolveType(t);\r\n          addChildThunk(rt);\r\n          memberDefinition.type = rt;\r\n          memberDefinition.dataType = rt;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (et) {\r\n      if (\"string\" === typeof et) {\r\n        if (\"@\" === et[0]) {\r\n          memberDefinition.elementType = et.substr(1);\r\n        } else {\r\n          //forward declared types get this callback when type is registered\r\n          classFunction.resolverThunks.push(function() {\r\n            var rt = classFunction.container.resolveType(et);\r\n            addChildThunk(rt);\r\n            memberDefinition.elementType = rt;\r\n          });\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    //if (!classFunction)\r\n\r\n    classFunction.resolveForwardDeclarations = function() {\r\n      classFunction.resolveForwardDeclarations = function() {};\r\n      $data.Trace.log(\"resolving: \" + classFunction.fullName);\r\n      this.resolverThunks.forEach(function(thunk) {\r\n        thunk();\r\n      });\r\n      //this.resolverThunks = [];\r\n      this.childResolverThunks.forEach(function(thunk) {\r\n        thunk();\r\n      });\r\n      //this.childResolverThunks = [];\r\n    }\r\n\r\n    return memberDefinition;\r\n  };\r\n\r\n  MemberDefinition.prototype.toJSON = function() {\r\n    var property = {};\r\n    for (var name in this) {\r\n      if (name !== 'defineBy' && name !== 'storageModel') {\r\n        if ((name === 'type' || name === 'dataType') && (this[name] && typeof this[name] === 'function')) {\r\n          try {\r\n            property[name] = Container.resolveName(this[name]);\r\n          } catch (e) {\r\n            property[name] = this[name];\r\n          }\r\n        } else {\r\n          property[name] = this[name];\r\n        }\r\n      }\r\n    }\r\n    return property;\r\n  }\r\n\r\n  $data.MemberDefinition = MemberDefinition;\r\n\r\n  var memberDefinitionPrefix = '$';\r\n\r\n  function MemberDefinitionCollection() {};\r\n  MemberDefinitionCollection.prototype = {\r\n    clearCache: function() {\r\n      this.arrayCache = undefined;\r\n      this.pubMapPropsCache = undefined;\r\n      this.keyPropsCache = undefined;\r\n      this.propByTypeCache = undefined;\r\n      this.pubMapMethodsCache = undefined;\r\n      this.pubMapPropNamesCache = undefined;\r\n    },\r\n    asArray: function() {\r\n      if (!this.arrayCache) {\r\n        this.arrayCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0)\r\n            this.arrayCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.arrayCache;\r\n    },\r\n    getPublicMappedProperties: function() {\r\n      if (!this.pubMapPropsCache) {\r\n        this.pubMapPropsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable)\r\n            this.pubMapPropsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.pubMapPropsCache; // || (this.pubMapPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && !m.notMapped && m.enumerable; }));\r\n    },\r\n    getPublicMappedPropertyNames: function() {\r\n      if (!this.pubMapPropNamesCache) {\r\n        this.pubMapPropNamesCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable)\r\n            this.pubMapPropNamesCache.push(this[i].name);\r\n        }\r\n      }\r\n      return this.pubMapPropNamesCache;\r\n    },\r\n    getKeyProperties: function() {\r\n      if (!this.keyPropsCache) {\r\n        this.keyPropsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && this[i].key)\r\n            this.keyPropsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.keyPropsCache;\r\n      //return this.keyPropsCache || (this.keyPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && m.key; }));\r\n    },\r\n    getPublicMappedMethods: function() {\r\n      if (!this.pubMapMethodsCache) {\r\n        this.pubMapMethodsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'method' && this[i].method /* && this.hasOwnProperty(i)*/ )\r\n            this.pubMapMethodsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.pubMapMethodsCache;\r\n    },\r\n    getPropertyByType: function(type) {\r\n      if (!this.propByTypeCache) {\r\n        this.propByTypeCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].dataType == type)\r\n            this.propByTypeCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.propByTypeCache;\r\n      //return this.propByTypeCache || (this.propByTypeCache = this.asArray().filter(function (m) { return m.dataType == type; }));\r\n    },\r\n    getMember: function(name) {\r\n      return this[memberDefinitionPrefix + name];\r\n    },\r\n    setMember: function(value) {\r\n      this[memberDefinitionPrefix + value.name] = value;\r\n    }\r\n  };\r\n  MemberDefinitionCollection.prototype.constructor = MemberDefinitionCollection;\r\n  $data.MemberDefinitionCollection = MemberDefinitionCollection;\r\n\r\n  function ClassEngineBase() {\r\n    this.classNames = {};\r\n  }\r\n\r\n  function MemberTypes() {\r\n    ///<field name=\"method\" type=\"string\" />\r\n    ///<field name=\"property\" type=\"string\" />\r\n    ///<field name=\"field\" type=\"string\" />\r\n    ///<field name=\"complexProperty\" type=\"string\" />\r\n  }\r\n  MemberTypes.__enum = true;\r\n\r\n  MemberTypes.method = \"method\";\r\n  MemberTypes.property = \"property\";\r\n  MemberTypes.navProperty = \"navProperty\";\r\n  MemberTypes.complexProperty = \"complexProperty\";\r\n  MemberTypes.field = \"field\";\r\n\r\n  $data.MemberTypes = MemberTypes;\r\n\r\n  //function classToJSON() {\r\n  //    var ret = {};\r\n  //    for (var i in this) {\r\n  //        if (this.hasOwnProperty(i)) {\r\n  //            ret[i] = this[i];\r\n  //        }\r\n  //    }\r\n  //    return ret;\r\n  //}\r\n  //$data.Base.toJSON = classToJSON;\r\n\r\n  ClassEngineBase.prototype = {\r\n\r\n    //getClass: function (classReference) {\r\n    //},\r\n\r\n    //getProperties: function (classFunction) {\r\n    //    return classFunction.propertyDefinitions;\r\n    //},\r\n\r\n    define: function(className, baseClass, container, instanceDefinition, classDefinition) {\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClass\" type=\"Function\">Basetype of the class</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', $data.Base, null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n\r\n      return this.defineEx(className, [{\r\n        type: baseClass\r\n      }], container, instanceDefinition, classDefinition);\r\n    },\r\n    defineEx: function(className, baseClasses, container, instanceDefinition, classDefinition) {\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Functions\">Basetypes of the class. First is a real base, others are mixins</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', [$data.Base, $data.Mixin1, $data.Mixin2], null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Object\">Basetypes of the class. First is a real base, others are mixins or propagations</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', [\r\n      ///                         { type: $data.Base, params: [1, 'secondParameterValue', new $data.Class.ConstructorParameter(0)] },\r\n      ///                         { type: $data.Mixin1, },\r\n      ///                         { type: $data.Mixin2, },\r\n      ///                         { type: $data.Propagation1, params: [new $data.Class.ConstructorParameter(1)], propagateTo:'Propagation1' },\r\n      ///                         { type: $data.Propagation2, params: ['firstParameterValue'], propagateTo:'Propagation2' }\r\n      ///                     ], null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n\r\n      container = container || $data.Container;\r\n\r\n      if (baseClasses.length == 0) {\r\n        baseClasses.push({\r\n          type: $data.Base\r\n        });\r\n      } else if (baseClasses.length > 0 && !baseClasses[0].type) {\r\n        baseClasses[0].type = $data.Base;\r\n      }\r\n      for (var i = 0, l = baseClasses.length; i < l; i++) {\r\n        if (typeof baseClasses[i] === 'function')\r\n          baseClasses[i] = {\r\n            type: baseClasses[i]\r\n          };\r\n      }\r\n\r\n      var providedCtor = instanceDefinition ? instanceDefinition.constructor : undefined;\r\n\r\n      var classNameParts = className.split('.');\r\n      var shortClassName = classNameParts.splice(classNameParts.length - 1, 1)[0];\r\n\r\n      $data.models = $data.models || {}\r\n      var root = container === $data.Container ? $data.models : container;\r\n      root = $data.Container.createOrGetNamespace(classNameParts, root)\r\n\r\n      var classFunction = null;\r\n      classFunction = this.classFunctionBuilder(shortClassName, baseClasses, classDefinition, instanceDefinition);\r\n      classFunction.fullName = className;\r\n      classFunction.namespace = classNameParts.join('.'); //classname splitted\r\n      //classFunction.name = shortClassName;\r\n      classFunction.container = container;\r\n      classFunction.container.registerType(className, classFunction);\r\n\r\n      this.buildType(classFunction, baseClasses, instanceDefinition, classDefinition);\r\n\r\n\r\n\r\n      if (typeof intellisense !== 'undefined') {\r\n        if (instanceDefinition && instanceDefinition.constructor) {\r\n          intellisense.annotate(classFunction, instanceDefinition.constructor);\r\n        }\r\n      }\r\n\r\n      root[shortClassName] = this.classNames[className] = classFunction;\r\n\r\n      if(classNameParts[0] == '$data') {\r\n        var _classNameParts = [].concat(classNameParts)\r\n        _classNameParts.shift()\r\n        var _root = $data.Container.createOrGetNamespace(_classNameParts, $data)\r\n        _root[shortClassName] = classFunction\r\n      }\r\n      if(_modelHolder && container == $data.Container){\r\n        var innerNS = $data.Container.createOrGetNamespace(classNameParts, _modelHolder)\r\n        innerNS[shortClassName] = classFunction\r\n      }\r\n\r\n      //classFunction.toJSON = classToJSON;\r\n      var baseCount = classFunction.baseTypes.length;\r\n      for (var i = 0; i < baseCount; i++) {\r\n        var b = classFunction.baseTypes[i];\r\n        if (\"inheritedTypeProcessor\" in b) {\r\n          b.inheritedTypeProcessor(classFunction);\r\n        }\r\n      }\r\n      //classFunction.prototype.constructor = instanceDefinition.constructor;\r\n      //classFunction.constructor = instanceDefinition.constructor;\r\n      //classFunction.toJSON = function () { return classFunction.memberDefinitions.filter( function(md) { return md; };\r\n      return classFunction;\r\n    },\r\n    classFunctionBuilder: function(name, base, classDefinition, instanceDefinition) {\r\n      var body = this.bodyBuilder(base, classDefinition, instanceDefinition);\r\n      return new Function('base', 'classDefinition', 'instanceDefinition', 'name', '$data', 'return function ' + name + ' (){ ' +\r\n        body + ' \\n}; ')(base, classDefinition, instanceDefinition, name, $data);\r\n    },\r\n    bodyBuilder: function(bases, classDefinition, instanceDefinition) {\r\n      var mixin = '';\r\n      var body = '';\r\n      var propagation = '';\r\n\r\n      for (var i = 0, l = bases.length; i < l; i++) {\r\n        var base = bases[i];\r\n        var index = i;\r\n        if (index == 0) { //ctor func\r\n          if (base && base.type && base.type !== $data.Base && base.type.fullName) {\r\n            body += '    var baseArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\r\n            body += '    $data.models.' + base.type.fullName + '.apply(this, baseArguments); \\n';\r\n          }\r\n        } else {\r\n          if (base && base.type && base.propagateTo) {\r\n            //propagation\r\n            propagation += '    ' + (!propagation ? 'var ' : '' + '') + 'propagationArguments = $data.typeSystem.createCtorParams(arguments, base[' +\r\n              index + '].params, this); \\n';\r\n            propagation += '    this[\"' + base.propagateTo + '\"] =  Object.create($data.models.' + base.type.fullName + '.prototype); \\n' +\r\n              '    $data.models.' + base.type.fullName + '.apply(this[\"' + base.propagateTo + '\"], propagationArguments); \\n';\r\n          } else if (base && base.type && base.type.memberDefinitions && base.type.memberDefinitions.$constructor && !base.propagateTo) {\r\n            //mixin\r\n            mixin += '    $data.models.' + base.type.fullName + '.memberDefinitions.$constructor.method.apply(this); \\n';\r\n          }\r\n        }\r\n      }\r\n      if (instanceDefinition && instanceDefinition.constructor != Object)\r\n        body += \"    instanceDefinition.constructor.apply(this, arguments); \\n\";\r\n\r\n      return '\\n    //mixins \\n' + mixin + '\\n    //construction \\n' + body + '\\n    //propagations \\n' + propagation;\r\n    },\r\n\r\n    buildType: function(classFunction, baseClasses, instanceDefinition, classDefinition) {\r\n      var baseClass = baseClasses[0].type;\r\n      classFunction.inheritsFrom = baseClass;\r\n\r\n      if (baseClass) {\r\n        classFunction.prototype = Object.create(baseClass.prototype);\r\n        classFunction.memberDefinitions = Object.create(baseClass.memberDefinitions || new MemberDefinitionCollection());\r\n        classFunction.memberDefinitions.clearCache();\r\n\r\n        var staticDefs = baseClass.staticDefinitions;\r\n        if (staticDefs) {\r\n          staticDefs = staticDefs.asArray();\r\n          if (staticDefs) {\r\n            for (var i = 0; i < staticDefs.length; i++) {\r\n              this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\r\n            }\r\n          }\r\n        }\r\n        classFunction.baseTypes = baseClass.baseTypes ? [].concat(baseClass.baseTypes) : [];\r\n        for (var i = 0; i < baseClasses.length; i++) {\r\n          classFunction.baseTypes.push(baseClasses[i].type);\r\n        }\r\n        //classFunction.baseTypes = (baseClass.baseTypes || []).concat(baseClasses.map(function (base) { return base.type; }));\r\n        if (!classFunction.isAssignableTo) {\r\n          Object.defineProperty(classFunction, \"isAssignableTo\", {\r\n            value: function(type) {\r\n              return this === type || this.baseTypes.indexOf(type) >= 0;\r\n            },\r\n            writable: false,\r\n            enumerable: false,\r\n            configurable: false\r\n          });\r\n        }\r\n      }\r\n\r\n      var openTypeDefinition = classFunction.staticDefinitions && classFunction.staticDefinitions.getMember('openType');\r\n      if (classDefinition) {\r\n        if(openTypeDefinition) delete classDefinition.openType;\r\n        this.buildStaticMembers(classFunction, classDefinition);\r\n\r\n        if (classDefinition.constructor)\r\n          classFunction.classConstructor = classDefinition.constructor;\r\n      }\r\n\r\n      if (instanceDefinition) {\r\n\r\n        //build open type member\r\n        if (!openTypeDefinition && classDefinition && (typeof classFunction.openType === \"string\" || classFunction.openType === true) && classFunction.isAssignableTo($data.Entity)) {\r\n          var openTypePropertyName = $data.defaults.openTypeDefaultPropertyName;\r\n          var openTypeDefaultType = Container.resolveType($data.defaults.openTypeDefaultType);\r\n          var openTypeDefaultValue = $data.defaults.openTypeDefaultValue;\r\n          if (typeof classFunction.openType == \"string\") {\r\n            openTypePropertyName = classFunction.openType;\r\n          }\r\n\r\n          var definedOpenTypeMember = classFunction.getMemberDefinition(openTypePropertyName);\r\n          if(definedOpenTypeMember && Container.resolveType(definedOpenTypeMember.type || definedOpenTypeMember.dataType) !== openTypeDefaultType) {\r\n            Guard.raise(new Exception(\"Type Error\", \"OpenType default type missmatch\"));\r\n          }\r\n          if (!definedOpenTypeMember && instanceDefinition[openTypePropertyName]) {\r\n            var memberType = Container.resolveType(instanceDefinition[openTypePropertyName].type || instanceDefinition[openTypePropertyName].dataType);\r\n            if(memberType !== openTypeDefaultType){\r\n              Guard.raise(new Exception(\"Type Error\", \"OpenType default type missmatch\"));\r\n            }\r\n          }\r\n          if(!definedOpenTypeMember && !instanceDefinition[openTypePropertyName]){\r\n            var defaultValue = typeof openTypeDefaultValue !== \"undefined\" ? openTypeDefaultValue : {};\r\n            instanceDefinition[openTypePropertyName] = { type: openTypeDefaultType, defaultValue:  defaultValue };\r\n          }\r\n        }\r\n\r\n        this.buildInstanceMembers(classFunction, instanceDefinition);\r\n      }\r\n\r\n      var mixins = [].concat(baseClasses);\r\n      mixins.shift();\r\n      if (Object.keys(mixins).length > 0)\r\n        this.buildInstanceMixins(classFunction, mixins);\r\n\r\n      classFunction.__class = true;\r\n\r\n      classFunction.prototype.constructor = classFunction;\r\n\r\n      Object.defineProperty(classFunction.prototype, \"getType\", {\r\n        value: function() {\r\n          return classFunction;\r\n        },\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false\r\n      });\r\n    },\r\n\r\n    addMethod: function(holder, name, method, propagation) {\r\n      if (!propagation || (typeof intellisense !== 'undefined')) {\r\n        holder[name] = method;\r\n      } else {\r\n        holder[name] = function() {\r\n          return method.apply(this[propagation], arguments);\r\n        };\r\n      }\r\n    },\r\n\r\n    addProperty: function(holder, name, propertyDescriptor, propagation) {\r\n\r\n      //holder[name] = {};\r\n\r\n      if (propagation) {\r\n        propertyDescriptor.configurable = true;\r\n        if (propertyDescriptor.get) {\r\n          var origGet = propertyDescriptor.get;\r\n          propertyDescriptor.get = function() {\r\n            if (!this[propagation])\r\n              Guard.raise(new Exception(\"not inicialized\"));\r\n            return origGet.apply(this[propagation], arguments);\r\n          };\r\n        }\r\n        if (propertyDescriptor.set) {\r\n          var origSet = propertyDescriptor.set;\r\n          propertyDescriptor.set = function() {\r\n            if (!this[propagation])\r\n              Guard.raise(new Exception(\"not inicialized\"));\r\n            origSet.apply(this[propagation], arguments);\r\n          };\r\n        }\r\n      }\r\n\r\n      Object.defineProperty(holder, name, propertyDescriptor);\r\n    },\r\n\r\n    addField: function(holder, name, field) {\r\n      Guard.raise(\"not implemented\");\r\n    },\r\n\r\n    buildMethod: function(classFunction, memberDefinition, propagation) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\r\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\r\n      this.addMethod(holder, memberDefinition.name, memberDefinition.method, propagation);\r\n    },\r\n\r\n    buildProperty: function(classFunction, memberDefinition, propagation) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\r\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\r\n      var pd = memberDefinition.createPropertyDescriptor(classFunction);\r\n      this.addProperty(holder, memberDefinition.name, pd, propagation);\r\n\r\n      //if lazyload TODO\r\n      if (!memberDefinition.classMember && classFunction.__setPropertyfunctions == true && memberDefinition.withoutGetSetMethod !== true &&\r\n        !('get_' + memberDefinition.name in holder || 'set_' + memberDefinition.name in holder)) {\r\n        var pdGetMethod = memberDefinition.createGetMethod();\r\n        this.addProperty(holder, 'get_' + memberDefinition.name, pdGetMethod, propagation);\r\n\r\n        var pdSetMethod = memberDefinition.createSetMethod();\r\n        this.addProperty(holder, 'set_' + memberDefinition.name, pdSetMethod, propagation);\r\n      }\r\n    },\r\n\r\n\r\n    buildMember: function(classFunction, memberDefinition, propagation, memberCollectionName) {\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n      memberCollectionName = memberCollectionName || 'memberDefinitions';\r\n      classFunction[memberCollectionName] = classFunction[memberCollectionName] || new MemberDefinitionCollection();\r\n      classFunction[memberCollectionName].setMember(memberDefinition);\r\n\r\n      switch (memberDefinition.kind) {\r\n        case MemberTypes.method:\r\n          this.buildMethod(classFunction, memberDefinition, propagation);\r\n          break;\r\n        case MemberTypes.navProperty:\r\n        case MemberTypes.complexProperty:\r\n        case MemberTypes.property:\r\n          this.buildProperty(classFunction, memberDefinition, propagation);\r\n          break;\r\n        default:\r\n          Guard.raise(\"Unknown member type: \" + memberDefinition.kind + \",\" + memberDefinition.name);\r\n      }\r\n    },\r\n\r\n    buildStaticMembers: function(classFunction, memberListDefinition) {\r\n      ///<param name=\"classFunction\" type=\"Object\">The class constructor that will be extended</param>\r\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\r\n      var t = this;\r\n      for (var item in memberListDefinition) {\r\n        if (memberListDefinition.hasOwnProperty(item)) {\r\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\r\n          memberDefinition.classMember = true;\r\n          t.buildMember(classFunction, memberDefinition, undefined, 'staticDefinitions');\r\n        }\r\n      }\r\n    },\r\n\r\n    buildInstanceMembers: function(classFunction, memberListDefinition) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\r\n      ///pinning t outside of the closure seems actually faster then passing in the this  and referencing\r\n      var t = this;\r\n      for (var item in memberListDefinition) {\r\n        if (memberListDefinition.hasOwnProperty(item)) {\r\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\r\n          t.buildMember(classFunction, memberDefinition, undefined, 'memberDefinitions');\r\n        }\r\n      }\r\n    },\r\n\r\n    copyMembers: function(sourceType, targetType) {\r\n      ///<param name=\"sourceType\" type=\"Function\" />\r\n      ///<param name=\"targetType\" type=\"Function\" />\r\n      function il(msg) {\r\n        if (typeof intellisense === 'undefined') {\r\n          return;\r\n        }\r\n        intellisense.logMessage(msg);\r\n      }\r\n\r\n      Object.keys(sourceType.prototype).forEach(function(item, i, src) {\r\n        if (item !== 'constructor' && item !== 'toString') {\r\n          il(\"copying item:\" + item);\r\n          targetType.prototype[item] = sourceType[item];\r\n        }\r\n      });\r\n    },\r\n\r\n    buildInstanceMixins: function(classFunction, mixinList) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"mixinList\" type=\"Array\"></param>\r\n\r\n      classFunction.mixins = classFunction.mixins || [];\r\n      classFunction.propagations = classFunction.propagations || [];\r\n\r\n      for (var i = 0; i < mixinList.length; i++) {\r\n        var item = mixinList[i];\r\n        //if (classFunction.memberDefinitions.getMember(item.type.name)) {\r\n        if (item.propagateTo) {\r\n          this.buildInstancePropagation(classFunction, item);\r\n          classFunction.propagations.push(item);\r\n          classFunction.propagations[item.type.name] = true;\r\n        } else {\r\n          this.buildInstanceMixin(classFunction, item);\r\n          classFunction.mixins.push(item);\r\n          classFunction.mixins[item.type.name] = true;\r\n        }\r\n      };\r\n    },\r\n    buildInstanceMixin: function(classFunction, typeObj) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"typeObj\" type=\"Object\"></param>\r\n\r\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\r\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\r\n        var itemName = memberDefs[i].name;\r\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n          this.buildMember(classFunction, memberDefs[i]);\r\n        }\r\n      }\r\n\r\n      if (typeObj.type.staticDefinitions) {\r\n        var staticDefs = typeObj.type.staticDefinitions.asArray();\r\n        for (var i = 0, l = staticDefs.length; i < l; i++) {\r\n          var itemName = staticDefs[i].name;\r\n          if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n            this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\r\n          }\r\n        }\r\n      }\r\n    },\r\n    buildInstancePropagation: function(classFunction, typeObj) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"typeObj\" type=\"Object\"></param>\r\n\r\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\r\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\r\n        var itemName = memberDefs[i].name;\r\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n          this.buildMember(classFunction, memberDefs[i], typeObj.propagateTo);\r\n        }\r\n      }\r\n    }\r\n\r\n  };\r\n  var Class\r\n  $data.Class = Class = new ClassEngineBase();\r\n\r\n\r\n  $data.ContainerClass = ContainerCtor;\r\n\r\n  var c;\r\n  $data.Container = c = ContainerInstance\r\n\r\n  $data.createContainer = function() {\r\n    return new ContainerCtor($data.Container);\r\n  }\r\n\r\n  var storeProperty = function(memberDefinition, value) {\r\n    var backingFieldName = \"_\" + memberDefinition.name;\r\n    if (!this[backingFieldName]) {\r\n      Object.defineProperty(this, backingFieldName, memberDefinition.createStorePropertyDescriptor(value));\r\n    } else {\r\n      this[backingFieldName] = value;\r\n    }\r\n  };\r\n  var retrieveProperty = function(memberDefinition) {\r\n    var backingFieldName = \"_\" + memberDefinition.name;\r\n    return this[backingFieldName];\r\n  };\r\n\r\n\r\n  $data.Class.define('$data.Base', function Base() {}, null, {\r\n    storeProperty: storeProperty,\r\n    retrieveProperty: retrieveProperty,\r\n    setProperty: function(memberDefinition, value, callback) {\r\n      this[memberDefinition.name] = value;\r\n      callback();\r\n    },\r\n    getProperty: function(memberDefinition, callback) {\r\n      callback.apply(this, [this[memberDefinition.name]]);\r\n    }\r\n  }, {\r\n    create: function() {\r\n      return Container.createInstance(this, arguments);\r\n    },\r\n    extend: function(name, container, instanceDefinition, classDefinition) {\r\n      if (container && !(container instanceof ContainerCtor)) {\r\n        classDefinition = instanceDefinition;\r\n        instanceDefinition = container;\r\n        container = undefined;\r\n      }\r\n      return $data.Class.define(name, this, container, instanceDefinition, classDefinition);\r\n    },\r\n    getMemberDefinition: function(name) {\r\n      return this.memberDefinitions.getMember(name);\r\n    },\r\n    addProperty: function(name, getterOrType, setterOrGetter, setter) {\r\n      var _getter = getterOrType;\r\n      var _setter = setterOrGetter;\r\n      var _type;\r\n      if (typeof _getter === 'string') {\r\n        _type = getterOrType;\r\n        _getter = setterOrGetter;\r\n        _setter = setter;\r\n      }\r\n\r\n      var propDef = {\r\n        notMapped: true,\r\n        storeOnObject: true,\r\n        get: typeof _getter === 'function' ? _getter : function() {},\r\n        set: typeof _setter === 'function' ? _setter : function() {},\r\n        type: _type\r\n      };\r\n\r\n      var memberDefinition = MemberDefinition.translateDefinition(propDef, name, this);\r\n      $data.Class.buildMember(this, memberDefinition);\r\n\r\n      this.memberDefinitions.clearCache();\r\n\r\n      return this;\r\n    },\r\n    addMember: function(name, definition, isClassMember) {\r\n      var memberDefinition = MemberDefinition.translateDefinition(definition, name, this);\r\n\r\n      if (isClassMember) {\r\n        memberDefinition.classMember = true;\r\n        $data.Class.buildMember(this, memberDefinition, undefined, 'staticDefinitions');\r\n        this.staticDefinitions.clearCache();\r\n      } else {\r\n        $data.Class.buildMember(this, memberDefinition);\r\n        this.memberDefinitions.clearCache();\r\n      }\r\n      return this;\r\n    },\r\n    describeField: function(name, definition) {\r\n      var memDef = this.memberDefinitions.getMember(name);\r\n      if (!memDef) {\r\n        this.addMember(name, definition);\r\n      } else {\r\n        Guard.raise(new Exception(\"Field '\" + name + \"' already defined!\", \"Invalid operation\"));\r\n      }\r\n      return this;\r\n    },\r\n    storeProperty: storeProperty,\r\n    retrieveProperty: retrieveProperty,\r\n    'from$data.Object': function(value) {\r\n      return value;\r\n    }\r\n  });\r\n\r\n\r\n  //override after typeSystem initialized\r\n\r\n\r\n  $data.Class.ConstructorParameter = $data.Class.define('ConstructorParameter', null, null, {\r\n    constructor: function(paramIndex) {\r\n      ///<param name=\"paramIndex\" type=\"integer\" />\r\n      this.paramIndex = paramIndex;\r\n    },\r\n    paramIndex: {}\r\n  });\r\n  /*$data.Class.MixinParameter = MixinParameter = $data.Class.define('MixinParameter', null, null, {\r\n      constructor: function (typeName) {\r\n          ///<param name=\"paramIndex\" type=\"integer\">\r\n          this.typeName = typeName;\r\n      },\r\n      typeName: {}\r\n  });*/\r\n\r\n  //var e = new Entity();\r\n\r\n\r\n  /*$data.Interface = Class.define(\"Interface\", null, null, {\r\n      constructor: function() { Guard.raise(\"Can not create an interface\"); }\r\n  },\r\n  {\r\n      define: function (name, definition) {\r\n          var result = Class.define(name, $data.Interface, null, null, definition);\r\n          delete result.__class;\r\n          result.__interface = true;\r\n          return result;\r\n      }\r\n  });\r\n\r\n\r\n\r\n  $data.Observable = Observable = Class.define(\"Observable\", null, null, {\r\n      propertyChanged: { dataType: $data.Event }\r\n  }, {\r\n      createFromInstance: function(instance) {\r\n          var propNames = instance.getClass().memberDefinitions.f\r\n      }\r\n  });*/\r\n\r\n\r\n\r\n})($data);\r\n\r\n$data.defaultErrorCallback = function() {\r\n  //console.log('DEFAULT ERROR CALLBACK:');\r\n  /*if (console.dir)\r\n      console.dir(arguments);\r\n  else\r\n      console.log(arguments);*/\r\n  if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n    (console.error || console.log).call(console, arguments[0]);\r\n    arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n  } else {\r\n    if (arguments[0] instanceof Error) {\r\n      Guard.raise(arguments[0]);\r\n    } else {\r\n      Guard.raise(new Exception(\"DEFAULT ERROR CALLBACK!\", \"DefaultError\", arguments));\r\n    }\r\n  }\r\n};\r\n$data.defaultSuccessCallback = function() { /*console.log('DEFAULT SUCCES CALLBACK');*/ };\r\n$data.defaultNotifyCallback = function() { /*console.log('DEFAULT NOTIFY CALLBACK');*/ };\r\n\r\n$data.typeSystem = {\r\n  __namespace: true,\r\n  /*inherit: function (ctor, baseType) {\r\n      var proto = new baseType();\r\n      ctor.prototype = $.extend(proto, ctor.prototype);\r\n      //console.dir(proto);\r\n      ctor.prototype.base = new baseType();\r\n      //console.dir(ctor.prototype.base);\r\n      ctor.prototype.constructor = ctor;\r\n      return ctor;\r\n  },*/\r\n  //mix: function (type, mixin) {\r\n  //    type.prototype = $.extend(type.prototype || {}, mixin.prototype || {});\r\n  //    type.mixins = type.mixins || [];\r\n  //    type.mixins.push(mixin);\r\n  //    return type;\r\n  //},\r\n  extend: function(target) {\r\n    /// <summary>\r\n    /// Extends an object with properties of additional parameters.\r\n    /// </summary>\r\n    /// <signature>\r\n    /// <param name=\"target\" type=\"Object\">Object that will be extended.</param>\r\n    /// <param name=\"object\" type=\"Object\">Object to extend target with.</param>\r\n    /// <param name=\"objectN\" optional=\"true\" parameterArray=\"true\" type=\"Object\">Object to extend target with.</param>\r\n    /// </signature>\r\n    /// <returns></returns>\r\n    if (typeof target !== 'object' && typeof target !== 'function')\r\n      Guard.raise('Target must be object or function');\r\n\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var obj = arguments[i];\r\n      if (obj === null || typeof obj === 'undefined')\r\n        continue;\r\n      for (var key in obj) {\r\n        target[key] = obj[key];\r\n      }\r\n    }\r\n    return target;\r\n  },\r\n  createCallbackSetting: function(callBack, defaultSetting) {\r\n    var setting = {\r\n      success: $data.defaultSuccessCallback,\r\n      error: $data.defaultErrorCallback,\r\n      notify: $data.defaultNotifyCallback\r\n    };\r\n\r\n    if (defaultSetting != undefined && defaultSetting != null) {\r\n      setting = defaultSetting;\r\n    }\r\n\r\n    var result;\r\n    if (callBack == null || callBack == undefined) {\r\n      result = setting;\r\n\r\n    } else if (typeof callBack == 'function') {\r\n      result = this.extend(setting, {\r\n        success: callBack\r\n      });\r\n\r\n    } else {\r\n      result = this.extend(setting, callBack);\r\n    }\r\n\r\n    function wrapCode(fn) {\r\n      var t = this;\r\n\r\n      function r() {\r\n        fn.apply(t, arguments);\r\n        fn = function() {}\r\n      }\r\n      return r;\r\n    }\r\n\r\n    if (typeof result.error === 'function')\r\n      result.error = wrapCode(result.error);\r\n\r\n    return result;\r\n  },\r\n  createCtorParams: function(source, indexes, thisObj) {\r\n    ///<param name=\"source\" type=\"Array\" />Paramerter array\r\n    ///<param name=\"indexes\" type=\"Array\" />\r\n    ///<param name=\"thisObj\" type=\"Object\" />\r\n    if (indexes) {\r\n      var paramArray = [];\r\n      for (var i = 0, l = indexes.length; i < l; i++) {\r\n        var item = i;\r\n        if (indexes[item] instanceof $data.Class.ConstructorParameter)\r\n          paramArray.push(source[indexes[item].paramIndex]);\r\n        else if (typeof indexes[item] === \"function\")\r\n          paramArray.push(indexes[item].apply(thisObj));\r\n        else\r\n          paramArray.push(indexes[item]);\r\n      }\r\n      return paramArray;\r\n    }\r\n    return source;\r\n  },\r\n  writePropertyValues: function(obj) {\r\n    if (obj && obj.getType && obj.getType().memberDefinitions) {\r\n      this.writeProperties(obj, obj.getType().memberDefinitions.asArray().filter(\r\n        function(md) {\r\n          return (md.kind == \"property\" || md.kind == \"navProperty\" || md.kind == \"complexProperty\") && !md.prototypeProperty;\r\n        }\r\n      ));\r\n    }\r\n  },\r\n  writeProperties: function(obj, members) {\r\n    var defines = {};\r\n    for (var i = 0, l = members.length; i < l; i++) {\r\n      var memDef = members[i];\r\n      defines[memDef.name] = memDef.createPropertyDescriptor(null, memDef.value);\r\n    }\r\n\r\n    Object.defineProperties(obj, defines);\r\n\r\n  },\r\n  writeProperty: function(obj, member, value) {\r\n    var memDef = typeof member === 'string' ? obj.getType().memberDefinitions.getMember(member) : member;\r\n    if (memDef) {\r\n      var propDef = memDef.createPropertyDescriptor(null, value);\r\n      //////OPTIMIZATION\r\n      Object.defineProperty(obj, memDef.name, propDef);\r\n    }\r\n  }\r\n};\r\n\r\n$data.debug = function() {\r\n  (console.debug || console.log).apply(console, arguments);\r\n};\r\n\r\n$data.debugWith = function() {\r\n  var cArgs = arguments;\r\n  return function(r) {\r\n    (console.debug || console.log).apply(console, cArgs);\r\n    if ((typeof Error !== 'undefined' && r instanceof Error) ||\r\n      (typeof Exception !== 'undefined' && r instanceof Exception)) {\r\n      (console.error || console.log).apply(console, arguments);\r\n    } else {\r\n      (console.debug || console.log).apply(console, arguments);\r\n    }\r\n  }\r\n};\r\n\r\n$data.fdebug = {\r\n  success: $data.debugWith('success'),\r\n  error: $data.debugWith('error')\r\n};\r\n\r\n\r\nexport var $C = function() {\r\n  $data.Class.define.apply($data.Class, arguments);\r\n}\r\nexport var Container = $data.Container\r\nexport var MemberDefinition = $data.MemberDefinition\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport Exception from '../Exception.js';\r\nimport { Guard } from '../utils.js';\r\nimport btoa from 'btoa'\r\n\r\nvar bufferOrArray = eval('typeof Buf' + 'fer !== \"undefined\" ? Buf' + 'fer : Uint8Array');\r\n$data.Blob = function Blob(){};\r\n\r\n$data.Blob.createFromHexString = function(value){\r\n    if (value != value.match(new RegExp('[0-9a-fA-F]+'))[0]){\r\n        Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Blob', value));\r\n    }else{\r\n        //if (value.length & 1) value = '0' + value;\r\n        var arr = new (bufferOrArray)(value.length >> 1);\r\n        for (var i = 0, j = 1, k = 0; i < value.length; i += 2, j += 2, k++) {\r\n            arr[k] = parseInt('0x' + value[i] + value[j], 16);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n};\r\n\r\n$data.Blob.toString = function(value){\r\n    if (!value || !value.length) return null;\r\n    var s = '';\r\n    for (var i = 0; i < value.length; i++){\r\n        s += String.fromCharCode(value[i]);\r\n    }\r\n\r\n    return s;\r\n};\r\n\r\n$data.Blob.toBase64 = function(value){\r\n    if (!value || !value.length) return null;\r\n    return btoa($data.Blob.toString(value));\r\n};\r\n\r\n$data.Blob.toArray = function(src){\r\n    if (!src || !src.length) return null;\r\n    var arr = new Array(src.length);\r\n    for (var i = 0; i < src.length; i++){\r\n        arr[i] = src[i];\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\n/*$data.Blob.toJSON = function(value){\r\n    return JSON.stringify($data.Blob.toArray(value));\r\n};*/\r\n\r\n$data.Blob.toHexString = function(value){\r\n    if (!value || !value.length) return null;\r\n    var s = '';\r\n    for (var i = 0; i < value.length; i++){\r\n        s += ('00' + value[i].toString(16)).slice(-2);\r\n    }\r\n\r\n    return s.toUpperCase();\r\n};\r\n\r\n$data.Blob.toDataURL = function(value){\r\n    if (!value || !value.length) return null;\r\n    return 'data:application/octet-stream;base64,' + btoa($data.Blob.toString(value));\r\n};\r\n\r\n$data.Container.registerType([\"$data.Blob\", \"blob\", \"JayBlob\"], $data.Blob);\r\n$data.Container.registerConverter('$data.Blob',{\r\n    '$data.String': function (value){\r\n        if (value && value.length){\r\n            var blob = new (bufferOrArray)(value.length);\r\n            for (var i = 0; i < value.length; i++){\r\n                blob[i] = value.charCodeAt(i);\r\n            }\r\n\r\n            return blob;\r\n        }else return null;\r\n    },\r\n    '$data.Array': function(value){\r\n        return new (bufferOrArray)(value);\r\n    },\r\n    '$data.Number': function(value){\r\n        return new (bufferOrArray)($data.packIEEE754(value, 11, 52).reverse());\r\n    },\r\n    '$data.Boolean': function(value){\r\n        return new (bufferOrArray)([value | 0]);\r\n    },\r\n    'default': function(value){\r\n        if (typeof Blob !== 'undefined' && value instanceof Blob){\r\n            var req = new XMLHttpRequest();\r\n            req.open('GET', URL.createObjectURL(value), false);\r\n            req.send(null);\r\n            return $data.Container.convertTo(req.response, $data.Blob);\r\n        } else if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\r\n            return new (bufferOrArray)(new Uint8Array(value));\r\n        }else if (value instanceof Uint8Array){\r\n            //if (typeof Buffer !== 'undefined') return new Buffer(value);\r\n            //else\r\n            return value;\r\n        }else /*if (typeof Buffer !== 'undefined' ? value instanceof Buffer : false){\r\n            return value;\r\n        }else*/ if (value.buffer){\r\n            return new (bufferOrArray)(value);\r\n        }else if (typeof value == 'object' && value instanceof Object){\r\n            var arr = [];\r\n            for (var i in value){\r\n                arr[i] = value[i];\r\n            }\r\n            if (!arr.length) throw 0;\r\n            return new (bufferOrArray)(arr);\r\n        }\r\n        throw 0;\r\n    }\r\n}, {\r\n    '$data.String': function(value){\r\n        return $data.Blob.toString(value);\r\n    },\r\n    '$data.Array': function(value){\r\n        return $data.Blob.toArray(value);\r\n    }\r\n});\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Container.registerConverter('$data.Boolean', {\r\n    '$data.String': function(value){\r\n        if (value.toLowerCase() == 'true') return true;\r\n        if (value.toLowerCase() == 'false') return false;\r\n\r\n        return !!value;\r\n    },\r\n    'default': function(value){\r\n        return !!value;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Integer', {\r\n    'default': function (value) {\r\n        if (value === Number.POSITIVE_INFINITY ||\r\n            value === Number.NEGATIVE_INFINITY ||\r\n            value === Number.MAX_VALUE ||\r\n            value === Number.MIN_VALUE) {\r\n            return value;\r\n        }\r\n\r\n        var r = parseInt(+value, 10);\r\n        if (isNaN(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int32', {\r\n    'default': function (value) {\r\n        return value | 0;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Number', {\r\n    'default': function(value){\r\n        var r = +value;\r\n        if (isNaN(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Byte', {\r\n    'default': function(value){\r\n        return (value | 0) & 0xff;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Date', {\r\n    'default': function(value){\r\n        var d = new Date(value);\r\n        if (isNaN(d)) throw 0;\r\n        return d;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.DateTimeOffset', {\r\n    '$data.Date': function(value){\r\n        return value;\r\n    },\r\n    'default': function(value){\r\n        var d = new Date(value);\r\n        if (isNaN(d)) throw 0;\r\n        return d;\r\n    }\r\n});\r\n(function () {\r\n    function parseFromString(value) {\r\n        var regex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])(:([0-5][0-9]|[0-9])(\\.(\\d+))?)?$/;\r\n\r\n        var matches = regex.exec(value)\r\n        if (!matches) throw 0;\r\n        var time = '';\r\n        time += ('00' + matches[1]).slice(-2);\r\n        time += ':' + ('00' + matches[2]).slice(-2);\r\n        if (matches[4]) {\r\n            time += ':' + ('00' + matches[4]).slice(-2);\r\n        } else {\r\n            time += ':00';\r\n        }\r\n        if (matches[6])\r\n            time += '.' + (matches[6] + '000').slice(0, 3);\r\n\r\n        return time;\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Time', {\r\n        '$data.String': parseFromString,\r\n        '$data.Number': function tt(value) {\r\n            var metrics = [1000, 60, 60];\r\n            var result = [0, 0, 0, value | 0];\r\n\r\n            for (var i = 0; i < metrics.length; i++) {\r\n                result[metrics.length - (i + 1)] = (result[metrics.length - i] / metrics[i]) | 0;\r\n                result[metrics.length - i] -= result[metrics.length - (i + 1)] * metrics[i];\r\n            }\r\n\r\n            var time = '';\r\n            for (var i = 0; i < result.length; i++) {\r\n                if (i < result.length - 1) {\r\n                    time += ('00' + result[i]).slice(-2);\r\n                    if (i < result.length - 2) time += ':';\r\n                } else {\r\n                    time += '.' + ('000' + result[i]).slice(-3);\r\n                }\r\n            }\r\n\r\n            return parseFromString(time);\r\n        },\r\n        '$data.Date': function (value) {\r\n            var val = value.getHours() + ':' + value.getMinutes() + ':' + value.getSeconds();\r\n            var ms = value.getMilliseconds()\r\n            if (ms) {\r\n                val += '.' + ms;\r\n            }\r\n\r\n            return parseFromString(val);\r\n        }\r\n    });\r\n})();\r\n(function () {\r\n    function parseFromString(value) {\r\n        var regex = /^(-?)([0-9]{1,4})-(1[0-2]|0[0-9]|[0-9])-([0-2][0-9]|3[0-1]|[0-9])$/;\r\n\r\n        var matches = regex.exec(value)\r\n        if (!matches) throw 0;\r\n        var date = matches[1];\r\n        date += ('0000' + matches[2]).slice(-4);\r\n        date += '-' + ('00' + matches[3]).slice(-2);\r\n        date += '-' + ('00' + matches[4]).slice(-2);\r\n        return date;\r\n    }\r\n    function parseFromDate(value){\r\n        var val = value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate();\r\n        return parseFromString(val);\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Day', {\r\n        '$data.String': parseFromString,\r\n        '$data.Number': function tt(value) {\r\n            var t = 1000*60*60*24;\r\n            var day = value * t;\r\n            if(isNaN(day)) throw 0;\r\n            \r\n            return parseFromDate(new Date(day));\r\n        },\r\n        '$data.Date': parseFromDate\r\n    });\r\n})();\r\n(function () {\r\n    function parseFromString(value) {\r\n        return value;\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Duration', {\r\n        '$data.String': parseFromString\r\n    });\r\n})();\r\n$data.Container.registerConverter('$data.Decimal', {\r\n    '$data.Boolean': function(value){\r\n        return value ? '1' : '0';\r\n    },\r\n    '$data.Number': function(value){\r\n        return value.toString();\r\n    },\r\n    '$data.String': function(value){\r\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\r\n        return value;\r\n    },\r\n    '$data.Date': function(value){\r\n        var r = value.valueOf();\r\n        if (isNaN(r)) throw 0;\r\n        return r.toString();\r\n    }\r\n});\r\n\r\n$data.packIEEE754 = function(v, ebits, fbits){\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str, bytes;\r\n\r\n    // Compute sign, exponent, fraction\r\n    if (v !== v){\r\n        // NaN\r\n        // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\r\n        e = (1 << bias) - 1; f = Math.pow(2, fbits - 1); s = 0;\r\n    }else if (v === Infinity || v === -Infinity){\r\n        e = (1 << bias) - 1; f = 0; s = (v < 0) ? 1 : 0;\r\n    }else if (v === 0){\r\n        e = 0; f = 0; s = (1 / v === -Infinity) ? 1 : 0;\r\n    }else{\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n\r\n        if (v >= Math.pow(2, 1 - bias)){\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }else{\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) { bits.push(f % 2 ? 1 : 0); f = Math.floor(f / 2); }\r\n    for (i = ebits; i; i -= 1) { bits.push(e % 2 ? 1 : 0); e = Math.floor(e / 2); }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n\r\n    // Bits to bytes\r\n    bytes = [];\r\n    while (str.length){\r\n        bytes.push(parseInt(str.substring(0, 8), 2));\r\n        str = str.substring(8);\r\n    }\r\n\r\n    return bytes;\r\n};\r\n\r\n$data.unpackIEEE754 = function(bytes, ebits, fbits){\r\n    // Bytes to bits\r\n    var bits = [], i, j, b, str, bias, s, e, f;\r\n\r\n    for (i = bytes.length; i; i -= 1){\r\n        b = bytes[i - 1];\r\n        for (j = 8; j; j -= 1){\r\n            bits.push(b % 2 ? 1 : 0); b = b >> 1;\r\n        }\r\n    }\r\n    bits.reverse();\r\n    str = bits.join('');\r\n\r\n    // Unpack sign, exponent, fraction\r\n    bias = (1 << (ebits - 1)) - 1;\r\n    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\r\n    e = parseInt(str.substring(1, 1 + ebits), 2);\r\n    f = parseInt(str.substring(1 + ebits), 2);\r\n\r\n    // Produce number\r\n    if (e === (1 << ebits) - 1){\r\n        return f !== 0 ? NaN : s * Infinity;\r\n    }else if (e > 0){\r\n        // Normalized\r\n        return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\r\n    }else if (f !== 0){\r\n        // Denormalized\r\n        return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\r\n    }else{\r\n        return s < 0 ? -0 : 0;\r\n    }\r\n};\r\n\r\n$data.IEEE754 = function(v, e, f){\r\n    return $data.unpackIEEE754($data.packIEEE754(v, e, f), e, f);\r\n};\r\n\r\n$data.Container.registerConverter('$data.Float', {\r\n    'default': function(value){\r\n        var r = +value;\r\n        if (isNaN(r)) throw 0;\r\n        return $data.IEEE754(r, 8, 23);\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int16', {\r\n    'default': function(value){\r\n        var r = (value | 0) & 0xffff;\r\n        if (r >= 0x8000) return r - 0x10000;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int64', {\r\n    '$data.Boolean': function(value){\r\n        return value ? '1' : '0';\r\n    },\r\n    '$data.Number': function(value){\r\n        var r = value.toString();\r\n        if (r.indexOf('.') > 0) return r.split('.')[0];\r\n        if (r.indexOf('.') == 0) throw 0;\r\n        return r;\r\n    },\r\n    '$data.String': function(value){\r\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\r\n        if (value.indexOf('.') > 0) return value.split('.')[0];\r\n        if (value.indexOf('.') == 0) throw 0;\r\n        return value;\r\n    },\r\n    '$data.Date': function(value){\r\n        var r = value.valueOf();\r\n        if (isNaN(r)) throw 0;\r\n        return r.toString();\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.SByte', {\r\n    'default': function(value){\r\n        var r = (value | 0) & 0xff;\r\n        if (r >= 0x80) return r - 0x100;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.String', {\r\n    '$data.Date': function(value){\r\n        return value.toISOString();\r\n    },\r\n    '$data.ObjectID': function(value){\r\n        return btoa(value.toString());\r\n    },\r\n    'default': function(value){\r\n        if (typeof value === 'object') return JSON.stringify(value);\r\n        return value.toString();\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Object', {\r\n    '$data.String': function(value){\r\n        return JSON.parse(value);\r\n    },\r\n    '$data.Function': function(){\r\n        throw 0;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Array', {\r\n    '$data.String': function(value){\r\n        var r = JSON.parse(value);\r\n        if (!Array.isArray(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.ObjectID', {\r\n    '$data.ObjectID': function(value){\r\n        try{\r\n            return btoa(value.toString());\r\n        }catch(e){\r\n            return value;\r\n        }\r\n    },\r\n    '$data.String': function(id){\r\n        return id;\r\n    }\r\n});\r\n\r\n$data.Container.proxyConverter = function(v){ return v; };\r\n$data.Container.defaultConverter = function(type){ return function(v){ return $data.Container.convertTo(v, type); }; };\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n(function ($data) {\r\n\r\n    function Edm_Boolean() { };\r\n    $data.Container.registerType('Edm.Boolean', Edm_Boolean);\r\n    $data.Container.mapType(Edm_Boolean, $data.Boolean);\r\n\r\n    function Edm_Binary() { };\r\n    $data.Container.registerType('Edm.Binary', Edm_Binary);\r\n    $data.Container.mapType(Edm_Binary, $data.Blob);\r\n\r\n    function Edm_DateTime() { };\r\n    $data.Container.registerType('Edm.DateTime', Edm_DateTime);\r\n    $data.Container.mapType(Edm_DateTime, $data.Date);\r\n\r\n    function Edm_DateTimeOffset() { };\r\n    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);\r\n    $data.Container.mapType(Edm_DateTimeOffset, $data.DateTimeOffset);\r\n\r\n    function Edm_Time() { };\r\n    $data.Container.registerType('Edm.Time', Edm_Time);\r\n    $data.Container.mapType(Edm_Time, $data.Time);\r\n\r\n    function Edm_TimeOfDay() { };\r\n    $data.Container.registerType('Edm.TimeOfDay', Edm_TimeOfDay);\r\n    $data.Container.mapType(Edm_TimeOfDay, $data.Time);\r\n    \r\n    function Edm_Date() { };\r\n    $data.Container.registerType('Edm.Date', Edm_Date);\r\n    $data.Container.mapType(Edm_Date, $data.Day);\r\n\r\n    function Edm_Duration() { }    ;\r\n    $data.Container.registerType('Edm.Duration', Edm_Duration);\r\n    $data.Container.mapType(Edm_Duration, $data.Duration);\r\n\r\n    function Edm_Decimal() { };\r\n    $data.Container.registerType('Edm.Decimal', Edm_Decimal);\r\n    $data.Container.mapType(Edm_Decimal, $data.Decimal);\r\n\r\n    function Edm_Float() { };\r\n    $data.Container.registerType('Edm.Float', Edm_Float);\r\n    $data.Container.mapType(Edm_Float, $data.Float);\r\n\r\n    function Edm_Single() { };\r\n    $data.Container.registerType('Edm.Single', Edm_Single);\r\n    $data.Container.mapType(Edm_Single, $data.Float);\r\n\r\n    function Edm_Double() { };\r\n    $data.Container.registerType('Edm.Double', Edm_Double);\r\n    $data.Container.mapType(Edm_Double, $data.Number);\r\n\r\n    function Edm_Guid() { };\r\n    $data.Container.registerType('Edm.Guid', Edm_Guid);\r\n    $data.Container.mapType(Edm_Guid, $data.Guid);\r\n\r\n    function Edm_Int16() { };\r\n    $data.Container.registerType('Edm.Int16', Edm_Int16);\r\n    $data.Container.mapType(Edm_Int16, $data.Int16);\r\n\r\n    function Edm_Int32() { };\r\n    $data.Container.registerType('Edm.Int32', Edm_Int32);\r\n    $data.Container.mapType(Edm_Int32, $data.Integer);\r\n\r\n    function Edm_Int64() { };\r\n    $data.Container.registerType('Edm.Int64', Edm_Int64);\r\n    $data.Container.mapType(Edm_Int64, $data.Int64);\r\n\r\n    function Edm_Byte() { };\r\n    $data.Container.registerType('Edm.Byte', Edm_Byte);\r\n    $data.Container.mapType(Edm_Byte, $data.Byte);\r\n\r\n    function Edm_SByte() { };\r\n    $data.Container.registerType('Edm.SByte', Edm_SByte);\r\n    $data.Container.mapType(Edm_SByte, $data.SByte);\r\n\r\n    function Edm_String() { };\r\n    $data.Container.registerType('Edm.String', Edm_String);\r\n    $data.Container.mapType(Edm_String, $data.String);\r\n\r\n    function Edm_GeographyPoint() { };\r\n    $data.Container.registerType('Edm.GeographyPoint', Edm_GeographyPoint);\r\n    $data.Container.mapType(Edm_GeographyPoint, $data.GeographyPoint);\r\n\r\n    function Edm_GeographyLineString() { };\r\n    $data.Container.registerType('Edm.GeographyLineString', Edm_GeographyLineString);\r\n    $data.Container.mapType(Edm_GeographyLineString, $data.GeographyLineString);\r\n\r\n    function Edm_GeographyPolygon() { };\r\n    $data.Container.registerType('Edm.GeographyPolygon', Edm_GeographyPolygon);\r\n    $data.Container.mapType(Edm_GeographyPolygon, $data.GeographyPolygon);\r\n\r\n    function Edm_GeographyMultiPoint() { };\r\n    $data.Container.registerType('Edm.GeographyMultiPoint', Edm_GeographyMultiPoint);\r\n    $data.Container.mapType(Edm_GeographyMultiPoint, $data.GeographyMultiPoint);\r\n\r\n    function Edm_GeographyMultiLineString() { };\r\n    $data.Container.registerType('Edm.GeographyMultiLineString', Edm_GeographyMultiLineString);\r\n    $data.Container.mapType(Edm_GeographyMultiLineString, $data.GeographyMultiLineString);\r\n\r\n    function Edm_GeographyMultiPolygon() { };\r\n    $data.Container.registerType('Edm.GeographyMultiPolygon', Edm_GeographyMultiPolygon);\r\n    $data.Container.mapType(Edm_GeographyMultiPolygon, $data.GeographyMultiPolygon);\r\n\r\n    function Edm_GeographyCollection() { };\r\n    $data.Container.registerType('Edm.GeographyCollection', Edm_GeographyCollection);\r\n    $data.Container.mapType(Edm_GeographyCollection, $data.GeographyCollection);\r\n\r\n    function Edm_GeometryPoint() { };\r\n    $data.Container.registerType('Edm.GeometryPoint', Edm_GeometryPoint);\r\n    $data.Container.mapType(Edm_GeometryPoint, $data.GeometryPoint);\r\n\r\n    function Edm_GeometryLineString() { };\r\n    $data.Container.registerType('Edm.GeometryLineString', Edm_GeometryLineString);\r\n    $data.Container.mapType(Edm_GeometryLineString, $data.GeometryLineString);\r\n\r\n    function Edm_GeometryPolygon() { };\r\n    $data.Container.registerType('Edm.GeometryPolygon', Edm_GeometryPolygon);\r\n    $data.Container.mapType(Edm_GeometryPolygon, $data.GeometryPolygon);\r\n\r\n    function Edm_GeometryMultiPoint() { };\r\n    $data.Container.registerType('Edm.GeometryMultiPoint', Edm_GeometryMultiPoint);\r\n    $data.Container.mapType(Edm_GeometryMultiPoint, $data.GeometryMultiPoint);\r\n\r\n    function Edm_GeometryMultiLineString() { };\r\n    $data.Container.registerType('Edm.GeometryMultiLineString', Edm_GeometryMultiLineString);\r\n    $data.Container.mapType(Edm_GeometryMultiLineString, $data.GeometryMultiLineString);\r\n\r\n    function Edm_GeometryMultiPolygon() { };\r\n    $data.Container.registerType('Edm.GeometryMultiPolygon', Edm_GeometryMultiPolygon);\r\n    $data.Container.mapType(Edm_GeometryMultiPolygon, $data.GeometryMultiPolygon);\r\n\r\n    function Edm_GeometryCollection() { };\r\n    $data.Container.registerType('Edm.GeometryCollection', Edm_GeometryCollection);\r\n    $data.Container.mapType(Edm_GeometryCollection, $data.GeometryCollection);\r\n\r\n    $data.oDataEdmMapping = {\r\n        '$data.Byte': 'Edm.Byte',\r\n        '$data.SByte': 'Edm.SByte',\r\n        '$data.Decimal': 'Edm.Decimal',\r\n        '$data.Float': 'Edm.Float',\r\n        '$data.Int16': 'Edm.Int16',\r\n        '$data.Int64': 'Edm.Int64',\r\n        '$data.DateTimeOffset': 'Edm.DateTimeOffset',\r\n        '$data.Time': 'Edm.TimeOfDay',\r\n        '$data.Day': 'Edm.Date',\r\n        '$data.Duration': 'Edm.Duration',\r\n        '$data.Boolean': 'Edm.Boolean',\r\n        '$data.Blob': 'Edm.Binary',\r\n        '$data.Date': 'Edm.DateTime',\r\n        '$data.Number': 'Edm.Double',\r\n        '$data.Integer': 'Edm.Int32',\r\n        '$data.Int32': 'Edm.Int32',\r\n        '$data.String': 'Edm.String',\r\n        '$data.ObjectID': 'Edm.String',\r\n        '$data.GeographyPoint': 'Edm.GeographyPoint',\r\n        '$data.GeographyLineString': 'Edm.GeographyLineString',\r\n        '$data.GeographyPolygon': 'Edm.GeographyPolygon',\r\n        '$data.GeographyMultiPoint': 'Edm.GeographyMultiPoint',\r\n        '$data.GeographyMultiLineString': 'Edm.GeographyMultiLineString',\r\n        '$data.GeographyMultiPolygon': 'Edm.GeographyMultiPolygon',\r\n        '$data.GeographyCollection': 'Edm.GeographyCollection',\r\n        '$data.GeometryPoint': 'Edm.GeometryPoint',\r\n        '$data.GeometryLineString': 'Edm.GeometryLineString',\r\n        '$data.GeometryPolygon': 'Edm.GeometryPolygon',\r\n        '$data.GeometryMultiPoint': 'Edm.GeometryMultiPoint',\r\n        '$data.GeometryMultiLineString': 'Edm.GeometryMultiLineString',\r\n        '$data.GeometryMultiPolygon': 'Edm.GeometryMultiPolygon',\r\n        '$data.GeometryCollection': 'Edm.GeometryCollection',\r\n        '$data.Guid': 'Edm.Guid'\r\n    };\r\n\r\n})($data);\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport Exception from '../Exception.js';\r\nimport { Guard } from '../utils.js';\r\n\r\n/* $data.GeographyBase */\r\n$data.GeographyBase = function GeographyBase() {\r\n    $data.Geospatial.apply(this, arguments);\r\n\r\n    this.crs = this.crs || $data.GeographyBase.defaultCrs;\r\n    $data.GeographyBase.validateGeoJSON(this);\r\n};\r\n\r\n$data.GeographyBase.disableSRID = false;\r\n$data.GeographyBase.defaultCrs = {\r\n    properties: {\r\n        name: 'EPSG:4326'\r\n    },\r\n    type: 'name'\r\n};\r\n\r\n$data.GeographyBase.parseFromString = function (strData) {\r\n    var lparenIdx = strData.indexOf('(');\r\n    if(lparenIdx >= 0){\r\n        var name = strData.substring(0, lparenIdx).toLowerCase();\r\n        var type = $data.GeographyBase.registered[name];\r\n\r\n        if (type && type.parseFromString && type != $data.GeographyBase) {\r\n            return type.parseFromString(strData);\r\n        } else {\r\n            Guard.raise(new Exception('parseFromString', 'Not Implemented', strData));\r\n        }\r\n    }\r\n};\r\n$data.GeographyBase.stringifyToUrl = function (geoData) {\r\n    if (geoData instanceof $data.GeographyBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\r\n        return geoData.constructor.stringifyToUrl(geoData);\r\n    } else if (geoData instanceof $data.GeographyBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\r\n        var data = \"geography'\";\r\n        function getSRID(g){\r\n            if(!$data.GeographyBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name){\r\n                var r = /EPSG:(\\d+)/i;\r\n                var matches = r.exec(g.crs.properties.name);\r\n                if(matches){\r\n                    data +=\"SRID=\" + matches[1] + \";\";\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        data = getSRID(geoData);\r\n        data += geoData.type + '(';\r\n        function buildArray(d) {\r\n            if (Array.isArray(d[0])) {\r\n\r\n                for (var i = 0; i < d.length; i++) {\r\n                    if (i > 0) data += ',';\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += '(';\r\n\r\n                    buildArray(d[i]);\r\n\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += ')';\r\n                }\r\n\r\n            } else {\r\n                data += d.join(' ');\r\n            }\r\n            return data;\r\n        }\r\n        data = buildArray(geoData.coordinates);\r\n\r\n        data += \")'\";\r\n        return data;\r\n    } else {\r\n        Guard.raise(new Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\r\n    }\r\n};\r\n$data.GeographyBase.registerType = function (name, type, base) {\r\n    $data.SimpleBase.registerType(name, type, base || $data.GeographyBase);\r\n\r\n    $data.GeographyBase.registered = $data.GeographyBase.registered || {};\r\n    $data.GeographyBase.registered[name.toLowerCase()] = type;\r\n};\r\n$data.GeographyBase.validateGeoJSON = function (geoData) {\r\n    var type = geoData.type;\r\n    if (type) {\r\n        var geoType = $data.GeographyBase.registered[type.toLowerCase()];\r\n        if (typeof geoType.validateGeoJSON === 'function') {\r\n            var isValid = geoType.validateGeoJSON(geoData);\r\n            if (isValid) {\r\n                return isValid;\r\n            } else {\r\n                Guard.raise(new Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\r\n            }\r\n        }\r\n    }\r\n    console.log('GeoJSON validation missing', geoData);\r\n    return;\r\n};\r\n$data.SimpleBase.registerType('GeographyBase', $data.GeographyBase, $data.Geospatial);\r\n$data.Container.registerType(['$data.GeographyBase'], $data.GeographyBase);\r\n\r\n/* $data.GeographyPoint */\r\n$data.GeographyPoint = function GeographyPoint(lon, lat) {\r\n    if (lon && typeof lon === 'object' && Array.isArray(lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: lon });\r\n    } else if (lon && typeof lon === 'object' && ('longitude' in lon || 'latitude' in lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: [lon.longitude, lon.latitude] });\r\n    } else if (lon && typeof lon === 'object' && ('lng' in lon || 'lat' in lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: [lon.lng, lon.lat] });\r\n    } else if (lon && typeof lon === 'object') {\r\n        $data.GeographyBase.call(this, lon);\r\n    } else {\r\n        $data.GeographyBase.call(this, { coordinates: [lon || 0, lat || 0] });\r\n    }\r\n};\r\n$data.GeographyPoint.validateGeoJSON = function (geoData) {\r\n    return geoData &&\r\n        Array.isArray(geoData.coordinates) &&\r\n        geoData.coordinates.length == 2 &&\r\n        typeof geoData.coordinates[0] === 'number' &&\r\n        typeof geoData.coordinates[1] === 'number';\r\n};\r\n$data.GeographyPoint.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var values = data.split(' ');\r\n\r\n    return new $data.GeographyPoint(parseFloat(values[0]), parseFloat(values[1]));\r\n};\r\n$data.GeographyPoint.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('Point', $data.GeographyPoint);\r\nObject.defineProperty($data.GeographyPoint.prototype, 'longitude', { get: function () { return this.coordinates[0]; }, set: function (v) { this.coordinates[0] = v; } });\r\nObject.defineProperty($data.GeographyPoint.prototype, 'latitude', { get: function () { return this.coordinates[1]; }, set: function (v) { this.coordinates[1] = v; } });\r\n$data.Container.registerType(['$data.GeographyPoint', 'GeographyPoint', '$data.Geography', 'Geography', 'geography', 'geo'], $data.GeographyPoint);\r\n$data.Geography = $data.GeographyPoint;\r\n\r\n/* $data.GeographyLineString */\r\n$data.GeographyLineString = function GeographyLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyLineString.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('LineString', $data.GeographyLineString);\r\n$data.Container.registerType(['$data.GeographyLineString', 'GeographyLineString'], $data.GeographyLineString);\r\n\r\n/* $data.GeographyPolygon */\r\n$data.GeographyPolygon = function GeographyPolygon(data) {\r\n    if (typeof data === 'object' && (('topLeft' in data && 'bottomRight' in data) || ('topRight' in data && 'bottomLeft' in data))) {\r\n        var tl, tr, bl, br;\r\n\r\n        if ('topLeft' in data && 'bottomRight' in data) {\r\n            tl = data.topLeft instanceof $data.GeographyPoint ? data.topLeft : new $data.GeographyPoint(data.topLeft);\r\n            br = data.bottomRight instanceof $data.GeographyPoint ? data.bottomRight : new $data.GeographyPoint(data.bottomRight);\r\n            tr = new $data.GeographyPoint([br.coordinates[0], tl.coordinates[1]]);\r\n            bl = new $data.GeographyPoint([tl.coordinates[0], br.coordinates[1]]);\r\n        } else {\r\n            tr = data.topRight instanceof $data.GeographyPoint ? data.topRight : new $data.GeographyPoint(data.topRight);\r\n            bl = data.bottomLeft instanceof $data.GeographyPoint ? data.bottomLeft : new $data.GeographyPoint(data.bottomLeft);\r\n            tl = new $data.GeographyPoint([bl.coordinates[0], tr.coordinates[1]]);\r\n            br = new $data.GeographyPoint([tr.coordinates[0], bl.coordinates[1]]);\r\n        }\r\n\r\n        var coordinates = [];\r\n        coordinates.push([].concat(tl.coordinates));\r\n        coordinates.push([].concat(tr.coordinates));\r\n        coordinates.push([].concat(br.coordinates));\r\n        coordinates.push([].concat(bl.coordinates));\r\n        coordinates.push([].concat(tl.coordinates));\r\n\r\n        $data.GeographyBase.call(this, { coordinates: [coordinates] });\r\n\r\n    }else if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyPolygon.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\r\n\r\n    var data = [];\r\n    for (var i = 0; i < rings.length; i++) {\r\n        var polyPoints = [];\r\n        var pairs = rings[i].split(',');\r\n        for (var j = 0; j < pairs.length; j++) {\r\n            var values = pairs[j].split(' ');\r\n\r\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\r\n        }\r\n        data.push(polyPoints);\r\n    }\r\n\r\n    return new $data.GeographyPolygon(data);\r\n};\r\n$data.GeographyPolygon.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('Polygon', $data.GeographyPolygon);\r\n$data.Container.registerType(['$data.GeographyPolygon', 'GeographyPolygon'], $data.GeographyPolygon);\r\n\r\n/* $data.GeographyMultiPoint */\r\n$data.GeographyMultiPoint = function GeographyMultiPoint(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiPoint.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiPoint.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiPoint', $data.GeographyMultiPoint);\r\n$data.Container.registerType(['$data.GeographyMultiPoint', 'GeographyMultiPoint'], $data.GeographyMultiPoint);\r\n\r\n/* $data.GeographyMultiLineString */\r\n$data.GeographyMultiLineString = function GeographyMultiLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiLineString.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiLineString', $data.GeographyMultiLineString);\r\n$data.Container.registerType(['$data.GeographyMultiLineString', 'GeographyMultiLineString'], $data.GeographyMultiLineString);\r\n\r\n/* $data.GeographyMultiPolygon */\r\n$data.GeographyMultiPolygon = function GeographyMultiPolygon(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\r\n        var polygons = geoData.coordinates[k];\r\n        var isValid = isValid && Array.isArray(polygons);\r\n\r\n        for (var i = 0; isValid && i < polygons.length; i++) {\r\n            var polygon = polygons[i];\r\n            var isValid = isValid && Array.isArray(polygon);\r\n\r\n            for (var j = 0; isValid && j < polygon.length; j++) {\r\n                var point = polygon[j];\r\n\r\n                isValid = isValid &&\r\n                    Array.isArray(point) &&\r\n                    point.length == 2 &&\r\n                    typeof point[0] === 'number' &&\r\n                    typeof point[1] === 'number';\r\n            }\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiPolygon.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiPolygon', $data.GeographyMultiPolygon);\r\n$data.Container.registerType(['$data.GeographyMultiPolygon', 'GeographyMultiPolygon'], $data.GeographyMultiPolygon);\r\n\r\n/* $data.GeographyCollection */\r\n$data.GeographyCollection = function GeographyCollection(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { geometries: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyCollection.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.geometries);\r\n\r\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\r\n        var geometry = geoData.geometries[i];\r\n        try {\r\n            isValid = isValid && $data.GeographyBase.validateGeoJSON(geometry);\r\n        } catch (e) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyCollection.validMembers = ['geometries'];\r\n$data.GeographyBase.registerType('GeometryCollection', $data.GeographyCollection);\r\n$data.Container.registerType(['$data.GeographyCollection', 'GeographyCollection'], $data.GeographyCollection);\r\n\r\n\r\n/* converters */\r\n$data.Container.registerConverter($data.GeographyPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeographyPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeographyLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeographyPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyCollection, $data.Object, function (value) {\r\n    return value ? new $data.GeographyCollection(value) : value;\r\n});\r\n\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport Exception from '../Exception.js';\r\nimport { Guard } from '../utils.js';\r\n\r\n/* $data.Geometry */\r\n$data.GeometryBase = function GeometryBase() {\r\n    $data.Geospatial.apply(this, arguments);\r\n\r\n    this.crs = this.crs || $data.GeometryBase.defaultCrs;\r\n    $data.GeometryBase.validateGeoJSON(this);\r\n};\r\n\r\n$data.GeometryBase.disableSRID = false;\r\n$data.GeometryBase.defaultCrs = {\r\n    properties: {\r\n        name: 'EPSG:0'\r\n    },\r\n    type: 'name'\r\n};\r\n\r\n$data.GeometryBase.parseFromString = function (strData) {\r\n    var lparenIdx = strData.indexOf('(');\r\n    if (lparenIdx >= 0) {\r\n        var name = strData.substring(0, lparenIdx).toLowerCase();\r\n        var type = $data.GeometryBase.registered[name];\r\n\r\n        if (type && type.parseFromString && type != $data.GeometryBase) {\r\n            return type.parseFromString(strData);\r\n        } else {\r\n            Guard.raise(new Exception('parseFromString', 'Not Implemented', strData));\r\n        }\r\n    }\r\n};\r\n$data.GeometryBase.stringifyToUrl = function (geoData) {\r\n    if (geoData instanceof $data.GeometryBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\r\n        return geoData.constructor.stringifyToUrl(geoData);\r\n    } else if (geoData instanceof $data.GeometryBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\r\n        var data = \"geometry'\";\r\n        function getSRID(g){\r\n            if(!$data.GeometryBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name){\r\n                var r = /EPSG:(\\d+)/i;\r\n                var matches = r.exec(g.crs.properties.name);\r\n                if(matches){\r\n                    data +=\"SRID=\" + matches[1] + \";\";\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        data = getSRID(geoData);\r\n        data += geoData.type + '(';\r\n        function buildArray(d) {\r\n            if (Array.isArray(d[0])) {\r\n\r\n                for (var i = 0; i < d.length; i++) {\r\n                    if (i > 0) data += ',';\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += '(';\r\n\r\n                    buildArray(d[i]);\r\n\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += ')';\r\n                }\r\n\r\n            } else {\r\n                data += d.join(' ');\r\n            }\r\n            return data;\r\n        }\r\n        data = buildArray(geoData.coordinates);\r\n\r\n        data += \")'\";\r\n        return data;\r\n    } else {\r\n        Guard.raise(new Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\r\n    }\r\n};\r\n$data.GeometryBase.registerType = function (name, type, base) {\r\n    $data.SimpleBase.registerType(name, type, base || $data.GeometryBase);\r\n\r\n    $data.GeometryBase.registered = $data.GeometryBase.registered || {};\r\n    $data.GeometryBase.registered[name.toLowerCase()] = type;\r\n};\r\n$data.GeometryBase.validateGeoJSON = function (geoData) {\r\n    var type = geoData.type;\r\n    if (type) {\r\n        var geoType = $data.GeometryBase.registered[type.toLowerCase()];\r\n        if (typeof geoType.validateGeoJSON === 'function') {\r\n            var isValid = geoType.validateGeoJSON(geoData);\r\n            if (isValid) {\r\n                return isValid;\r\n            } else {\r\n                Guard.raise(new Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\r\n            }\r\n        }\r\n    }\r\n    console.log('GeoJSON validation missing', geoData);\r\n    return;\r\n};\r\n$data.SimpleBase.registerType('GeometryBase', $data.GeometryBase, $data.Geospatial);\r\n$data.Container.registerType(['$data.GeometryBase'], $data.GeometryBase);\r\n\r\n/* $data.GeometryPoint */\r\n$data.GeometryPoint = function GeometryPoint(x, y) {\r\n    var param = x;\r\n    if (param && typeof param === 'object' && Array.isArray(param)) {\r\n        $data.GeometryBase.call(this, { coordinates: param });\r\n    } else if (param && typeof param === 'object' && ('x' in param || 'y' in param)) {\r\n        $data.GeometryBase.call(this, { coordinates: [param.x, param.y] });\r\n    } else if (param && typeof param === 'object') {\r\n        $data.GeometryBase.call(this, param);\r\n    } else {\r\n        $data.GeometryBase.call(this, { coordinates: [x || 0, y || 0] });\r\n    }\r\n};\r\n$data.GeometryPoint.validateGeoJSON = function (geoData) {\r\n    return geoData &&\r\n        Array.isArray(geoData.coordinates) &&\r\n        geoData.coordinates.length == 2 &&\r\n        typeof geoData.coordinates[0] === 'number' &&\r\n        typeof geoData.coordinates[1] === 'number';\r\n};\r\n$data.GeometryPoint.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var values = data.split(' ');\r\n\r\n    return new $data.GeometryPoint(parseFloat(values[0]), parseFloat(values[1]));\r\n};\r\n$data.GeometryPoint.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('Point', $data.GeometryPoint);\r\nObject.defineProperty($data.GeometryPoint.prototype, 'x', { get: function () { return this.coordinates[0]; }, set: function (v) { this.coordinates[0] = v; } });\r\nObject.defineProperty($data.GeometryPoint.prototype, 'y', { get: function () { return this.coordinates[1]; }, set: function (v) { this.coordinates[1] = v; } });\r\n$data.Container.registerType(['$data.GeometryPoint', 'GeometryPoint'], $data.GeometryPoint);\r\n\r\n/* $data.GeometryLineString */\r\n$data.GeometryLineString = function GeometryLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryLineString.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('LineString', $data.GeometryLineString);\r\n$data.Container.registerType(['$data.GeometryLineString', 'GeometryLineString'], $data.GeometryLineString);\r\n\r\n/* $data.GeometryPolygon */\r\n$data.GeometryPolygon = function GeometryPolygon(data) {\r\n    if (typeof data === 'object' && (('topLeft' in data && 'bottomRight' in data) || ('topRight' in data && 'bottomLeft' in data))) {\r\n        var tl, tr, bl, br;\r\n\r\n        if ('topLeft' in data && 'bottomRight' in data) {\r\n            tl = data.topLeft instanceof $data.GeometryPoint ? data.topLeft : new $data.GeometryPoint(data.topLeft);\r\n            br = data.bottomRight instanceof $data.GeometryPoint ? data.bottomRight : new $data.GeometryPoint(data.bottomRight);\r\n            tr = new $data.GeometryPoint([br.coordinates[0], tl.coordinates[1]]);\r\n            bl = new $data.GeometryPoint([tl.coordinates[0], br.coordinates[1]]);\r\n        } else {\r\n            tr = data.topRight instanceof $data.GeometryPoint ? data.topRight : new $data.GeometryPoint(data.topRight);\r\n            bl = data.bottomLeft instanceof $data.GeometryPoint ? data.bottomLeft : new $data.GeometryPoint(data.bottomLeft);\r\n            tl = new $data.GeometryPoint([bl.coordinates[0], tr.coordinates[1]]);\r\n            br = new $data.GeometryPoint([tr.coordinates[0], bl.coordinates[1]]);\r\n        }\r\n\r\n        var coordinates = [];\r\n        coordinates.push([].concat(tl.coordinates));\r\n        coordinates.push([].concat(tr.coordinates));\r\n        coordinates.push([].concat(br.coordinates));\r\n        coordinates.push([].concat(bl.coordinates));\r\n        coordinates.push([].concat(tl.coordinates));\r\n\r\n        $data.GeometryBase.call(this, { coordinates: [coordinates] });\r\n\r\n    }else if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryPolygon.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\r\n\r\n    var data = [];\r\n    for (var i = 0; i < rings.length; i++) {\r\n        var polyPoints = [];\r\n        var pairs = rings[i].split(',');\r\n        for (var j = 0; j < pairs.length; j++) {\r\n            var values = pairs[j].split(' ');\r\n\r\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\r\n        }\r\n        data.push(polyPoints);\r\n    }\r\n\r\n    return new $data.GeometryPolygon(data);\r\n};\r\n$data.GeometryPolygon.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('Polygon', $data.GeometryPolygon);\r\n$data.Container.registerType(['$data.GeometryPolygon', 'GeometryPolygon'], $data.GeometryPolygon);\r\n\r\n/* $data.GeometryMultiPoint */\r\n$data.GeometryMultiPoint = function GeometryMultiPoint(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiPoint.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiPoint.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiPoint', $data.GeometryMultiPoint);\r\n$data.Container.registerType(['$data.GeometryMultiPoint', 'GeometryMultiPoint'], $data.GeometryMultiPoint);\r\n\r\n/* $data.GeometryMultiLineString */\r\n$data.GeometryMultiLineString = function GeometryMultiLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiLineString.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiLineString', $data.GeometryMultiLineString);\r\n$data.Container.registerType(['$data.GeometryMultiLineString', 'GeometryMultiLineString'], $data.GeometryMultiLineString);\r\n\r\n/* $data.GeometryMultiPolygon */\r\n$data.GeometryMultiPolygon = function GeometryMultiPolygon(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\r\n        var polygons = geoData.coordinates[k];\r\n        var isValid = isValid && Array.isArray(polygons);\r\n\r\n        for (var i = 0; isValid && i < polygons.length; i++) {\r\n            var polygon = polygons[i];\r\n            var isValid = isValid && Array.isArray(polygon);\r\n\r\n            for (var j = 0; isValid && j < polygon.length; j++) {\r\n                var point = polygon[j];\r\n\r\n                isValid = isValid &&\r\n                    Array.isArray(point) &&\r\n                    point.length == 2 &&\r\n                    typeof point[0] === 'number' &&\r\n                    typeof point[1] === 'number';\r\n            }\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiPolygon.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiPolygon', $data.GeometryMultiPolygon);\r\n$data.Container.registerType(['$data.GeometryMultiPolygon', 'GeometryMultiPolygon'], $data.GeometryMultiPolygon);\r\n\r\n/* $data.GeometryCollection */\r\n$data.GeometryCollection = function GeometryCollection(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { geometries: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryCollection.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.geometries);\r\n\r\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\r\n        var geometry = geoData.geometries[i];\r\n        try {\r\n            isValid = isValid && $data.GeometryBase.validateGeoJSON(geometry);\r\n        } catch (e) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryCollection.validMembers = ['geometries'];\r\n$data.GeometryBase.registerType('GeometryCollection', $data.GeometryCollection);\r\n$data.Container.registerType(['$data.GeometryCollection', 'GeometryCollection'], $data.GeometryCollection);\r\n\r\n/* converters */\r\n$data.Container.registerConverter($data.GeometryPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeometryPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeometryLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeometryPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryCollection, $data.Object, function (value) {\r\n    return value ? new $data.GeometryCollection(value) : value;\r\n});\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Geospatial = function Geospatial() {\r\n    this.type = this.constructor.type;\r\n    if (Array.isArray(this.constructor.validMembers)) {\r\n        for (var i = 0; i < this.constructor.validMembers.length; i++) {\r\n            var name = this.constructor.validMembers[i];\r\n            this[name] = undefined;\r\n        }\r\n    }\r\n\r\n    $data.SimpleBase.apply(this, arguments);\r\n    this.type = this.constructor.type || 'Unknown';\r\n};\r\n$data.SimpleBase.registerType('Geospatial', $data.Geospatial);\r\n$data.Container.registerType(['$data.Geospatial', 'Geospatial'], $data.Geospatial);\r\n\r\n$data.point = function (arg) {\r\n    if (arg && arg.crs) {\r\n        if (arg.crs.properties && arg.crs.properties.name === $data.GeometryBase.defaultCrs.properties.name) {\r\n            return new $data.GeometryPoint(arg);\r\n        } else {\r\n            return new $data.GeographyPoint(arg);\r\n        }\r\n    } else if(arg) {\r\n        if ('x' in arg && 'y' in arg) {\r\n            return new $data.GeometryPoint(arg.x, arg.y);\r\n        } else if ('longitude' in arg && 'latitude' in arg) {\r\n            return new $data.GeographyPoint(arg.longitude, arg.latitude);\r\n        } else if ('lng' in arg && 'lat' in arg) {\r\n            return new $data.GeographyPoint(arg.lng, arg.lat);\r\n        }\r\n    }\r\n};\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\n\n$data.Guid = function Guid(value) {\n    ///<param name=\"value\" type=\"string\" />\n\n    if (value === undefined || (typeof value === 'string' && /^[a-zA-z0-9]{8}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{12}$/.test(value))) {\r\n        this.value = value || '00000000-0000-0000-0000-000000000000';\r\n    } else {\r\n        throw Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Guid', value));\r\n    }\n};\n$data.Container.registerType(['$data.Guid', 'Guid', 'guid'], $data.Guid);\n$data.Container.registerConverter('$data.Guid', {\r\n    '$data.String': function (value) {\r\n        return value ? $data.parseGuid(value).toString() : value;\r\n    },\r\n    '$data.Guid': function (value) {\r\n        return value ? value.toString() : value;\r\n    }\r\n}, {\r\n    '$data.String': function (value) {\r\n        return value ? value.toString() : value;\r\n    }\r\n});\n\n\n$data.Guid.prototype.toJSON = function () {\n    return this.value;\n};\n\n$data.Guid.prototype.valueOf = function () {\n    return this.value;\n};\n\n$data.Guid.prototype.toString = function () {\n    return this.value;\n};\n\n$data.Guid.NewGuid = function () {\n    return $data.createGuid();\n};\n\n$data.parseGuid = function (guid) {\n    return new $data.Guid(guid);\n};\n\n(function () {\r\n    /*!\r\n    Math.uuid.js (v1.4)\r\n    http://www.broofa.com\r\n    mailto:robert@broofa.com\r\n\r\n    Copyright (c) 2010 Robert Kieffer\r\n    Dual licensed under the MIT and GPL licenses.\r\n    */\r\n\r\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\r\n\r\n    $data.createGuid = function (guidString) {\r\n        if (guidString) {\r\n            return new $data.Guid(guidString);\r\n        };\r\n\r\n        var len;\r\n        var chars = CHARS, uuid = [], i;\r\n        var radix = chars.length;\r\n\r\n        if (len) {\r\n            // Compact form\r\n            for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];\r\n        } else {\r\n            // rfc4122, version 4 form\r\n            var r;\r\n\r\n            // rfc4122 requires these characters\r\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\r\n            uuid[14] = '4';\r\n\r\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\r\n            // per rfc4122, sec. 4.1.5\r\n            for (i = 0; i < 36; i++) {\r\n                if (!uuid[i]) {\r\n                    r = 0 | Math.random() * 16;\r\n                    uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\r\n                }\r\n            }\r\n        }\r\n\r\n        return $data.parseGuid(uuid.join(''));\r\n    };\r\n})();\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n/* $data.SimpleBase */\r\n$data.SimpleBase = function SimpleBase(data) {\r\n    if (typeof data === 'object' && data) {\r\n        if (Array.isArray(this.constructor.validMembers)) {\r\n            for (var i = 0; i < this.constructor.validMembers.length; i++) {\r\n                var name = this.constructor.validMembers[i];\r\n\r\n                if (data[name] !== undefined) {\r\n                    this[name] = data[name];\r\n                }\r\n            }\r\n\r\n        } else {\r\n            delete data.type;\r\n            $data.typeSystem.extend(this, data);\r\n        }\r\n    }\r\n}\r\n$data.SimpleBase.registerType = function (name, type, base) {\r\n    base = base || $data.SimpleBase;\r\n\r\n    type.type = name;\r\n    type.prototype = Object.create(base.prototype);\r\n    type.prototype.constructor = type;\r\n}\r\n$data.Container.registerType(['$data.SimpleBase', 'SimpleBase'], $data.SimpleBase);\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Number = typeof Number !== 'undefined' ? Number : function JayNumber() { };\r\n$data.Date = typeof Date !== 'undefined' ? Date : function JayDate() { };\r\n$data.String = typeof String !== 'undefined' ? String : function JayString() { };\r\n$data.Boolean = typeof Boolean !== 'undefined' ? Boolean : function JayBoolean() { };\r\n$data.Array = typeof Array !== 'undefined' ? Array : function JayArray() { };\r\n$data.Object = typeof Object !== 'undefined' ? Object : function JayObject() { };\r\n$data.Function = Function;\r\n\r\n$data.Byte = function JayByte() { };\r\n$data.SByte = function JaySByte() { };\r\n$data.Decimal = function JayDecimal() { };\r\n$data.Float = $data.Single = function JayFloat() { };\r\n$data.Integer = function JayInteger() { };\r\n$data.Int16 = function JayInt16(v) { };\r\n$data.Int32 = function JayInt32() { };\r\n$data.Int64 = function JayInt64(v) { };\r\n$data.ObjectID = typeof $data.mongoDBDriver !== 'undefined' && typeof $data.mongoDBDriver.ObjectID !== 'undefined' ? $data.mongoDBDriver.ObjectID : function JayObjectID() { };\r\n$data.Time = function JayTime() { };\r\n$data.Day = function JayDay() { };\r\n$data.Duration = function JayDuration() { };\r\n$data.DateTimeOffset = function JayDateTimeOffset(val) {\r\n    this.value = val;\r\n};\r\n$data.DateTimeOffset.prototype.toJSON = function () {\r\n    return this.value instanceof Date ? this.value.toISOString() : this.value;\r\n};\r\n\r\n$data.Container.registerType([\"$data.Number\", \"number\", \"JayNumber\", \"double\"], $data.Number);\r\n$data.Container.registerType([\"$data.Integer\", \"int\", \"integer\", \"JayInteger\"], $data.Integer);\r\n$data.Container.registerType([\"$data.Int32\", \"int32\", \"JayInt32\"], $data.Int32);\r\n$data.Container.registerType([\"$data.Byte\", \"byte\", \"JayByte\"], $data.Byte);\r\n$data.Container.registerType([\"$data.SByte\", \"sbyte\", \"JaySByte\"], $data.SByte);\r\n$data.Container.registerType([\"$data.Decimal\", \"decimal\", \"JayDecimal\"], $data.Decimal);\r\n$data.Container.registerType([\"$data.Float\", \"$data.Single\", \"float\", \"single\", \"JayFloat\"], $data.Float);\r\n$data.Container.registerType([\"$data.Int16\", \"int16\", \"word\", \"JayInt16\"], $data.Int16);\r\n$data.Container.registerType([\"$data.Int64\", \"int64\", \"long\", \"JayInt64\"], $data.Int64);\r\n$data.Container.registerType([\"$data.String\", \"string\", \"text\", \"character\", \"JayString\"], $data.String);\r\n$data.Container.registerType([\"$data.Array\", \"array\", \"Array\", \"[]\", \"JayArray\"], $data.Array, function () {\r\n    return $data.Array.apply(undefined, arguments);\r\n});\r\n$data.Container.registerType([\"$data.Date\", \"datetime\", \"date\", \"JayDate\"], $data.Date);\r\n$data.Container.registerType([\"$data.Time\", \"time\", \"JayTime\"], $data.Time);\r\n$data.Container.registerType([\"$data.Day\", \"day\", \"JayDay\"], $data.Day);\r\n$data.Container.registerType([\"$data.Duration\", \"duration\", \"JayDuration\"], $data.Duration);\r\n$data.Container.registerType([\"$data.DateTimeOffset\", \"offset\", \"datetimeoffset\", \"JayDateTimeOffset\"], $data.DateTimeOffset);\r\n$data.Container.registerType([\"$data.Boolean\", \"bool\", \"boolean\", \"JayBoolean\"], $data.Boolean);\r\n$data.Container.registerType([\"$data.Object\", \"Object\", \"object\", \"{}\", \"JayObject\"], $data.Object);\r\n$data.Container.registerType([\"$data.Function\", \"Function\", \"function\"], $data.Function);\r\n$data.Container.registerType(['$data.ObjectID', 'ObjectID', 'objectId', 'objectid', 'ID', 'Id', 'id', 'JayObjectID'], $data.ObjectID);\r\n\r\nexport default $data\r\n","import $data, { $C as _$C, Container as _container } from './TypeSystem.js';\r\nimport Types from './Types/Types.js';\r\nimport Trace from './Trace/Trace.js';\r\nimport Logger from './Trace/Logger.js';\r\nimport SimpleBase from './Types/SimpleBase.js';\r\nimport Geospatial from './Types/Geospatial.js';\r\nimport Geography from './Types/Geography.js';\r\nimport Geometry from './Types/Geometry.js';\r\nimport Guid from './Types/Guid.js';\r\nimport Blob from './Types/Blob.js';\r\nimport EdmTypes from './Types/EdmTypes.js';\r\nimport Converter from './Types/Converter.js';\r\n\r\nimport { Guard as _guard } from './utils.js';\r\nimport _exception from './Exception.js';\r\n\r\nexport var Guard = _guard;\r\n$data.Guard = _guard;\r\n\r\nexport var Exception = _exception;\r\n$data.Exception = _exception;\r\n\r\nexport var $C = _$C;\r\n$data.$C = _$C;\r\n\r\nexport var Container = _container;\r\nexport default $data;\r\n","import $data from './initializeJayDataClient.js';\r\nimport * as acorn from 'acorn';\r\nimport * as pkg from '../../package.json';\r\n\r\nif (typeof console === 'undefined') {\r\n  console = {\r\n    warn: function() {},\r\n    error: function() {},\r\n    log: function() {},\r\n    dir: function() {},\r\n    time: function() {},\r\n    timeEnd: function() {}\r\n  };\r\n}\r\n\r\nif (!console.warn) console.warn = function() {};\r\nif (!console.error) console.error = function() {};\r\n\r\n(function($data) {\r\n  ///<summary>\r\n  /// Collection of JayData services\r\n  ///</summary>\r\n  $data.__namespace = true;\r\n  $data.version = \"JayData \" + pkg.version;\r\n  $data.versionNumber = pkg.version;\r\n  $data.root = {};\r\n  $data.Acorn = acorn;\r\n\r\n})($data);\r\nexport default $data\r\n  // Do not remove this block, it is used by jsdoc\r\n  /**\r\n      @name $data.Base\r\n      @class base class\r\n  */\r\n","export default function _data_handler() {\r\n  console.log(\"@@@@\", this);\r\n  if (this instanceof _data_handler) {\r\n    var type = _data_handler[\"implementation\"].apply(this, arguments);\r\n    return new type(arguments[1]);\r\n  } else {\r\n    return _data_handler[\"implementation\"].apply(this, arguments)\r\n  }\r\n};\r\n","import Exception from './Exception'\r\n\r\nlet Guard = {};\r\nGuard.requireValue = function(name, value) {\r\n  if (typeof value === 'undefined' || value === null) {\r\n    Guard.raise(name + \" requires a value other than undefined or null\");\r\n  }\r\n};\r\n\r\nGuard.requireType = function(name, value, typeOrTypes) {\r\n  var types = typeOrTypes instanceof Array ? typeOrTypes : [typeOrTypes];\r\n  return types.some(function(item) {\r\n    switch (typeof item) {\r\n      case \"string\":\r\n        return typeof value === item;\r\n      case \"function\":\r\n        return value instanceof item;\r\n      default:\r\n        Guard.raise(\"Unknown type format : \" + typeof item + \" for: \" + name);\r\n    }\r\n  });\r\n};\r\n\r\nGuard.raise = function(exception) {\r\n  if (typeof intellisense === 'undefined') {\r\n    if (exception instanceof Exception) {\r\n      console.error(exception.name + ':', exception.message + '\\n', exception);\r\n    } else {\r\n      console.error(exception);\r\n    }\r\n    throw exception;\r\n  }\r\n};\r\n\r\nObject.isNullOrUndefined = function(value) {\r\n  return value === undefined || value === null;\r\n};\r\n\r\nexport default { Guard: Guard };\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Access', null, null, {}, {\r\n    isAuthorized: function(access, user, sets, callback){\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n\r\n        //clbWrapper.error('Authorization failed', 'Access authorization');\r\n        clbWrapper.success(true);\r\n\r\n        return pHandlerResult;\r\n\r\n        /*var error;\r\n\r\n        if (!access) error = 'Access undefined';\r\n        if (typeof access !== 'number') error = 'Invalid access type';\r\n        if (!user) user = {}; //error = 'User undefined';\r\n        if (!user.roles) user.roles = {}; //error = 'User has no roles';\r\n        if (!roles) roles = {}; //error = 'Roles undefined';\r\n        if (!(roles instanceof Array || typeof roles === 'object')) error = 'Invald roles type';\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n\r\n        if (error){\r\n            clbWrapper.error(error, 'Access authorization');\r\n            return pHandlerResult;\r\n        }\r\n\r\n        if (user.roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < user.roles.length; i++){\r\n                if (typeof user.roles[i] === 'string') r[user.roles[i]] = true;\r\n            }\r\n            user.roles = r;\r\n        }\r\n\r\n        if (roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < roles.length; i++){\r\n                if (typeof roles[i] === 'string') r[roles[i]] = true;\r\n            }\r\n            roles = r;\r\n        }\r\n\r\n        var args = arguments;\r\n        var readyFn = function(result){\r\n            if (result) clbWrapper.success(result);\r\n            else clbWrapper.error('Authorization failed', args);\r\n        };\r\n\r\n        var rolesKeys = Object.getOwnPropertyNames(roles);\r\n        var i = 0;\r\n\r\n        var callbackFn = function(result){\r\n            if (result) readyFn(result);\r\n\r\n            if (typeof roles[rolesKeys[i]] === 'boolean' && roles[rolesKeys[i]]){\r\n                if (user.roles[rolesKeys[i]]) readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'function'){\r\n                var r = roles[rolesKeys[i]].call(user);\r\n\r\n                if (typeof r === 'function') r.call(user, (i < rolesKeys.length ? callbackFn : readyFn));\r\n                else{\r\n                    if (r) readyFn(true);\r\n                    else{\r\n                        i++;\r\n                        if (i < rolesKeys.length) callbackFn();\r\n                        else readyFn(false);\r\n                    }\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'number'){\r\n                if (((typeof user.roles[rolesKeys[i]] === 'number' && (user.roles[rolesKeys[i]] & access)) ||\r\n                    (typeof user.roles[rolesKeys[i]] !== 'number' && user.roles[rolesKeys[i]])) &&\r\n                    (roles[rolesKeys[i]] & access)) user.roles[rolesKeys[i]] &&  readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        callbackFn();\r\n\r\n        return pHandlerResult;*/\r\n    },\r\n    getAccessBitmaskFromPermission: function(p){\r\n        var access = $data.Access.None;\r\n\r\n        if (p.Create) access |= $data.Access.Create;\r\n        if (p.Read) access |= $data.Access.Read;\r\n        if (p.Update) access |= $data.Access.Update;\r\n        if (p.Delete) access |= $data.Access.Delete;\r\n        if (p.DeleteBatch) access |= $data.Access.DeleteBatch;\r\n        if (p.Execute) access |= $data.Access.Execute;\r\n\r\n        return access;\r\n    },\r\n    None: { value: 0 },\r\n    Create: { value: 1 },\r\n    Read: { value: 2 },\r\n    Update: { value: 4 },\r\n    Delete: { value: 8 },\r\n    DeleteBatch: { value: 16 },\r\n    Execute: { value: 32 }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.ajax = $data.ajax || function () {\r\n    var cfg = arguments[arguments.length - 1];\r\n    var clb = $data.typeSystem.createCallbackSetting(cfg);\r\n    clb.error(\"Not implemented\");\r\n};\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof Ext !== 'undefined' && typeof Ext.Ajax) {\r\n    $data.ajax = $data.ajax || function (options) {\r\n        Ext.Ajax.request(options);\r\n    };\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof WinJS !== 'undefined' && WinJS.xhr) {\r\n    $data.ajax = $data.ajax || function (options) {\r\n        $data.typeSystem.extend(options, {\r\n            dataType: 'json',\r\n            headers: {}\r\n        });\r\n        var dataTypes = {\r\n            'json': {\r\n                accept: 'application/json, text/javascript',\r\n                convert: JSON.parse\r\n            },\r\n            'text': {\r\n                accept: 'text/plain',\r\n                convert: function (e) { return e; }\r\n            },\r\n            'html': {\r\n                accept: 'text/html',\r\n                convert: function (e) { return e; }\r\n            },\r\n            'xml': {\r\n                accept: 'application/xml, text/xml',\r\n                convert: function (e) {\r\n                    // TODO?\r\n                    return e;\r\n                }\r\n            }\r\n        }\r\n        var dataTypeContext = dataTypes[options.dataType.toLowerCase()];\r\n\r\n        options.headers.Accept = dataTypeContext.accept;\r\n\r\n        var successClb = options.success || $data.defaultSuccessCallback;\r\n        var errorClb = options.error || $data.defaultErrorCallback;\r\n        var progressClb = options.progress;\r\n\r\n        var success = function (r) {\r\n            var result = dataTypeContext.convert(r.responseText);\r\n            successClb(result);\r\n        }\r\n        var error = function (r) {\r\n            var error = dataTypeContext.convert(r.responseText);\r\n            errorClb(error);\r\n        }\r\n        var progress = progressClb;\r\n\r\n        WinJS.xhr(options)\r\n        .done(success, error, progress);\r\n    }\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof jQuery !== 'undefined' && jQuery.ajax) {\r\n    $data.ajax = $data.ajax || jQuery.ajax;\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.Anonymous\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = cfg || {};\r\n        this.Authenticated = false;\r\n    },\r\n    /// { error:, abort:, pending:, success: }\r\n    Login: function (callbacks) {\r\n    },\r\n    Logout: function () {\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        $data.ajax(cfg);\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.AuthenticationBase\", null, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = cfg || {};\r\n        this.Authenticated = false;\r\n    },\r\n    /// { error:, abort:, pending:, success: }\r\n    Login: function (callbacks) {\r\n         Guard.raise(\"Pure class\");\r\n    },\r\n    Logout: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.BasicAuth.BasicAuth\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = $data.typeSystem.extend({\r\n            Username: '',\r\n            Password: ''\r\n        }, cfg);\r\n    },\r\n    Login: function (callbacks) {\r\n        if (callbacks && typeof callbacks.pending == \"function\")\r\n            callbacks.pending();\r\n    },\r\n    Logout: function () {\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        if (!cfg)\r\n            return;\r\n        var _this = this;\r\n\r\n        var origBeforeSend = cfg.beforeSend;\r\n        cfg.beforeSend = function (xhr) {\r\n            xhr.setRequestHeader(\"Authorization\", \"Basic  \" + _this.__encodeBase64(_this.configuration.Username + \":\" + _this.configuration.Password));\r\n\r\n            if(typeof origBeforeSend == \"function\")\r\n                origBeforeSend(xhr);\r\n        };\r\n\r\n        $data.ajax(cfg);\r\n    },\r\n    __encodeBase64: function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n                           \"QRSTUVWXYZabcdef\" +\r\n                           \"ghijklmnopqrstuv\" +\r\n                           \"wxyz0123456789+/\" +\r\n                           \"=\";\r\n\r\n        input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            base64 = base64 +\r\n                        b64array.charAt(enc1) +\r\n                        b64array.charAt(enc2) +\r\n                        b64array.charAt(enc3) +\r\n                        b64array.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return base64;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.FacebookAuth\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = $data.typeSystem.extend({\r\n            Url_code: '',\r\n            type_code: '',\r\n            scope: '',\r\n            Url_token: '',\r\n            type_token: '',\r\n            access_token: '',\r\n            app_id: ''\r\n        }, cfg);\r\n    },\r\n    Login: function (callbacks) {\r\n        if (this.Authenticated) {\r\n            return;\r\n        }\r\n\r\n        var provider = this;\r\n        provider.configuration.stateCallbacks = callbacks || {};\r\n\r\n        $data.ajax({\r\n            url: this.configuration.Url_code,\r\n            data: 'type=' + provider.configuration.type_code + '&client_id=' + provider.configuration.app_id + '&scope=' + provider.configuration.scope,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                if (typeof provider.configuration.stateCallbacks.pending == \"function\")\r\n                    provider.configuration.stateCallbacks.pending(data);\r\n                provider._processRequestToken(data);\r\n                provider.Authenticated = true;\r\n            },\r\n            error: function () {\r\n                if (typeof provider.configuration.stateCallbacks.error == \"function\")\r\n                    provider.configuration.stateCallbacks.error(arguments);\r\n            }\r\n        });\r\n    },\r\n    Logout: function () {\r\n        this.Authenticated = false;\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        if (!cfg)\r\n            return;\r\n        var _this = this;\r\n\r\n        if (cfg.url.indexOf('access_token=') === -1) {\r\n            if (cfg.url && this.Authenticated) {\r\n                var andChar = '?';\r\n                if (cfg.url.indexOf(andChar) > 0)\r\n                    andChar = '&';\r\n\r\n                if (this.configuration.access_token)\r\n                    cfg.url = cfg.url + andChar + 'access_token=' + this.configuration.access_token;\r\n            }\r\n        }\r\n\r\n        $data.ajax(cfg);\r\n    },\r\n    _processRequestToken: function (verification_data) {\r\n        var provider = this;\r\n\r\n        $data.ajax({\r\n            url: provider.configuration.Url_token,\r\n            data: 'type=' + provider.configuration.type_token + '&client_id=' + provider.configuration.app_id + '&code=' + verification_data.code,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            success: function(result) {\r\n                provider.configuration.access_token = result.access_token;\r\n                if (typeof provider.configuration.stateCallbacks.success == \"function\")\r\n                    provider.configuration.stateCallbacks.success(result);\r\n            },\r\n            error: function(obj) {\r\n                var data = eval('(' + obj.responseText + ')');\r\n                if (data.error) {\r\n                    if (data.error.message == \"authorization_pending\") {\r\n                        setTimeout(function() {\r\n                            provider._processRequestToken(verification_data);\r\n                        }, 2000);\r\n                    } else if (\"authorization_declined\") {\r\n                        if (typeof provider.configuration.stateCallbacks.abort == \"function\")\r\n                            provider.configuration.stateCallbacks.abort(arguments);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from '../TypeSystem/index.js';\r\n\r\nvar EventSubscriber = $data.Class.define(\"EventSubscriber\", null, null, {\r\n    constructor: function (handler, state, thisArg) {\r\n        /// <param name=\"handler\" type=\"Function\">\r\n        ///     <summary>event handler</summary>\r\n        ///     <signature>\r\n        ///         <param name=\"sender\" type=\"$data.Entity\" />\r\n        ///         <param name=\"eventData\" type=\"EventData\" />\r\n        ///         <param name=\"state\" type=\"Object\" />\r\n        ///     </signature>\r\n        /// </param>\r\n        /// <param name=\"state\" type=\"Object\" optional=\"true\">custom state object</param>\r\n        /// <param name=\"thisArg\" type=\"Object\" optional=\"true\">[i]this[/i] context for handler</param>\r\n        ///\r\n        /// <field name=\"handler\" type=\"function($data.Entity sender, EventData eventData, Object state)\">event handler</field>\r\n        /// <field name=\"state\" type=\"Object\">custom state object</field>\r\n        /// <field name=\"thisArg\">[i]this[/i] context for handler</field>\r\n        this.handler = handler;\r\n        this.state = state;\r\n        this.thisArg = thisArg;\r\n    },\r\n    handler: {},\r\n    state: {},\r\n    thisArg: {}\r\n});\r\n\r\n$data.Event = $data.Class.define(\"$data.Event\", null, null, {\r\n    constructor: function (name, sender) {\r\n        ///<param name=\"name\" type=\"string\">The name of the event</param>\r\n        ///<param name=\"sender\" type=\"Object\">The originator/sender of the event. [this] in handlers will be set to this</param>\r\n        var subscriberList = null;\r\n        var parentObject = sender;\r\n\r\n        function detachHandler(list, handler) {\r\n            ///<param name=\"list\" type=\"Array\" elementType=\"EventSubscriber\" />\r\n            ///<param name=\"handler\" type=\"Function\" />\r\n            list.forEach(function (item, index) {\r\n                if (item.handler == handler) {\r\n                    list.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.attach = function (handler, state, thisArg) {\r\n            ///<param name=\"handler\" type=\"Function\">\r\n            ///<signature>\r\n            ///<param name=\"sender\" type=\"Object\" />\r\n            ///<param name=\"eventData\" type=\"Object\" />\r\n            ///<param name=\"state\" type=\"Object\" />\r\n            ///</signature>\r\n            ///</param>\r\n            ///<param name=\"state\" type=\"Object\" optional=\"true\" />\r\n            ///<param name=\"thisArg\" type=\"Object\" optional=\"true\" />\r\n            if (!subscriberList) {\r\n                subscriberList = [];\r\n            }\r\n            subscriberList.push(new EventSubscriber(handler, state, thisArg || sender));\r\n        };\r\n        this.detach = function (handler) {\r\n            detachHandler(subscriberList, handler);\r\n        };\r\n        this.fire = function (eventData, snder) {\r\n            var snd = snder || sender || this;\r\n            //eventData.eventName = name;\r\n            ///<value name=\"subscriberList type=\"Array\" />\r\n            if (subscriberList) {\r\n                subscriberList.forEach(function (subscriber) {\r\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\r\n                    try {\r\n                        subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state);\r\n                    } catch(ex) {\r\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\r\n                        console.dir(ex);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.fireCancelAble = function (eventData, snder) {\r\n            var snd = snder || sender || this;\r\n            //eventData.eventName = name;\r\n            ///<value name=\"subscriberList type=\"Array\" />\r\n            var isValid = true;\r\n            if (subscriberList) {\r\n                subscriberList.forEach(function (subscriber) {\r\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\r\n                    try {\r\n                        isValid = isValid && (subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state) === false ? false : true);\r\n                    } catch (ex) {\r\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\r\n                        console.dir(ex);\r\n                    }\r\n                });\r\n            }\r\n            return isValid;\r\n        };\r\n    }\r\n});\r\n\r\n\r\nvar EventData = $data.Class.define(\"EventData\", null, null, {\r\n    eventName: {}\r\n});\r\n\r\nvar PropertyChangeEventData = $data.Class.define(\"PropertyChangeEventData\", EventData, null, {\r\n    constructor: function (propertyName, oldValue, newValue) {\r\n        this.propertyName = propertyName;\r\n        this.oldValue = oldValue;\r\n        this.newValue = newValue;\r\n    },\r\n    propertyName: {},\r\n    oldValue: {},\r\n    newValue: {}\r\n});\r\n\r\nvar PropertyValidationEventData = $data.Class.define(\"PropertyValidationEventData\", EventData, null, {\r\n    constructor: function (propertyName, oldValue, newValue, errors) {\r\n        this.propertyName = propertyName;\r\n        this.oldValue = oldValue;\r\n        this.newValue = newValue;\r\n        this.errors = errors;\r\n        this.cancel = false;\r\n    },\r\n    propertyName: {},\r\n    oldValue: {},\r\n    newValue: {},\r\n    errors: {},\r\n    cancel: {}\r\n});\r\n\r\n\r\n\r\n$data.Entity = $data.Class.define(\"$data.Entity\", null, null, {\r\n    constructor: function (initData, newInstanceOptions) {\r\n        /// <description>\r\n        ///     This class provide a light weight, object-relational interface between\r\n        ///     your javascript code and database.\r\n        /// </description>\r\n        ///\r\n        /// <signature>\r\n        ///     <param name=\"initData\" type=\"Object\">initialization data</param>\r\n        ///     <example>\r\n        ///         var category = new $news.Types.Category({ Title: 'Tech' });\r\n        ///         $news.context.Categories.add(category);\r\n        ///     </example>\r\n        /// </signature>\r\n        ///\r\n        /// <field name=\"initData\" type=\"Object\">initialization data</field>\r\n        /// <field name=\"context\" type=\"$data.EntityContext\"></field>\r\n        /// <field name=\"propertyChanging\" type=\"$data.Event\"></field>\r\n        /// <field name=\"propertyChanged\" type=\"$data.Event\"></field>\r\n        /// <field name=\"propertyValidationError\" type=\"$data.Event\"></field>\r\n        /// <field name=\"isValidated\" type=\"Boolean\">Determines the current $data.Entity is validated.</field>\r\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of $data.Validation.ValidationError</field>\r\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of MemberDefinition</field>\r\n        /// <field name=\"entityState\" type=\"Integer\"></field>\r\n        /// <field name=\"changedProperties\" type=\"Array\">array of MemberDefinition</field>\r\n\r\n        this.initData = {};\r\n        var thisType = this.getType();\r\n        if (thisType.__copyPropertiesToInstance) {\r\n            $data.typeSystem.writePropertyValues(this);\r\n        }\r\n\r\n        var ctx = null;\r\n        this.context = ctx;\r\n        if (\"setDefaultValues\" in thisType) {\r\n            if (!newInstanceOptions || newInstanceOptions.setDefaultValues !== false) {\r\n                if (!initData || Object.keys(initData).length < 1) {\r\n                    initData = thisType.setDefaultValues(initData);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (typeof initData === \"object\") {\r\n            var typeMemDefs = thisType.memberDefinitions;\r\n            var memDefNames = typeMemDefs.getPublicMappedPropertyNames();\r\n\r\n            for (var i in initData) {\r\n                if (memDefNames.indexOf(i) > -1) {\r\n                    var memberDef = typeMemDefs.getMember(i);\r\n                    var type = Container.resolveType(memberDef.type);\r\n                    var value = initData[i];\r\n\r\n                    if (memberDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                        this.initData[i] = value;\r\n                    } else {\r\n                        if (newInstanceOptions && newInstanceOptions.converters) {\r\n                            var converter = newInstanceOptions.converters[Container.resolveName(type)];\r\n                            if (converter)\r\n                                value = converter(value);\r\n                        }\r\n\r\n                        this.initData[i] = Container.convertTo(value, type, memberDef.elementType, newInstanceOptions);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (newInstanceOptions && newInstanceOptions.entityBuilder) {\r\n            newInstanceOptions.entityBuilder(this, thisType.memberDefinitions.asArray(), thisType);\r\n        }\r\n\r\n        this.changedProperties = undefined;\r\n        this.entityState = undefined;\r\n\r\n    },\r\n    toString: function () {\r\n        /// <summary>Returns a string that represents the current $data.Entity</summary>\r\n        /// <returns type=\"String\"/>\r\n\r\n        return this.getType().fullName + \"(\" + (this.Id || this.Name || '') + \")\"\r\n    },\r\n    toJSON: function () {\r\n        /// <summary>Creates pure JSON object from $data.Entity.</summary>\r\n        /// <returns type=\"Object\">JSON representation</returns>\r\n\r\n        var result = {};\r\n        var self = this;\r\n        this.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            if (self[memDef.name] instanceof Date && memDef.type && Container.resolveType(memDef.type) === $data.DateTimeOffset) {\r\n                result[memDef.name] = new $data.DateTimeOffset(self[memDef.name]);\r\n            } else {\r\n                result[memDef.name] = self[memDef.name];\r\n            }\r\n        });\r\n        return result;\r\n    },\r\n    equals: function (entity) {\r\n        /// <summary>Determines whether the specified $data.Entity is equal to the current $data.Entity.</summary>\r\n        /// <returns type=\"Boolean\">[b]true[/b] if the specified $data.Entity is equal to the current $data.Entity; otherwise, [b]false[/b].</returns>\r\n\r\n        if (entity.getType() !== this.getType()) {\r\n            return false;\r\n        }\r\n        var entityPk = this.getType().memberDefinitions.getKeyProperties();\r\n        for (var i = 0; i < entityPk.length; i++) {\r\n            if (this[entityPk[i].name] != entity[entityPk[i].name]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    propertyChanging: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyChanging)\r\n                this._propertyChanging = new $data.Event('propertyChanging', this);\r\n\r\n            return this._propertyChanging;\r\n        },\r\n        set: function (value) { this._propertyChanging = value; }\r\n    },\r\n\r\n    propertyChanged: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyChanged)\r\n                this._propertyChanged = new $data.Event('propertyChanged', this);\r\n\r\n            return this._propertyChanged;\r\n        },\r\n        set: function (value) { this._propertyChanged = value; }\r\n    },\r\n\r\n    propertyValidationError: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyValidationError)\r\n                this._propertyValidationError = new $data.Event('propertyValidationError', this);\r\n\r\n            return this._propertyValidationError;\r\n        },\r\n        set: function (value) { this._propertyValidationError = value; }\r\n    },\r\n\r\n    // protected\r\n    storeProperty: function (memberDefinition, value) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"value\" />\r\n\r\n        if (memberDefinition.concurrencyMode !== $data.ConcurrencyMode.Fixed) {\r\n            value = Container.convertTo(value, memberDefinition.type, memberDefinition.elementType);\r\n        }\r\n\r\n        var eventData = null;\r\n        if (memberDefinition.monitorChanges != false && (this._propertyChanging || this._propertyChanged || \"instancePropertyChanged\" in this.constructor)) {\r\n            var origValue = this[memberDefinition.name];\r\n            eventData = new PropertyChangeEventData(memberDefinition.name, origValue, value);\r\n            if (this._propertyChanging)\r\n                this.propertyChanging.fire(eventData);\r\n        }\r\n\r\n        if (memberDefinition.monitorChanges != false && (this._propertyValidationError || \"instancePropertyValidationError\" in this.constructor)) {\r\n            var errors = $data.Validation.Entity.ValidateEntityField(this, memberDefinition, value);\r\n            if (errors.length > 0) {\r\n                var origValue = this[memberDefinition.name];\r\n                var errorEventData = new PropertyValidationEventData(memberDefinition.name, origValue, value, errors);\r\n\r\n                if (this._propertyValidationError)\r\n                    this.propertyValidationError.fire(errorEventData);\r\n                if (\"instancePropertyValidationError\" in this.constructor)\r\n                    this.constructor[\"instancePropertyValidationError\"].fire(errorEventData, this);\r\n\r\n                if (errorEventData.cancel == true)\r\n                    return;\r\n            }\r\n        }\r\n\r\n        if (memberDefinition.storeOnObject == true) {\r\n            //TODO refactor to Base.getBackingFieldName\r\n            var backingFieldName = \"_\" + memberDefinition.name;\r\n            this[backingFieldName] = value;\r\n        } else {\r\n            this.initData[memberDefinition.name] = value;\r\n        }\r\n        this.isValidated = false;\r\n\r\n        if (memberDefinition.monitorChanges != false && this.entityState == $data.EntityState.Unchanged)\r\n            this.entityState = $data.EntityState.Modified;\r\n\r\n        this._setPropertyChanged(memberDefinition);\r\n\r\n        if (memberDefinition.monitorChanges != false) {\r\n            //if (!this.changedProperties) {\r\n            //    this.changedProperties = [];\r\n            //}\r\n\r\n            //if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\r\n            //    this.changedProperties.push(memberDefinition);\r\n\r\n            if (this._propertyChanged)\r\n                this.propertyChanged.fire(eventData);\r\n\r\n            //TODO mixin framework\r\n            if (\"instancePropertyChanged\" in this.constructor) {\r\n                this.constructor[\"instancePropertyChanged\"].fire(eventData, this);\r\n            }\r\n        }\r\n    },\r\n    _setPropertyChanged: function (memberDefinition) {\r\n        if (memberDefinition.monitorChanges != false && memberDefinition.name != \"ValidationErrors\") {\r\n            if (!this.changedProperties) {\r\n                this.changedProperties = [];\r\n            }\r\n\r\n            if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\r\n                this.changedProperties.push(memberDefinition);\r\n        }\r\n    },\r\n\r\n    // protected\r\n    retrieveProperty: function (memberDefinition) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n\r\n        if (memberDefinition.storeOnObject == true) {\r\n            //TODO refactor to Base.getBackingFieldName\r\n            var backingFieldName = \"_\" + memberDefinition.name;\r\n            return this[backingFieldName];\r\n        } else {\r\n            return this.initData[memberDefinition.name];\r\n        }\r\n    },\r\n\r\n    // protected\r\n    getProperty: function (memberDefinition, callback, tran) {\r\n        /// <summary>Retrieve value of member</summary>\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"callback\" type=\"Function\">\r\n        ///     <signature>\r\n        ///         <param name=\"value\" />\r\n        ///     </signature>\r\n        /// </param>\r\n        /// <returns>value associated for [i]memberDefinition[/i]</returns>\r\n\r\n        callback = $data.typeSystem.createCallbackSetting(callback);\r\n        if (this[memberDefinition.name] != undefined) {\r\n            if (tran instanceof $data.Transaction)\r\n                callback.success(this[memberDefinition.name], tran);\r\n            else\r\n                callback.success(this[memberDefinition.name]);\r\n            return;\r\n        }\r\n\r\n        var context = this.context;\r\n        if (!this.context) {\r\n            try {\r\n                var that = this;\r\n                var storeToken = this.storeToken || this.getType().storeToken;\r\n                if (storeToken && typeof storeToken.factory === 'function') {\r\n                    var ctx = storeToken.factory();\r\n                    return ctx.onReady().then(function (context) {\r\n                        return context.loadItemProperty(that, memberDefinition, callback);\r\n                    });\r\n                }\r\n            } catch (e) { }\r\n\r\n            Guard.raise(new Exception('Entity not in context', 'Invalid operation'));\r\n        } else {\r\n            return context.loadItemProperty(this, memberDefinition, callback, tran);\r\n        }\r\n    },\r\n    // protected\r\n    setProperty: function (memberDefinition, value, callback, tran) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"value\" />\r\n        /// <param name=\"callback\" type=\"Function\">done</param>\r\n        this[memberDefinition.name] = value;\r\n\r\n        //callback = $data.typeSystem.createCallbackSetting(callback);\r\n        var pHandler = new $data.PromiseHandler();\r\n        callback = pHandler.createCallback(callback);\r\n        callback.success(this[memberDefinition.name]);\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    isValid: function () {\r\n        /// <summary>Determines the current $data.Entity is validated and valid.</summary>\r\n        /// <returns type=\"Boolean\" />\r\n\r\n        if (!this.isValidated) {\r\n            this.ValidationErrors = $data.Validation.Entity.ValidateEntity(this);\r\n            this.isValidated = true;\r\n        }\r\n        return this.ValidationErrors.length == 0;\r\n    },\r\n    isValidated: { dataType: \"bool\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, value: false },\r\n    ValidationErrors: {\r\n        dataType: Array,\r\n        elementType: $data.Validation.ValidationError,\r\n        storeOnObject: true,\r\n        monitorChanges: true,\r\n        notMapped: true,\r\n        enumerable: false\r\n    },\r\n\r\n    resetChanges: function () {\r\n        /// <summary>reset changes</summary>\r\n\r\n        delete this._changedProperties;\r\n    },\r\n\r\n    changedProperties: {\r\n        dataType: Array,\r\n        elementType: MemberDefinition,\r\n        storeOnObject: true,\r\n        monitorChanges: false,\r\n        notMapped: true,\r\n        enumerable: false\r\n    },\r\n\r\n    entityState: { dataType: \"integer\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false },\r\n    /*\r\n    toJSON: function () {\r\n        if (this.context) {\r\n            var itemType = this.getType();\r\n            var storageModel = this.context._storageModel[itemType.name];\r\n            var o = new Object();\r\n            for (var property in this) {\r\n                if (typeof this[property] !== \"function\") {\r\n                    var excludedFields = storageModel.Associations.every(function (association) {\r\n                        return association.FromPropertyName == property && (association.FromMultiplicity == \"0..1\" || association.FromMultiplicity == \"1\");\r\n                    }, this);\r\n                    if (!excludedFields) {\r\n                        o[property] = this[property];\r\n                    }\r\n                }\r\n            }\r\n            return o;\r\n        }\r\n        return this;\r\n    }   */\r\n    //,\r\n\r\n    //onReady: function (callback) {\r\n    //    this.__onReadyList = this.__onReadyList || [];\r\n    //    this.__onReadyList.push(callback);\r\n    //},\r\n\r\n    remove: function () {\r\n        if ($data.ItemStore && 'EntityInstanceRemove' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceRemove.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    save: function () {\r\n        if ($data.ItemStore && 'EntityInstanceSave' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceSave.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    refresh: function () {\r\n        if ($data.ItemStore && 'EntityInstanceRefresh' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceRefresh.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    storeToken: { type: Object, monitorChanges: false, notMapped: true, storeOnObject: true },\r\n\r\n    getFieldUrl: function (field) {\r\n        if (this.context) {\r\n            return this.context.getFieldUrl(this, field);\r\n        } else if (this.getType().storeToken && typeof this.getType().storeToken.factory === 'function') {\r\n            var context = this.getType().storeToken.factory();\r\n            return context.getFieldUrl(this, field);\r\n        } else if (this.getType().storeToken){\r\n            try {\r\n                var ctx = $data.ItemStore._getContextPromise('default', this.getType());\r\n                if (ctx instanceof $data.EntityContext) {\r\n                    return ctx.getFieldUrl(this, field);\r\n                }\r\n            } catch (e) {\r\n            }\r\n        }\r\n        return '#';\r\n    }\r\n},\r\n{\r\n    //create get_[property] and set_[property] functions for properties\r\n    __setPropertyfunctions: { value: true, notMapped: true, enumerable: false, storeOnObject: true },\r\n    //copy public properties to current instance\r\n    __copyPropertiesToInstance: { value: false, notMapped: true, enumerable: false, storeOnObject: true },\r\n\r\n    inheritedTypeProcessor: function (type) {\r\n        if ($data.ItemStore && 'EntityInheritedTypeProcessor' in $data.ItemStore)\r\n            $data.ItemStore.EntityInheritedTypeProcessor.apply(this, arguments);\r\n\r\n        //default value setter method factory\r\n        type.defaultValues = {};\r\n\r\n        type.memberDefinitions.asArray().forEach(function (pd) {\r\n            if (pd.hasOwnProperty(\"defaultValue\")) {\r\n                type.defaultValues[pd.name] = pd.defaultValue;\r\n            }\r\n        });\r\n\r\n        if (Object.keys(type.defaultValues).length > 0) {\r\n            type.setDefaultValues = function (initData, instance) {\r\n                initData = initData || {};\r\n                var dv = type.defaultValues;\r\n                for (var n in dv) {\r\n                    if (!(n in initData)) {\r\n                        var value = dv[n];\r\n                        if (\"function\" === typeof value) {\r\n                            initData[n] = dv[n](n, instance);\r\n                        } else {\r\n                            initData[n] = dv[n];\r\n                        }\r\n                    }\r\n                }\r\n                return initData;\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    //Type Events\r\n    addEventListener: function(eventName, fn) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            this[delegateName] = new $data.Event(eventName, this);\r\n        }\r\n        this[delegateName].attach(fn);\r\n    },\r\n    removeEventListener: function(eventName, fn) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            return;\r\n        }\r\n        this[delegateName].detach(fn);\r\n    },\r\n    raiseEvent: function(eventName, data) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            return;\r\n        }\r\n        this[delegateName].fire(data);\r\n    },\r\n\r\n    getFieldNames: function () {\r\n        return this.memberDefinitions.getPublicMappedPropertyNames();\r\n    },\r\n\r\n    'from$data.Object': function (value, type, t, options) {\r\n        if (!Object.isNullOrUndefined(value)) {\r\n            var newInstanceOptions;\r\n            if (options && options.converters) {\r\n                newInstanceOptions = {\r\n                    converters: options.converters\r\n                }\r\n            }\r\n\r\n            return new this(value, newInstanceOptions);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n\r\n$data.define = function (name, container, definition) {\r\n    if (container && !(container instanceof $data.ContainerClass)) {\r\n        definition = container;\r\n        container = undefined;\r\n    }\r\n    if (!definition) {\r\n        throw new Error(\"json object type is not supported yet\");\r\n    }\r\n    var _def = {};\r\n    var hasKey = false;\r\n    var keyFields = [];\r\n    Object.keys(definition).forEach(function (fieldName) {\r\n        var propDef = definition[fieldName];\r\n        if (typeof propDef === 'object' && (\"type\" in propDef || \"get\" in propDef || \"set\" in propDef)) {\r\n\r\n            _def[fieldName] = propDef;\r\n            if (propDef.key) {\r\n                keyFields.push(propDef);\r\n            }\r\n\r\n            if ((\"get\" in propDef || \"set\" in propDef) && (!('notMapped' in propDef) || propDef.notMapped === true)) {\r\n                propDef.notMapped = true;\r\n                propDef.storeOnObject = true;\r\n            }\r\n            if (\"get\" in propDef && !(\"set\" in propDef)) {\r\n                propDef.set = function () { };\r\n            } else if (\"set\" in propDef && !(\"get\" in propDef)) {\r\n                propDef.get = function () { };\r\n            }\r\n\r\n        } else {\r\n            _def[fieldName] = { type: propDef };\r\n        }\r\n    });\r\n\r\n    if (keyFields.length < 1) {\r\n        var keyProp;\r\n        switch (true) {\r\n            case \"id\" in _def:\r\n                keyProp = \"id\";\r\n                break;\r\n            case \"Id\" in _def:\r\n                keyProp = \"Id\"\r\n                break;\r\n            case \"ID\" in _def:\r\n                keyProp = \"ID\"\r\n                break;\r\n        }\r\n        if (keyProp) {\r\n            _def[keyProp].key = true;\r\n            var propTypeName = $data.Container.resolveName(_def[keyProp].type);\r\n            _def[keyProp].computed = true;\r\n            //if (\"$data.Number\" === propTypeName || \"$data.Integer\" === propTypeName) {\r\n            //}\r\n        } else {\r\n            _def.Id = { type: \"int\", key: true, computed: true }\r\n        }\r\n    }\r\n\r\n\r\n    var entityType = $data.Entity.extend(name, container, _def);\r\n    return entityType;\r\n}\r\n$data.implementation = function (name) {\r\n    return Container.resolveType(name);\r\n};\r\n\r\nexport var Event = $data.Event\r\nexport var Entity = $data.Entity\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.EntityAttachMode\", null, null, {}, {\r\n    defaultMode: 'Default',\r\n    AllChanged: function (data) {\r\n        var memDefs = data.getType().memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < memDefs.length; i++) {\r\n            data._setPropertyChanged(memDefs[i]);\r\n        }\r\n        data.entityState = $data.EntityState.Modified;\r\n    },\r\n    KeepChanges: function (data) {\r\n        if (data.changedProperties && data.changedProperties.length > 0) {\r\n            data.entityState = $data.EntityState.Modified;\r\n        } else {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n        }\r\n    },\r\n    Default: function (data) {\r\n        data.entityState = $data.EntityState.Unchanged;\r\n        data.changedProperties = undefined;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n(function () {\r\n\r\n    $data.defaults = $data.defaults || {};\r\n    $data.defaults.defaultDatabaseName = 'JayDataDefault';\r\n    $data.defaults.enableRelatedEntityReadMethods = true;\r\n    $data.defaults.relatedEntityReadMethodPrefix = 'get';\r\n    $data.defaults.relatedEntityProxyPrefix = '$relatedProxy';\r\n\r\n})();\r\n\r\n\r\n$data.Class.define('$data.StorageModel', null, null, {\r\n    constructor: function () {\r\n        ///<field name=\"LogicalType\" type=\"$data.Entity\">User defined type</field>\r\n        this.ComplexTypes = [];\r\n        this.Enums = [];\r\n        this.Associations = [];\r\n    },\r\n    LogicalType: {},\r\n    LogicalTypeName: {},\r\n    PhysicalType: {},\r\n    PhysicalTypeName: {},\r\n    EventHandlers: {},\r\n    TableName: {},\r\n    TableOptions: { value: undefined },\r\n    ComplexTypes: {},\r\n    Enums: {},\r\n    Associations: {},\r\n    ContextType: {},\r\n    Roles: {}\r\n}, null);\r\n$data.Class.define('$data.Association', null, null, {\r\n    constructor: function (initParam) {\r\n        if (initParam) {\r\n            this.From = initParam.From;\r\n            this.FromType = initParam.FromType;\r\n            this.FromMultiplicity = initParam.FromMultiplicity;\r\n            this.FromPropertyName = initParam.FromPropertyName;\r\n            this.To = initParam.To;\r\n            this.ToType = initParam.ToType;\r\n            this.ToMultiplicity = initParam.ToMultiplicity;\r\n            this.ToPropertyName = initParam.ToPropertyName;\r\n        }\r\n    },\r\n    From: {},\r\n    FromType: {},\r\n    FromMultiplicity: {},\r\n    FromPropertyName: {},\r\n    To: {},\r\n    ToType: {},\r\n    ToMultiplicity: {},\r\n    ToPropertyName: {},\r\n    ReferentialConstraint: {}\r\n}, null);\r\n$data.Class.define('$data.ComplexType', $data.Association, null, {}, null);\r\n\r\n/**\r\n * @public\r\n * @module $data.EntityContext\r\n */\r\n/**\r\n* Provides facilities for querying and working with entity data as objects\r\n*/\r\n$data.Class.define('$data.EntityContext', null, null,\r\n{\r\n    /**\r\n     * @constructs $data.EntityContext\r\n     * Provides facilities for querying and working with entity data as objects\r\n     * @param {Object} storageProviderCfg - Storage provider specific configuration object\r\n     * @param {string} storageProviderCfg.provider - Storage provider type name: 'oData', 'indexedDb', 'webSql', 'sqLite', 'mongoDB'\r\n     * @param {string} [storageProviderCfg.oDataServiceHost=/odata.svc] - URI of OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.maxDataServiceVersion=4.0] - Maximal OData version. Provider: OData\r\n     * @param {string} [storageProviderCfg.dataServiceVersion] - version of your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.user] - login name for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.password] - password for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.UpdateMethod=PATCH] - HTTP verb used while updating entities, this should be configured according the accepted verb by your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.databaseName] - database name created by the following providers: webSql, sqLite, indexedDb, mongoDB\r\n     * @example <caption>initialize OData context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'oData',\r\n     *  oDataServiceHost: '/api/odata.svc'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     *\r\n     * @example <caption>initialize webSql context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'webSql',\r\n     *  databaseName: 'Northwind'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     */\r\n    constructor: function (storageProviderCfg) {\r\n        if ($data.ItemStore && 'ContextRegister' in $data.ItemStore)\r\n            $data.ItemStore.ContextRegister.apply(this, arguments);\r\n\r\n        if (storageProviderCfg.queryCache)\r\n            this.queryCache = storageProviderCfg.queryCache;\r\n\r\n        if (\"string\" === typeof storageProviderCfg) {\r\n            if (0 === storageProviderCfg.indexOf(\"http\")) {\r\n                storageProviderCfg = {\r\n                    name: \"oData\",\r\n                    oDataServiceHost: storageProviderCfg\r\n                }\r\n            } else {\r\n                storageProviderCfg = {\r\n                    name: \"local\",\r\n                    databaseName: storageProviderCfg\r\n                }\r\n            }\r\n        }\r\n\r\n        if (\"provider\" in storageProviderCfg) {\r\n            storageProviderCfg.name = storageProviderCfg.provider;\r\n        }\r\n\r\n        //Initialize properties\r\n        this.lazyLoad = false;\r\n        this.trackChanges = false;\r\n        this._entitySetReferences = {};\r\n        this._storageModel = [];\r\n\r\n        var ctx = this;\r\n        ctx._isOK = false;\r\n\r\n        var origSuccessInitProvider = this._successInitProvider;\r\n        this._successInitProvider = function (errorOrContext) {\r\n            if (errorOrContext instanceof $data.EntityContext) {\r\n                origSuccessInitProvider(ctx);\r\n            } else {\r\n                origSuccessInitProvider(ctx, errorOrContext);\r\n            }\r\n        }\r\n\r\n        this._storageModel.getStorageModel = function (typeName) {\r\n            var name = Container.resolveName(typeName);\r\n            return ctx._storageModel[name];\r\n        };\r\n        if (typeof storageProviderCfg.name === 'string') {\r\n            var tmp = storageProviderCfg.name;\r\n            storageProviderCfg.name = [tmp];\r\n        }\r\n        var i = 0, providerType;\r\n        var providerList = [].concat(storageProviderCfg.name);\r\n        var callBack = $data.typeSystem.createCallbackSetting({ success: this._successInitProvider, error: this._successInitProvider });\r\n\r\n        this._initStorageModelSync();\r\n        ctx._initializeEntitySets(ctx.getType());\r\n\r\n        $data.StorageProviderLoader.load(providerList, {\r\n            success: function (providerType) {\r\n                ctx.storageProvider = new providerType(storageProviderCfg, ctx);\r\n                ctx.storageProvider.setContext(ctx);\r\n                ctx.stateManager = new $data.EntityStateManager(ctx);\r\n\r\n                var contextType = ctx.getType();\r\n                if (providerType.name in contextType._storageModelCache) {\r\n                    ctx._storageModel = contextType._storageModelCache[providerType.name];\r\n                } else {\r\n                    $data.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToTypes();\r\n                    ctx._initializeStorageModel();\r\n                    contextType._storageModelCache[providerType.name] = ctx._storageModel;\r\n                }\r\n                $data.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToContext();\r\n\r\n                //ctx._initializeEntitySets(contextType);\r\n                if (storageProviderCfg && storageProviderCfg.user) Object.defineProperty(ctx, 'user', { value: storageProviderCfg.user, enumerable: true });\r\n                if (storageProviderCfg && storageProviderCfg.checkPermission) Object.defineProperty(ctx, 'checkPermission', { value: storageProviderCfg.checkPermission, enumerable: true });\r\n\r\n                //ctx._isOK = false;\r\n                ctx._initializeStore(callBack);\r\n            },\r\n            error: function () {\r\n                callBack.error('Provider fallback failed!');\r\n            }\r\n        });\r\n\r\n\r\n\r\n        this.addEventListener = function (eventName, fn) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                this[delegateName] = new $data.Event(eventName, this);\r\n            }\r\n            this[delegateName].attach(fn);\r\n        };\r\n\r\n        this.removeEventListener = function (eventName, fn) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                return;\r\n            }\r\n            this[delegateName].detach(fn);\r\n        };\r\n\r\n        this.raiseEvent = function (eventName, data) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                return;\r\n            }\r\n            this[delegateName].fire(data);\r\n        };\r\n\r\n\r\n        this.ready = this.onReady({\r\n            success: $data.defaultSuccessCallback,\r\n            error: function () {\r\n                if ($data.PromiseHandler !== $data.PromiseHandlerBase) {\r\n                    $data.defaultErrorCallback.apply(this, arguments);\r\n                } else {\r\n                    $data.Trace.error(arguments);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    beginTransaction: function () {\r\n        var tables = null;\r\n        var callBack = null;\r\n        var isWrite = false;\r\n\r\n        function readParam(value) {\r\n            if (Object.isNullOrUndefined(value)) return;\r\n\r\n            if (typeof value === 'boolean') {\r\n                isWrite = value;\r\n            } else if (Array.isArray(value)) {\r\n                tables = value;\r\n            } else {\r\n                callBack = value;\r\n            }\r\n        }\r\n\r\n        readParam(arguments[0]);\r\n        readParam(arguments[1]);\r\n        readParam(arguments[2]);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        callBack = pHandler.createCallback(callBack);\r\n\r\n        //callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n        this.storageProvider._beginTran(tables, isWrite, callBack);\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    _isReturnTransaction: function (transaction) {\r\n        return transaction instanceof $data.Base || transaction === 'returnTransaction';\r\n    },\r\n    _applyTransaction: function (scope, cb, args, transaction, isReturnTransaction) {\r\n        if (isReturnTransaction === true) {\r\n            if (transaction instanceof $data.Transaction) {\r\n                Array.prototype.push.call(args, transaction);\r\n                cb.apply(scope, args);\r\n            } else {\r\n                this.beginTransaction(function (tran) {\r\n                    Array.prototype.push.call(args, tran);\r\n                    cb.apply(scope, args);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            cb.apply(scope, args);\r\n        }\r\n    },\r\n\r\n    getDataType: function (dataType) {\r\n        // Obsolate\r\n        if (typeof dataType == \"string\") {\r\n            var memDef_dataType = this[dataType];\r\n            if (memDef_dataType === undefined || memDef_dataType === null) { memDef_dataType = eval(dataType); }\r\n            return memDef_dataType;\r\n        }\r\n        return dataType;\r\n    },\r\n    _initializeEntitySets: function (ctor) {\r\n\r\n        for (var i = 0, l = this._storageModel.length; i < l; i++){\r\n            var storageModel = this._storageModel[i];\r\n            this[storageModel.ItemName] = new $data.EntitySet(storageModel.LogicalType, this, storageModel.ItemName, storageModel.EventHandlers, storageModel.Roles);\r\n            var sm = this[storageModel.ItemName];\r\n            sm.name = storageModel.ItemName;\r\n            sm.tableName = storageModel.TableName;\r\n            sm.tableOptions = storageModel.TableOptions;\r\n            sm.eventHandlers = storageModel.EventHandlers;\r\n            this._entitySetReferences[storageModel.LogicalType.name] = sm;\r\n\r\n            this._initializeActions(sm, ctor, ctor.getMemberDefinition(storageModel.ItemName));\r\n\r\n        }\r\n\r\n    },\r\n    _initializeStore: function (callBack) {\r\n        if (this.storageProvider) {\r\n            this.storageProvider.initializeStore(callBack);\r\n        }\r\n    },\r\n\r\n    _initStorageModelSync: function() {\r\n        var _memDefArray = this.getType().memberDefinitions.asArray();\r\n\r\n\r\n        for (var i = 0; i < _memDefArray.length; i++) {\r\n            var item = _memDefArray[i];\r\n            if ('dataType' in item) {\r\n                var itemResolvedDataType = Container.resolveType(item.dataType);\r\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(item.elementType);\r\n                    var storageModel = new $data.StorageModel();\r\n                    storageModel.TableName = item.tableName || item.name;\r\n                    storageModel.TableOptions = item.tableOptions;\r\n                    storageModel.ItemName = item.name;\r\n                    storageModel.LogicalType = elementType;\r\n                    storageModel.LogicalTypeName = elementType.name;\r\n                    storageModel.PhysicalTypeName = $data.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\r\n                    storageModel.ContextType = this.getType();\r\n                    storageModel.Roles = item.roles;\r\n\t\t    if (item.indices) {\r\n                        storageModel.indices = item.indices;\r\n                    }\r\n                    if (item.beforeCreate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeCreate = item.beforeCreate;\r\n                    }\r\n                    if (item.beforeRead) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeRead = item.beforeRead;\r\n                    }\r\n                    if (item.beforeUpdate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeUpdate = item.beforeUpdate;\r\n                    }\r\n                    if (item.beforeDelete) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeDelete = item.beforeDelete;\r\n                    }\r\n                    if (item.afterCreate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterCreate = item.afterCreate;\r\n                    }\r\n                    if (item.afterRead) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterRead = item.afterRead;\r\n                    }\r\n                    if (item.afterUpdate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterUpdate = item.afterUpdate;\r\n                    }\r\n                    if (item.afterDelete) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterDelete = item.afterDelete;\r\n                    }\r\n                    this._storageModel.push(storageModel);\r\n                    var name = Container.resolveName(elementType);\r\n                    this._storageModel[name] = storageModel;\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    _initializeStorageModel: function () {\r\n\r\n\r\n        var _memDefArray = this.getType().memberDefinitions.asArray();\r\n\r\n\r\n        if (typeof intellisense !== 'undefined')\r\n            return;\r\n\r\n\r\n        for (var i = 0; i < this._storageModel.length; i++) {\r\n            var storageModel = this._storageModel[i];\r\n\r\n            ///<param name=\"storageModel\" type=\"$data.StorageModel\">Storage model item</param>\r\n            var dbEntityInstanceDefinition = {};\r\n\r\n            storageModel.Associations = storageModel.Associations || [];\r\n            storageModel.ComplexTypes = storageModel.ComplexTypes || [];\r\n            storageModel.Enums = storageModel.Enums || [];\r\n            for (var j = 0; j < storageModel.LogicalType.memberDefinitions.getPublicMappedProperties().length; j++) {\r\n                var memDef = storageModel.LogicalType.memberDefinitions.getPublicMappedProperties()[j];\r\n                ///<param name=\"memDef\" type=\"MemberDefinition\">Member definition instance</param>\r\n\r\n                var memDefResolvedDataType = Container.resolveType(memDef.dataType);\r\n\r\n                if (((this.storageProvider.supportedDataTypes.indexOf(memDefResolvedDataType) > -1) || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.Enum))) \r\n                    && Object.isNullOrUndefined(memDef.inverseProperty)) \r\n                {\r\n                    //copy member definition\r\n                    var t = JSON.parse(JSON.stringify(memDef));\r\n                    //change datatype to resolved type\r\n                    t.dataType = memDefResolvedDataType;\r\n                    dbEntityInstanceDefinition[memDef.name] = t;\r\n                    \r\n                    if(memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.Enum)){\r\n                         this._build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef)\r\n                    }\r\n                    \r\n                    continue;\r\n                }\r\n\r\n                this._buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel);\r\n\r\n                //var memDef_dataType = this.getDataType(memDef.dataType);\r\n                if ((memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) &&\r\n                    (memDef.inverseProperty && memDef.inverseProperty !== '$$unbound')) {\r\n                    this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                } else {\r\n                    if (memDef.inverseProperty) {\r\n                        if (memDef.inverseProperty === '$$unbound') {\r\n                            //member definition is navigation but not back reference\r\n                            if (memDefResolvedDataType === $data.Array) {\r\n                                this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                            } else {\r\n                                this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                            }\r\n                        } else {\r\n                            //member definition is navigation property one..one or one..many case\r\n                            var fields = memDefResolvedDataType.memberDefinitions.getMember(memDef.inverseProperty);\r\n                            if (fields) {\r\n                                if (fields.elementType) {\r\n                                    //member definition is one..many connection\r\n                                    var referealResolvedType = Container.resolveType(fields.elementType);\r\n                                    if (referealResolvedType === storageModel.LogicalType) {\r\n                                        this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                                    } else {\r\n                                        if (typeof intellisense === 'undefined') {\r\n                                            Guard.raise(new Exception('Inverse property not valid, refereed item element type not match: ' + storageModel.LogicalTypeName, ', property: ' + memDef.name));\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    //member definition is one..one connection\r\n                                    this._buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                                }\r\n                            } else {\r\n                                if (typeof intellisense === 'undefined') {\r\n                                    Guard.raise(new Exception('Inverse property not valid'));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //member definition is a complex type\r\n                        this._buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                    }\r\n                }\r\n            }\r\n            this._buildDbType_modifyInstanceDefinition(dbEntityInstanceDefinition, storageModel, this);\r\n            var dbEntityClassDefinition = {};\r\n            dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\r\n            this._buildDbType_modifyClassDefinition(dbEntityClassDefinition, storageModel, this);\r\n\r\n            //create physical type\r\n            //TODO\r\n            storageModel.PhysicalType = $data.Class.define(storageModel.PhysicalTypeName, $data.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\r\n        }\r\n    },\r\n    _initializeActions: function (es, ctor, esDef) {\r\n        if (esDef && esDef.actions) {\r\n            var actionKeys = Object.keys(esDef.actions);\r\n            for (var i = 0; i < actionKeys.length; i++) {\r\n                var actionName = actionKeys[i];\r\n                var action = esDef.actions[actionName];\r\n                if (typeof action === 'function') {\r\n                    es[actionName] = action;\r\n                } else {\r\n                    var actionDef = $data.MemberDefinition.translateDefinition(action, actionName, ctor);\r\n                    if (actionDef instanceof $data.MemberDefinition && actionDef.kind === $data.MemberTypes.method) {\r\n                        es[actionName] = actionDef.method;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _buildDbType_navigationPropertyComplite: function (memDef, memDefResolvedDataType, storageModel) {\r\n        if (!memDef.inverseProperty) {\r\n            var refMemDefs = null;\r\n            if (memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) {\r\n                var refStorageModel = this._storageModel.getStorageModel(Container.resolveType(memDef.elementType));\r\n                if (refStorageModel) {\r\n                    refMemDefs = [];\r\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < pubDefs.length; i++) {\r\n                        var m = pubDefs[i];\r\n                        if ((m.inverseProperty == memDef.name) && (Container.resolveType(m.dataType) === Container.resolveType(storageModel.LogicalType)))\r\n                            refMemDefs.push(m);\r\n                    }\r\n                }\r\n            } else {\r\n                var refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\r\n                if (refStorageModel) {\r\n                    refMemDefs = [];\r\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < pubDefs.length; i++) {\r\n                        var m = pubDefs[i];\r\n                        if (m.elementType && ((m.inverseProperty == memDef.name) && (Container.resolveType(m.elementType) === storageModel.LogicalType)))\r\n                            refMemDefs.push(m);\r\n                        else if ((m.inverseProperty == memDef.name) && (Container.resolveType(m.dataType) === storageModel.LogicalType))\r\n                            refMemDefs.push(m);\r\n                    }\r\n                }\r\n            }\r\n            if (refMemDefs) {\r\n                if (refMemDefs.length > 1) {\r\n                    if (typeof intellisense !== 'undefined') {\r\n                        Guard.raise(new Exception('More than one inverse property refer to this member definition: ' + memDef.name + ', type: ' + Container.resolveName(storageModel.LogicalType)));\r\n                    }\r\n                }\r\n                var refMemDef = refMemDefs.pop();\r\n                if (refMemDef) {\r\n                    memDef.inverseProperty = refMemDef.name;\r\n                }\r\n            }\r\n        } else {\r\n            var refStorageModel = null;\r\n            if (memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) {\r\n                refStorageModel = this._storageModel.getStorageModel(Container.resolveType(memDef.elementType));\r\n\r\n            } else {\r\n                refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\r\n            }\r\n\r\n            var p = refStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\r\n            if (p) {\r\n                if (p.inverseProperty) {\r\n                    if (p.inverseProperty != memDef.name) {\r\n                        if (typeof intellisense === 'undefined') {\r\n                            Guard.raise(new Exception('Inverse property mismatch'));\r\n                        }\r\n                    }\r\n                } else {\r\n                    p.inverseProperty = memDef.name;\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    _buildDbType_generateConvertToFunction: function (storageModel) { return function (instance) { return instance; }; },\r\n    _buildDbType_modifyInstanceDefinition: function (instanceDefinition, storageModel) { return; },\r\n    _buildDbType_modifyClassDefinition: function (classDefinition, storageModel) { return; },\r\n    _buildDbType_addComplexTypePropertyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name, $data.MemberTypes.complexProperty);\r\n        var complexType = this._createComplexElement(storageModel.LogicalType, \"\", memDef.name, memDef_dataType, \"\", \"\");\r\n        storageModel.ComplexTypes[memDef.name] = complexType;\r\n        storageModel.ComplexTypes.push(complexType);\r\n    },\r\n    _buildDbType_Collection_OneManyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.elementType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '0..1';\r\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"*\", memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _buildDbType_ElementType_OneManyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.dataType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '*';\r\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"0..1\", memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _buildDbType_ElementType_OneOneDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.dataType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);;\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        var refereedMemberDefinition = refereedStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\r\n        if (!refereedMemberDefinition.required && !memDef.required) { if (typeof intellisense === 'undefined') { if (typeof intellisense === 'undefined') { Guard.raise(new Exception('In one to one connection, one side must required!', 'One to One connection', memDef)); } } }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n\r\n        var association = this._addAssociationElement(storageModel.LogicalType,\r\n                                                 memDef.required ? \"0..1\" : \"1\",\r\n                                                 memDef.name,\r\n                                                 refereedStorageModel.LogicalType,\r\n                                                 memDef.required ? \"1\" : \"0..1\",\r\n                                                 memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _addNavigationPropertyDefinition: function (definition, member, associationName, kind) {\r\n        var t = JSON.parse(JSON.stringify(member));\r\n        t.dataType = $data.EntitySet;\r\n        t.notMapped = true;\r\n        t.kind = kind ? kind : $data.MemberTypes.navProperty;\r\n        t.association = associationName;\r\n        definition[member.name] = t;\r\n    },\r\n    _addAssociationElement: function (fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\r\n        return new $data.Association({\r\n            From: fromType.name,\r\n            FromType: fromType,\r\n            FromMultiplicity: fromMultiplicity,\r\n            FromPropertyName: fromPropName,\r\n            To: toType.name,\r\n            ToType: toType,\r\n            ToMultiplicity: toMultiplicity,\r\n            ReferentialConstraint: [],\r\n            ToPropertyName: toPropName\r\n        });\r\n    },\r\n    _createComplexElement: function (fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\r\n        return new $data.ComplexType({\r\n            From: fromType.name,\r\n            FromType: fromType,\r\n            FromMultiplicity: fromMultiplicity,\r\n            FromPropertyName: fromPropName,\r\n            To: toType.name,\r\n            ToType: toType,\r\n            ToMultiplicity: toMultiplicity,\r\n            ReferentialConstraint: [],\r\n            ToPropertyName: toPropName\r\n        });\r\n    },\r\n    _build_EnumDefinition: function (dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef) {\r\n        storageModel.Enums.push(memDefResolvedDataType);\r\n        \r\n        var typeName = Container.resolveName(memDefResolvedDataType);\r\n        var converterGroups = this.storageProvider.fieldConverter;\r\n        \r\n        var createEnumConverter = function(converterGroup){\r\n            converterGroup[typeName] = function(value){\r\n                return converterGroup[\"$data.Enum\"].call(this, value, memDefResolvedDataType);\r\n            }\r\n        }\r\n        \r\n        for (var i in converterGroups) {\r\n            if (!converterGroups[i][typeName] && converterGroups[i][\"$data.Enum\"]) {\r\n                createEnumConverter(converterGroups[i])\r\n            }\r\n        }\r\n    },\r\n\r\n    _successInitProvider: function (context, error) {\r\n        if (context instanceof $data.EntityContext && context._isOK !== undefined) {\r\n            if (!error) {\r\n                context._isOK = true;\r\n                if (context.onReadyFunction) {\r\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\r\n                        context.onReadyFunction[i].success(context);\r\n                    }\r\n                    context.onReadyFunction = undefined;\r\n                }\r\n            } else {\r\n                context._isOK = error;\r\n                if (context.onReadyFunction) {\r\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\r\n                        context.onReadyFunction[i].error(error);\r\n                    }\r\n                    context.onReadyFunction = undefined;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Sets the callback function to be called when the initialization of the {@link $data.EntityContext} has successfully finished.\r\n     * @event $data.EntityContext#onReady\r\n     * @param {function|function[]} fn - Success callback\r\n     * @returns {$.Deferred}\r\n     */\r\n    onReady: function (fn) {\r\n        /// <signature>\r\n        ///     <summary>\r\n        ///\r\n        ///     </summary>\r\n        ///     <param name=\"successCallback\" type=\"Function\">\r\n        ///         <summary>Success callback</summary>\r\n        ///         <param name=\"entityContext\" type=\"$data.EntityContext\">Current entityContext object</param>\r\n        ///     </param>\r\n        ///     <returns type=\"\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>\r\n        ///         Sets the callback functions to be called when the initialization of the EntityContext has finished.\r\n        ///     </summary>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        var pHandler = new $data.PromiseHandler();\r\n        var callBack = pHandler.createCallback(fn);\r\n        if (this._isOK === true) {\r\n            callBack.success(this);\r\n        } else if (this._isOK !== false) {\r\n            callBack.error(this._isOK);\r\n        } else {\r\n            this.onReadyFunction = this.onReadyFunction || [];\r\n            this.onReadyFunction.push(callBack);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    ready: { type: $data.Promise },\r\n    getEntitySetFromElementType: function (elementType) {\r\n        /// <signature>\r\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\r\n        ///     <param name=\"elementType\" type=\"Function\" />\r\n        ///     <returns type=\"$data.EntitySet\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\r\n        ///     <param name=\"elementType\" type=\"String\" />\r\n        ///     <returns type=\"$data.EntitySet\" />\r\n        /// </signature>\r\n        var result = this._entitySetReferences[elementType];\r\n        if (!result) {\r\n            try {\r\n                result = this._entitySetReferences[eval(elementType).name];\r\n            } catch (ex) { }\r\n        }\r\n        return result;\r\n    },\r\n    executeQuery: function (queryable, callBack, transaction) {\r\n        var query = new $data.Query(queryable.expression, queryable.defaultType, this);\r\n        query.transaction = transaction instanceof $data.Transaction ? transaction : undefined;\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n        var that = this;\r\n        var clbWrapper = {};\r\n        clbWrapper.success = that.executeQuerySuccess(that, returnTransaction, callBack);\r\n        clbWrapper.error = that.executeQueryError(that, returnTransaction, callBack);\r\n\r\n        var sets = query.getEntitySets();\r\n\r\n        var authorizedFn = function () {\r\n            var ex = true;\r\n            var wait = false;\r\n            var ctx = that;\r\n\r\n            var readyFn = function (cancel) {\r\n                if (cancel === false) ex = false;\r\n\r\n                if (ex) {\r\n                    if (query.transaction) {\r\n                        if ($data.QueryCache && $data.QueryCache.isInCache(that, query)) {\r\n                            $data.QueryCache.executeQuery(that, query, clbWrapper);\r\n                        } else {\r\n                            ctx.storageProvider.executeQuery(query, clbWrapper);\r\n                        }\r\n                    } else {\r\n                        ctx.beginTransaction(function (tran) {\r\n                            query.transaction = tran;\r\n                            if ($data.QueryCache && $data.QueryCache.isInCache(that, query)) {\r\n                                $data.QueryCache.executeQuery(that, query, clbWrapper);\r\n                            } else {\r\n                                ctx.storageProvider.executeQuery(query, clbWrapper);\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    query.rawDataList = [];\r\n                    query.result = [];\r\n                    clbWrapper.success(query);\r\n                }\r\n            };\r\n\r\n            var i = 0;\r\n            var callbackFn = function (cancel) {\r\n                if (cancel === false) ex = false;\r\n\r\n                var es = sets[i];\r\n                if (es.beforeRead) {\r\n                    i++;\r\n                    var r = es.beforeRead.call(this, sets, query);\r\n                    if (typeof r === 'function') {\r\n                        r.call(this, (i < sets.length && ex) ? callbackFn : readyFn, sets, query);\r\n                    } else {\r\n                        if (r === false) ex = false;\r\n\r\n                        if (i < sets.length && ex) {\r\n                            callbackFn();\r\n                        } else readyFn();\r\n                    }\r\n                } else readyFn();\r\n            };\r\n\r\n            if (sets.length) callbackFn();\r\n            else readyFn();\r\n        };\r\n\r\n        if (this.user && this.checkPermission) {\r\n            this.checkPermission(query.expression.nodeType === $data.Expressions.ExpressionType.BatchDelete ? $data.Access.DeleteBatch : $data.Access.Read, this.user, sets, {\r\n                success: authorizedFn,\r\n                error: clbWrapper.error\r\n            });\r\n        } else authorizedFn();\r\n    },\r\n    executeQuerySuccess: function (that, returnTransaction, callBack) {\r\n        return function (query) {\r\n            if ($data.QueryCache && $data.QueryCache.isCacheable(that, query)) {\r\n                $data.QueryCache.addToCache(that, query);\r\n            }\r\n\r\n            query.buildResultSet(that);\r\n\r\n            if ($data.ItemStore && 'QueryResultModifier' in $data.ItemStore)\r\n                $data.ItemStore.QueryResultModifier.call(that, query);\r\n\r\n            var successResult;\r\n\r\n            if (query.expression.nodeType === $data.Expressions.ExpressionType.Single ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Find ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Count ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.BatchDelete ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Some ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Every) {\r\n                if (query.result.length !== 1) {\r\n                    callBack.error(new Exception('result count failed'));\r\n                    return;\r\n                }\r\n\r\n                successResult = query.result[0];\r\n            } else if (query.expression.nodeType === $data.Expressions.ExpressionType.First) {\r\n                if (query.result.length === 0) {\r\n                    callBack.error(new Exception('result count failed'));\r\n                    return;\r\n                }\r\n\r\n                successResult = query.result[0];\r\n            } else {\r\n                if (typeof query.__count === 'number' && query.result)\r\n                    query.result.totalCount = query.__count;\r\n\r\n                that.storageProvider._buildContinuationFunction(that, query);\r\n\r\n                successResult = query.result;\r\n            }\r\n\r\n            var readyFn = function () {\r\n                that._applyTransaction(callBack, callBack.success, [successResult], query.transaction, returnTransaction);\r\n\r\n                /*if (returnTransaction === true) {\r\n                    if (query.transaction)\r\n                        callBack.success(successResult, query.transaction);\r\n                    else {\r\n                        that.beginTransaction(function (tran) {\r\n                            callBack.success(successResult, tran);\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                    callBack.success(successResult);*/\r\n            };\r\n\r\n            var i = 0;\r\n            var sets = query.getEntitySets();\r\n\r\n            var callbackFn = function () {\r\n                var es = sets[i];\r\n                if (es.afterRead) {\r\n                    i++;\r\n                    var r = es.afterRead.call(this, successResult, sets, query);\r\n                    if (typeof r === 'function') {\r\n                        r.call(this, i < sets.length ? callbackFn : readyFn, successResult, sets, query);\r\n                    } else {\r\n                        if (i < sets.length) {\r\n                            callbackFn();\r\n                        } else readyFn();\r\n                    }\r\n                } else readyFn();\r\n            }\r\n\r\n            if (sets.length) callbackFn();\r\n            else readyFn();\r\n        };\r\n    },\r\n    executeQueryError: function (that, returnTransaction, callBack) {\r\n        return function () {\r\n            if (returnTransaction)\r\n                callBack.error.apply(this, arguments);\r\n            else\r\n                callBack.error.apply(this, Array.prototype.filter.call(arguments, function (p) { return !(p instanceof $data.Transaction); }));\r\n        };\r\n    },\r\n\r\n\r\n    batchExecuteQuery: function (queryableOptions, callBack, transaction) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(callBack);\r\n\r\n        var self = this;\r\n        var methodOperationMappings = {\r\n            count: 'length',\r\n            length: 'length',\r\n            forEach: 'forEach',\r\n            toArray: 'toArray',\r\n            single: 'single',\r\n            some: 'some',\r\n            every: 'every',\r\n            first: 'first',\r\n            removeAll: 'batchDelete'\r\n        };\r\n        var methodFrameMappings = {\r\n            count: 'CountExpression',\r\n            length: 'CountExpression',\r\n            forEach: 'ForEachExpression',\r\n            toArray: 'ToArrayExpression',\r\n            single: 'SingleExpression',\r\n            some: 'SomeExpression',\r\n            every: 'EveryExpression',\r\n            first: 'FirstExpression',\r\n            removeAll: 'BatchDeleteExpression'\r\n        };\r\n\r\n\r\n        var returnFunc = function () {\r\n            return pHandler.getPromise();\r\n        }\r\n\r\n        if (typeof queryableOptions.length != \"number\") {\r\n            cbWrapper.error(new Exception('QueryableOptions array parameter missing', 'Invalid arguments'));\r\n            return returnFunc();\r\n        }\r\n\r\n        var qOptions = [];\r\n        for (var i = 0; i < queryableOptions.length; i++) {\r\n            var queryOption = {};\r\n            if (queryableOptions[i] instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i];\r\n                queryOption.method = 'toArray';\r\n            } else if (queryableOptions[i].queryable instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i].queryable;\r\n                queryOption.method = queryableOptions[i].method || 'toArray';\r\n            } else if (queryableOptions[i][0] instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i][0];\r\n                queryOption.method = queryableOptions[i][1] || 'toArray';\r\n            } else {\r\n                cbWrapper.error(new Exception('$data.Queryable is missing in queryableOptions at index ' + i, 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n\r\n            if (queryOption.queryable.entityContext !== self) {\r\n                cbWrapper.error(new Exception('Queryable at index ' + i + ' contains different entity context', 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n\r\n            queryOption.queryable._checkOperation(methodOperationMappings[queryOption.method] || queryOption.method);\r\n            qOptions.push(queryOption);\r\n        }\r\n\r\n\r\n        var executableQueries = [];\r\n        for (var i = 0; i < qOptions.length; i++) {\r\n            var queryOption = qOptions[i];\r\n\r\n            var frameExpressionName = methodFrameMappings[queryOption.method] || queryOption.method;\r\n            if (frameExpressionName && $data.Expressions[frameExpressionName] && $data.Expressions[frameExpressionName].isAssignableTo($data.Expressions.FrameOperator)) {\r\n\r\n                var queryExpression = Container['create' + frameExpressionName](queryOption.queryable.expression);\r\n                var preparator = Container.createQueryExpressionCreator(queryOption.queryable.entityContext);\r\n\r\n                try {\r\n                    var expression = preparator.Visit(queryExpression);\r\n                    queryOption.queryable.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n                    var queryable = Container.createQueryable(queryOption.queryable, expression);\r\n                    executableQueries.push(queryable);\r\n                } catch (e) {\r\n                    cbWrapper.error(e);\r\n                    return returnFunc();\r\n                }\r\n            } else {\r\n                cbWrapper.error(new Exception('Invalid frame method \\'' + frameExpressionName + '\\' in queryableOptions at index ' + i, 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n        }\r\n\r\n        var queryResults = [];\r\n        if (self.storageProvider.supportedContextOperation && self.storageProvider.supportedContextOperation.batchExecuteQuery) {\r\n            //wrap queries\r\n            var batchExecuteQueryExpression = Container.createBatchExecuteQueryExpression(executableQueries.map(function (queryable) {\r\n                return new $data.Query(queryable.expression, queryable.defaultType, self);\r\n            }));\r\n\r\n            var batchExecuteQuery = Container.createQueryable(self, batchExecuteQueryExpression);\r\n            self.executeQuery(batchExecuteQuery, {\r\n                success: function (results) {\r\n                    var batchResult = [];\r\n                    var hasError = false;\r\n                    var errorValue = null;\r\n                    for (var i = 0; i < results.length && !hasError; i++) {\r\n                        var query = results[i];\r\n                        self.executeQuerySuccess(self, returnTransaction, {\r\n                            success: function (result) {\r\n                                batchResult.push(result);\r\n                            },\r\n                            error: function (err) {\r\n                                hasError = true;\r\n                                errorValue = err;\r\n                            }\r\n                        })(query);\r\n                    }\r\n                    if (!hasError) {\r\n                        self._applyTransaction(cbWrapper, cbWrapper.success, [batchResult], batchExecuteQuery.transaction, returnTransaction);\r\n                    } else {\r\n                        cbWrapper.error(errorValue);\r\n                    }\r\n\r\n                },\r\n                error: cbWrapper.error\r\n            }, transaction);\r\n        } else {\r\n            var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n            var readIterator = function (queries, index, iteratorCallback, itTransaction) {\r\n                var query = queries[index];\r\n                if (!query) {\r\n                    return iteratorCallback.success(itTransaction);\r\n                }\r\n\r\n                self.executeQuery(executableQueries[index], {\r\n                    success: function (result, tr) {\r\n                        queryResults.push(result);\r\n                        readIterator(executableQueries, index + 1, iteratorCallback, tr);\r\n                    },\r\n                    error: iteratorCallback.error\r\n                }, itTransaction);\r\n            }\r\n\r\n            readIterator(executableQueries, 0, {\r\n                success: function (lastTran) {\r\n                    self._applyTransaction(cbWrapper, cbWrapper.success, [queryResults], lastTran, returnTransaction);\r\n                },\r\n                error: cbWrapper.error\r\n            }, transaction)\r\n        }\r\n        return returnFunc();\r\n    },\r\n\r\n    /**\r\n     * Saves the changes made to the context.\r\n     *\r\n     * @memberof $data.EntityContext\r\n     * @instance\r\n     * @param {Function|Object} callback - callback function or callback object with success & error properties\r\n     * @param {$data.Transaction} transaction - Transaction object\r\n     * @returns $.Deferred\r\n     *\r\n     * @example <caption>saveChanges with simple callback function</caption>\r\n     * context.saveChanges(function(db) {\r\n     *  //success\r\n     * });\r\n     *\r\n     * @example <caption>saveChanges with callback object</caption>\r\n     * var myCallback = {\r\n     *  success: function(db) { //succeess },\r\n     *  error: function(errors) { console.log(errors); }\r\n     * }\r\n     * context.saveChanges(myCallback);\r\n     */\r\n    saveChanges: function (callback, transaction) {\r\n        if ($data.QueryCache) {\r\n            $data.QueryCache.reset(this);\r\n        }\r\n\r\n        var changedEntities = [];\r\n        var trackedEntities = this.stateManager.trackedEntities;\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        var skipItems = [];\r\n        while (trackedEntities.length > 0) {\r\n            var additionalEntities = [];\r\n            //trackedEntities.forEach(function (entityCachedItem) {\r\n            for (var i = 0; i < trackedEntities.length; i++) {\r\n                var entityCachedItem = trackedEntities[i];\r\n\r\n                var sModel = this._storageModel.getStorageModel(entityCachedItem.data.getType());\r\n                if (entityCachedItem.data.entityState == $data.EntityState.Unchanged) {\r\n                    entityCachedItem.skipSave = true;\r\n                    skipItems.push(entityCachedItem.data);\r\n                } else {\r\n                    if (entityCachedItem.data.entityState == $data.EntityState.Modified) {\r\n                        if (entityCachedItem.data.changedProperties) {\r\n                            var changeStoredProperty = entityCachedItem.data.changedProperties.some(function (p) {\r\n                                var pMemDef = sModel.PhysicalType.memberDefinitions.getMember(p.name);\r\n                                if (pMemDef.kind == $data.MemberTypes.navProperty) {\r\n                                    var a = sModel.Associations[pMemDef.association];\r\n                                    var multiplicity = a.FromMultiplicity + a.ToMultiplicity;\r\n                                    return ((multiplicity == '*0..1') || (multiplicity == '0..11'))\r\n                                }\r\n                                return true;\r\n                            });\r\n                            if (!changeStoredProperty) {\r\n                                entityCachedItem.skipSave = true;\r\n                                skipItems.push(entityCachedItem.data);\r\n                            }\r\n                        } else {\r\n                            entityCachedItem.skipSave = true;\r\n                            skipItems.push(entityCachedItem.data);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //type before events with items\r\n                this.processEntityTypeBeforeEventHandler(skipItems, entityCachedItem);\r\n\r\n                var navigationProperties = [];\r\n                var smPhyMemDefs = sModel.PhysicalType.memberDefinitions.asArray();\r\n                for (var ism = 0; ism < smPhyMemDefs.length; ism++) {\r\n                    var p = smPhyMemDefs[ism];\r\n                    if (p.kind == $data.MemberTypes.navProperty)\r\n                        navigationProperties.push(p);\r\n                }\r\n                //var navigationProperties = sModel.PhysicalType.memberDefinitions.asArray().filter(function (p) { return p.kind == $data.MemberTypes.navProperty; });\r\n                //navigationProperties.forEach(function (navProp) {\r\n                for (var j = 0; j < navigationProperties.length; j++) {\r\n                    var navProp = navigationProperties[j];\r\n\r\n                    var association = sModel.Associations[navProp.name]; //eg.:\"Profile\"\r\n                    var name = navProp.name; //eg.: \"Profile\"\r\n                    var navPropertyName = association.ToPropertyName; //eg.: User\r\n\r\n                    var connectedDataList = [].concat(entityCachedItem.data[name]);\r\n                    //connectedDataList.forEach(function (data) {\r\n                    for (var k = 0; k < connectedDataList.length; k++) {\r\n                        var data = connectedDataList[k];\r\n\r\n                        if (data) {\r\n                            var value = data[navPropertyName];\r\n                            var associationType = association.FromMultiplicity + association.ToMultiplicity;\r\n                            if (association.FromMultiplicity === '$$unbound') {\r\n                                if (data instanceof $data.Array) {\r\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                    //data.forEach(function (dataItem) {\r\n                                    for (var l = 0; l < data.length; l++) {\r\n                                        var dataItem = data[l];\r\n\r\n                                        if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                            entityCachedItem.dependentOn.push(data);\r\n                                        }\r\n                                    }\r\n                                    //}, this);\r\n                                } else {\r\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                    if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                        entityCachedItem.dependentOn.push(data);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                switch (associationType) {\r\n                                    case \"*0..1\": //Array\r\n                                        if (value) {\r\n                                            if (value instanceof Array) {\r\n                                                if (value.indexOf(entityCachedItem.data) == -1) {\r\n                                                    value.push(entityCachedItem.data);\r\n                                                    data.initData[navPropertyName] = value;\r\n                                                    data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                                }\r\n                                            } else {\r\n                                                if (typeof intellisense === 'undefined') {\r\n                                                    Guard.raise(\"Item must be array or subtype of array\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            data.initData[navPropertyName] = [entityCachedItem.data];\r\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                        }\r\n                                        break;\r\n                                    default: //Item\r\n                                        if (value) {\r\n                                            if (value !== entityCachedItem.data) {\r\n                                                if (typeof intellisense === 'undefined') {\r\n                                                    Guard.raise(\"Integrity check error! Item assigned to another entity!\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            data.initData[navPropertyName] = entityCachedItem.data; //set back reference for live object\r\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                        }\r\n                                        break;\r\n                                }\r\n                                switch (associationType) {\r\n                                    case \"*0..1\":\r\n                                    case \"0..11\":\r\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                        if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                            entityCachedItem.dependentOn.push(data);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                            if (!data.entityState) {\r\n                                //if (data.storeToken === this.storeToken) {\r\n                                //    data.entityState = $data.EntityState.Modified;\r\n                                //} else {\r\n                                //    data.entityState = $data.EntityState.Added;\r\n                                //}\r\n                                this.discoverDependentItemEntityState(data);\r\n                            }\r\n                            if (additionalEntities.indexOf(data) == -1) {\r\n                                additionalEntities.push(data);\r\n                            }\r\n                        }\r\n                    }\r\n                    //}, this);\r\n                }\r\n                //}, this);\r\n            }\r\n            //}, this);\r\n\r\n            //trackedEntities.forEach(function (entity) {\r\n            for (var i = 0; i < trackedEntities.length; i++) {\r\n                var entity = trackedEntities[i];\r\n\r\n                if (entity.skipSave !== true) { changedEntities.push(entity); }\r\n            }\r\n            //});\r\n\r\n            trackedEntities = [];\r\n            //additionalEntities.forEach(function (item) {\r\n            for (var i = 0; i < additionalEntities.length; i++) {\r\n                var item = additionalEntities[i];\r\n\r\n                if (!skipItems.some(function (entity) { return entity == item; })) {\r\n                    if (!changedEntities.some(function (entity) { return entity.data == item; })) {\r\n                        trackedEntities.push({ data: item, entitySet: this.getEntitySetFromElementType(item.getType().name) });\r\n                    }\r\n                }\r\n            }\r\n            //}, this);\r\n        }\r\n\r\n\r\n        //changedEntities.forEach(function (d) {\r\n        for (var j = 0; j < changedEntities.length; j++) {\r\n            var d = changedEntities[j];\r\n\r\n            if (d.dependentOn) {\r\n                var temp = [];\r\n                for (var i = 0; i < d.dependentOn.length; i++) {\r\n                    if (skipItems.indexOf(d.dependentOn[i]) < 0) {\r\n                        temp.push(d.dependentOn[i]);\r\n                    }\r\n                }\r\n                d.dependentOn = temp;\r\n            }\r\n        }\r\n        //});\r\n        skipItems = null;\r\n        var ctx = this;\r\n        if (changedEntities.length == 0) {\r\n            this.stateManager.trackedEntities.length = 0;\r\n            ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\r\n\r\n            /*if (returnTransaction) {\r\n                clbWrapper.success(0, transaction);\r\n            } else {\r\n                clbWrapper.success(0);\r\n            }*/\r\n            return pHandlerResult;\r\n        }\r\n\r\n        //validate entities\r\n        var errors = [];\r\n        //changedEntities.forEach(function (entity) {\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var entity = changedEntities[i];\r\n\r\n            if (entity.data.entityState === $data.EntityState.Added) {\r\n                //entity.data.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                for (var j = 0; j < entity.data.getType().memberDefinitions.getPublicMappedProperties().length; j++) {\r\n                    var memDef = entity.data.getType().memberDefinitions.getPublicMappedProperties()[j];\r\n\r\n                    var memDefType = Container.resolveType(memDef.type);\r\n                    if (memDef.required && !memDef.computed && !entity.data[memDef.name] && !memDef.isDependentProperty) {\r\n                        switch (memDefType) {\r\n                            case $data.String:\r\n                            case $data.Number:\r\n                            case $data.Float:\r\n                            case $data.Decimal:\r\n                            case $data.Integer:\r\n                            case $data.Int16:\r\n                            case $data.Int32:\r\n                            case $data.Int64:\r\n                            case $data.Byte:\r\n                            case $data.SByte:\r\n                            case $data.Date:\r\n                            case $data.Boolean:\r\n                                entity.data[memDef.name] = Container.getDefault(memDef.dataType);\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                //}, this);\r\n            }\r\n            if ((entity.data.entityState === $data.EntityState.Added || entity.data.entityState === $data.EntityState.Modified)\r\n                && !entity.data.isValid()) {\r\n                errors.push({ item: entity.data, errors: entity.data.ValidationErrors });\r\n            }\r\n        }\r\n        //});\r\n        if (errors.length > 0) {\r\n            clbWrapper.error(errors);\r\n            return pHandlerResult;\r\n        }\r\n\r\n        var access = $data.Access.None;\r\n\r\n        var eventData = {};\r\n        var sets = [];\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var it = changedEntities[i];\r\n            var n = it.entitySet.elementType.name;\r\n            if (sets.indexOf(it.entitySet) < 0) sets.push(it.entitySet);\r\n            var es = this._entitySetReferences[n];\r\n            if (es.beforeCreate || es.beforeUpdate || es.beforeDelete || (this.user && this.checkPermission)) {\r\n                if (!eventData[n]) eventData[n] = {};\r\n\r\n                switch (it.data.entityState) {\r\n                    case $data.EntityState.Added:\r\n                        access |= $data.Access.Create;\r\n                        if (es.beforeCreate) {\r\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\r\n                            eventData[n].createAll.push(it);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        access |= $data.Access.Update;\r\n                        if (es.beforeUpdate) {\r\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\r\n                            eventData[n].modifyAll.push(it);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        access |= $data.Access.Delete;\r\n                        if (es.beforeDelete) {\r\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\r\n                            eventData[n].deleteAll.push(it);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        var readyFn = function (cancel) {\r\n            if (cancel === false) {\r\n                cancelEvent = 'async';\r\n                changedEntities.length = 0;\r\n            }\r\n\r\n            if (changedEntities.length) {\r\n                //console.log('changedEntities: ', changedEntities.map(function(it){ return it.data.initData; }));\r\n\r\n                var innerCallback = {\r\n                    success: function (tran) {\r\n                        ctx._postProcessSavedItems(clbWrapper, changedEntities, tran, returnTransaction);\r\n                    },\r\n                    error: function () {\r\n                        //TODO remove trans from args;\r\n                        if (returnTransaction)\r\n                            clbWrapper.error.apply(this, arguments);\r\n                        else\r\n                            clbWrapper.error.apply(this, Array.prototype.filter.call(arguments, function (p) { return !(p instanceof $data.Transaction); }));\r\n                    }\r\n                };\r\n\r\n                if (transaction instanceof $data.Transaction){\r\n                    ctx.storageProvider.saveChanges(innerCallback, changedEntities, transaction);\r\n                } else {\r\n                    ctx.beginTransaction(true, function (tran) {\r\n                        ctx.storageProvider.saveChanges(innerCallback, changedEntities, tran);\r\n                    });\r\n                }\r\n            } else if (cancelEvent) {\r\n                clbWrapper.error(new Exception('Cancelled event in ' + cancelEvent, 'CancelEvent'));\r\n            } else {\r\n                ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\r\n\r\n                /*if(returnTransaction)\r\n                    clbWrapper.success(0, transaction);\r\n                else\r\n                    clbWrapper.success(0);*/\r\n            };\r\n\r\n            /*else if (cancelEvent) clbWrapper.error(new $data.Exception('saveChanges cancelled from event [' + cancelEvent + ']'));\r\n            else Guard.raise('No changed entities');*/\r\n        };\r\n\r\n        var cancelEvent;\r\n        var ies = Object.getOwnPropertyNames(eventData);\r\n        var i = 0;\r\n        var cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n        var cmdAll = {\r\n            beforeCreate: 'createAll',\r\n            beforeDelete: 'deleteAll',\r\n            beforeUpdate: 'modifyAll'\r\n        };\r\n\r\n        var callbackFn = function (cancel) {\r\n            if (cancel === false) {\r\n                cancelEvent = 'async';\r\n                changedEntities.length = 0;\r\n\r\n                readyFn(cancel);\r\n                return;\r\n            }\r\n\r\n            var es = ctx._entitySetReferences[ies[i]];\r\n            var c = cmd.pop();\r\n            var ed = eventData[ies[i]];\r\n            var all = ed[cmdAll[c]];\r\n\r\n            if (all) {\r\n                var m = [];\r\n                for (var im = 0; im < all.length; im++) {\r\n                    m.push(all[im].data);\r\n                }\r\n                //var m = all.map(function(it){ return it.data; });\r\n                if (!cmd.length) {\r\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n                    i++;\r\n                }\r\n\r\n                var r = es[c].call(ctx, m);\r\n                if (typeof r === 'function') {\r\n                    r.call(ctx, (i < ies.length && !cancelEvent) ? callbackFn : readyFn, m);\r\n                } else if (r === false) {\r\n                    cancelEvent = (es.name + '.' + c);\r\n                    //all.forEach(function (it) {\r\n                    for (var index = 0; index < all.length; index++) {\r\n                        var it = all[index];\r\n\r\n                        var ix = changedEntities.indexOf(it);\r\n                        changedEntities.splice(ix, 1);\r\n                    }\r\n                    //});\r\n\r\n                    readyFn();\r\n                } else {\r\n                    if (i < ies.length && !cancelEvent) callbackFn();\r\n                    else readyFn();\r\n                }\r\n            } else {\r\n                if (!cmd.length) {\r\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n                    i++;\r\n                }\r\n\r\n                if (i < ies.length && !cancelEvent) callbackFn();\r\n                else readyFn();\r\n            }\r\n        };\r\n\r\n        if (this.user && this.checkPermission) {\r\n            this.checkPermission(access, this.user, sets, {\r\n                success: function () {\r\n                    if (i < ies.length) callbackFn();\r\n                    else readyFn();\r\n                },\r\n                error: clbWrapper.error\r\n            });\r\n        } else {\r\n            if (i < ies.length) callbackFn();\r\n            else readyFn();\r\n        }\r\n\r\n        return pHandlerResult;\r\n    },\r\n    discoverDependentItemEntityState: function (data) {\r\n        if (data.storeToken === this.storeToken) {\r\n            data.entityState = (data.changedProperties && data.changedProperties.length) ? $data.EntityState.Modified : $data.EntityState.Unchanged;\r\n        } else if (data.storeToken && this.storeToken && data.storeToken.typeName === this.storeToken.typeName && JSON.stringify(data.storeToken.args) === JSON.stringify(this.storeToken.args)) {\r\n            data.entityState = (data.changedProperties && data.changedProperties.length) ? $data.EntityState.Modified : $data.EntityState.Unchanged;\r\n        } else {\r\n            data.entityState = $data.EntityState.Added;\r\n        }\r\n    },\r\n\r\n    processEntityTypeBeforeEventHandler: function (skipItems, entityCachedItem) {\r\n        if (!entityCachedItem.skipSave) {\r\n            var entity = entityCachedItem.data;\r\n            var entityType = entity.getType();\r\n            var state = entity.entityState;\r\n\r\n            switch (true) {\r\n                case state === $data.EntityState.Added && entityType.onbeforeCreate instanceof $data.Event:\r\n                    if (entityType.onbeforeCreate.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                case state === $data.EntityState.Modified && entityType.onbeforeUpdate instanceof $data.Event:\r\n                    if (entityType.onbeforeUpdate.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                case state === $data.EntityState.Deleted && entityType.onbeforeDelete instanceof $data.Event:\r\n                    if (entityType.onbeforeDelete.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    processEntityTypeAfterEventHandler: function (entityCachedItem) {\r\n        var entity = entityCachedItem.data;\r\n        var entityType = entity.getType();\r\n        var state = entity.entityState;\r\n\r\n        switch (true) {\r\n            case state === $data.EntityState.Added && entityType.onafterCreate instanceof $data.Event:\r\n                entityType.onafterCreate.fire(entity);\r\n                break;\r\n            case state === $data.EntityState.Modified && entityType.onafterUpdate instanceof $data.Event:\r\n                entityType.onafterUpdate.fire(entity);\r\n                break;\r\n            case state === $data.EntityState.Deleted && entityType.onafterDelete instanceof $data.Event:\r\n                entityType.onafterDelete.fire(entity);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    bulkInsert: function (entitySet, fields, datas, callback) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        callback = pHandler.createCallback(callback);\r\n        if (typeof entitySet === 'string') {\r\n            var currentEntitySet;\r\n\r\n            for (var entitySetName in this._entitySetReferences) {\r\n                var actualEntitySet = this._entitySetReferences[entitySetName];\r\n                if (actualEntitySet.tableName === entitySet) {\r\n                    currentEntitySet = actualEntitySet;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!currentEntitySet)\r\n                currentEntitySet = this[entitySet];\r\n\r\n            entitySet = currentEntitySet;\r\n        }\r\n        if (entitySet) {\r\n            this.storageProvider.bulkInsert(entitySet, fields, datas, callback);\r\n        } else {\r\n            callback.error(new Exception('EntitySet not found'));\r\n        }\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    prepareRequest: function () { },\r\n    _postProcessSavedItems: function (callBack, changedEntities, transaction, returnTransaction) {\r\n        if (this.ChangeCollector && this.ChangeCollector instanceof $data.Notifications.ChangeCollectorBase)\r\n            this.ChangeCollector.processChangedData(changedEntities);\r\n\r\n        var eventData = {};\r\n        var ctx = this;\r\n        //changedEntities.forEach(function (entity) {\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var entity = changedEntities[i];\r\n\r\n            if (!entity.data.storeToken)\r\n                entity.data.storeToken = ctx.storeToken;\r\n\r\n            //type after events with items\r\n            this.processEntityTypeAfterEventHandler(entity);\r\n\r\n            var oes = entity.data.entityState;\r\n\r\n            entity.data.entityState = $data.EntityState.Unchanged;\r\n            entity.data.changedProperties = [];\r\n            entity.physicalData = undefined;\r\n\r\n            var n = entity.entitySet.elementType.name;\r\n            var es = ctx._entitySetReferences[n];\r\n\r\n\r\n            var eventName = undefined;\r\n            switch (oes) {\r\n                case $data.EntityState.Added:\r\n                    eventName = 'added';\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    eventName = 'deleted';\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    eventName = 'updated';\r\n                    break;\r\n            }\r\n            if (eventName) {\r\n                this.raiseEvent(eventName, entity);\r\n            }\r\n\r\n            if (es.afterCreate || es.afterUpdate || es.afterDelete) {\r\n                if (!eventData[n]) eventData[n] = {};\r\n\r\n                switch (oes) {\r\n                    case $data.EntityState.Added:\r\n                        if (es.afterCreate) {\r\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\r\n                            eventData[n].createAll.push(entity);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        if (es.afterUpdate) {\r\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\r\n                            eventData[n].modifyAll.push(entity);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        if (es.afterDelete) {\r\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\r\n                            eventData[n].deleteAll.push(entity);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        //});\r\n\r\n        var ies = Object.getOwnPropertyNames(eventData);\r\n        var i = 0;\r\n        var ctx = this;\r\n        var cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n        var cmdAll = {\r\n            afterCreate: 'createAll',\r\n            afterDelete: 'deleteAll',\r\n            afterUpdate: 'modifyAll'\r\n        };\r\n\r\n        var readyFn = function () {\r\n            if (!ctx.trackChanges) {\r\n                ctx.stateManager.reset();\r\n            }\r\n\r\n            ctx._applyTransaction(callBack, callBack.success, [changedEntities.length], transaction, returnTransaction);\r\n\r\n            /*if (returnTransaction)\r\n                callBack.success(changedEntities.length, transaction);\r\n            else\r\n                callBack.success(changedEntities.length);*/\r\n        };\r\n\r\n        var callbackFn = function () {\r\n            var es = ctx._entitySetReferences[ies[i]];\r\n            var c = cmd.pop();\r\n            var ed = eventData[ies[i]];\r\n            var all = ed[cmdAll[c]];\r\n            if (all) {\r\n                var m = [];\r\n                for (var im = 0; im < all.length; im++) {\r\n                    m.push(all[im].data);\r\n                }\r\n                //var m = all.map(function(it){ return it.data; });\r\n                if (!cmd.length) {\r\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n                    i++;\r\n                }\r\n\r\n                var r = es[c].call(ctx, m);\r\n                if (typeof r === 'function') {\r\n                    r.call(ctx, i < ies.length ? callbackFn : readyFn, m);\r\n                } else {\r\n                    if (i < ies.length) callbackFn();\r\n                    else readyFn();\r\n                }\r\n            } else {\r\n                if (!cmd.length) {\r\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n                    i++;\r\n                }\r\n\r\n                if (i < ies.length) callbackFn();\r\n                else readyFn();\r\n            }\r\n        };\r\n\r\n        if (i < ies.length) callbackFn();\r\n        else readyFn();\r\n    },\r\n    forEachEntitySet: function (fn, ctx) {\r\n        /// <summary>\r\n        ///     Iterates over the entity sets' of current EntityContext.\r\n        /// </summary>\r\n        /// <param name=\"fn\" type=\"Function\">\r\n        ///     <param name=\"entitySet\" type=\"$data.EntitySet\" />\r\n        /// </param>\r\n        /// <param name=\"ctx\">'this' argument for the 'fn' function.</param>\r\n        for (var entitySetName in this._entitySetReferences) {\r\n            var actualEntitySet = this._entitySetReferences[entitySetName];\r\n            fn.call(ctx, actualEntitySet);\r\n        }\r\n    },\r\n\r\n    loadItemProperty: function (entity, property, callback, transaction) {\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>C  allback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        Guard.requireType('entity', entity, $data.Entity);\r\n\r\n        var memberDefinition = typeof property === 'string' ? entity.getType().memberDefinitions.getMember(property) : property;\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        if (entity[memberDefinition.name] != undefined) {\r\n\r\n            var pHandler = new $data.PromiseHandler();\r\n            var callBack = pHandler.createCallback(callback);\r\n            this._applyTransaction(callback, callback.success, [entity[memberDefinition.name]], transaction, returnTransaction);\r\n            /*if (returnTransaction)\r\n                callback.success(entity[memberDefinition.name], transaction);\r\n            else\r\n                callback.success(entity[memberDefinition.name]);*/\r\n\r\n            return pHandler.getPromise();\r\n        }\r\n\r\n        var isSingleSide = true;\r\n        var storageModel = this._storageModel.getStorageModel(entity.getType().fullName);\r\n        var elementType = Container.resolveType(memberDefinition.dataType);\r\n        if (elementType === $data.Array || (elementType.isAssignableTo && elementType.isAssignableTo($data.EntitySet))) {\r\n            elementType = Container.resolveType(memberDefinition.elementType);\r\n\r\n            isSingleSide = false;\r\n\r\n        } else {\r\n            var associations;\r\n            for (var i = 0; i < storageModel.Associations.length; i++) {\r\n                var assoc = storageModel.Associations[i];\r\n                if (assoc.FromPropertyName == memberDefinition.name) {\r\n                    associations = assoc;\r\n                    break;\r\n                }\r\n            }\r\n            //var associations = storageModel.Associations.filter(function (assoc) { return assoc.FromPropertyName == memberDefinition.name; })[0];\r\n            if (associations && associations.FromMultiplicity === \"0..1\" && associations.ToMultiplicity === \"1\")\r\n                isSingleSide = false;\r\n        }\r\n\r\n        var keyProp = storageModel.LogicalType.memberDefinitions.getKeyProperties();\r\n        if (isSingleSide === true) {\r\n            //singleSide\r\n\r\n            var filterFunc = \"function (e) { return\";\r\n            var filterParams = {};\r\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\r\n            for (var index = 0; index < keyProp.length; index++) {\r\n                var memDefKey = keyProp[index];\r\n\r\n                if (index > 0)\r\n                    filterFunc += ' &&';\r\n                filterFunc += \" e.\" + memDefKey.name + \" == this.key\" + index;\r\n                filterParams['key' + index] = entity[memDefKey.name];\r\n            }\r\n            //});\r\n            filterFunc += \"; }\"\r\n\r\n            var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n            return entitySet\r\n                .map('function (e) { return e.' + memberDefinition.name + ' }')\r\n                .single(filterFunc, filterParams, callback, transaction);\r\n        } else {\r\n            //multipleSide\r\n\r\n            var filterFunc = \"function (e) { return\"\r\n            var filterParams = {};\r\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\r\n            for (var index = 0; index < keyProp.length; index++) {\r\n                var memDefKey = keyProp[index];\r\n\r\n                if (index > 0)\r\n                    filterFunc += ' &&';\r\n                filterFunc += \" e.\" + memberDefinition.inverseProperty + \".\" + memDefKey.name + \" == this.key\" + index;\r\n                filterParams['key' + index] = entity[memDefKey.name];\r\n            }\r\n            //});\r\n            filterFunc += \"; }\"\r\n\r\n            var entitySet = this.getEntitySetFromElementType(elementType);\r\n            return entitySet\r\n                .filter(filterFunc, filterParams)\r\n                .toArray(callback, transaction);\r\n        }\r\n\r\n    },\r\n\r\n    getTraceString: function (queryable) {\r\n        /// <summary>\r\n        /// Returns a trace string. Used for debugging purposes!\r\n        /// </summary>\r\n        /// <param name=\"queryable\" type=\"$data.Queryable\" />\r\n        /// <returns>Trace string</returns>\r\n        var query = new $data.Query(queryable.expression, queryable.defaultType, this);\r\n        return this.storageProvider.getTraceString(query);\r\n    },\r\n    log: function (logInfo) {\r\n        //noop as do nothing\r\n    },\r\n\r\n    resolveBinaryOperator: function (operator, expression, frameType) {\r\n        return this.storageProvider.resolveBinaryOperator(operator, expression, frameType);\r\n    },\r\n    resolveUnaryOperator: function (operator, expression, frameType) {\r\n        return this.storageProvider.resolveUnaryOperator(operator, expression, frameType);\r\n    },\r\n    resolveFieldOperation: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveFieldOperation(operation, expression, frameType);\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveSetOperations(operation, expression, frameType);\r\n    },\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveTypeOperations(operation, expression, frameType);\r\n    },\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveContextOperations(operation, expression, frameType);\r\n    },\r\n\r\n    _generateServiceOperationQueryable: function (functionName, returnEntitySet, arg, parameters) {\r\n        if (typeof console !== 'undefined' && console.log)\r\n            console.log('Obsolate: _generateServiceOperationQueryable, $data.EntityContext');\r\n\r\n        var params = [];\r\n        for (var i = 0; i < parameters.length; i++) {\r\n            var obj = {};\r\n            obj[parameters[i]] = Container.resolveType(Container.getTypeName(arg[i]));\r\n            params.push(obj);\r\n        }\r\n\r\n        var tempOperation = $data.EntityContext.generateServiceOperation({ serviceName: functionName, returnType: $data.Queryable, elementType: this[returnEntitySet].elementType, params: params });\r\n        return tempOperation.apply(this, arg);\r\n    },\r\n    attach: function (entity, mode) {\r\n        /// <summary>\r\n        ///     Attaches an entity to its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the attached entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.attach(entity, mode);\r\n    },\r\n    attachOrGet: function (entity, mode) {\r\n        /// <summary>\r\n        ///     Attaches an entity to its matching entity set, or returns if it's already attached.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.attachOrGet(entity, mode);\r\n    },\r\n\r\n    addMany: function (entities) {\r\n        /// <summary>\r\n        ///     Adds several entities to their matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"Array\" />\r\n        /// <returns type=\"Array\">Returns the added entities.</returns>\r\n        var self = this;\r\n        entities.forEach(function (entity) {\r\n            self.add(entity);\r\n        });\r\n        return entities;\r\n    },\r\n\r\n    add: function (entity) {\r\n        /// <summary>\r\n        ///     Adds a new entity to its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the added entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.add(entity);\r\n    },\r\n    remove: function (entity) {\r\n        /// <summary>\r\n        ///     Removes an entity from its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the removed entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.remove(entity);\r\n    },\r\n    storeToken: { type: Object },\r\n\r\n    getFieldUrl: function (entity, member, collection) {\r\n        try {\r\n            var entitySet = typeof collection === 'string' ? this[collection] : collection;\r\n            var fieldName = typeof member === 'string' ? member : member.name;\r\n            if (entity instanceof $data.Entity) {\r\n                entitySet = this.getEntitySetFromElementType(entity.getType());\r\n            } else if (!Object.isNullOrUndefined(entity) && entity.constructor !== $data.Object) { //just a single key\r\n                var keyDef = entitySet.elementType.memberDefinitions.getKeyProperties()[0];\r\n                var key = {};\r\n                key[keyDef.name] = entity;\r\n                entity = key;\r\n            }\r\n\r\n            //key object\r\n            if (!(entity instanceof $data.Entity)) {\r\n                entity = new entitySet.elementType(entity);\r\n            }\r\n\r\n            return this.storageProvider.getFieldUrl(entity, fieldName, entitySet);\r\n        } catch (e) {}\r\n        return '#';\r\n    },\r\n\r\n    //xxxx\r\n    _applyRelatedEntityMethodsToContext: function () {\r\n        if (this.storageProvider.name === \"oData\") {\r\n            for (var esName in this._entitySetReferences) {\r\n                var es = this._entitySetReferences[esName];\r\n                var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + es.name;\r\n                //EntitiySets\r\n                if (!(newMemberName in es)) {\r\n                    es[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\r\n                }\r\n                //Context\r\n                if (!(newMemberName in this)) {\r\n                    this[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _applyRelatedEntityMethodsToTypes: function () {\r\n        if (this.storageProvider.name === \"oData\") {\r\n            for (var esName in this._entitySetReferences) {\r\n                //add to Type\r\n                var elementType = this._entitySetReferences[esName].elementType;\r\n                var members = elementType.memberDefinitions.getPublicMappedProperties();\r\n                for (var i = 0; i < members.length; i++) {\r\n                    var member = members[i];\r\n                    var memberElementType = null;\r\n                    if (member.inverseProperty && Container.resolveType(member.dataType) === $data.Array && (memberElementType = Container.resolveType(member.elementType)) &&\r\n                        memberElementType.isAssignableTo && memberElementType.isAssignableTo($data.Entity))\r\n                    {\r\n                        var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + member.name;\r\n                        if (!elementType.getMemberDefinition(newMemberName)) {\r\n                            elementType.addMember(newMemberName, this._relatedEntityGetMethod(memberElementType, member))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _createRelatedEntityProxyClass: function (type) {\r\n        var proxyClassName = type.namespace + $data.defaults.relatedEntityProxyPrefix + type.name;\r\n        if (!Container.isTypeRegistered(proxyClassName)) {\r\n            var definition = {};\r\n            var members = type.memberDefinitions.getPublicMappedProperties();\r\n            for (var i = 0; i < members.length; i++) {\r\n                var member = members[i];\r\n                var memberElementType = null;\r\n                if (member.inverseProperty && Container.resolveType(member.dataType) === $data.Array && (memberElementType = Container.resolveType(member.elementType)) &&\r\n                    memberElementType.isAssignableTo && memberElementType.isAssignableTo($data.Entity))\r\n                {\r\n                    var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + member.name;\r\n                    definition[newMemberName] = this._relatedEntityGetMethod(memberElementType, member)\r\n                }\r\n            }\r\n            $data.Class.define(proxyClassName, $data.RelatedEntityProxy, null, definition, null);\r\n        }\r\n\r\n        return Container.resolveType(proxyClassName);\r\n    },\r\n    _relatedEntityGetMethod: function (targetType, navigation, context){\r\n        var that = this;\r\n        var keys = targetType.memberDefinitions.getKeyProperties();\r\n\r\n        return function (keyValue) {\r\n            var proxyClass = that._createRelatedEntityProxyClass(targetType);\r\n            if (keys.length === 1 && typeof keyValue !== 'object') {\r\n                var keyV = {};\r\n                keyV[keys[0].name] = keyValue;\r\n                keyValue = keyV;\r\n            }\r\n\r\n            if (typeof keyValue !== 'object') {\r\n                throw new Exception('Key parameter is invalid');\r\n            } else {\r\n                return new proxyClass(keyValue, navigation, targetType, this, context || (this.context instanceof $data.EntityContext ? this.context : undefined));\r\n            }\r\n        }\r\n    }\r\n}, {\r\n    inheritedTypeProcessor: function(type) {\r\n        if (type.resolveForwardDeclarations) {\r\n            type.resolveForwardDeclarations();\r\n        }\r\n    },\r\n    generateServiceOperation: function (cfg) {\r\n\r\n        var fn;\r\n        if (cfg.serviceMethod) {\r\n            var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : {};\r\n            if (returnType.isAssignableTo && returnType.isAssignableTo($data.Queryable)) {\r\n                fn = cfg.serviceMethod;\r\n            } else {\r\n                fn = function () {\r\n                    var lastParam = arguments[arguments.length - 1];\r\n\r\n                    var pHandler = new $data.PromiseHandler();\r\n                    var cbWrapper;\r\n\r\n                    var args = arguments;\r\n                    if (typeof lastParam === 'function') {\r\n                        cbWrapper = pHandler.createCallback(lastParam);\r\n                        arguments[arguments.length - 1] = cbWrapper;\r\n                    } else {\r\n                        cbWrapper = pHandler.createCallback();\r\n                        arguments.push(cbWrapper);\r\n                    }\r\n\r\n                    try {\r\n                        var result = cfg.serviceMethod.apply(this, arguments);\r\n                        if (result !== undefined)\r\n                            cbWrapper.success(result);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                    return pHandler.getPromise();\r\n                }\r\n            }\r\n\r\n        } else {\r\n            fn = function () {\r\n                var context = this;\r\n\r\n                var boundItem;\r\n                if (this instanceof $data.Entity) {\r\n                    if (!cfg.method) {\r\n                        cfg.method = 'POST';\r\n                    }\r\n\r\n                    if (this.context) {\r\n                        context = this.context;\r\n                    } else {\r\n                        Guard.raise('entity not attached into context');\r\n                        return;\r\n                    }\r\n\r\n                    boundItem = {\r\n                        data: this,\r\n                        entitySet: context.getEntitySetFromElementType(this.getType())\r\n                    };\r\n                }\r\n\r\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(Container.resolveType(cfg.elementType)) : null;\r\n\r\n                var paramConstExpression = null;\r\n                if (cfg.params) {\r\n                    paramConstExpression = [];\r\n                    for (var i = 0; i < cfg.params.length; i++) {\r\n                        //TODO: check params type\r\n                        for (var name in cfg.params[i]) {\r\n                            paramConstExpression.push(Container.createConstantExpression(arguments[i], Container.resolveType(cfg.params[i][name]), name));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var ec = Container.createEntityContextExpression(context);\r\n                var memberdef = (boundItem ? boundItem.data : context).getType().getMemberDefinition(cfg.serviceName);\r\n                var es = Container.createServiceOperationExpression(ec,\r\n                        Container.createMemberInfoExpression(memberdef),\r\n                        paramConstExpression,\r\n                        cfg,\r\n                        boundItem);\r\n\r\n                //Get callback function\r\n                var clb = arguments[arguments.length - 1];\r\n                if (typeof clb !== 'function') {\r\n                    clb = undefined;\r\n                }\r\n\r\n                if (virtualEntitySet) {\r\n                    var q = Container.createQueryable(virtualEntitySet, es);\r\n                    if (clb) {\r\n                        es.isTerminated = true;\r\n                        return q._runQuery(clb);\r\n                    }\r\n                    return q;\r\n                }\r\n                else {\r\n                    var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : null;\r\n\r\n                    var q = Container.createQueryable(context, es);\r\n                    q.defaultType = returnType || $data.Object;\r\n\r\n                    if (returnType === $data.Queryable) {\r\n                        q.defaultType = Container.resolveType(cfg.elementType);\r\n                        if (clb) {\r\n                            es.isTerminated = true;\r\n                            return q._runQuery(clb);\r\n                        }\r\n                        return q;\r\n                    }\r\n                    es.isTerminated = true;\r\n                    return q._runQuery(clb);\r\n                }\r\n            };\r\n        };\r\n\r\n        var params = [];\r\n        if (cfg.params) {\r\n            for (var i = 0; i < cfg.params.length; i++) {\r\n                var param = cfg.params[i];\r\n                for (var name in param) {\r\n                    params.push({\r\n                        name: name,\r\n                        type: param[name]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        $data.typeSystem.extend(fn, cfg, { params: params });\r\n\r\n        return fn;\r\n    },\r\n    _convertLogicalTypeNameToPhysical: function (name) {\r\n        return name + '_$db$';\r\n    },\r\n    _storageModelCache: {\r\n        get: function () {\r\n            if (!this.__storageModelCache)\r\n                this.__storageModelCache = {};\r\n            return this.__storageModelCache;\r\n        },\r\n        set: function () {\r\n            //todo exception\r\n        }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n///EntitySet is responsible for\r\n/// -creating and holding entityType through schema\r\n/// - provide Add method\r\n/// - provide Delete method\r\n/// - provide Update method\r\n/// - provide queryProvider for queryable\r\n\r\n$data.EntitySchemaConfig = function EntitySchemaConfig() {\r\n    this.Name = \"\";\r\n};\r\n$data.entitySetState = { created: 0, defined: 1, active: 2 };\r\n\r\n$data.Class.defineEx('$data.EntitySet',\r\n    [\r\n        { type: $data.Queryable, params: [new $data.Class.ConstructorParameter(1)] }\r\n    ], null,\r\n{\r\n    constructor: function (elementType, context, collectionName, eventHandlers, roles) {\r\n        /// <signature>\r\n        ///     <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations</summary>\r\n        ///     <param name=\"elementType\" type=\"Function\" subClassOf=\"$data.Entity\">Type of entity set elements, elementType must be subclass of $data.Entity</param>\r\n        ///     <param name=\"context\" type=\"$data.EntityContext\">Context of the EntitySet</param>\r\n        ///     <param name=\"collectionName\" type=\"String\">Name of the EntitySet</param>\r\n        /// </signature>\r\n        this.createNew = this[elementType.name] = this.elementType = this.defaultType = elementType;\r\n        var self = this;\r\n        context['createAdd' + elementType.name] = function (initData) {\r\n            var entity  = new elementType(initData);\r\n            return self.add(entity);\r\n        }\r\n        this.stateManager = new $data.EntityStateManager(this);\r\n\r\n        this.collectionName = collectionName;\r\n        this.roles = roles;\r\n\r\n        for (var i in eventHandlers){\r\n            this[i] = eventHandlers[i];\r\n        }\r\n    },\r\n\r\n    addNew: function(item, cb) {\r\n        var callback = $data.typeSystem.createCallbackSetting(cb);\r\n        var _item = new this.createNew(item);\r\n        this.entityContext.saveChanges(cb);\r\n        return _item;\r\n    },\r\n\r\n    executeQuery: function (expression, on_ready) {\r\n        //var compiledQuery = this.entityContext\r\n        var callBack = $data.typeSystem.createCallbackSetting(on_ready);\r\n        this.entityContext.executeQuery(expression, callBack);\r\n    },\r\n    getTraceString: function (expression) {\r\n        return this.entityContext.getTraceString(expression);\r\n    },\r\n    setContext: function (entityContext) {\r\n        this.entitySetState = $data.entitySetState.active;\r\n        this.entityContext = entityContext;\r\n        this.entityContext[this.schema.name] = this[this.schema.name];\r\n    },\r\n    _trackEntity: function (entity) {\r\n        var trackedEntities = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEntities.length; i++) {\r\n            if (trackedEntities[i].data === entity)\r\n                return;\r\n        }\r\n        trackedEntities.push({ entitySet: this, data: entity });\r\n    },\r\n    add: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the context.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.add({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Adds the given entity to the context.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to add</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.add(new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' }));\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///\r\n        ///         var person = new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\r\n        ///         Persons.add(person);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n        data.entityState = $data.EntityState.Added;\r\n        data.changedProperties = undefined;\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n        return data;\r\n    },\r\n\r\n    addMany: function(entities) {\r\n        var result = [];\r\n        var self = this;\r\n        entities.forEach(function (entity) {\r\n            result.push(self.add(entity));\r\n        });\r\n        return result;\r\n    },\r\n    remove: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and marks it as Deleted.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///         Person will be marked as Deleted where an id is 5. Id is a key of entity.\r\n        ///         Persons.remove({ Id: 5 });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Marks the given entity as Deleted.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to remove</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.remove(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Person will be marked as Deleted where an Id is 5. Id is a key of entity.\r\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n        data.entityState = $data.EntityState.Deleted;\r\n        data.changedProperties = undefined;\r\n        this._trackEntity(data);\r\n    },\r\n    attach: function (entity, mode) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.attach({ Id: 5, Email: 'newEmail@example.com' });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Adds to the context and sets state Unchanged.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to attach</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.attach(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Set an entity's related entities without loading\r\n        ///\r\n        ///         var categoryPromo = new $news.Types.Category({ Id: 5 });\r\n        ///         Category.attach(categoryPromo);\r\n        ///         var article = new $news.Types.Article({ Title: 'New Article title', Body: 'Article body', Category: [ categoryPromo ] });\r\n        ///         Article.attach(article);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        for (var i = 0; i < this.entityContext.stateManager.trackedEntities.length; i++) {\r\n            var current = this.entityContext.stateManager.trackedEntities[i];\r\n            if (current.data === data)\r\n                break;\r\n            if (current.data.equals(data)) {\r\n                Guard.raise(new Exception(\"Context already contains this entity!!!\"));\r\n            }\r\n        }\r\n\r\n        if (mode === true) {\r\n            if (data.changedProperties && data.changedProperties.length > 0) {\r\n                data.entityState = $data.EntityState.Modified;\r\n            } else {\r\n                data.entityState = $data.EntityState.Unchanged;\r\n            }\r\n        } else {\r\n            if (typeof mode === \"string\") mode = $data.EntityAttachMode[mode];\r\n            var attachMode = mode || $data.EntityAttachMode[$data.EntityAttachMode.defaultMode];\r\n            if (typeof attachMode === \"function\") {\r\n                attachMode.call($data.EntityAttachMode, data);\r\n            } else {\r\n                data.entityState = $data.EntityState.Unchanged;\r\n                data.changedProperties = undefined;\r\n            }\r\n        }\r\n        /*if (!keepChanges) {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }*/\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n    },\r\n    detach: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and detach from the Context with Detached state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///         Person will be Detached where an id is 5. Id is a key of entity.\r\n        ///         Persons.detach({ Id: 5 });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Detach from the context and sets state Detached.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.detach(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Person will be Detached where an Id is 5. Id is a key of entity.\r\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        var existsItem;\r\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEnt.length; i++) {\r\n            if (trackedEnt[i].data.equals(data))\r\n                existsItem = trackedEnt[i];\r\n        }\r\n\r\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\r\n        if (existsItem) {\r\n            var idx = this.entityContext.stateManager.trackedEntities.indexOf(existsItem);\r\n            entity.entityState = $data.EntityState.Detached;\r\n            this.entityContext.stateManager.trackedEntities.splice(idx, 1);\r\n            return;\r\n        }\r\n    },\r\n    attachOrGet: function (entity, mode) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <returns type=\"$data.Entity\" />\r\n        ///     <example>\r\n        ///         Id is a key of entity.\r\n        ///         var person = Persons.attachOrGet({ Id: 5  });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>If not in context then adds to it and sets state Unchanged.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\r\n        ///     <returns type=\"$data.Entity\" />\r\n        ///     <example>\r\n        ///\r\n        ///         var attachedPerson = Persons.attachOrGet(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Id is a key of entity.\r\n        ///         var p = new $news.Types.Person({ Id: 5 });\r\n        ///         var attachedPerson = Persons.attachOrGet(p);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        var existsItem;\r\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEnt.length; i++) {\r\n            if (trackedEnt[i].data.equals(data))\r\n                existsItem = trackedEnt[i];\r\n        }\r\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\r\n        if (existsItem) {\r\n            return existsItem.data;\r\n        }\r\n\r\n        if (typeof mode === \"string\") mode = $data.EntityAttachMode[mode];\r\n        var attachMode = mode || $data.EntityAttachMode[$data.EntityAttachMode.defaultMode];\r\n        if (typeof attachMode === \"function\") {\r\n            attachMode.call($data.EntityAttachMode, data);\r\n        } else {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }\r\n        //data.entityState = $data.EntityState.Unchanged;\r\n        //data.changedProperties = undefined;\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n        return data;\r\n    },\r\n    //find: function (keys) {\r\n    //    //todo global scope\r\n    //    if (!this.entityKeys) {\r\n    //        this.entityKeys = this.createNew.memberDefinition.filter(function (prop) { return prop.key; }, this);\r\n    //    }\r\n    //    this.entityContext.stateManager.trackedEntities.forEach(function (item) {\r\n    //        if (item.entitySet == this) {\r\n    //            var isOk = true;\r\n    //            this.entityKeys.forEach(function (item, index) { isOK = isOk && (item.data[item.name] == keys[index]); }, this);\r\n    //            if (isOk) {\r\n    //                return item.data;\r\n    //            }\r\n    //        }\r\n    //    }, this);\r\n    //    //TODO: db call\r\n    //    return null;\r\n    //},\r\n    loadItemProperty: function (entity, memberDefinition, callback) {\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n\r\n        return this.entityContext.loadItemProperty(entity, memberDefinition, callback);\r\n    },\r\n    saveChanges: function () {\r\n        return this.entityContext.saveChanges.apply(this.entityContext, arguments);\r\n    },\r\n    addProperty: function (name, getter, setter) {\r\n        return this.elementType.addProperty.apply(this.elementType, arguments);\r\n    },\r\n    expression: {\r\n        get: function () {\r\n            if (!this._expression) {\r\n                var ec = Container.createEntityContextExpression(this.entityContext);\r\n                //var name = entitySet.collectionName;\r\n                //var entitySet = this.entityContext[entitySetName];\r\n                var memberdef = this.entityContext.getType().getMemberDefinition(this.collectionName);\r\n                var es = Container.createEntitySetExpression(ec,\r\n                    Container.createMemberInfoExpression(memberdef), null,\r\n                    this);\r\n                this._expression = es;\r\n            }\r\n\r\n            return this._expression;\r\n        },\r\n        set: function (value) {\r\n            this._expression = value;\r\n        }\r\n    },\r\n    getFieldUrl: function (keys, field) {\r\n        return this.entityContext.getFieldUrl(keys, field, this);\r\n    },\r\n    bulkInsert: function (fields, datas, callback) {\r\n        return this.entityContext.bulkInsert(this, fields, datas, callback);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.EntityState = {\r\n    Detached:0,\r\n    Unchanged: 10,\r\n    Added: 20,\r\n    Modified: 30,\r\n    Deleted: 40\r\n};\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.EntityStateManager', null, null,\r\n{\r\n    constructor: function (entityContext) {\r\n        this.entityContext = null;\r\n        this.trackedEntities = [];\r\n        this.init(entityContext);\r\n    },\r\n    init: function (entityContext) {\r\n        this.entityContext = entityContext;\r\n    },\r\n    reset: function () {\r\n        this.trackedEntities = [];\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Base.extend('$data.EntityWrapper', {\r\n    getEntity: function () {\r\n        Guard.raise(\"pure object\");\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from '../TypeSystem/index.js';\r\n\r\n\r\n$data.createEnum = function (name, container, enumType, enumDefinition) {\r\n    return $data.Enum.extend(name, container, enumType, enumDefinition);\r\n}\r\n\r\n\r\n$data.Enum = $data.Class.define(\"$data.Enum\", null, null, {\r\n    constructor: function(){\r\n        return Guard.raise(new Exception(\"Type Error\", \"Cannot create instance from enum type!\"))  \r\n    }\r\n}, {\r\n    extend: function(name, container, enumType, enumDefinition){\r\n        if (!enumDefinition) {\r\n            if(!enumType){\r\n                enumDefinition = container;\r\n                container = undefined;    \r\n            } else {\r\n                enumDefinition = enumType;\r\n                enumType = container;\r\n                container = undefined;    \r\n            }\r\n        }\r\n        \r\n        enumType = enumType || $data.Integer;\r\n        enumType = Container.resolveType(enumType);\r\n        var classDefinition = {\r\n            __enumType: { get: function(){ return enumType }, set: function() { }, enumerable: false, writable: false }\r\n        };\r\n        \r\n        var getEnumDef = function(value, index){\r\n            return { get: function() { return value }, set: function() { }, enumMember: true, index: index }\r\n        }\r\n        \r\n        var defaultValue = 0;\r\n        var isValueCalculation = [$data.Byte, $data.SByte, $data.Int16, $data.Integer, $data.Int64].indexOf(enumType) >= 0;\r\n        var hasIndex = false;\r\n        \r\n        var enumDef = [];\r\n        if (Array.isArray(enumDefinition)) {\r\n            for(var i = 0; i < enumDefinition.length; i++){\r\n                var enumValA = enumDefinition[i];\r\n                if(typeof enumValA === \"object\" && typeof enumValA.name === \"string\"){\r\n                    enumDef.push({ name: enumValA.name, value: enumValA.value, index: enumValA.index });\r\n                    if(typeof enumValA.index !== \"undefined\") {\r\n                         hasIndex = true;\r\n                    }\r\n                } else if(typeof enumValA === \"string\") {\r\n                    enumDef.push({ name: enumValA, value: undefined, index: undefined });\r\n                } else {\r\n                    return Guard.raise(new Exception(\"Type Error\", \"Invalid enum member\"))  \r\n                }\r\n            }\r\n        } else if (typeof enumDefinition === \"object\"){\r\n            for(var enumName in enumDefinition){\r\n                var enumValO = enumDefinition[enumName];\r\n                if(typeof enumValO === \"object\"){\r\n                    enumDef.push({ name: enumName, value: enumValO.value, index: enumValO.index });\r\n                    if(typeof enumValO.index !== \"undefined\") { \r\n                        hasIndex = true;\r\n                    }\r\n                } else {\r\n                    enumDef.push({ name: enumName, value: enumValO, index: undefined });\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(hasIndex){\r\n            enumDef.sort(function (a,b) {\r\n                if (a.index < b.index)\r\n                    return -1;\r\n                if (a.index > b.index)\r\n                    return 1;\r\n                return 0;\r\n            })\r\n        }\r\n        \r\n        var enumOptions = [];\r\n        for (var i = 0; i < enumDef.length; i++) {\r\n            var enumVal = enumDef[i]\r\n            if (isValueCalculation && typeof enumVal.value !== \"number\" && !enumVal.value) {\r\n               enumVal.value = defaultValue;\r\n            }\r\n            if (typeof enumVal.value === \"number\") {\r\n               defaultValue = enumVal.value; \r\n            }\r\n            defaultValue++;\r\n            enumOptions.push(enumVal.name);\r\n            classDefinition[enumVal.name] = getEnumDef(enumVal.value, enumVal.index);\r\n        }\r\n        \r\n        var enumClass = $data.Base.extend.call(this, name, container, {}, classDefinition);\r\n        \r\n        $data.Container.registerConverter(name, {\r\n            'default': function (value) {\r\n                if(typeof value == \"string\" && enumOptions.indexOf(value) >= 0){\r\n                    var enumMember = enumClass.staticDefinitions.getMember(value);\r\n                    if(enumMember){\r\n                        return enumMember.get();\r\n                    }\r\n                } \r\n                \r\n                for (var i = 0; i < enumDef.length; i++) {\r\n                    var enumVal = enumDef[i]\r\n                    if(enumVal.value === value)\r\n                        return value;\r\n                }\r\n        \r\n                throw 0;\r\n            }\r\n        });\r\n        \r\n        return enumClass;\r\n    }\r\n});\r\n\r\n\r\n\r\nexport var Enum = $data.Enum\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ArrayLiteralExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (items) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        ///<field name=\"items\" type=\"Array\" elementType=\"$data.Expression.ExpressionNode\" />\r\n        this.items = items || [];\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ArrayLiteral, writable: true },\r\n\r\n    items: { value: undefined, dataType: Array, elementType: $data.Expressions.ExpressionNode },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        ///<var nam\r\n        var result = \"[\" + this.items.map(function (item) { return item.toString(); }).join(\",\") + \"]\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CallExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, member, args) {\r\n        ///<summary>Represents a call to an object or global method</summary>\r\n        ///<field name=\"object\" type=\"$data.Expressions.ExpressionNode\">The expression for object that has the method</field>\r\n        ///<field name=\"member\" type=\"$data.MemberDefinition\">The member descriptor</field>\r\n        this.expression = expression;\r\n        this.member = member;\r\n        this.args = args;\r\n    },\r\n\r\n    nodeType: {\r\n        value: $data.Expressions.ExpressionType.Call\r\n    },\r\n\r\n    expression: {\r\n        value: undefined,\r\n        dataType: $data.Expressions.ExpressionNode,\r\n        writable: true\r\n    },\r\n\r\n    member: {\r\n        value: undefined,\r\n        dataType: $data.MemberDefinition,\r\n        writable: true\r\n    },\r\n\r\n    type: {\r\n        value: undefined,\r\n        writable: true\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function(thisObj, method, args) {\r\n                if (typeof method !== 'function') {\r\n                    method = thisObj[method];\r\n                }\r\n                Guard.requireType(\"method\", method, Function);\r\n                return method.apply(thisObj, args);\r\n            };\r\n        },\r\n        set: function (value) { Guard.raise(\"Property can not be set\"); }\r\n    },\r\n\r\n    toString: function (debug) {\r\n        return this.object.toString() + \".\" + this.member.toString() + \"(\" + \")\";\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeParser', null, null, {\r\n\r\n    constructor: function (scopeContext) {\r\n        ///<signature>\r\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///</signature>\r\n        this.scopeContext = scopeContext;\r\n        this.lambdaParams = [];\r\n    },\r\n\r\n    log: function(logInfo) {\r\n        if (this.scopeContext)\r\n            this.scopeContext.log(logInfo);\r\n    },\r\n\r\n    parseExpression: function (code, resolver) {\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a parser result with parser information</summary>\r\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n        if (typeof code === 'object') { code = ''; }\r\n        var result = {\r\n            success: true,\r\n            errorMessage: '',\r\n            errorDetails: ''\r\n        };\r\n        ///<var name=\"AST\" type=\"Date\" />\r\n\r\n        //console.log(code.toString());\r\n        if ($data.Acorn){\r\n            //console.log('using acorn.js');\r\n            return { success: true, expression: this.ParserBuild($data.Acorn.parse('(' + code.toString() + ')').body[0]), errors: [] };\r\n        }else if ($data.Esprima){\r\n            //console.log('using esprima.js');\r\n            return { success: true, expression: this.ParserBuild($data.Esprima.parse('(' + code.toString() + ')').body[0]), errors: [] };\r\n        }else{\r\n            //console.log('using JayLint');\r\n            var AST = $data.ASTParser.parseCode(code);\r\n            this.log({ event: \"AST\", data: AST });\r\n            if (!AST.success) {\r\n                return {\r\n                    success: false,\r\n                    error: \"ASTParser error\",\r\n                    errorMessage: (AST.errors) ? JSON.stringify(AST.errors) : \"could not get code\"\r\n                };\r\n            }\r\n            var b = this.Build2(AST.tree.first[0]);\r\n            result = { success: true, expression: b, errors: AST.errors };\r\n            return result;\r\n        }\r\n    },\r\n\r\n    createExpression: function (code, resolver) {\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\r\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"a + b /c\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\r\n        ///<param name=\"code\" type=\"Function\">The JavaScript function to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n\r\n        var result = this.parseExpression(code, resolver);\r\n        if (!result.success) {\r\n            Guard.raise(\"ExpressionParserError: \" + result.errorMessage);\r\n        }\r\n        return result.expression;\r\n    },\r\n\r\n    ParserBuild: function(node){\r\n        //console.log(node);\r\n        return this['Parser' + node.type](node);\r\n    },\r\n\r\n    ParserExpressionStatement: function(node){\r\n        return this.ParserBuild(node.expression);\r\n    },\r\n\r\n    ParserBlockStatement: function(node){\r\n        return this.ParserBuild(node.body[0]);\r\n    },\r\n\r\n    ParserReturnStatement: function(node){\r\n        return this.ParserBuild(node.argument);\r\n    },\r\n\r\n    ParserMemberExpression: function(node){\r\n        return new $data.Expressions.PropertyExpression(\r\n            this.ParserBuild(node.object),\r\n            new $data.Expressions.ConstantExpression(node.property.name || node.property.value, typeof (node.property.name || node.property.value))\r\n        );\r\n    },\r\n\r\n    ParserIdentifier: function(node){\r\n        return this.ParserParameter(node,\r\n            this.lambdaParams.indexOf(node.name) > -1\r\n                ? $data.Expressions.ExpressionType.LambdaParameterReference\r\n                : $data.Expressions.ExpressionType.Parameter\r\n            );\r\n    },\r\n\r\n    ParserObjectExpression: function(node){\r\n        var props = new Array(node.properties.length);\r\n        for (var i = 0; i < node.properties.length; i++){\r\n            props[i] = this.ParserProperty(node.properties[i]);\r\n        }\r\n\r\n        return new $data.Expressions.ObjectLiteralExpression(props);\r\n    },\r\n\r\n    ParserArrayExpression: function(node){\r\n        var items = new Array(node.elements.length);\r\n        for (var i = 0; i < node.elements.length; i++){\r\n            items[i] = this.ParserBuild(node.elements[i]);\r\n        }\r\n\r\n        return new $data.Expressions.ArrayLiteralExpression(items);\r\n    },\r\n\r\n    ParserProperty: function(node){\r\n        return new $data.Expressions.ObjectFieldExpression(node.key.name, this.ParserBuild(node.value));\r\n    },\r\n\r\n    ParserFunctionExpression: function(node){\r\n        var params = new Array(node.params.length);\r\n        for (var i = 0; i < node.params.length; i++){\r\n            this.lambdaParams.push(node.params[i].name);\r\n            params[i] = this.ParserParameter(node.params[i], $data.Expressions.ExpressionType.LambdaParameter);\r\n            params[i].owningFunction = result;\r\n        }\r\n        var result = new $data.Expressions.FunctionExpression(node.id ? node.id.name : node.id, params, this.ParserBuild(node.body));\r\n\r\n        return result;\r\n    },\r\n\r\n    ParserParameter: function(node, nodeType){\r\n        var result = new $data.Expressions.ParameterExpression(node.name, null, nodeType);\r\n        if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference){\r\n            result.paramIndex = this.lambdaParams.indexOf(node.name);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    ParserLogicalExpression: function(node){\r\n        return this.ParserBinaryExpression(node);\r\n    },\r\n\r\n    ParserOperators: {\r\n        value: {\r\n            \"==\": { expressionType: $data.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function (a, b) { return a == b; } },\r\n            \"===\": { expressionType: $data.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function (a, b) { return a === b; } },\r\n            \"!=\": { expressionType: $data.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function (a, b) { return a != b; } },\r\n            \"!==\": { expressionType: $data.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function (a, b) { return a !== b; } },\r\n            \">\": { expressionType: $data.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function (a, b) { return a > b; } },\r\n            \">=\": { expressionType: $data.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a >= b; } },\r\n            \"<=\": { expressionType: $data.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a <= b; } },\r\n            \"<\": { expressionType: $data.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function (a, b) { return a < b; } },\r\n            \"&&\": { expressionType: $data.Expressions.ExpressionType.And, type: \"boolean\", implementation: function (a, b) { return a && b; } },\r\n            \"||\": { expressionType: $data.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function (a, b) { return a || b; } },\r\n            \"&\": { expressionType: $data.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function (a, b) { return a & b; } },\r\n            \"|\": { expressionType: $data.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function (a, b) { return a | b; } },\r\n            \"+\": { expressionType: $data.Expressions.ExpressionType.Add, type: \"number\", implementation: function (a, b) { return a + b; } },\r\n            \"-\": { expressionType: $data.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function (a, b) { return a - b; } },\r\n            \"/\": { expressionType: $data.Expressions.ExpressionType.Divide, type: \"number\", implementation: function (a, b) { return a / b; } },\r\n            \"%\": { expressionType: $data.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function (a, b) { return a % b; } },\r\n            \"*\": { expressionType: $data.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function (a, b) { return a * b; } },\r\n            \"[\": { expressionType: $data.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function (a, b) { return a[b]; } },\r\n            \"in\": { expressionType: $data.Expressions.ExpressionType.In, type: 'boolean', implementation: function (a, b) { return a in b; } }\r\n        }\r\n    },\r\n\r\n    ParserUnaryOperators: {\r\n        value: {\r\n            \"+\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Positive, type: \"number\", implementation: function (operand) { return +operand; } },\r\n            \"-\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Negative, type: \"number\", implementation: function (operand) { return -operand; } },\r\n            \"++true\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return ++operand; } },\r\n            \"--true\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return --operand; } },\r\n            \"++false\": { arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return operand++; } },\r\n            \"!\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function (operand) { return !operand; } },\r\n            \"--false\": { arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return operand--; } }\r\n        }\r\n    },\r\n\r\n    ParserUnaryExpression: function(node){\r\n        return new $data.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator], this.ParserUnaryOperators[node.operator].expressionType);\r\n    },\r\n\r\n    ParserUpdateExpression: function(node){\r\n        return new $data.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator + node.prefix], this.ParserUnaryOperators[node.operator + node.prefix].nodeType);\r\n    },\r\n\r\n    ParserBinaryExpression: function(node){\r\n        return new $data.Expressions.SimpleBinaryExpression(\r\n            this.ParserBuild(node.left),\r\n            this.ParserBuild(node.right),\r\n            this.ParserOperators[node.operator].expressionType,\r\n            node.operator,\r\n            this.ParserOperators[node.operator].type\r\n        );\r\n    },\r\n\r\n    ParserThisExpression: function(node){\r\n        return new $data.Expressions.ThisExpression();\r\n    },\r\n\r\n    ParserLiteral: function(node){\r\n        return new $data.Expressions.ConstantExpression(node.value, typeof node.value);\r\n    },\r\n\r\n    ParserCallExpression: function(node){\r\n        var method = this.ParserBuild(node.callee);\r\n        var args = new Array(node.arguments.length);\r\n        for (var i = 0; i < node.arguments.length; i++){\r\n            args[i] = this.ParserBuild(node.arguments[i]);\r\n        }\r\n\r\n        var member;\r\n        var expression;\r\n        switch (true){\r\n            case method instanceof $data.Expressions.PropertyExpression:\r\n                expression = method.expression;\r\n                member = method.member;\r\n                break;\r\n            case method instanceof $data.Expressions.ParameterExpression:\r\n                expression = new $data.Expressions.ConstantExpression(null, typeof null);\r\n                member = method;\r\n                break;\r\n        }\r\n\r\n        return new $data.Expressions.CallExpression(expression, member, args);\r\n    }/*,\r\n\r\n    Build2: function (node) {\r\n        ///<param name=\"node\" type=\"Lint\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        var n;\r\n        switch (node.arity) {\r\n            case \"number\":\r\n            case \"string\":\r\n                n = this.BuildConstant(node);\r\n                break;\r\n            case \"prefix\":\r\n                switch (node.value) {\r\n                    case \"{\":\r\n                        n = this.BuildObjectLiteral(node);\r\n                        break;\r\n                    case \"[\":\r\n                        n = this.BuildArrayLiteral(node);\r\n                        break;\r\n                    case $data.unaryOperators.resolve(node.value):\r\n                        n = this.BuildUnary(node);\r\n                        break;\r\n                    //TODO: default case\r\n                }\r\n                break;\r\n            case \"suffix\":\r\n                switch (node.value) {\r\n                    case $data.unaryOperators.resolve(node.value):\r\n                        n = this.BuildUnary(node);\r\n                        break;\r\n                    default:\r\n                        Guard.raise(\"Unknown suffix: \" + node.value);\r\n                }\r\n                break;\r\n            case \"infix\":\r\n                switch (node.value) {\r\n                    case \"[\":\r\n                        n = this.BuildArray(node);\r\n                        break;\r\n                    case $data.binaryOperators.resolve(node.value):\r\n                        n = this.BuildSimpleBinary(node);\r\n                        break;\r\n                    case \"function\":\r\n                        Guard.raise(\"Unexpected function arity\");\r\n                    case \"(\":\r\n                        n = this.BuildCall(node);\r\n                        break;\r\n                    case \".\":\r\n                        n = this.BuildProperty(node);\r\n                        break;\r\n                    default:\r\n                        debugger;\r\n                        //TODO: remove debugger, throw exception or break\r\n                }\r\n                break;\r\n            case \"statement\":\r\n                switch (node.value) {\r\n                    case \"function\":\r\n                        n = this.BuildFunction(node);\r\n                        //TODO: consider adding break\r\n                }\r\n                break;\r\n            default:\r\n                switch (node.value) {\r\n                    case \"function\":\r\n                        n = this.BuildFunction(node);\r\n                        break;\r\n                    case \"true\":\r\n                    case \"false\":\r\n                    case \"null\":\r\n                        n = this.BuildConstant(node);\r\n                        break;\r\n                    case \"this\":\r\n                        n = this.BuildThis(node);\r\n                        break;\r\n                    default:\r\n                        n = this.BuildParameter(node);\r\n                        break;\r\n                }\r\n        }\r\n        return n;\r\n    },\r\n\r\n    BuildThis: function (node) {\r\n        var result = Container.createThisExpression();\r\n        return result;\r\n    },\r\n\r\n    BuildConstant: function (node) {\r\n        ///<param name=\"node\" type=\"ConstantASTNode\" />\r\n        var value = node.value;\r\n        var type = node.type;\r\n        if (node.reserved === true) {\r\n            switch (node.value) {\r\n                case \"true\": value = true; type = typeof true; break;\r\n                case \"false\": value = false; type = typeof false; break;\r\n                case \"null\": value = null; type = typeof null; break;\r\n                //TODO: missing default case\r\n            }\r\n        }\r\n        var result = new $data.Expressions.ConstantExpression(value, type);\r\n        return result;\r\n    },\r\n\r\n    BuildFunctionParameter: function (node) {\r\n\r\n    },\r\n\r\n    BuildArray: function (node) {\r\n        switch (node.second.type) {\r\n            case \"string\":\r\n                return this.BuildProperty(node);\r\n            case \"number\":\r\n            default:\r\n                return this.BuildSimpleBinary(node);\r\n        }\r\n    },\r\n\r\n    BuildParameter: function (node) {\r\n        ///<param name=\"node\" type=\"ParameterASTNode\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n        var paramName = node.value;\r\n        //TODO\r\n        //var paramType = this.resolver.resolveParameterType(node);\r\n        var nodeType = node.funct ? $data.Expressions.ExpressionType.LambdaParameter :\r\n                                    this.lambdaParams.indexOf(node.value) > -1 ?\r\n                                                $data.Expressions.ExpressionType.LambdaParameterReference : $data.Expressions.ExpressionType.Parameter;\r\n        var result = new $data.Expressions.ParameterExpression(node.value, null, nodeType);\r\n\r\n        if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference) {\r\n            result.paramIndex = this.lambdaParams.indexOf(node.value);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    BuildArrayLiteral: function(node) {\r\n        var self = this;\r\n        var items = node.first.map(function (item) { return self.Build2(item); });\r\n        var result = new $data.Expressions.ArrayLiteralExpression(items);\r\n        return result;\r\n    },\r\n\r\n    BuildObjectLiteral: function (node) {\r\n        var self = this;\r\n        var fields = node.first.map(function (item) {\r\n            var eItem = self.Build2(item.first);\r\n            var result = new $data.Expressions.ObjectFieldExpression(item.value, eItem);\r\n            return result;\r\n        });\r\n        var result = new $data.Expressions.ObjectLiteralExpression(fields);\r\n        return result;\r\n    },\r\n\r\n    BuildFunction: function (node) {\r\n        ///<param name=\"node\" type=\"FunctionASTNode\"/>\r\n        ///<returns type=\"$data.Expressions.FunctionExpression\" />\r\n        var self = this;\r\n        var paramStack = [];\r\n        var params = node.first && node.first.map(function (paramNode) {\r\n            //paramStack.push(paramNode.value);\r\n            this.lambdaParams.push(paramNode.value);\r\n            return self.BuildParameter(paramNode);\r\n        }, this);\r\n        params = params || [];\r\n\r\n        //skipping return for convenience\r\n        //Possible we should raise an error as predicates and selectors can\r\n        //not be code blocks just expressions\r\n\r\n        var hasReturn = node.block.length == 0 ? false :\r\n            node.block[0].value === \"return\" ? true : false;\r\n        var body = (node.block.length > 0) ? this.Build2(hasReturn ? node.block[0].first : node.block[0]) : null;\r\n\r\n        paramStack.forEach(function () { this.lambdaParams.pop(); }, this);\r\n\r\n        var result = new $data.Expressions.FunctionExpression(node.value, params, body);\r\n        params.forEach(function (param) {\r\n            param.owningFunction = result;\r\n        });\r\n\r\n        //TODO place on prototyope\r\n        result.name = node.name;\r\n        return result;\r\n    },\r\n\r\n    BuildCall: function (node) {\r\n        var self = this;\r\n        var method = self.Build2(node.first);\r\n        var args = node.second.map(function (exp) { return self.Build2(exp); });\r\n        var member;\r\n        var expression;\r\n        switch(true){\r\n            case method instanceof $data.Expressions.PropertyExpression:\r\n                expression = method.expression;\r\n                member = method.member;\r\n                break;\r\n            case method instanceof $data.Expressions.ParameterExpression:\r\n                expression = Container.createConstantExpression(null, typeof null);\r\n                member = method;\r\n                break;\r\n            //TODO: missing default case\r\n        }\r\n\r\n        var result = Container.createCallExpression(expression, member, args);\r\n        return result;\r\n    },\r\n\r\n    BuildProperty: function (node) {\r\n        ///<summary>Builds a PropertyExpression from the AST node</summary>\r\n        ///<param name=\"node\" type=\"MemberAccessASTNode\" />\r\n        ///<returns type=\"$data.Expressions.PropertyExpression\" />\r\n        var expression = this.Build2(node.first);\r\n        //TODO\r\n        //var type = expression.type;\r\n        //var member = type.getMemberDefinition()\r\n        //TODO how to not if?????\r\n        var member;\r\n        if (node.second.identifier) {\r\n            member = new $data.Expressions.ConstantExpression(node.second.value, \"string\");\r\n        } else {\r\n            member = this.Build2(node.second);\r\n        }\r\n        var result = new $data.Expressions.PropertyExpression(expression, member);\r\n        return result;\r\n    },\r\n\r\n\r\n    BuildUnary: function(node) {\r\n        var operator = $data.unaryOperators.getOperator(node.value, node.arity);\r\n        var nodeType = operator.expressionType;\r\n        var operand = this.Build2(node.first);\r\n        var result = new $data.Expressions.UnaryExpression(operand, operator, nodeType);\r\n        return result;\r\n    },\r\n\r\n    BuildSimpleBinary: function (node) {\r\n        ///<param name=\"node\" type=\"LintInflixNode\" />\r\n\r\n        var operator = $data.binaryOperators.getOperator(node.value);\r\n        var nodeType = operator.expressionType;\r\n\r\n        var left = this.Build2(node.first || node.left);\r\n        var right = this.Build2(node.second || node.right);\r\n        var result = new $data.Expressions.SimpleBinaryExpression(left, right, nodeType, node.value, operator.type);\r\n        return result;\r\n    }\r\n\r\n    //Build: function (node, expNode) {\r\n    //    var n;\r\n    //    switch (node.arity) {\r\n    //        case \"ternary\":\r\n    //            if (node.value == \"?\")\r\n    //                n = this.BuildDecision(node, expNode);\r\n    //            else\r\n    //                Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n    //            break;\r\n    //        case null:\r\n    //        default:\r\n    //            Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n    //    }\r\n    //    return n;\r\n    //},*/\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ConstantExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (value, type, name) {\r\n        this.value = value;\r\n        //TODO\r\n        //this.type = Container.getTypeName(value);\r\n\r\n        this.type = type;\r\n        this.name = name;\r\n        if (!Object.isNullOrUndefined(this.value)) {\r\n            this.type = Container.resolveType(this.type)\r\n            if (Container.resolveType(Container.getTypeName(this.value)) !== this.type)\r\n                this.value = Container.convertTo(value, this.type);\r\n        }\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Constant, enumerable: true },\r\n    type: { value: Object, writable: true },\r\n    value: { value: undefined, writable: true },\r\n    toString: function (debug) {\r\n        //return \"[constant: \" + this.value.toString() + \"]\";\r\n        return this.value.toString();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ContinuationExpressionBuilder', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (mode) {\r\n        this.mode = mode;\r\n    },\r\n    compile: function (query) {\r\n\r\n        var findContext = { mode: \"find\", skipExists: false };\r\n        this.Visit(query.expression, findContext);\r\n\r\n        var result = {\r\n            skip: findContext.skipSize,\r\n            take: findContext.pageSize,\r\n            message: ''\r\n        }\r\n\r\n\r\n        if ('pageSize' in findContext) {\r\n            var expression;\r\n            var context = { mode: this.mode, pageSize: findContext.pageSize };\r\n\r\n            if (!findContext.skipExists && (findContext.pageSize)) {\r\n                context.append = true;\r\n                expression = this.Visit(query.expression, context);\r\n\r\n            } else if (findContext.skipExists) {\r\n                expression = this.Visit(query.expression, context)\r\n            }\r\n\r\n            if (!context.abort) {\r\n                result.expression = expression\r\n            }\r\n            else {\r\n                result.skip = (result.skip || 0) - result.take;\r\n                result.message = 'Invalid skip value!';\r\n            }\r\n        }else{\r\n            result.message = 'take expression not defined in the chain!';\r\n        }\r\n\r\n        return result;\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n\r\n        switch (context.mode) {\r\n            case 'find':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Take) {\r\n                    context.pageSize = expression.amount.value;\r\n                } else {\r\n                    context.skipSize = expression.amount.value;\r\n                    context.skipExists = true;\r\n                }\r\n                break;\r\n            case 'prev':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Skip) {\r\n                    var amount = expression.amount.value - context.pageSize;\r\n                    context.abort = amount < 0 && expression.amount.value >= context.pageSize;\r\n\r\n                    var constExp = Container.createConstantExpression(Math.max(amount, 0), \"number\");\r\n                    return Container.createPagingExpression(expression.source, constExp, expression.nodeType);\r\n                } else if (context.append) {\r\n                    //no skip expression, skip: 0, no prev\r\n                    context.abort = true;\r\n                }\r\n                break;\r\n            case 'next':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Skip) {\r\n                    var amount = context.pageSize + expression.amount.value;\r\n                    var constExp = Container.createConstantExpression(amount, \"number\");\r\n                    return Container.createPagingExpression(expression.source, constExp, expression.nodeType);\r\n                } else if (context.append) {\r\n                    //no skip expression, skip: 0\r\n                    var constExp = Container.createConstantExpression(context.pageSize, \"number\");\r\n                    return Container.createPagingExpression(expression, constExp, $data.Expressions.ExpressionType.Skip);\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n\r\n        this.Visit(expression.source, context);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.AssociationInfoExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (associationInfo) {\r\n        this.associationInfo = associationInfo;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.AssociationInfo, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, parameters) {\r\n        if (Container.resolveType(Container.getTypeName(source)) == $data.String && source.replace(/^[\\s\\xA0]+/, \"\").match(\"^function\") != \"function\") {\r\n            source = \"function (it) { return \" + source + \"; }\";\r\n        }\r\n\r\n        this.source = source;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Code, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeToEntityConverter', $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function (scopeContext) {\r\n        ///<summary>This visitor converts a JS language tree into a semantical Entity Expression Tree &#10;This visitor should be invoked on a CodeExpression</summary>\r\n        ///<param name=\"context\">context.thisArg contains parameters, context.lambdaParams should have an array value</param>\r\n        this.scopeContext = scopeContext;\r\n        this.parameters = [];\r\n\r\n    },\r\n\r\n\r\n    VisitBinary: function (expression, context) {\r\n        var left = this.Visit(expression.left, context);\r\n        var right = this.Visit(expression.right, context);\r\n\r\n        if ((!(left instanceof $data.Expressions.ConstantExpression) && right instanceof $data.Expressions.ConstantExpression) ||\r\n            (!(right instanceof $data.Expressions.ConstantExpression) && left instanceof $data.Expressions.ConstantExpression)) {\r\n\r\n            var refExpression, constExpr;\r\n            if (right instanceof $data.Expressions.ConstantExpression) {\r\n                refExpression = left;\r\n                constExpr = right;\r\n            } else {\r\n                refExpression = right;\r\n                constExpr = left;\r\n            }\r\n\r\n            var memInfo;\r\n            if ((memInfo = refExpression.selector) instanceof $data.Expressions.MemberInfoExpression ||\r\n                (memInfo = refExpression.operation) instanceof $data.Expressions.MemberInfoExpression) {\r\n\r\n\r\n                if (memInfo.memberDefinition && (memInfo.memberDefinition.type || memInfo.memberDefinition.dataType)) {\r\n                    var fieldType = Container.resolveType(memInfo.memberDefinition.type || memInfo.memberDefinition.dataType);\r\n                    var constExprType = Container.resolveType(constExpr.type);\r\n\r\n                    if (fieldType !== constExprType) {\r\n\r\n                        var value = constExpr.value;\r\n                        if (expression.operator === $data.Expressions.ExpressionType.In) {\r\n                            if (Array.isArray(value)) {\r\n                                var resultExp = [];\r\n                                for (var i = 0; i < value.length; i++) {\r\n                                    resultExp.push(new $data.Expressions.ConstantExpression(value[i], fieldType));\r\n                                }\r\n                                value = resultExp;\r\n                                fieldType = $data.Array;\r\n                            } else {\r\n                                fieldType = constExprType;\r\n                            }\r\n                        }\r\n\r\n                        if (right === constExpr) {\r\n                            right = new $data.Expressions.ConstantExpression(value, fieldType, right.name);\r\n                        } else {\r\n                            left = new $data.Expressions.ConstantExpression(value, fieldType, left.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var operatorResolution = this.scopeContext.resolveBinaryOperator(expression.nodeType, expression, context.frameType);\r\n        var result = Container.createSimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, operatorResolution);\r\n        return result;\r\n    },\r\n\r\n    VisitUnary: function (expression, context) {\r\n        var operand = this.Visit(expression.operand, context);\r\n        var operatorResolution = this.scopeContext.resolveUnaryOperator(expression.nodeType, expression, context.frameType);\r\n        var result = Container.createUnaryExpression(operand, expression.operator, expression.nodeType, operatorResolution);\r\n        return result;\r\n    },\r\n\r\n    VisitParameter: function (expression, context) {\r\n        Guard.requireValue(\"context\", context);\r\n        var et = $data.Expressions.ExpressionType;\r\n        switch (expression.nodeType) {\r\n            case et.LambdaParameterReference:\r\n                var result = Container.createEntityExpression(context.lambdaParameters[expression.paramIndex], { lambda: expression.name });\r\n                return result;\r\n            case et.LambdaParameter:\r\n                //TODO: throw descriptive exception or return a value\r\n                break;\r\n            default:\r\n                Guard.raise(\"Global parameter \" + expression.name + \" not found. For query parameters use 'this.field' notation\");\r\n                break;\r\n        }\r\n    },\r\n\r\n    VisitThis: function (expression, context) {\r\n        ///<summary>converts the ThisExpression into a QueryParameterExpression tha't value will be evaluated and stored in this.parameters collection</summary>\r\n        var index = this.parameters.push({ name: \"\", value: undefined }) - 1;\r\n        var result = Container.createQueryParameterExpression(\"\", index, context.queryParameters, undefined);\r\n        return result;\r\n    },\r\n\r\n    VisitFunction: function (expression, context) {\r\n        var result = $data.Expressions.ExpressionVisitor.prototype.VisitFunction.apply(this, arguments);\r\n        return result.body;\r\n    },\r\n\r\n    VisitCall: function (expression, context) {\r\n        //var exp = this.Visit(expression.expression);\r\n        var self = this;\r\n        var exp = this.Visit(expression.expression, context);\r\n        var member = this.Visit(expression.member, context);\r\n        var args = expression.args.map(function (arg) {\r\n            return self.Visit(arg, context);\r\n        });\r\n        var result;\r\n\r\n        ///filter=>function(p) { return p.Title == this.xyz.BogusFunction('asd','basd');}\r\n        switch (true) {\r\n            case exp instanceof $data.Expressions.QueryParameterExpression:\r\n                var argValues = args.map(function (a) { return a.value; });\r\n                result = expression.implementation(exp.value, member.value, argValues);\r\n                //var args = expressions\r\n                return Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, result, typeof result);\r\n            case exp instanceof $data.Expressions.EntityFieldExpression:\r\n\r\n            case exp instanceof $data.Expressions.EntityFieldOperationExpression:\r\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFieldOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\r\n                return result;\r\n\r\n            case exp instanceof $data.Expressions.EntitySetExpression:\r\n                var operation = this.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createFrameOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\r\n                return result;\r\n\r\n            case exp instanceof $data.Expressions.EntityExpression:\r\n                var operation = this.scopeContext.resolveTypeOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\r\n                }\r\n\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\r\n                return result;\r\n                break;\r\n            case exp instanceof $data.Expressions.EntityContextExpression:\r\n                var operation = this.scopeContext.resolveContextOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\r\n                }\r\n\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createContextFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\r\n                return result;\r\n                break;\r\n            default:\r\n                Guard.raise(\"VisitCall: Only fields can have operations: \" + expression.getType().name);\r\n                //TODO we must not alter the visited tree\r\n        }\r\n\r\n    },\r\n    _resolveFunctionArguments: function (args, params) {\r\n        if (params) // remove current field poz\r\n            params = params.filter(function (p, i) { return p.name !== '@expression'; });\r\n\r\n        //objectArgs\r\n        if (args.length === 1 && args[0] instanceof $data.Expressions.ConstantExpression && typeof args[0].value === 'object' && args[0].value && params && params[0] &&\r\n            args[0].value.constructor === $data.Object && params.some(function (param) { return param.name in args[0].value })) {\r\n\r\n            return params.map(function (p) {\r\n                var type = p.type || p.dataType || args[0].type;\r\n                return new $data.Expressions.ConstantExpression(args[0].value[p.name], Container.resolveType(type), p.name);\r\n            });\r\n\r\n        } else {\r\n            return args.map(function (expr, i) {\r\n                if (expr instanceof $data.Expressions.ConstantExpression && params && params[i]) {\r\n                    var type = params[i].type || params[i].dataType || expr.type;\r\n                    return new $data.Expressions.ConstantExpression(expr.value, Container.resolveType(type), params[i].name);\r\n                } else {\r\n                    return expr;\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    VisitProperty: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.PropertyExpression\" />\r\n        var exp = this.Visit(expression.expression, context);\r\n        var member = this.Visit(expression.member, context);\r\n\r\n        //Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\r\n        Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\r\n\r\n        function isPrimitiveType(memberDefinitionArg) {\r\n\r\n            var t = memberDefinitionArg.dataType;\r\n            if (typeof t === 'function') { return false; }\r\n\r\n\t\t\t// suspicious code\r\n            /*switch (t) {\r\n                //TODO: implement this\r\n            }*/\r\n        }\r\n\r\n        switch (exp.expressionType) {\r\n            case $data.Expressions.EntityExpression:\r\n                var memberDefinition = exp.getMemberDefinition(member.value);\r\n                if (!memberDefinition) {\r\n                    Guard.raise(new Exception(\"Unknown member: \" + member.value, \"MemberNotFound\"));\r\n                }\r\n                //var storageMemberDefinition =\r\n                var storageField = memberDefinition.storageModel\r\n                                                   .PhysicalType.memberDefinitions.getMember(memberDefinition.name);\r\n                var res;\r\n                var memberDefinitionExp;\r\n                switch (storageField.kind) {\r\n                    case \"property\":\r\n                        memberDefinitionExp = Container.createMemberInfoExpression(memberDefinition);\r\n                        res = Container.createEntityFieldExpression(exp, memberDefinitionExp);\r\n                        return res;\r\n                    case \"navProperty\":\r\n                        var assocInfo = memberDefinition.storageModel.Associations[memberDefinition.name];\r\n                        var setExpression = Container.createEntitySetExpression(exp, Container.createAssociationInfoExpression(assocInfo));\r\n                        if (assocInfo.ToMultiplicity !== \"*\") {\r\n                            var ee = Container.createEntityExpression(setExpression, {});\r\n                            return ee;\r\n                        }/* else {\r\n                            context.lambdaParameters.push(setExpression);\r\n                        }*/\r\n                        return setExpression;\r\n                    case \"complexProperty\":\r\n                        memberDefinitionExp = Container.createMemberInfoExpression(memberDefinition);\r\n                        res = Container.createComplexTypeExpression(exp, memberDefinitionExp);\r\n                        return res;\r\n                        //TODO: missing default case\r\n                }\r\n\r\n                //s/switch => property or navigationproperty\r\n            case $data.Expressions.ComplexTypeExpression:\r\n                var memDef = exp.getMemberDefinition(member.value);\r\n                if (!(memDef)) {\r\n                    Guard.raise(\"Unknown member \" + member.value + \" on \" + exp.entityType.name);\r\n                }\r\n                var memDefExp = Container.createMemberInfoExpression(memDef);\r\n                var result;\r\n                //TODO!!!!\r\n                if (Container.isPrimitiveType(Container.resolveType(memDef.dataType))) {\r\n                    result = Container.createEntityFieldExpression(exp, memDefExp);\r\n                    return result;\r\n                }\r\n                result = Container.createComplexTypeExpression(exp, memDefExp);\r\n                return result;\r\n            case $data.Expressions.QueryParameterExpression:\r\n                var value = expression.implementation(exp.value, member.value);\r\n                this.parameters[exp.index].name += \"$\" + member.value;\r\n                this.parameters[exp.index].value = value;\r\n                return Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, value, Container.getTypeName(value));\r\n            case $data.Expressions.EntityFieldExpression:\r\n            case $data.Expressions.EntityFieldOperationExpression:\r\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFieldOperationExpression(exp, member, []);\r\n\r\n                return result;\r\n            default:\r\n                Guard.raise(\"Unknown expression type to handle: \" + exp.expressionType.name);\r\n        }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ComplexTypeExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.ComplexTypeExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source, [$data.Expressions.EntityExpression, $data.Expressions.ComplexTypeExpression]);\r\n        Guard.requireType(\"selector\", selector, [$data.Expressions.EntityExpression, $data.Expressions.MemberInfoExpression]);\r\n        this.source = source;\r\n        this.selector = selector;\r\n        var dt = source.entityType.getMemberDefinition(selector.memberName).dataType;\r\n        var t = Container.resolveType(dt);\r\n        this.entityType = t;\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        return this.entityType.getMemberDefinition(name);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Com }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityContextExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (instance) {\r\n        ///<param name=\"instance\" type=\"$data.EntityContext\" />\r\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false });\r\n        this.instance = instance;\r\n        //this.storage_type = {};\r\n        //this.typeName = this.type.name;\r\n    },\r\n    instance: { enumerable: false },\r\n    nodeType : { value: $data.Expressions.ExpressionType.EntityContext, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.IndexingExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.AccessorExpression\" />\r\n        ///</signature>\r\n        Guard.requireValue(\"source\", source);\r\n        Guard.requireValue(\"selector\", selector);\r\n        if (!(source instanceof $data.Expressions.EntitySetExpression) && !(source instanceof $data.Expressions.ServiceOperationExpression)) {\r\n            Guard.raise(\"Only EntitySetExpressions can be the source for an EntityExpression\");\r\n        }\r\n\r\n        this.source = source;\r\n        this.selector = selector;\r\n\r\n        this.entityType = this.source.elementType;\r\n        this.storageModel = this.source.storageModel;\r\n\r\n        Guard.requireValue(\"entityType\", this.entityType);\r\n        Guard.requireValue(\"storageModel\", this.storageModel);\r\n\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        var memdef = this.entityType.getMemberDefinition(name);\r\n        if (!(memdef)) {\r\n            Guard.raise(new Exception(\"Unknown member \" + name + \" on type \"+ this.entityType.name, \"MemberNotFound\"));\r\n        };\r\n            memdef.storageModel = this.storageModel;\r\n        return memdef;\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Entity }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityExpressionVisitor', null, null, {\r\n\r\n    constructor: function () {\r\n        this.lambdaTypes = [];\r\n    },\r\n\r\n    canVisit: function (expression) {\r\n        return expression instanceof $data.Expressions.ExpressionNode;\r\n    },\r\n\r\n    Visit: function (expression, context) {\r\n        if (!this.canVisit(expression))\r\n            return expression;\r\n\r\n        var visitorName = \"Visit\" + expression.getType().name;\r\n        if (visitorName in this) {\r\n            var fn = this[visitorName];\r\n            var result = fn.call(this, expression, context);\r\n            if (typeof result === 'undefined') {\r\n                return expression;\r\n            }\r\n            return result;\r\n        }\r\n        //console.log(\"unhandled expression type:\" + expression.getType().name);\r\n        return expression;\r\n    },\r\n    VisitToArrayExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createToArrayExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitForEachExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createForEachExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        return expression;\r\n    },\r\n\r\n    VisitSingleExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createSingleExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitFirstExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createFirstExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitSomeExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createSomeExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitFindExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createFindExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitEveryExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createEveryExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createCountExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitBatchDeleteExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createBatchDeleteExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitBatchExecuteQueryExpression: function (expression, context) {\r\n        var newQueries = expression.members.map(function (expr) {\r\n            return this.Visit(expr, context);\r\n        }, this);\r\n\r\n        var equal = true;\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            equal = equal && (expression.members[i] === newQueries[i]);\r\n        }\r\n        if (!equal) {\r\n            return Container.createBatchExecuteQueryExpression(newQueries);\r\n        }\r\n\r\n        return expression;\r\n    },\r\n\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        var newValues = expression.members.map(function (ofe) {\r\n            return this.Visit(ofe, context);\r\n        }, this);\r\n        var equal = true;\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            equal = equal && (expression.members[i] === newValues[i]);\r\n        }\r\n        if (!equal) {\r\n            return Container.createObjectLiteralExpression(newValues);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n        var newExpression = this.Visit(expression.expression, context);\r\n        if (expression.expression !== newExpression) {\r\n            return Container.createObjectFieldExpression(expression.fieldName, newExpression);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        var newExpression = this.Visit(expression.source, context);\r\n        if (newExpression !== expression.source) {\r\n            return Container.createIncludeExpression(newExpression, expression.selector);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitUnaryExpression: function(expression, context) {\r\n\r\n    \t/// <param name=\"expression\" type=\"$data.Expressions.UnaryExpression\"></param>\r\n    \t/// <param name=\"context\"></param>\r\n        var operand = this.Visit(expression.operand, context);\r\n        if (expression.operand !== operand) {\r\n            return Container.createUnaryExpression(operand, expression.operator, expression.nodeType, expression.resolution);\r\n        };\r\n        return expression;\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        //<returns type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n        var left = this.Visit(expression.left, context);\r\n        var right = this.Visit(expression.right, context);\r\n        if (left !== expression.left || right !== expression.right) {\r\n            return new $data.Expressions.SimpleBinaryExpression(left, right, expression.nodeType,\r\n                expression.operator, expression.type, expression.resolution);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityContextExpression: function (expression, context) {\r\n        return expression;\r\n    },\r\n\r\n    VisitCodeExpression: function (expression, context) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.CodeExpression\"></param>\r\n        /// <param name=\"context\"></param>\r\n        /// <returns type=\"$data.Expressions.CodeExpression\"></returns>\r\n        return expression;\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createComplexTypeExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createEntityExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createEntityFieldExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var operation = this.Visit(expression.operation, context);\r\n        var parameters = expression.parameters.map(function (p) {\r\n            return this.Visit(p);\r\n        }, this);\r\n        var result = Container.createEntityFieldOperationExpression(source, operation, parameters);\r\n        return result;\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        var exp = this.Visit(expression.expression, context);\r\n        var args = expression.parameters.map(function (p) {\r\n            return this.Visit(p);\r\n        }, this);\r\n        var result = Container.createParametricQueryExpression(exp, args);\r\n        return result;\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createEntitySetExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createFilterExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitProjectionExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n            expr.projectionAs = expression.projectionAs;\r\n            return expr;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createOrderExpression(source, selector, expression.nodeType);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var amount = this.Visit(expression.amount, context);\r\n        if (source !== expression.source || amount !== expression.amount) {\r\n            return Container.createPagingExpression(source, amount, expression.nodeType);\r\n        }\r\n        return expression;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityFieldExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<param name=\"source\" type=\"$data.Entity.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Entity.MemberInfoExpression\" />\r\n        this.selector = selector;\r\n        this.source = source;\r\n\r\n\r\n        if (this.selector instanceof $data.Expressions.MemberInfoExpression ||  this.selector.name) {\r\n            this.memberName = this.selector.name;\r\n        }\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityField }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityFieldOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, operation, parameters) {\r\n        this.source = source;\r\n        this.operation = operation;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityFieldOperation }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntitySetExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector, params, instance) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source,\r\n                    [$data.Expressions.EntityContextExpression, $data.Expressions.EntitySetExpression]);\r\n        Guard.requireType(\"selector\", source,\r\n                    [$data.Expressions.MemberInfoExpression, $data.Expressions.CodeExpression, $data.Expressions.ParametricQueryExpression]);\r\n\r\n        this.source = source;\r\n        this.selector = selector;\r\n        this.params = params;\r\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false, writable: true });\r\n        this.instance = instance;\r\n\r\n        function findContext() {\r\n            //TODO: use source from function parameter and return a value at the end of the function\r\n            var r = source;\r\n            while (r) {\r\n                if (r instanceof $data.Expressions.EntityContextExpression) {\r\n                    return r;\r\n                }\r\n                r = r.source;\r\n            }\r\n        }\r\n\r\n        ///TODO!!!\r\n        this.storage_type = {};\r\n        var c = findContext();\r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntityContextExpression:\r\n                Guard.requireType(\"selector\", selector, $data.Expressions.MemberInfoExpression);\r\n                this.elementType = selector.memberDefinition.elementType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            case this.source instanceof $data.Expressions.EntityExpression:\r\n                Guard.requireType(\"selector\", selector, $data.Expressions.AssociationInfoExpression);\r\n                this.elementType = selector.associationInfo.ToType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            case this.source instanceof $data.Expressions.EntitySetExpression:\r\n                this.elementType = this.source.elementType;\r\n                this.storageModel = this.source.storageModel;\r\n                break;\r\n            case this.source instanceof $data.Expressions.ServiceOperationExpression:\r\n                this.elementType = this.source.elementType;//?????????\r\n                this.storageModel = this.source.storageModel;\r\n                break;\r\n            default:\r\n                Guard.raise(\"take and skip must be the last expressions in the chain!\");\r\n                //Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.getType().name);\r\n                break;\r\n        }\r\n\r\n        // suspicious code\r\n        /*if (this.source instanceof $data.Expressions.EntitySetExpression) {\r\n                //TODO: missing operation\r\n        }*/\r\n        //EntityTypeInfo\r\n\r\n    },\r\n    instance: { enumerable: false },\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntitySet, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ExpressionMonitor', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (monitorDefinition) {\r\n        this.Visit = function (expression, context) {\r\n\r\n            var result = expression;\r\n            var methodName;\r\n            if (this.canVisit(expression)) {\r\n\r\n                //if (monitorDefinition.FilterExpressionNode) {\r\n\r\n                //};\r\n\r\n                if (monitorDefinition.VisitExpressionNode) {\r\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\r\n                };\r\n\r\n                methodName = \"Visit\" + expression.getType().name;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\r\n                }\r\n            }\r\n\r\n\r\n            //apply is about 3-4 times faster then call on webkit\r\n\r\n            var args = arguments;\r\n            if (result !== expression) args = [result, context];\r\n            result = $data.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\r\n\r\n            args = [result, context];\r\n\r\n            if (this.canVisit(result)) {\r\n                var expressionTypeName = result.getType().name;\r\n                if (monitorDefinition.MonitorExpressionNode) {\r\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Monitor\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n                if (monitorDefinition.MutateExpressionNode) {\r\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Mutate\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FilterExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\r\n        ///</signature>\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Filter, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.InlineCountExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.InlineCount, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.BatchExecuteQueryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (members) {\r\n        this.members = members;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.BatchExecuteQuery, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FrameOperator', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function () {\r\n        this.isTerminated = true;\r\n    }\r\n});\r\n\r\n$C('$data.Expressions.CountExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Integer;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Count, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.SingleExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Single, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FindExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source, params, subMember) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.params = params;\r\n        this.subMember = subMember;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Find, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FirstExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.First, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.ForEachExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ForEach, enumerable: true }\r\n});\r\n$C('$data.Expressions.ToArrayExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ToArray, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.SomeExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Some, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.EveryExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Every, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.BatchDeleteExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Integer;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.BatchDelete, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FrameOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, operation, parameters) {\r\n        this.source = source;\r\n        this.operation = operation;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.FrameOperation }\r\n\r\n});\r\n\r\n$C('$data.Expressions.EntityFunctionOperationExpression', $data.Expressions.FrameOperationExpression, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityFunctionOperation }\r\n});\r\n\r\n$C('$data.Expressions.ContextFunctionOperationExpression', $data.Expressions.FrameOperationExpression, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.ContextFunctionOperation }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.IncludeExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Include, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.MemberInfoExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (memberDefinition) {\r\n        this.memberDefinition = memberDefinition;\r\n        this.memberName = memberDefinition.name;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.MemberInfo, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.OrderExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, expression, nType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        //this.source = source;\r\n        //this.selector = expression;\r\n        this.nodeType = nType;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.OrderBy, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParametricQueryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, parameters) {\r\n        this.expression = expression;\r\n        this.parameters = parameters || [];\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ParametricQuery, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ProjectionExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector, params, instance) {\r\n\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Projection, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.QueryExpressionCreator', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (scopeContext) {\r\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\r\n        Guard.requireValue(\"scopeContext\", scopeContext);\r\n        this.scopeContext = scopeContext;\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n            this.lambdaTypes.push(expression);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitServiceOperationExpression: function (expression, context) {\r\n        if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n            this.lambdaTypes.push(expression);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitCodeExpression: function (expression, context) {\r\n        ///<summary>Converts the CodeExpression into an EntityExpression</summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\r\n        var source = expression.source.toString();\r\n        var jsCodeTree = Container.createCodeParser(this.scopeContext).createExpression(source);\r\n        this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\r\n\r\n        //TODO rename classes to reflex variable names\r\n        //TODO engage localValueResolver here\r\n        //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\r\n        var constantResolver = Container.createConstantValueResolver(expression.parameters, $data.__global, this.scopeContext);\r\n        var parameterProcessor = Container.createParameterResolverVisitor();\r\n\r\n        jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\r\n\r\n        this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\r\n        var code2entity = Container.createCodeToEntityConverter(this.scopeContext);\r\n\r\n        ///user provided query parameter object (specified as thisArg earlier) is passed in\r\n        var entityExpression = code2entity.Visit(jsCodeTree, {  queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\r\n\r\n        ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\r\n        var result = Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\r\n        this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\r\n\r\n        return result;\r\n    },\r\n\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createFilterExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitProjectionExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n            expr.projectionAs = expression.projectionAs;\r\n            return expr;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createOrderExpression(source, selector, expression.nodeType);\r\n        }\r\n        return expression;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.QueryParameterExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, index, value, type) {\r\n        this.name = name;\r\n        this.index = index;\r\n        this.value = value;\r\n        //TODO\r\n        this.type = Container.getTypeName(value);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.QueryParameter, writable: false }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.RepresentationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (kind) {\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        return this.entityType.getMemberDefinition(name);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Entity }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ServiceOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector, params, cfg, boundItem) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///<param name=\"params\" type=\"$data.Array\" />\r\n        ///<param name=\"cfg\" type=\"$data.Object\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source, [$data.Expressions.EntityContextExpression]);\r\n        Guard.requireType(\"selector\", source, [$data.Expressions.MemberInfoExpression]);\r\n\r\n        this.source = source;\r\n        this.selector = selector\r\n        this.params = params\r\n        this.cfg = cfg;\r\n        this.boundItem = boundItem;\r\n\r\n        function findContext() {\r\n            //TODO: use source from function parameter and return a value at the end of the function\r\n            var r = source;\r\n            while (r) {\r\n                if (r instanceof $data.Expressions.EntityContextExpression) {\r\n                    return r;\r\n                }\r\n                r = r.source;\r\n            }\r\n        }\r\n\r\n        var c = findContext();\r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntityContextExpression:\r\n                this.elementType = cfg.elementType ? Container.resolveType(cfg.elementType) : (this.elementType ? Container.resolveType(cfg.returnType) : null);\r\n                this.storageModel = cfg.elementType ? c.instance._storageModel.getStorageModel(Container.resolveType(cfg.elementType)) : null;\r\n                break;\r\n            default:\r\n                Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.source.getType().name);\r\n        }\r\n\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ServiceOperation, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n $data.Class.define('$data.Expressions.ExpressionBuilder', null, null,\r\n{\r\n    constructor: function (context) {\r\n        this.context = context;\r\n    },\r\n    _isLambdaParam: function (name) {\r\n        var p = this.context.lambdaParams;\r\n        for (var i = 0; i < p.length; i++) {\r\n            if (p[i] == name)\r\n                return true;\r\n        }\r\n        return false;\r\n    },\r\n    _isParam: function (name) {\r\n        return this.context.paramContext[name] != undefined;\r\n    },\r\n    _isParamRoot: function (name) {\r\n        return this.context.paramsName == name;\r\n    },\r\n    Build: function (node, expNode) {\r\n        var n;\r\n        switch (node.arity) {\r\n            case \"infix\":\r\n                if (\"(\" == node.value)\r\n                    n = this.BuildMethodCall(node, expNode);\r\n                else if (\".\" == node.value)\r\n                    n = this.BuildMember(node, expNode);\r\n                else if ([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildEquality(node, expNode);\r\n                else if ([\"&&\", \"||\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildBinary(node, expNode);\r\n                else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildBinary(node, expNode);\r\n                else if (\"[\" == node.value)\r\n                    n = this.BuildArrayAccess(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of infix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"prefix\":\r\n                if ([\"+\", \"-\", \"!\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildUnary(node, expNode);\r\n                else if ([\"++\", \"--\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildIncDec(node, expNode);\r\n                else if (\"{\" == node.value/* && \"object\" == node.type*/) //TODO: check the second condition necessity\r\n                    n = this.BuildNewExpression(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of prefix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"suffix\":\r\n                if ([\"++\", \"--\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildIncDec(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of suffix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"string\":\r\n            case \"number\":\r\n                n = this.BuildLiteral(node, expNode); //TODO: more arity to literal?\r\n                break;\r\n            case \"ternary\":\r\n                if (node.value == \"?\")\r\n                    n = this.BuildDecision(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                if (node.type == \"boolean\" && (node.value == \"true\" || node.value == \"false\"))\r\n                    n = this.BuildBoolLiteral(node, expNode);\r\n                else\r\n                    n = this.BuildVariable(node, expNode);\r\n                break;\r\n            default:\r\n                Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n        }\r\n        return n;\r\n    },\r\n    BuildNewExpression: function (node, expNode) {\r\n        var newExpression = $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, []);\r\n        var n = node.first;\r\n        for (var i = 0; i < n.length; i++)\r\n            newExpression.values.push(this.Build(n[i], newExpression));\r\n        return newExpression;\r\n    },\r\n    BuildLiteral: function (node, expNode) {\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\r\n    },\r\n    BuildBoolLiteral: function (node, expNode) {\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.type, node.value == \"true\" ? true : false);\r\n    },\r\n    BuildVariable: function (node, expNode) {\r\n        if (!node.first) {\r\n            if (expNode.type == MEMBERACCESS) {\r\n                var subType;\r\n                if (this._isLambdaParam(node.value))\r\n                    subType = \"LAMBDAPARAM\";\r\n                else if (this._isParamRoot(node.value))\r\n                    subType = \"PARAMETERROOT\";\r\n                else if (this._isParam(node.value))\r\n                    subType = \"PARAMETER\";\r\n                else\r\n                    subType = \"PROPERTY\";\r\n            }\r\n            else {\r\n                if (this._isLambdaParam(node.value))\r\n                    subType = \"LAMBDAPARAM\";\r\n                else if (this._isParamRoot(node.value))\r\n                    subType = \"PARAMETERROOT\";\r\n                else if (this._isParam(node.value))\r\n                    subType = \"PARAMETER\";\r\n                else if ($data.__global[node.value] != undefined)\r\n                    subType = \"GLOBALOBJECT\";\r\n                else\r\n\t\t\t\t\tGuard.raise(\r\n\t\t\t\t\t\tnew Exception(\"Unknown variable in '\" + this.context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + node.value + \"'.\",\r\n                        \"InvalidOperation\", { operationName: this.context.operation, missingParameterName: node.value })\r\n\t\t\t\t\t\t);\r\n            }\r\n            return $data.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, node.value, subType);\r\n        }\r\n\r\n        var left = $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, \"name\", node.value);\r\n\r\n        var jsonAssign = $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true);\r\n        var right = this.Build(node.first, jsonAssign);\r\n        //left.parent = jsonAssign;\r\n        jsonAssign.left = left;\r\n        jsonAssign.right = right;\r\n\r\n        left.JSONASSIGN = true;\r\n        right.JSONASSIGN = true;\r\n\r\n        return jsonAssign;\r\n    },\r\n    BuildMember: function (node, expNode) {\r\n        if (node.value != \".\" || node.arity != \"infix\") {\r\n            if (node.type == \"string\") { //TODO: more types?\r\n                return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\r\n            }\r\n            return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true, null, node.value);\r\n        }\r\n        var result = $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true);\r\n        var expression = this.Build(node.first, result);\r\n        var member = this.Build(node.second, result);\r\n        result.expression = expression;\r\n        result.member = member;\r\n        return result;\r\n    },\r\n    BuildUnary: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(true, node.value);\r\n        result.operand = this.Build(node.first, result);\r\n        return result;\r\n    },\r\n    BuildIncDec: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(true, node.value, null, node.arity == \"suffix\");\r\n        result.operand = this.Build(node.first, result);\r\n        return result;\r\n    },\r\n    BuildBinary: function (node, expNode) {\r\n        if (!node.first) Guard.raise(\"Cannot build binary: node.first is null\");\r\n        if (!node.second) Guard.raise(\"Cannot build binary: node.second is null\");\r\n        var result = $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(true, node.value);\r\n        result.left = this.Build(node.first, result);\r\n        result.right = this.Build(node.second, result);\r\n        return result;\r\n    },\r\n    BuildEquality: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(true, node.value);\r\n        result.left = this.Build(node.first, result);\r\n        result.right = this.Build(node.second, result);\r\n        return result;\r\n    },\r\n    BuildDecision: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(true);\r\n        result.expression = this.Build(node.first, result);\r\n        result.left = this.Build(node.second, result);\r\n        result.right = this.Build(node.third, result);\r\n        return result;\r\n    },\r\n    BuildMethodCall: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(true);\r\n        if (node.first.type == \"function\") {\r\n            //-- object's function\r\n            result.object = this.Build(node.first.first, result);\r\n            result.method = node.first.second.value;\r\n        }\r\n        else {\r\n            //-- global function\r\n            if (node.first.type != null)\r\n                Guard.raise(\"Cannot build MethodCall because type is \" + type);\r\n            result.object = null;\r\n            result.method = node.first.value;\r\n        }\r\n        var argNodes = node.second;\r\n        var args = [];\r\n        for (var i = 0; i < argNodes.length; i++) {\r\n            var arg = argNodes[i];\r\n            args[i] = this.Build(arg, result);\r\n        }\r\n        result.args = args;\r\n        return result;\r\n    },\r\n    BuildArrayAccess: function (node, expNode) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var result = $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true);\r\n        result.array = this.Build(node.first, result);\r\n        result.index = this.Build(node.second, result);\r\n        return result;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n//TODO: Finish refactoring ExpressionNode.js\r\n\r\n$data.Class.define(\"$data.Expressions.ExpressionType\", null, null, {}, {\r\n    Constant: \"constant\", // { type:LITERAL, executable:true, valueType:, value: }\r\n    Variable: \"variable\", // { type:VARIABLE, executable:true, name: }\r\n    MemberAccess: \"memberAccess\",    // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n    Call: \"call\",\r\n\r\n    /* binary operators */\r\n    Equal: \"equal\",\r\n    NotEqual: \"notEqual\",\r\n    EqualTyped: \"equalTyped\",\r\n    NotEqualTyped: \"notEqualTyped\",\r\n    GreaterThen: \"greaterThan\",\r\n    LessThen: \"lessThan\",\r\n    GreaterThenOrEqual: \"greaterThanOrEqual\",\r\n    LessThenOrEqual: \"lessThenOrEqual\",\r\n    Or: \"or\",\r\n    OrBitwise: \"orBitwise\",\r\n    And: \"and\",\r\n    AndBitwise: \"andBitwise\",\r\n\r\n\r\n    In: \"in\",\r\n\r\n    Add: \"add\",\r\n    Divide: \"divide\",\r\n    Multiply: \"multiply\",\r\n    Subtract: \"subtract\",\r\n    Modulo: \"modulo\",\r\n    ArrayIndex: \"arrayIndex\",\r\n\r\n    /* unary operators */\r\n    New: \"new\",\r\n    Positive: \"positive\",\r\n    Negative: \"negative\",\r\n    Increment: \"increment\",\r\n    Decrement: \"decrement\",\r\n    Not: \"not\",\r\n\r\n\r\n    This: \"this\",\r\n    LambdaParameterReference: \"lambdaParameterReference\",\r\n    LambdaParameter: \"lambdaParameter\",\r\n    Parameter: \"parameter\",\r\n\r\n    ArrayLiteral: \"arrayLiteral\",\r\n    ObjectLiteral: \"objectLiteral\",\r\n    ObjectField: \"objectField\",\r\n    Function: \"Function\",\r\n    Unknown: \"UNKNOWN\",\r\n\r\n    EntitySet: \"EntitySet\",\r\n    ServiceOperation: \"ServiceOperation\",\r\n    EntityField: \"EntityField\",\r\n    EntityContext: \"EntityContext\",\r\n    Entity: \"Entity\",\r\n    Filter: \"Filter\",\r\n    First: \"First\",\r\n    Count: \"Count\",\r\n    InlineCount: \"InlineCount\",\r\n    BatchExecuteQuery: \"BatchExecuteQuery\",\r\n    Single: \"Single\",\r\n    Find: \"Find\",\r\n    Some: \"Some\",\r\n    Every: \"Every\",\r\n    ToArray: \"ToArray\",\r\n    BatchDelete: \"BatchDelete\",\r\n    ForEach: \"ForEach\",\r\n    Projection: \"Projection\",\r\n    EntityMember: \"EntityMember\",\r\n    EntityFieldOperation: \"EntityFieldOperation\",\r\n    FrameOperation: \"FrameOperation\",\r\n    EntityFunctionOperation: \"EntityFunctionOperation\",\r\n    ContextFunctionOperation: \"ContextFunctionOperation\",\r\n    EntityBinary: \"EntityBinary\",\r\n    Code: \"Code\",\r\n    ParametricQuery: \"ParametricQuery\",\r\n    MemberInfo: \"MemberInfo\",\r\n    QueryParameter: \"QueryParameter\",\r\n    ComplexEntityField: \"ComplexEntityField\",\r\n\r\n    Take: \"Take\",\r\n    Skip: \"Skip\",\r\n    OrderBy: \"OrderBy\",\r\n    OrderByDescending: \"OrderByDescending\",\r\n    Include: \"Include\",\r\n\r\n    IndexedPhysicalAnd:\"IndexedDBPhysicalAndFilterExpression\",\r\n    IndexedLogicalAnd:\"IndexedDBLogicalAndFilterExpression\",\r\n    IndexedLogicalOr: \"IndexedDBLogicalOrFilterExpression\",\r\n    IndexedLogicalIn: \"IndexedDBLogicalInFilterExpression\"\r\n});\r\n\r\n$data.BinaryOperator = function () {\r\n    ///<field name=\"operator\" type=\"string\" />\r\n    ///<field name=\"expressionType\" type=\"$data.ExpressionType\" />\r\n    ///<field name=\"type\" type=\"string\" />\r\n}\r\n\r\n$data.binaryOperators = [\r\n    { operator: \"==\", expressionType: $data.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function (a, b) { return a == b; } },\r\n    { operator: \"===\", expressionType: $data.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function (a, b) { return a === b; } },\r\n    { operator: \"!=\", expressionType: $data.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function (a, b) { return a != b; } },\r\n    { operator: \"!==\", expressionType: $data.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function (a, b) { return a !== b; } },\r\n    { operator: \">\", expressionType: $data.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function (a, b) { return a > b; } },\r\n    { operator: \">=\", expressionType: $data.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a >= b; } },\r\n    { operator: \"<=\", expressionType: $data.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a <= b; } },\r\n    { operator: \"<\", expressionType: $data.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function (a, b) { return a < b; } },\r\n    { operator: \"&&\", expressionType: $data.Expressions.ExpressionType.And, type: \"boolean\", implementation: function (a, b) { return a && b; } },\r\n    { operator: \"||\", expressionType: $data.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function (a, b) { return a || b; } },\r\n    { operator: \"&\", expressionType: $data.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function (a, b) { return a & b; } },\r\n    { operator: \"|\", expressionType: $data.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function (a, b) { return a | b; } },\r\n    { operator: \"+\", expressionType: $data.Expressions.ExpressionType.Add, type: \"number\", implementation: function (a, b) { return a + b; } },\r\n    { operator: \"-\", expressionType: $data.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function (a, b) { return a - b; } },\r\n    { operator: \"/\", expressionType: $data.Expressions.ExpressionType.Divide, type: \"number\", implementation: function (a, b) { return a / b; } },\r\n    { operator: \"%\", expressionType: $data.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function (a, b) { return a % b; } },\r\n    { operator: \"*\", expressionType: $data.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function (a, b) { return a * b; } },\r\n    { operator: \"[\", expressionType: $data.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function (a, b) { return a[b]; } },\r\n    { operator: \"in\", expressionType: $data.Expressions.ExpressionType.In, type: 'boolean', implementation: function (a, b) { return a in b; } }\r\n];\r\n\r\n\r\n$data.binaryOperators.resolve = function (operator) {\r\n    var result = $data.binaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length > 0)\r\n        return operator;\r\n    //Guard.raise(\"Unknown operator: \" + operator);\r\n};\r\n\r\n$data.binaryOperators.contains = function (operator) {\r\n    return $data.binaryOperators.some(function (item) { return item.operator == operator; });\r\n};\r\n\r\n$data.binaryOperators.getOperator = function (operator) {\r\n    ///<returns type=\"BinaryOperator\" />\r\n    var result = $data.binaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length < 1)\r\n        Guard.raise(\"Unknown operator: \" + operator);\r\n    return result[0];\r\n};\r\n\r\n\r\n$data.unaryOperators = [\r\n    { operator: \"+\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Positive, type: \"number\", implementation: function (operand) { return +operand; } },\r\n    { operator: \"-\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Negative, type: \"number\", implementation: function (operand) { return -operand; } },\r\n    { operator: \"++\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return ++operand; } },\r\n    { operator: \"--\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return --operand; } },\r\n    { operator: \"++\", arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return operand++; } },\r\n    { operator: \"!\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function (operand) { return !operand; } },\r\n    { operator: \"--\", arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return operand--; } }\r\n\r\n    //{ operator: \"new\", expressionType : $data.Expressions.ExpressionType.New, type: \"object\", implementation: function(operand) { return new operand; }\r\n];\r\n\r\n$data.unaryOperators.resolve = function (operator) {\r\n    var result = $data.unaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length > 0)\r\n        return operator;\r\n    //Guard.raise(\"Unknown operator: \" + operator);\r\n};\r\n\r\n$data.unaryOperators.contains = function (operator) {\r\n    return $data.unaryOperators.some(function (item) { return item.operator == operator; });\r\n};\r\n\r\n$data.unaryOperators.getOperator = function (operator, arity) {\r\n    ///<returns type=\"BinaryOperator\" />\r\n    var result = $data.unaryOperators.filter(function (item) { return item.operator == operator && (!arity || item.arity == arity); });\r\n    if (result.length < 1)\r\n        Guard.raise(\"Unknown operator: \" + operator);\r\n    return result[0];\r\n};\r\n\r\n\r\n$data.timeIt = function (fn, iterations) {\r\n    iterations = iterations || 1;\r\n\r\n    console.time(\"!\");\r\n    for (var i = 0; i < iterations; i++) {\r\n        fn();\r\n    }\r\n    console.timeEnd(\"!\");\r\n}\r\n\r\n$data.Expressions.OperatorTypes = {\r\n    UNARY: \"UNARY\",                  // { type:UNARY, executable:true, operator:, operand: }\r\n    INCDEC: \"INCDEC\",                // { type:INCDEC, executable:true, operator:, operand:, suffix: }\r\n    DECISION: \"DECISION\",            // { type:DECISION, executable:true, expression:, left:, right: }\r\n    METHODCALL: \"METHODCALL\",        // { type:METHODCALL, executable:true, object:, method:, args: }\r\n    NEW: \"NEW\",                      // { type:NEW, executable:true, values: [] };\r\n    JSONASSIGN: \"JSONASSIGN\",        // { type:JSONASSIGN, executable:true, left:, right: }\r\n    ARRAYACCESS: \"ARRAYACCESS\",      // { type:ARRAYACCESS, executable:true, array:, index: }\r\n    UNKNOWN: \"UNKNOWN\"\r\n};\r\n\r\n$data.executable = true;\r\n\r\nfunction jsonify(obj) { return JSON.stringify(obj, null, \"\\t\"); }\r\n\r\n$C('$data.Expressions.ExpressionNode', null, null, {\r\n    constructor: function () {\r\n        ///<summary>Provides a base class for all Expressions.</summary>\r\n        ///<field name=\"nodeType\" type=\"string\">Represents the expression type of the node&#10;\r\n        ///For the list of expression node types refer to $data.Expressions.ExpressionType\r\n        ///</field>\r\n        ///<field name=\"type\" type=\"Function\">The result type of the expression</field>\r\n        ///<field name=\"executable\" type=\"boolean\">True if the expression can be evaluated to yield a result</field>\r\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\r\n        ///this.type = type;\r\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\r\n        ///this.executable = (executable === undefined || executable === null) ? true : executable;\r\n        ///TODO\r\n        this.expressionType = this.constructor;\r\n    },\r\n    toJSON: function(){\r\n      var res = JSON.parse(JSON.stringify(this))\r\n      res.expressionType = Container.resolveName(this._expressionType);\r\n      return res\r\n    },\r\n    getJSON: function () { return jsonify(this); },\r\n\r\n    //TOBLOG maybe\r\n    /*expressionType: {\r\n        value: undefined,\r\n        ////OPTIMIZE\r\n        set: function (value) {\r\n            var _expressionType;\r\n            Object.defineProperty(this, \"expressionType\", {\r\n                set: function (value) {\r\n                    if (typeof value === 'string') {\r\n                        value = Container.resolveType(value);\r\n                    }\r\n                    _expressionType = value;\r\n                },\r\n                get: function (value) {\r\n                    //IE ommits listing JSON.stringify in call chain\r\n\r\n                        if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n                        return Container.resolveName(_expressionType);\r\n                    }\r\n                    return _expressionType;\r\n                },\r\n                enumerable: true\r\n            });\r\n\r\n            this.expressionType = value;\r\n        },\r\n        get: function () { return undefined; },\r\n        enumerable: true\r\n    },*/\r\n    expressionType: {\r\n        set: function (value) {\r\n            if (typeof value === 'string') {\r\n                value = Container.resolveType(value);\r\n            }\r\n            this._expressionType = value;\r\n        },\r\n        get: function (value) {\r\n            //IE ommits listing JSON.stringify in call chain\r\n\r\n            // if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n            //     return Container.resolveName(this._expressionType);\r\n            // }\r\n            return this._expressionType;\r\n        },\r\n        enumerable: true\r\n    },\r\n    ///toString: function () { },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Unknown, writable: false },\r\n\r\n    type: {},\r\n\r\n    isTerminated: { value: false },\r\n\r\n    toString: function () {\r\n        return this.value;\r\n    }\r\n}, null);\r\n\r\n\r\n$C('$data.Expressions.UnaryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (operand, operator, nodeType, resolution) {\r\n        /// <summary>\r\n        /// Represents an operation with only one operand and an operator\r\n        /// </summary>\r\n        /// <param name=\"operand\"></param>\r\n        /// <param name=\"operator\"></param>\r\n        /// <param name=\"nodeType\"></param>\r\n        /// <param name=\"resolution\"></param>\r\n        this.operand = operand;\r\n        this.operator = operator;\r\n        this.nodeType = nodeType;\r\n        this.resolution = resolution;\r\n    },\r\n\r\n    operator: { value: undefined, writable: true },\r\n    operand: { value: undefined, writable: true },\r\n    nodeType: { value: undefined, writable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FunctionExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, parameters, body) {\r\n        ///<signature>\r\n        ///<summary>Represents a function declaration.</summary>\r\n        ///<param name=\"name\" type=\"String\">Function name</param>\r\n        ///<param name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</param>\r\n        ///<param name=\"body\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///</signature>\r\n        ///<field name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</field>\r\n        ///<field name=\"body\" type=\"$data.Expressions.ExpressionNode\">The function body</field>\r\n\r\n        this.parameters = parameters || [];\r\n        this.name = name;\r\n        this.body = body;\r\n    },\r\n\r\n    toString: function (debug) {\r\n        var paramStrings = this.parameters.map(function (p) {\r\n            return p.toString();\r\n        });\r\n        paramStrings = paramStrings.join(\",\");\r\n        var bodyString = (this.body ? this.body.toString(debug) : '');\r\n        return \"function \" + this.name + \"(\" + paramStrings + \") { \" + bodyString + \"}\";\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Function, writable: true },\r\n    parameters: { value: undefined, dataType: Array, elementType: $data.Expressions.ParameterExpression },\r\n    body: { value: undefined, dataType: $data.Expressions.ExpressionNode },\r\n    type: {}\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ObjectFieldExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (fieldName, expression) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        this.fieldName = fieldName;\r\n        this.expression = expression;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ObjectField, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ObjectLiteralExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (members) {\r\n        ///<summary>Represent an object initializer literal expression &#10;Ex: { prop: value}</summary>\r\n        ///<param name=\"member\" type=\"Array\" elementType=\"$data.Expressions.ObjectFieldExpression\" />\r\n        this.members = members;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ObjectLiteral, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function(namesAndValues) {\r\n                var result = { };\r\n                namesAndValues.forEach(function(item) {\r\n                    result[item.name] = item.value;\r\n                });\r\n                return result;\r\n            };\r\n        },\r\n        set: function () {\r\n        }\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.PagingExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, expression, nType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        this.source = source;\r\n        this.amount = expression;\r\n        this.nodeType = nType;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Unknown, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParameterExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, type, nodeType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        //this.writePropertyValue(\"name\", name);\r\n        //this.writePropertyValue(\"type\", type);\r\n        this.nodeType = nodeType || $data.Expressions.ExpressionType.Parameter;\r\n        this.name = name;\r\n        this.type = type || \"unknown\";\r\n        var _owningFunction;\r\n    },\r\n\r\n    owningFunction: { value: undefined, enumerable: false },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Parameter, writable: true },\r\n    name: { value: undefined, dataType: String, writable: true },\r\n    type: { value: undefined, dataType: \"object\", writable: true},\r\n    toString: function (debug) {\r\n        var result;\r\n        result = debug ? this.type + \" \" : \"\";\r\n        result = result + this.name;\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.PropertyExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, member) {\r\n        ///<summary>Represents accessing a property or field of an object</summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</param>\r\n        ///<param name=\"member\" type=\"$data.Expressions.ConstantExpression\">The member descriptor</param>\r\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</field>\r\n        ///<field name=\"member\" type=\"$data.Expression.ConstantExpression\">The member descriptor</field>\r\n\r\n        this.expression = expression;\r\n        this.member = member;\r\n\r\n        this.type = member.dataType;\r\n    },\r\n\r\n    nodeType: {\r\n        value: $data.Expressions.ExpressionType.MemberAccess\r\n    },\r\n\r\n    expression: {\r\n        value: undefined,\r\n        dataType: $data.Expressions.ExpressionNode,\r\n        writable: true\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function (holder, memberName) {\r\n                if (holder[memberName] === undefined)\r\n                    Guard.raise(new Exception(\"Parameter '\" + memberName + \"' not found in context\", 'Property not found!'));\r\n                return holder[memberName];\r\n            };\r\n        },\r\n        set: function () {\r\n        }\r\n    },\r\n\r\n    member: {\r\n        value: undefined,\r\n        dataType: $data.MemberDefinition,\r\n        writable: true\r\n    },\r\n\r\n    type: {\r\n        value: undefined,\r\n        writable: true\r\n    },\r\n\r\n    toString: function (debug) {\r\n        return this.expression.toString() + \".\" + this.member.toString();\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.SimpleBinaryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (left, right, nodeType, operator, type, resolution) {\r\n        ///<summary>Represents a bin operation with left and right operands and an operator///</summary>\r\n        ///<param name=\"left\" type=\"$data.Expression.ExpressionNode\">The left element of the binary operation</param>\r\n        ///<param name=\"right\" type=\"$data.Expression.ExpressionNode\">The right element of the binary operation</param>\r\n        ///<field name=\"implementation\" type=\"function\" />\r\n        this.left = left;\r\n        this.right = right;\r\n        this.nodeType = nodeType;\r\n        this.operator = operator;\r\n        this.type = type;\r\n        this.resolution = resolution;\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return $data.binaryOperators.getOperator(this.operator).implementation;\r\n        },\r\n        set: function () { }\r\n\r\n    },\r\n    //nodeType: { value: $data.Expressions.ExpressionType },\r\n    type: { value: \"number\", writable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ThisExpression', $data.Expressions.ExpressionNode, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.This }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.ExecutorVisitor', $data.Expressions.ExpTreeVisitor, null,\r\n{\r\n    //--\r\n    VisitVariable: function (eNode, context) {\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        var value = (eNode.name == context.paramsName) ? context.paramContext : $data.__global[eNode.name];\r\n        if (typeof value == 'undefined')\r\n\t\t\tGuard.raise(\r\n\t\t\t\tnew Exception(\"Unknown variable in '\" + context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + eNode.name + \"'.\",\r\n                \"InvalidOperation\", { operationName: context.operation, missingParameterName: eNode.name })\r\n\t\t\t\t);\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitMember: function (eNode, context) {\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        var chain = this.GetMemberChain(eNode);\r\n        var value;\r\n        for (var i = 0; i < chain.length; i++) {\r\n            if (i == 0)\r\n                value = context.paramContext;\r\n            else\r\n                value = value[chain[i].name];\r\n        }\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n\r\n\r\n    },\r\n    VisitUnary: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand !== eNode.operand)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var operandValue = ((operand.valueType == \"string\") ? (\"'\" + operand.value + \"'\") : operand.value);\r\n        src = \"value = \" + eNode.operator + \" \" + operandValue;\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitIncDec: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand !== eNode.operand)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        if (eNode.suffix)\r\n            value = eNode.operator == \"++\" ? operand.value++ : operand.value--;\r\n        else\r\n            value = eNode.operator == \"++\" ? ++operand.value : --operand.value;\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitBinary: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var leftValue = ((left.valueType == \"string\") ? (\"'\" + left.value + \"'\") : left.value);\r\n        var rightValue = ((right.valueType == \"string\") ? (\"'\" + right.value + \"'\") : right.value);\r\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitEquality: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var leftValue = ((left.valueType == \"string\") ? (\"'\" + left.value + \"'\") : left.value);\r\n        var rightValue = ((right.valueType == \"string\") ? (\"'\" + right.value + \"'\") : right.value);\r\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\r\n        eval(src);\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitDecision: function (eNode, context) {\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (expression !== eNode.expression || left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value = expression.value ? left.value : right.value;\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitMethodCall: function (eNode, context) {\r\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n        var args = this.VisitArray(eNode.args, context);\r\n        if (object !== eNode.object || args != eNode.args)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var a = [];\r\n        for (var i = 0; i < args.length; i++) {\r\n            var arg = args[i];\r\n            var t = typeof arg.value;\r\n            a.push((t == \"string\") ? (\"'\" + arg.value + \"'\") : arg.value);\r\n        }\r\n        var value;\r\n        var src = object ?\r\n\t\t\t\"value = object.value[eNode.method](\" + a.join(\",\") + \");\"\r\n\t\t\t:\r\n\t\t\t\"value = \" + eNode.method + \"(\" + a.join(\",\") + \");\";\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitArrayAccess: function (eNode, context) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var arrayNode = this.Visit(eNode.array, context);\r\n        var indexNode = this.Visit(eNode.index, context);\r\n        var value = arrayNode.value[indexNode.value];\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.ExpTreeVisitor',\r\n    null, null,\r\n    {\r\n        constructor: function () {\r\n            this._deep = 0;\r\n        },\r\n        Visit: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\r\n            this._deep = this._deep + 1;\r\n            var result = null;\r\n            switch (eNode.type) {\r\n                case LITERAL: result = this.VisitLiteral(eNode, context); break;\r\n                case VARIABLE: result = this.VisitVariable(eNode, context); break;\r\n                case MEMBERACCESS: result = this.VisitMember(eNode, context); break;\r\n                case BINARY: result = this.VisitBinary(eNode, context); break;\r\n                case UNARY: result = this.VisitUnary(eNode, context); break;\r\n                case INCDEC: result = this.VisitIncDec(eNode, context); break;\r\n                case EQUALITY: result = this.VisitEquality(eNode, context); break;\r\n                case DECISION: result = this.VisitDecision(eNode, context); break;\r\n                case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\r\n                case NEW: result = this.VisitNew(eNode, context); break;\r\n                case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\r\n                case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\r\n                default:\r\n                    Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n            }\r\n            this._deep = this._deep - 1;\r\n            return result;\r\n        },\r\n        VisitLiteral: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\r\n\r\n            return eNode;\r\n        },\r\n        VisitVariable: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\r\n\r\n            return eNode;\r\n        },\r\n        VisitMember: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            if (expression === eNode.expression && member === eNode.member)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(eNode.executable, expression, member);\r\n        },\r\n        VisitBinary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        },\r\n        VisitUnary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\r\n\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\r\n        },\r\n        VisitIncDec: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\r\n\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\r\n        },\r\n        VisitEquality: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        },\r\n        VisitDecision: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (expression === eNode.expression && left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        },\r\n        VisitMethodCall: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\r\n\r\n            var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n            var args = this.VisitArray(eNode.args, context);\r\n            if (object === eNode.object && args === eNode.args)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\r\n        },\r\n        VisitNew: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n\r\n            var values = this.VisitArray(eNode.values, context);\r\n            if (values === eNode.values)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n        },\r\n        VisitJsonAssign: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            left.JSONASSIGN = true;\r\n            right.JSONASSIGN = true;\r\n            return $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\r\n        },\r\n        VisitArrayAccess: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n\r\n            var array = this.Visit(eNode.array, context);\r\n            var index = this.Visit(eNode.index, context);\r\n            if (array === eNode.array && index === eNode.index)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n        },\r\n        VisitArray: function (eNodes, context) {\r\n            var args = [];\r\n            var ok = true;\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                args[i] = this.Visit(eNodes[i], context);\r\n                ok = ok && args[i] === eNodes[i];\r\n            }\r\n            return ok ? eNodes : args;\r\n        },\r\n        GetMemberChain: function (memberAccess, context) {\r\n            // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n            if (memberAccess.expression.type == MEMBERACCESS) {\r\n                var a = this.GetMemberChain(memberAccess.expression, context);\r\n                a.push(memberAccess.member);\r\n                return a;\r\n            }\r\n            return [memberAccess.expression, memberAccess.member];\r\n        }\r\n    }, {});\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ExpressionVisitor', null, null,\r\n    {\r\n        constructor: function () {\r\n            this._deep = 0;\r\n        },\r\n\r\n        Visit: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNode\"/>\r\n\r\n            //this._deep = this._deep + 1;\r\n            if (!eNode) {\r\n                return eNode;\r\n            }\r\n\r\n            var result = null;\r\n\r\n                switch (eNode.expressionType) {\r\n                    case $data.Expressions.ParameterExpression:\r\n                        result = this.VisitParameter(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ConstantExpression:\r\n                        result = this.VisitConstant(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.FunctionExpression:\r\n                        result = this.VisitFunction(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.CallExpression:\r\n                        result = this.VisitCall(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.SimpleBinaryExpression:\r\n                        result = this.VisitBinary(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.PropertyExpression:\r\n                        result = this.VisitProperty(eNode, context);\r\n                        break;\r\n                        //result = th\r\n                    case $data.Expressions.ThisExpression:\r\n                        result = this.VisitThis(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ObjectLiteralExpression:\r\n                        result = this.VisitObjectLiteral(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ObjectFieldExpression:\r\n                        result = this.VisitObjectField(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ArrayLiteralExpression:\r\n                        result = this.VisitArrayLiteral(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.UnaryExpression:\r\n                        result = this.VisitUnary(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.EntityContextExpression:\r\n                        result = this.VisitEntityContext(eNode, context);\r\n                        break;\r\n                    default:\r\n                        debugger;\r\n                        break;\r\n                    //case VARIABLE:\r\n\r\n                    //    result = this.VisitVariable(eNode, context);\r\n                    //    break;\r\n                    //case MEMBERACCESS:\r\n                    //    result = this.VisitMember(eNode, context);\r\n                    //    break;\r\n                    //case BINARY:\r\n                    //    result = this.VisitBinary(eNode, context);\r\n                    //    break;\r\n                    //case UNARY:\r\n                    //    result = this.VisitUnary(eNode, context);\r\n                    //    break;\r\n                    //case INCDEC:\r\n                    //    result = this.VisitIncDec(eNode, context);\r\n                    //    break;\r\n                    //case EQUALITY: result = this.VisitEquality(eNode, context); break;\r\n                    //case DECISION: result = this.VisitDecision(eNode, context); break;\r\n                    //case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\r\n                    //case NEW: result = this.VisitNew(eNode, context); break;\r\n                    //case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\r\n                    //case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\r\n                    //default:\r\n                    //    Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n                }\r\n\r\n            this._deep = this._deep - 1;\r\n            return result;\r\n        },\r\n\r\n        VisitArrayLiteral: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ArrayLiteralExpression\" />\r\n            var self = this;\r\n            var items = eNode.items.map(function (item) {\r\n                return self.Visit(item, context);\r\n            });\r\n            var result = Container.createArrayLiteralExpression(items);\r\n            return result;\r\n        },\r\n\r\n        VisitObjectLiteral: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\r\n            var self = this;\r\n            var members = eNode.members.map(function (member) {\r\n                return self.Visit(member, context);\r\n            });\r\n            var result = Container.createObjectLiteralExpression(members);\r\n            return result;\r\n        },\r\n\r\n        VisitObjectField: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var result = Container.createObjectFieldExpression(eNode.fieldName, expression);\r\n            return result;\r\n        },\r\n\r\n        VisitThis: function (eNode, context) {\r\n            return eNode;\r\n        },\r\n        VisitCall: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\r\n            var self = this;\r\n            var args = eNode.args.map(function (arg) { return this.Visit(arg, context); }, this);\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            return new $data.Expressions.CallExpression(expression, member, args);\r\n        },\r\n\r\n        VisitParameter: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitConstant: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitFunction: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\r\n            var self = this;\r\n\r\n            var params = eNode.parameters.map(function (p, i) {\r\n                return self.Visit(p, context);\r\n            });\r\n\r\n            var body = self.Visit(eNode.body, context);\r\n            var result = new $data.Expressions.FunctionExpression(eNode.name, params, body);\r\n            return result;\r\n        },\r\n\r\n        VisitBinary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            return new $data.Expressions.SimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\r\n        },\r\n\r\n        VisitProperty: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            return new $data.Expressions.PropertyExpression(expression, member);\r\n            //var member =\r\n        },\r\n\r\n        VisitUnary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.UnaryExpression\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            ///<returns type=\"$data.Expressions.UnaryExpression\"/>\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return new $data.Expressions.UnaryExpression(operand, eNode.operator, eNode.nodeType);\r\n        },\r\n\r\n        VisitEntityContext: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.EntityContextExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitDecision: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (expression === eNode.expression && left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        },\r\n\r\n        VisitNew: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n\r\n            var values = this.VisitArray(eNode.values, context);\r\n            if (values === eNode.values)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n        },\r\n        VisitArrayAccess: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n\r\n            var array = this.Visit(eNode.array, context);\r\n            var index = this.Visit(eNode.index, context);\r\n            if (array === eNode.array && index === eNode.index)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n        },\r\n        VisitArray: function (eNodes, context) {\r\n            var args = [];\r\n            var ok = true;\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                args[i] = this.Visit(eNodes[i], context);\r\n                ok = ok && args[i] === eNodes[i];\r\n            }\r\n            return ok ? eNodes : args;\r\n        },\r\n        GetMemberChain: function (memberAccess, context) {\r\n            // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n            if (memberAccess.expression.type == MEMBERACCESS) {\r\n                var a = this.GetMemberChain(memberAccess.expression, context);\r\n                a.push(memberAccess.member);\r\n                return a;\r\n            }\r\n            return [memberAccess.expression, memberAccess.member];\r\n        }\r\n    }, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.GlobalContextProcessor\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (global) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.global = global;\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        return paramExpression.nodeType == $data.Expressions.ExpressionType.Parameter && this.global && typeof this.global === 'object' &&\r\n               paramExpression.name in this.global;\r\n    },\r\n\r\n    resolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        var resultValue = this.global[paramExpression.name];\r\n        var expression = Container.createConstantExpression(resultValue, typeof resultValue, paramExpression.name);\r\n        return expression;\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n$C(\"$data.Expressions.ConstantValueResolver\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (paramsObject, global, scopeContext) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.globalResolver = Container.createGlobalContextProcessor(global);\r\n        this.paramResolver = Container.createGlobalContextProcessor(paramsObject);\r\n        this.paramsObject = paramsObject;\r\n        this.scopeContext = scopeContext;\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        return (paramExpression.name === '$context') || (paramExpression.nodeType == $data.Expressions.ExpressionType.This && this.paramsObject)\r\n                    ? true : (this.paramResolver.canResolve(paramExpression) || this.globalResolver.canResolve(paramExpression));\r\n    },\r\n\r\n    resolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        if (paramExpression.name === '$context') {\r\n            return Container.createEntityContextExpression(this.scopeContext);\r\n        }\r\n        if (paramExpression.nodeType == $data.Expressions.ExpressionType.This) {\r\n            return Container.createConstantExpression(this.paramsObject, typeof this.paramsObject, 'this');\r\n        }\r\n        return this.paramResolver.canResolve(paramExpression) ? this.paramResolver.resolve(paramExpression) : this.globalResolver.resolve(paramExpression);\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.LambdaParameterProcessor\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (lambdaParameterTypeInfos) {\r\n        ///<param name=\"global\" />\r\n        ///<param name=\"evalMethod\" />\r\n        var paramIndices = {};\r\n        var $idx = \"name\";\r\n\r\n        this.canResolve = function (paramExpression, context) {\r\n            if (paramExpression.nodeType == $data.Expressions.ExpressionType.LambdaParameter) {\r\n                var fnParams = paramExpression.owningFunction.parameters;\r\n\r\n                if (fnParams.length == 1 && paramExpression.name == fnParams[0].name) {\r\n                    paramIndices[paramExpression.name] = lambdaParameterTypeInfos[0];\r\n                    return true;\r\n                }\r\n\r\n                for (var j = 0; j < fnParams.length; j++) {\r\n                    if (fnParams[j].name == paramExpression.name) {\r\n                        paramIndices[paramExpression.name] = lambdaParameterTypeInfos[j];\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.resolve = function(paramExpression, context) {\r\n            var lambdaParamType = paramIndices[paramExpression.name];\r\n            var result = Container.createParameterExpression(paramExpression.name,\r\n                lambdaParamType,\r\n                $data.Expressions.ExpressionType.LambdaParameter);\r\n            result.owningFunction = paramExpression.owningFunction;\r\n            return result;\r\n        };\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.LocalContextProcessor\", $data.Expressions.GlobalContextProcessor, null, {\r\n    constructor: function (evalMethod) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.canResolve = function (paramExpression) {\r\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n            return paramExpression.nodeType == $data.Expressions.ExpressionType.Parameter &&\r\n                (evalMethod(\"typeof \" + paramExpression.name) !== 'undefined');\r\n        };\r\n        this.resolve = function(paramExpression) {\r\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n            var resultValue = evalMethod(paramExpression.name);\r\n            var expression = Container.createConstantExpression(resultValue, typeof resultValue);\r\n            return expression;\r\n        };\r\n\r\n    }\r\n    });\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n//\"use strict\"; // suspicious code\r\n\r\n$C('$data.Expressions.LogicalSchemaBinderVisitor',\r\n    $data.Expressions.ExpressionVisitor, null,\r\n    {\r\n        constructor: function (expression, binder) {\r\n\r\n        },\r\n\r\n        VisitProperty: function (expression, context) {\r\n            ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n            var exp = this.Visit(expression.expression, context);\r\n            var mem = this.Visit(expression.member, context);\r\n\r\n            var type = exp.type;\r\n            var memberType = context.memberResolver.resolve(type, mem.value);\r\n            mem.type = memberType;\r\n            return Container.createPropertyExpression(exp, mem);\r\n        }\r\n\r\n    }, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.ParameterProcessor\", $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function () {\r\n        ///<summary>Provides a base class for several ParameterProcessors like GlobalParameterProcessor or LambdaParameterProcessor</summary>\r\n    },\r\n\r\n    Visit: function (node, context) {\r\n        if ((node instanceof $data.Expressions.ParameterExpression ||\r\n            node instanceof $data.Expressions.ThisExpression)\r\n            && this.canResolve(node)) {\r\n            var result = this.resolve(node, context);\r\n            if (result !== node)\r\n                result[\"resolvedBy\"] = this.constructor.name;\r\n            return result;\r\n        } else {\r\n            return node;\r\n        }\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<returns type=\"boolean\" />\r\n        Guard.raise(\"Pure method\");\r\n    },\r\n    resolve: function (paramExpression) {\r\n        ///<returns type=\"XXX\" />\r\n        Guard.raise(\"Pure method\");\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParameterResolverVisitor', $data.Expressions.ExpressionVisitor, null, {\r\n\r\n    constructor: function (expression, resolver) {\r\n    \t/// <summary>\r\n    \t/// ParameterResolverVisitor traverses the JavaScript Code Expression tree and converts\r\n        /// outer but otherwise execution local variable references into ConstantExpressions-t.\r\n        /// for example: context.Persons.filter(function(p) { return p.Name == document.location.href })\r\n        /// is transformed into a constant that has the current href as its value\r\n    \t/// </summary>\r\n    \t/// <param name=\"expression\"></param>\r\n    \t/// <param name=\"resolver\"></param>\r\n        this.lambdaParamCache = {};\r\n    },\r\n\r\n    Visit: function (expression, resolver) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///<param name=\"resolver\" type=\"$data.Expressions.Resolver\" />\r\n        //TODO base call is just ugly\r\n        return $data.Expressions.ExpressionVisitor.prototype.Visit.call(this, expression, resolver);\r\n\r\n    },\r\n\r\n\r\n    VisitArrayLiteral: function(eNode, context) {\r\n        var self = this;\r\n        var items = eNode.items.map(function (item) { return self.Visit(item, context); });\r\n        var allLocal = items.every(function (item) {\r\n            return item instanceof $data.Expressions.ConstantExpression;\r\n        });\r\n\r\n        if (allLocal) {\r\n            items = items.map(function (item) { return item.value });\r\n            return Container.createConstantExpression(items, \"array\");\r\n        } else {\r\n            return Container.createArrayLiteralExpression(items);\r\n        }\r\n    },\r\n\r\n    VisitObjectLiteral: function(eNode, context) {\r\n        var self = this;\r\n        var members = eNode.members.map(function (item) { return self.Visit(item, context); });\r\n        var allLocal = members.every(function (member) {\r\n            return member.expression instanceof $data.Expressions.ConstantExpression;\r\n        });\r\n\r\n        if (allLocal) {\r\n            var params = members.map(function (member) { return { name: member.fieldName, value: member.expression.value }; });\r\n            var value = eNode.implementation(params);\r\n            return Container.createConstantExpression(value, typeof value);\r\n        } else {\r\n            return Container.createObjectLiteralExpression(members);\r\n        }\r\n    },\r\n\r\n    VisitThis: function(eNode, resolver) {\r\n        return resolver.Visit(eNode, resolver);\r\n    },\r\n\r\n    VisitParameter: function(eNode, resolver) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<param name=\"resovler\" type=\"$data.Expressions.ParameterResolver\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n\r\n        var node;\r\n        ///TODO let the resolver handle lambdaReferences if it wants to deal with it\r\n        switch(eNode.nodeType){\r\n            case $data.Expressions.ExpressionType.Parameter:\r\n            case $data.Expressions.ExpressionType.LambdaParameter:\r\n                node = resolver.Visit(eNode, resolver);\r\n                if (node.nodeType == $data.Expressions.ExpressionType.LambdaParameter) {\r\n                    this.lambdaParamCache[node.name] = node;\r\n                }\r\n                return node;\r\n            case $data.Expressions.ExpressionType.LambdaParameterReference:\r\n                var lambdaParam = this.lambdaParamCache[eNode.name];\r\n                if (lambdaParam) {\r\n                    node = Container.createParameterExpression(eNode.name,\r\n                            lambdaParam.type,\r\n                            $data.Expressions.ExpressionType.LambdaParameterReference);\r\n                    node.paramIndex = eNode.paramIndex;\r\n                    //node.typeName = lambdaParam.type.name || lambdaParam.type;\r\n                    return node;\r\n                }\r\n                break;\r\n            default:\r\n                return eNode;\r\n\r\n        }\r\n\r\n\r\n        return eNode;\r\n    },\r\n\r\n    VisitConstant: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n        return eNode;\r\n    },\r\n\r\n    VisitFunction: function(eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\r\n\r\n        var self = this;\r\n        var params = eNode.parameters.map(function (p, i) {\r\n            var result = self.Visit(p, context);\r\n            return result;\r\n        });\r\n        var body = self.Visit(eNode.body, context);\r\n        var result = new $data.Expressions.FunctionExpression(eNode.name, params, body);\r\n\r\n        return result;\r\n    },\r\n\r\n    VisitBinary: function (eNode, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        var expr = $data.Expressions;\r\n\r\n        if (left instanceof expr.ConstantExpression && right instanceof expr.ConstantExpression)\r\n        {\r\n                var result = eNode.implementation(left.value, right.value);\r\n                return Container.createConstantExpression(result, typeof result);\r\n        }\r\n        return new Container.createSimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\r\n    },\r\n\r\n    VisitUnary: function (eNode, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n        var operand = this.Visit(eNode.operand, context);\r\n        //var imp = $data.unaryOperators.getOperator(\r\n        var expr = $data.Expressions;\r\n        if (operand  instanceof expr.ConstantExpression)\r\n        {\r\n                var result = eNode.operator.implementation(operand.value);\r\n                return Container.createConstantExpression(result, typeof result);\r\n        }\r\n        return new Container.createUnaryExpression(operand, eNode.operator, eNode.nodeType);\r\n    },\r\n\r\n    VisitProperty: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var member = this.Visit(eNode.member, context);\r\n        var result;\r\n        if (expression instanceof $data.Expressions.ConstantExpression &&\r\n            member instanceof $data.Expressions.ConstantExpression) {\r\n            ///TODO implement checking for the member, throw on error\r\n            result = eNode.implementation(expression.value, member.value);\r\n\r\n            //Method call processed before\r\n            //if (typeof result === 'function') {\r\n            //    return new $data.Expressions.ConstantExpression(\r\n            //        function () { return result.apply(expression.value, arguments); });\r\n            //}\r\n            return Container.createConstantExpression(result, typeof result, expression.name + '$' + member.value);\r\n        }\r\n        if (expression === eNode.expression && member === eNode.member)\r\n            return eNode;\r\n\r\n        result = Container.createPropertyExpression(expression, member);\r\n        return result;\r\n    },\r\n\r\n    VisitCall: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\r\n        function isExecutable(args, body, obj) {\r\n            return body instanceof $data.Expressions.ConstantExpression &&\r\n                //global methods will not have a this.\r\n                (!obj || obj instanceof $data.Expressions.ConstantExpression) &&\r\n                args.every(function(item) {\r\n                    return item instanceof $data.Expressions.ConstantExpression;\r\n                });\r\n        }\r\n        var call = $data.Expressions.ExpressionVisitor.prototype.VisitCall.apply(this, arguments);\r\n        var obj = call.expression;\r\n        var body  = call.member;\r\n        var args = call.args;\r\n\r\n        function convertToValue(arg) {\r\n            if (arg instanceof $data.Expressions.ConstantExpression)\r\n                return arg.value;\r\n            return arg;\r\n        };\r\n\r\n        if (isExecutable(args, body, obj)) {\r\n            var fn = body.value;\r\n            if (typeof fn === 'string' && obj.value) {\r\n                fn = obj.value[fn];\r\n            }\r\n            if (typeof fn !== 'function') {\r\n                //TODO dig that name out from somewhere\r\n                Guard.raise(\"Constant expression is not a method...\");\r\n            }\r\n            var value = eNode.implementation(obj.value, fn, args.map(convertToValue));\r\n            return new $data.Expressions.ConstantExpression(value, typeof value);\r\n        }\r\n        return call;\r\n    }\r\n}, {});\r\n$C(\"$data.Expressions.AggregatedVisitor\", $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function (visitors) {\r\n        ///<param name=\"resolver\" type=\"Array\" elementType=\"$data.Expression.ParameterResolver\" />\r\n\r\n        this.Visit = function (node, context) {\r\n            for (var i = 0; i < visitors.length; i++) {\r\n                var n = visitors[i].Visit(node, context);\r\n                if (n !== node)\r\n                    return n;\r\n            }\r\n            return node;\r\n        };\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.SetExecutableVisitor', $data.Expressions.ExpTreeVisitor, null,\r\n{\r\n    Visit: function (eNode, context) {\r\n        switch (eNode.type) {\r\n            case LITERAL: return this.VisitLiteral(eNode, context);\r\n            case VARIABLE: return this.VisitVariable(eNode, context);\r\n            case MEMBERACCESS: return this.VisitMember(eNode, context);\r\n            case BINARY: return this.VisitBinary(eNode, context);\r\n            case UNARY: return this.VisitUnary(eNode, context);\r\n            case INCDEC: return this.VisitIncDec(eNode, context);\r\n            case EQUALITY: return this.VisitEquality(eNode, context);\r\n            case DECISION: return this.VisitDecision(eNode, context);\r\n            case METHODCALL: return this.VisitMethodCall(eNode, context);\r\n            case NEW: return this.VisitNew(eNode, context);\r\n            case JSONASSIGN: return this.VisitJsonAssign(eNode, context);\r\n            case ARRAYACCESS: return this.VisitArrayAccess(eNode, context);\r\n            default:\r\n                Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n        }\r\n    },\r\n\r\n    VisitBinary: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right && (left.executable && right.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\r\n    },\r\n    VisitUnary: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand === eNode.operand)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(operand.executable, eNode.operator, operand);\r\n    },\r\n    VisitIncDec: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand === eNode.operand)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(operand.executable, eNode.operator, operand, eNode.suffix);\r\n    },\r\n    VisitEquality: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right && (left.executable && right.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\r\n    },\r\n    VisitDecision: function (eNode, context) {\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right && (left.executable && right.executable && expression.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(left.executable && right.executable && expression.executable, expression, left, right);\r\n    },\r\n    VisitMethodCall: function (eNode, context) {\r\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n        var args = this.VisitArray(eNode.args, context);\r\n        if (object === eNode.object && args === eNode.args && ((object == null ? true : object.executable) == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(object == null ? true : object.executable, object, eNode.method, args);\r\n    },\r\n    VisitNew: function (eNode, context) {\r\n        // { type:NEW, executable:true, values: [] };\r\n        var values = this.VisitArray(eNode.values, context);\r\n        if (values === eNode.values)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n    },\r\n    VisitJsonAssign: function (eNode, context) {\r\n        // { type:JSONASSIGN, executable:true, left: variable, right: right }\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right)\r\n            return eNode;\r\n        left.JSONASSIGN = true;\r\n        right.JSONASSIGN = true;\r\n        return $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\r\n    },\r\n    VisitArrayAccess: function (eNode, context) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var array = this.Visit(eNode.array, context);\r\n        var index = this.Visit(eNode.index, context);\r\n        if (array === eNode.array && index === eNode.index)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n    },\r\n    VisitArray: function (eNodes, context) {\r\n        var args = [];\r\n        var ok = true;\r\n        for (var i = 0; i < eNodes.length; i++) {\r\n            args[i] = this.Visit(eNodes[i], context);\r\n            ok = ok && args[i] === eNodes[i];\r\n        }\r\n        return ok ? eNodes : args;\r\n    },\r\n\r\n    VisitLiteral: function (eNode, context) {\r\n        return { type: eNode.type, executable: true, value: eNode.value, valueType: eNode.valueType };\r\n    },\r\n    VisitVariable: function (eNode, context) {\r\n        if (typeof context.paramContext[eNode.name] == undefined) // isn't param  //TODO: check ParamContext\r\n            Guard.raise(\"Variable is not defined in the paramContext: \" + eNode.name);\r\n        //this._setExecutable(eNode, true);\r\n        return $data.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, \"Math\", \"GLOBALOBJECT\");\r\n    },\r\n    VisitMember: function (eNode, context) {\r\n        var chain = this.GetMemberChain(eNode);\r\n        var firstMember = chain[0].name;\r\n        var isLambdaParam = context.lambdaParams.indexOf(firstMember) >= 0;\r\n        var isLocalParam = firstMember == context.paramsName; //TODO: check ParamContext // old: typeof context.paramContext[firstMember] != \"undefined\";\r\n        if (!isLocalParam && !isLambdaParam)\r\n            Guard.raise(\"Variable is not defined in the paramContext or the lambda parameters: \" + firstMember);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(isLocalParam, eNode.expression, eNode.member);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _ExpressionNode = require('./ExpressionNode2.js');\n\nvar _ExpressionNode2 = _interopRequireDefault(_ExpressionNode);\n\nvar _ArrayLiteralExpression = require('./ArrayLiteralExpression.js');\n\nvar _ArrayLiteralExpression2 = _interopRequireDefault(_ArrayLiteralExpression);\n\nvar _CallExpression = require('./CallExpression.js');\n\nvar _CallExpression2 = _interopRequireDefault(_CallExpression);\n\nvar _CodeParser = require('./CodeParser.js');\n\nvar _CodeParser2 = _interopRequireDefault(_CodeParser);\n\nvar _ConstantExpression = require('./ConstantExpression.js');\n\nvar _ConstantExpression2 = _interopRequireDefault(_ConstantExpression);\n\nvar _FunctionExpression = require('./FunctionExpression.js');\n\nvar _FunctionExpression2 = _interopRequireDefault(_FunctionExpression);\n\nvar _ObjectFieldExpression = require('./ObjectFieldExpression.js');\n\nvar _ObjectFieldExpression2 = _interopRequireDefault(_ObjectFieldExpression);\n\nvar _ObjectLiteralExpression = require('./ObjectLiteralExpression.js');\n\nvar _ObjectLiteralExpression2 = _interopRequireDefault(_ObjectLiteralExpression);\n\nvar _PagingExpression = require('./PagingExpression.js');\n\nvar _PagingExpression2 = _interopRequireDefault(_PagingExpression);\n\nvar _ParameterExpression = require('./ParameterExpression.js');\n\nvar _ParameterExpression2 = _interopRequireDefault(_ParameterExpression);\n\nvar _PropertyExpression = require('./PropertyExpression.js');\n\nvar _PropertyExpression2 = _interopRequireDefault(_PropertyExpression);\n\nvar _SimpleBinaryExpression = require('./SimpleBinaryExpression.js');\n\nvar _SimpleBinaryExpression2 = _interopRequireDefault(_SimpleBinaryExpression);\n\nvar _ThisExpression = require('./ThisExpression.js');\n\nvar _ThisExpression2 = _interopRequireDefault(_ThisExpression);\n\nvar _ExpressionVisitor = require('./Visitors/ExpressionVisitor.js');\n\nvar _ExpressionVisitor2 = _interopRequireDefault(_ExpressionVisitor);\n\nvar _ParameterProcessor = require('./Visitors/ParameterProcessor.js');\n\nvar _ParameterProcessor2 = _interopRequireDefault(_ParameterProcessor);\n\nvar _GlobalContextProcessor = require('./Visitors/GlobalContextProcessor.js');\n\nvar _GlobalContextProcessor2 = _interopRequireDefault(_GlobalContextProcessor);\n\nvar _LocalContextProcessor = require('./Visitors/LocalContextProcessor.js');\n\nvar _LocalContextProcessor2 = _interopRequireDefault(_LocalContextProcessor);\n\nvar _LambdaParameterProcessor = require('./Visitors/LambdaParameterProcessor.js');\n\nvar _LambdaParameterProcessor2 = _interopRequireDefault(_LambdaParameterProcessor);\n\nvar _ParameterResolverVisitor = require('./Visitors/ParameterResolverVisitor.js');\n\nvar _ParameterResolverVisitor2 = _interopRequireDefault(_ParameterResolverVisitor);\n\nvar _LogicalSchemaBinderVisitor = require('./Visitors/LogicalSchemaBinderVisitor.js');\n\nvar _LogicalSchemaBinderVisitor2 = _interopRequireDefault(_LogicalSchemaBinderVisitor);\n\nvar _ExpTreeVisitor = require('./Visitors/ExpTreeVisitor.js');\n\nvar _ExpTreeVisitor2 = _interopRequireDefault(_ExpTreeVisitor);\n\nvar _SetExecutableVisitor = require('./Visitors/SetExecutableVisitor.js');\n\nvar _SetExecutableVisitor2 = _interopRequireDefault(_SetExecutableVisitor);\n\nvar _ExecutorVisitor = require('./Visitors/ExecutorVisitor.js');\n\nvar _ExecutorVisitor2 = _interopRequireDefault(_ExecutorVisitor);\n\nvar _ExpressionBuilder = require('./ExpressionBuilder.js');\n\nvar _ExpressionBuilder2 = _interopRequireDefault(_ExpressionBuilder);\n\nvar _AssociationInfoExpression = require('./EntityExpressions/AssociationInfoExpression.js');\n\nvar _AssociationInfoExpression2 = _interopRequireDefault(_AssociationInfoExpression);\n\nvar _CodeExpression = require('./EntityExpressions/CodeExpression.js');\n\nvar _CodeExpression2 = _interopRequireDefault(_CodeExpression);\n\nvar _CodeToEntityConverter = require('./EntityExpressions/CodeToEntityConverter.js');\n\nvar _CodeToEntityConverter2 = _interopRequireDefault(_CodeToEntityConverter);\n\nvar _ComplexTypeExpression = require('./EntityExpressions/ComplexTypeExpression.js');\n\nvar _ComplexTypeExpression2 = _interopRequireDefault(_ComplexTypeExpression);\n\nvar _EntityContextExpression = require('./EntityExpressions/EntityContextExpression.js');\n\nvar _EntityContextExpression2 = _interopRequireDefault(_EntityContextExpression);\n\nvar _EntityExpression = require('./EntityExpressions/EntityExpression.js');\n\nvar _EntityExpression2 = _interopRequireDefault(_EntityExpression);\n\nvar _EntityExpressionVisitor = require('./EntityExpressions/EntityExpressionVisitor.js');\n\nvar _EntityExpressionVisitor2 = _interopRequireDefault(_EntityExpressionVisitor);\n\nvar _ExpressionMonitor = require('./EntityExpressions/ExpressionMonitor.js');\n\nvar _ExpressionMonitor2 = _interopRequireDefault(_ExpressionMonitor);\n\nvar _EntityFieldExpression = require('./EntityExpressions/EntityFieldExpression.js');\n\nvar _EntityFieldExpression2 = _interopRequireDefault(_EntityFieldExpression);\n\nvar _EntityFieldOperationExpression = require('./EntityExpressions/EntityFieldOperationExpression.js');\n\nvar _EntityFieldOperationExpression2 = _interopRequireDefault(_EntityFieldOperationExpression);\n\nvar _EntitySetExpression = require('./EntityExpressions/EntitySetExpression.js');\n\nvar _EntitySetExpression2 = _interopRequireDefault(_EntitySetExpression);\n\nvar _FrameOperationExpression = require('./EntityExpressions/FrameOperationExpression.js');\n\nvar _FrameOperationExpression2 = _interopRequireDefault(_FrameOperationExpression);\n\nvar _FilterExpression = require('./EntityExpressions/FilterExpression.js');\n\nvar _FilterExpression2 = _interopRequireDefault(_FilterExpression);\n\nvar _IncludeExpression = require('./EntityExpressions/IncludeExpression.js');\n\nvar _IncludeExpression2 = _interopRequireDefault(_IncludeExpression);\n\nvar _MemberInfoExpression = require('./EntityExpressions/MemberInfoExpression.js');\n\nvar _MemberInfoExpression2 = _interopRequireDefault(_MemberInfoExpression);\n\nvar _OrderExpression = require('./EntityExpressions/OrderExpression.js');\n\nvar _OrderExpression2 = _interopRequireDefault(_OrderExpression);\n\nvar _ParametricQueryExpression = require('./EntityExpressions/ParametricQueryExpression.js');\n\nvar _ParametricQueryExpression2 = _interopRequireDefault(_ParametricQueryExpression);\n\nvar _ProjectionExpression = require('./EntityExpressions/ProjectionExpression.js');\n\nvar _ProjectionExpression2 = _interopRequireDefault(_ProjectionExpression);\n\nvar _QueryExpressionCreator = require('./EntityExpressions/QueryExpressionCreator.js');\n\nvar _QueryExpressionCreator2 = _interopRequireDefault(_QueryExpressionCreator);\n\nvar _QueryParameterExpression = require('./EntityExpressions/QueryParameterExpression.js');\n\nvar _QueryParameterExpression2 = _interopRequireDefault(_QueryParameterExpression);\n\nvar _RepresentationExpression = require('./EntityExpressions/RepresentationExpression.js');\n\nvar _RepresentationExpression2 = _interopRequireDefault(_RepresentationExpression);\n\nvar _ServiceOperationExpression = require('./EntityExpressions/ServiceOperationExpression.js');\n\nvar _ServiceOperationExpression2 = _interopRequireDefault(_ServiceOperationExpression);\n\nvar _ContinuationExpressionBuilder = require('./ContinuationExpressionBuilder.js');\n\nvar _ContinuationExpressionBuilder2 = _interopRequireDefault(_ContinuationExpressionBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0=","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ItemStoreClass', null, null, {\r\n    constructor: function () {\r\n        var self = this;\r\n        self.itemStoreConfig = {\r\n            aliases: {},\r\n            contextTypes: {}\r\n        }\r\n\r\n        self.resetStoreToDefault('local', true);\r\n        $data.addStore = function () {\r\n            return self.addItemStoreAlias.apply(self, arguments);\r\n        };\r\n        $data.implementation = self.implementation;\r\n\r\n        $data.Entity.addMember('storeToken', {\r\n            get: function () {\r\n                if (this.storeConfigs && this.storeConfigs['default'])\r\n                    return this.storeConfigs.stores[this.storeConfigs['default']];\r\n            },\r\n            set: function (value) {\r\n                self._setTypeStoreConfig(this, 'default', value);\r\n            }\r\n        }, true);\r\n    },\r\n    itemStoreConfig: {},\r\n    attachMode: $data.EntityAttachMode ? $data.EntityAttachMode.KeepChanges : true,\r\n\r\n    addItemStoreAlias: function (name, contextFactoryOrToken, isDefault) {\r\n        var self = this;\r\n        var promise = new $data.PromiseHandler();\r\n        var callback = promise.createCallback();\r\n\r\n        if ('string' === typeof name) {\r\n            //storeToken\r\n            if ('object' === typeof contextFactoryOrToken && 'factory' in contextFactoryOrToken) {\r\n                var type = Container.resolveType(contextFactoryOrToken.typeName);\r\n\r\n                self.itemStoreConfig.aliases[name] = contextFactoryOrToken.factory;\r\n                self.itemStoreConfig.contextTypes[name] = type;\r\n                if (isDefault) {\r\n                    self.itemStoreConfig['default'] = name;\r\n                }\r\n\r\n                callback.success();\r\n                return promise.getPromise();\r\n            }\r\n                //contextFactory\r\n            else if ('function' === typeof contextFactoryOrToken) {\r\n                var preContext = contextFactoryOrToken();\r\n                var contextPromise;\r\n                if (preContext && preContext instanceof $data.EntityContext) {\r\n                    callback.success(preContext);\r\n                    contextPromise = promise.getPromise();\r\n                } else {\r\n                    contextPromise = preContext;\r\n                }\r\n\r\n                return contextPromise.then(function (ctx) {\r\n                    if (typeof ctx === 'function') {\r\n                        //factory resolve factory\r\n                        return self.addItemStoreAlias(name, ctx, isDefault);\r\n                    }\r\n\r\n                    if (ctx instanceof $data.EntityContext) {\r\n                        return ctx.onReady()\r\n                            .then(function (ctx) {\r\n                                self.itemStoreConfig.aliases[name] = contextFactoryOrToken;\r\n                                self.itemStoreConfig.contextTypes[name] = ctx.getType();\r\n                                if (isDefault) {\r\n                                    self.itemStoreConfig['default'] = name;\r\n                                }\r\n\r\n                                return ctx;\r\n                            });\r\n                    } else {\r\n                        promise = new $data.PromiseHandler();\r\n                        callback = promise.createCallback();\r\n                        callback.error(new Exception('factory dont have context instance', 'Invalid arguments'));\r\n                        return promise.getPromise();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        callback.error(new Exception('Name or factory missing', 'Invalid arguments'));\r\n        return promise.getPromise();\r\n    },\r\n    resetStoreToDefault: function (name, isDefault) {\r\n        this.itemStoreConfig.aliases[name] = this._getDefaultItemStoreFactory;\r\n        delete this.itemStoreConfig.contextTypes[name];\r\n        if (isDefault) {\r\n            this.itemStoreConfig['default'] = name;\r\n        }\r\n    },\r\n    _setStoreAlias: function (entity, storeToken) {\r\n        if ('object' === typeof storeToken && !entity.storeToken)\r\n            entity.storeToken = storeToken\r\n        return entity;\r\n    },\r\n    _getStoreAlias: function (entity, storeAlias) {\r\n        var type;\r\n        if (entity instanceof $data.Entity) {\r\n            var alias = storeAlias || entity.storeToken;\r\n            if (alias) {\r\n                return alias;\r\n            } else {\r\n                type = entity.getType();\r\n            }\r\n        } else {\r\n            type = entity;\r\n        }\r\n\r\n        return storeAlias || (type.storeConfigs ? type.storeConfigs['default'] : undefined) || type.storeToken;\r\n    },\r\n    _getStoreContext: function (aliasOrToken, type, nullIfInvalid) {\r\n        var contextPromise = this._getContextPromise(aliasOrToken, type);\r\n\r\n        if (!contextPromise || contextPromise instanceof $data.EntityContext) {\r\n            var promise = new $data.PromiseHandler();\r\n            var callback = promise.createCallback();\r\n            callback.success(contextPromise);\r\n            contextPromise = promise.getPromise();\r\n        }\r\n\r\n        return contextPromise.then(function (context) {\r\n            if (context instanceof $data.EntityContext) {\r\n                return context.onReady();\r\n            } else if (nullIfInvalid) {\r\n                return null;\r\n            } else {\r\n                var promise = new $data.PromiseHandler();\r\n                var callback = promise.createCallback();\r\n                callback.error(new Exception('factory return type error', 'Error'));\r\n                return promise.getPromise();\r\n            }\r\n        });\r\n    },\r\n    _getContextPromise: function (aliasOrToken, type) {\r\n        /*Token*/\r\n        if (aliasOrToken && 'object' === typeof aliasOrToken && 'function' === typeof aliasOrToken.factory) {\r\n            return aliasOrToken.factory(type);\r\n        } else if (aliasOrToken && 'object' === typeof aliasOrToken && 'object' === typeof aliasOrToken.args && 'string' === typeof aliasOrToken.typeName) {\r\n            var type = Container.resolveType(aliasOrToken.typeName);\r\n            return new type(JSON.parse(JSON.stringify(aliasOrToken.args)));\r\n        }\r\n            /*resolve alias from type (Token)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken] && typeof type.storeConfigs.stores[aliasOrToken].factory === 'function') {\r\n            return type.storeConfigs.stores[aliasOrToken].factory();\r\n        }\r\n            /*resolve alias from type (constructor options)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken]) {\r\n            return this._getDefaultItemStoreFactory(type, type.storeConfigs.stores[aliasOrToken]);\r\n        }\r\n            /*resolve alias from ItemStore (factories)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && this.itemStoreConfig.aliases[aliasOrToken]) {\r\n            return this.itemStoreConfig.aliases[aliasOrToken](type);\r\n        }\r\n            /*token is factory*/\r\n        else if (aliasOrToken && 'function' === typeof aliasOrToken) {\r\n            return aliasOrToken();\r\n        }\r\n            /*default no hint*/\r\n        else {\r\n            return this.itemStoreConfig.aliases[this.itemStoreConfig['default']](type);\r\n        }\r\n\r\n    },\r\n    _getStoreEntitySet: function (storeAlias, instanceOrType) {\r\n        var aliasOrToken = this._getStoreAlias(instanceOrType, storeAlias);\r\n        var type = (\"function\" === typeof instanceOrType) ? instanceOrType : instanceOrType.getType();;\r\n\r\n        return this._getStoreContext(aliasOrToken, type)\r\n            .then(function (ctx) {\r\n                var entitySet = ctx.getEntitySetFromElementType(type);\r\n                if (!entitySet) {\r\n                    var d = new $data.PromiseHandler();\r\n                    var callback = d.createCallback();\r\n                    callback.error(\"EntitySet not exist for \" + type.fullName);\r\n                    return d.getPromise();\r\n                }\r\n                return entitySet;\r\n            });\r\n    },\r\n    _getDefaultItemStoreFactory: function (instanceOrType, initStoreConfig) {\r\n        if (instanceOrType) {\r\n            var type = (\"function\" === typeof instanceOrType) ? instanceOrType : instanceOrType.getType();\r\n            var typeName = $data.Container.resolveName(type) + \"_items\";\r\n            var typeName = typeName.replace(/\\./g, \"_\");\r\n\r\n            var storeConfig = $data.typeSystem.extend({\r\n                collectionName: initStoreConfig && initStoreConfig.collectionName ? initStoreConfig.collectionName : 'Items',\r\n                tableName: typeName,\r\n                initParam: { provider: 'local', databaseName: typeName }\r\n            }, initStoreConfig);\r\n\r\n            var contextDef = {};\r\n            contextDef[storeConfig.collectionName] = { type: $data.EntitySet, elementType: type }\r\n            if (storeConfig.tableName)\r\n                contextDef[storeConfig.collectionName]['tableName'] = storeConfig.tableName;\r\n\r\n            var inMemoryType = $data.EntityContext.extend(typeName, contextDef);\r\n            var ctx = new inMemoryType(storeConfig.initParam);\r\n            if (initStoreConfig && typeof initStoreConfig === 'object')\r\n                initStoreConfig.factory = ctx._storeToken.factory;\r\n            return ctx;\r\n        }\r\n        return undefined;\r\n    },\r\n    implementation: function (name, contextOrAlias) {\r\n        var self = $data.ItemStore;\r\n        var result;\r\n\r\n        if (typeof contextOrAlias === 'string') {\r\n            contextOrAlias = self.itemStoreConfig.contextTypes[contextOrAlias]\r\n        } else if (contextOrAlias instanceof $data.EntityContext) {\r\n            contextOrAlias = contextOrAlias.getType();\r\n        } else if (!(typeof contextOrAlias === 'function' && contextOrAlias.isAssignableTo)) {\r\n            contextOrAlias = self.itemStoreConfig.contextTypes[self.itemStoreConfig['default']];\r\n        }\r\n\r\n        if (contextOrAlias) {\r\n            result = self._resolveFromContext(contextOrAlias, name);\r\n        }\r\n\r\n        if (!result) {\r\n            result = Container.resolveType(name);\r\n        }\r\n\r\n        return result;\r\n    },\r\n    _resolveFromContext: function (contextType, name) {\r\n        var memDefs = contextType.memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < memDefs.length; i++) {\r\n            var memDef = memDefs[i];\r\n            if (memDef.type) {\r\n                var memDefType = Container.resolveType(memDef.type);\r\n                if (memDefType.isAssignableTo && memDefType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(memDef.elementType);\r\n                    if (elementType.name === name) {\r\n                        return elementType;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n\r\n    //Entity Instance\r\n    EntityInstanceSave: function (storeAlias, hint, attachMode) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        return self._getStoreEntitySet(storeAlias, entity)\r\n            .then(function (entitySet) {\r\n                return self._getSaveMode(entity, entitySet, hint, storeAlias)\r\n                    .then(function (mode) {\r\n                        mode = mode || 'add';\r\n                        switch (mode) {\r\n                            case 'add':\r\n                                entitySet.add(entity);\r\n                                break;\r\n                            case 'attach':\r\n                                entitySet.attach(entity, attachMode || true);\r\n                                break;\r\n                            default:\r\n                                var d = new $data.PromiseHandler();\r\n                                var callback = d.createCallback();\r\n                                callback.error('save mode not supported: ' + mode);\r\n                                return d.getPromise();\r\n                        }\r\n\r\n                        return entitySet.entityContext.saveChanges()\r\n                            .then(function () { self._setStoreAlias(entity, entitySet.entityContext.storeToken); return entity; });\r\n                    });\r\n            });\r\n    },\r\n    EntityInstanceRemove: function (storeAlias) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        return self._getStoreEntitySet(storeAlias, entity)\r\n            .then(function (entitySet) {\r\n                entitySet.remove(entity);\r\n\r\n                return entitySet.entityContext.saveChanges()\r\n                    .then(function () { return entity; });\r\n            });\r\n    },\r\n    EntityInstanceRefresh: function (storeAlias, keepStore) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        var entityType = entity.getType();\r\n\r\n        var key = self._getKeyObjectFromEntity(entity, entityType);\r\n\r\n        return entityType.read(key, storeAlias)\r\n            .then(function (loadedEntity) {\r\n                entityType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                    entity[memDef.name] = loadedEntity[memDef.name];\r\n                });\r\n                entity.storeToken = (keepStore ? entity.storeToken : undefined) || loadedEntity.storeToken;\r\n                entity.changedProperties = undefined;\r\n                return entity;\r\n            });\r\n    },\r\n\r\n    //Entity Type\r\n    EntityInheritedTypeProcessor: function (type) {\r\n        var self = $data.ItemStore;\r\n        type.readAll = self.EntityTypeReadAll(type);\r\n        type.read = self.EntityTypeRead(type);\r\n        type.removeAll = self.EntityTypeRemoveAll(type);\r\n        type.remove = self.EntityTypeRemove(type);\r\n        type.get = self.EntityTypeGet(type); //Not complete\r\n        type.save = self.EntityTypeSave(type);\r\n        type.addMany = self.EntityTypeAddMany(type);\r\n        type.itemCount = self.EntityTypeItemCount(type);\r\n        type.query = self.EntityTypeQuery(type);\r\n        type.takeFirst = self.EntityTypeTakeFirst(type);\r\n\r\n        type.setStore = self.EntityTypeSetStore(type);\r\n    },\r\n    EntityTypeReadAll: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.forEach(function (item) { self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRemoveAll: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.toArray().then(function (items) {\r\n                        items.forEach(function (item) {\r\n                            entitySet.remove(item);\r\n                        });\r\n\r\n                        return entitySet.entityContext.saveChanges()\r\n                            .then(function () { return items; });\r\n                    });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRead: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    try {\r\n                        var singleParam = self._findByIdQueryable(entitySet, key);\r\n                        return entitySet.single(singleParam.predicate, singleParam.thisArgs)\r\n                            .then(function (item) { return self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                    } catch (e) {\r\n                        var d = new $data.PromiseHandler();\r\n                        var callback = d.createCallback();\r\n                        callback.error(e);\r\n                        return d.getPromise();\r\n                    }\r\n                });\r\n        };\r\n    },\r\n    EntityTypeGet: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            var item = new type(self._getKeyObjectFromEntity(key));\r\n            item.refresh(storeAlias);\r\n            return item;\r\n        };\r\n    },\r\n    EntityTypeSave: function (type) {\r\n        return function (initData, storeAlias, hint) {\r\n\r\n            var self = $data.ItemStore;\r\n            var instance = new type(initData);\r\n            return instance.save(storeAlias, hint);\r\n        }\r\n    },\r\n    EntityTypeAddMany: function (type) {\r\n        return function (initDatas, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    var items = entitySet.addMany(initDatas);\r\n                    return entitySet.entityContext.saveChanges()\r\n                        .then(function () {\r\n                            return items;\r\n                        });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRemove: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            var entityPk = type.memberDefinitions.getKeyProperties();\r\n            var entity;\r\n            if (entityPk.length === 1) {\r\n                var obj = {};\r\n                obj[entityPk[0].name] = key;\r\n                entity = new type(obj);\r\n            } else {\r\n                entity = new type(key);\r\n            }\r\n            return entity.remove(storeAlias);\r\n        }\r\n    },\r\n    EntityTypeItemCount: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.length();\r\n                });\r\n        }\r\n    },\r\n    EntityTypeQuery: function (type) {\r\n        return function (predicate, thisArg, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.filter(predicate, thisArg).forEach(function (item) { self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeTakeFirst: function (type) {\r\n        return function (predicate, thisArg, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.first(predicate, thisArg)\r\n                        .then(function (item) { return self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n\r\n    EntityTypeSetStore: function (type) {\r\n        return function (name, config) {\r\n            if (typeof name === 'object' && typeof config === 'undefined') {\r\n                config = name;\r\n                name = 'default';\r\n            }\r\n\r\n            var self = $data.ItemStore;\r\n\r\n            var defStoreConfig = {};\r\n            if (config) {\r\n                if (config.tableName) {\r\n                    defStoreConfig.tableName = config.tableName;\r\n                    delete config.tableName;\r\n                }\r\n\r\n                if (config.collectionName) {\r\n                    defStoreConfig.collectionName = config.collectionName;\r\n                    delete config.collectionName;\r\n                }\r\n\r\n                if (typeof config.dataSource === 'string') {\r\n                    var ds = config.dataSource;\r\n                    if (ds.lastIndexOf('/') === ds.length - 1) {\r\n                        ds = ds.substring(0, ds.lastIndexOf('/'));\r\n                    }\r\n                    var parsedApiUrl = ds.substring(0, ds.lastIndexOf('/'));\r\n                    if (!defStoreConfig.tableName)\r\n                        defStoreConfig.tableName = ds.substring(ds.lastIndexOf('/') + 1);\r\n\r\n                    var provider = config.provider || config.name;\r\n                    switch (provider) {\r\n                        case 'oData':\r\n                            config.oDataServiceHost = config.oDataServiceHost || parsedApiUrl;\r\n                            break;\r\n                        case 'webApi':\r\n                            config.apiUrl = config.apiUrl || parsedApiUrl;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n\r\n\r\n            } else {\r\n                config = { name: 'local' };\r\n            }\r\n\r\n            defStoreConfig.initParam = config;\r\n            self._setTypeStoreConfig(type, name, defStoreConfig);\r\n\r\n            return type;\r\n        }\r\n    },\r\n    _setTypeStoreConfig: function(type, name, config){\r\n        if (!type.storeConfigs) {\r\n            type.storeConfigs = {\r\n                stores: {}\r\n            };\r\n        }\r\n        type.storeConfigs.stores[name] = config;\r\n        if (name === 'default') {\r\n            type.storeConfigs['default'] = name;\r\n        }\r\n    },\r\n\r\n    _findByIdQueryable: function (set, keys) {\r\n        var keysProps = set.defaultType.memberDefinitions.getKeyProperties();\r\n        if (keysProps.length > 1 && keys && 'object' === typeof keys) {\r\n            var predicate = \"\", thisArgs = {};\r\n            for (var i = 0; i < keysProps.length; i++) {\r\n                if (i > 0) predicate += \" && \";\r\n\r\n                var key = keysProps[i];\r\n                predicate += \"it.\" + key.name + \" == this.\" + key.name;\r\n                thisArgs[key.name] = keys[key.name];\r\n            }\r\n\r\n            return {\r\n                predicate: predicate,\r\n                thisArgs: thisArgs\r\n            };\r\n        } else if (keysProps.length === 1) {\r\n            return {\r\n                predicate: \"it.\" + keysProps[0].name + \" == this.value\",\r\n                thisArgs: { value: keys }\r\n            };\r\n        } else {\r\n            throw 'invalid keys';\r\n        }\r\n    },\r\n    _getKeyObjectFromEntity: function (obj, entityType) {\r\n        var key;\r\n        var keyDefs = entityType.memberDefinitions.getKeyProperties();\r\n        if (keyDefs.length === 1)\r\n            key = obj && typeof obj === 'object' ? obj[keyDefs[0].name] : obj;\r\n        else {\r\n            key = {};\r\n\r\n            for (var i = 0; i < keyDefs.length; i++) {\r\n                key[keyDefs[0].name] = obj ? obj[keyDefs[0].name] : obj;\r\n            }\r\n        }\r\n\r\n        return key;\r\n    },\r\n    _getSaveMode: function (entity, entitySet, hint, storeAlias) {\r\n        var self = this;\r\n        var promise = new $data.PromiseHandler();\r\n        var callback = promise.createCallback();\r\n        var entityType = entity.getType();\r\n\r\n        switch (true) {\r\n            case hint === 'update':\r\n                callback.success('attach'); break;\r\n            case hint === 'new':\r\n                callback.success('add'); break;\r\n            case false === entityType.memberDefinitions.getKeyProperties().every(function (keyDef) { return entity[keyDef.name]; }):\r\n                callback.success('add'); break;\r\n            case !!entity.storeToken:\r\n                callback.success('attach'); break;\r\n                break;\r\n            default:\r\n                //use the current entity store informations\r\n                storeAlias = this._getStoreAlias(entity, storeAlias);\r\n                entityType.read(self._getKeyObjectFromEntity(entity, entityType), storeAlias)\r\n                    .then(function () { callback.success('attach'); })\r\n                    .fail(function () { callback.success('add'); });\r\n                break;\r\n        }\r\n\r\n        return promise.getPromise();\r\n    },\r\n\r\n    //EntityContext\r\n    ContextRegister: function (storageProviderCfg) {\r\n        //context instance\r\n        var self = this;\r\n        if (typeof storageProviderCfg.name === \"string\") {\r\n            storageProviderCfg.name = [storageProviderCfg.name];\r\n        }\r\n\r\n        var args = JSON.parse(JSON.stringify(storageProviderCfg));\r\n        this.storeToken = {\r\n            typeName: this.getType().fullName,\r\n            args: args,\r\n            factory: function () {\r\n                return new (self.getType())(args);\r\n            }\r\n        }\r\n\r\n        //set elementType storetoken\r\n        var members = this.getType().memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < members.length; i++) {\r\n            var item = members[i];\r\n            if (item.type) {\r\n                var itemResolvedDataType = Container.resolveType(item.type);\r\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(item.elementType);\r\n                    if (!elementType.storeToken) {\r\n                        elementType.storeToken = this.storeToken;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    QueryResultModifier: function (query) {\r\n        var self = $data.ItemStore;\r\n        var context = query.context;\r\n        var type = query.modelBinderConfig.$type;\r\n        if ('string' === typeof type) {\r\n            type = Container.resolveType(type);\r\n        }\r\n\r\n        if (type === $data.Array && query.modelBinderConfig.$item && query.modelBinderConfig.$item.$type) {\r\n            type = query.modelBinderConfig.$item.$type;\r\n        }\r\n\r\n        //TODO: runs when model binding missed (inmemory)\r\n        if ((typeof type === 'undefined' && query.result && query.result[0] instanceof $data.Entity)) {\r\n            var navProps = !type ? [] : type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\r\n                return !!memDef.inverseProperty;\r\n            });\r\n\r\n            for (var i = 0; i < query.result.length; i++) {\r\n                self._setStoreAlias(query.result[i], context.storeToken);\r\n\r\n                for (var j = 0; j < navProps.length; j++) {\r\n                    var navProp = navProps[j];\r\n                    if (query.result[i][navProp.name] instanceof $data.Entity) {\r\n                        self._setStoreAlias(query.result[i][navProp.name], context.storeToken);\r\n                    } else if (Array.isArray(query.result[i][navProp.name])) {\r\n                        for (var k = 0; k < query.result[i][navProp.name].length; k++) {\r\n                            if (query.result[i][navProp.name][k] instanceof $data.Entity) {\r\n                                self._setStoreAlias(query.result[i][navProp.name][k], context.storeToken);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n$data.ItemStore = new $data.ItemStoreClass();\r\n\r\n$data.Entity.addMember('field', function (propName) {\r\n    var def = this.memberDefinitions.getMember(propName);\r\n    if (def) {\r\n        if (def.definedBy === this) {\r\n            return new $data.MemberWrapper(def);\r\n        } else {\r\n            Guard.raise(new Exception(\"Member '\" + propName + \"' defined on '\" + def.definedBy.fullName + \"'!\", 'Invalid Operation'));\r\n        }\r\n    } else {\r\n        Guard.raise(new Exception(\"Member '\" + propName + \"' not exists!\", 'Invalid Operation'));\r\n    }\r\n\r\n    return this;\r\n}, true);\r\n\r\n\r\n$data.Class.define('$data.MemberWrapper', null, null, {\r\n    constructor: function (memberDefinition) {\r\n        this.memberDefinition = memberDefinition;\r\n    },\r\n    setKey: function (value) {\r\n        this.memberDefinition.key = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setComputed: function (value) {\r\n        this.memberDefinition.computed = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setRequired: function (value) {\r\n        this.memberDefinition.required = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setNullable: function (value) {\r\n        this.memberDefinition.nullable = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    changeDefinition: function (attr, value) {\r\n        this.memberDefinition[attr] = value;\r\n        return this;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ModelBinder', null, null, {\r\n\r\n    constructor: function (context) {\r\n        this.context = context;\r\n        this.providerName = null;\r\n        if (this.context.storageProvider && typeof this.context.storageProvider.getType === 'function') {\r\n            this.references = !(this.context.storageProvider.providerConfiguration.modelBinderOptimization || false);\r\n            this.providerName = this.context.storageProvider.providerName;\r\n            if (!this.providerName) {\r\n                for (var i in $data.RegisteredStorageProviders) {\r\n                    if ($data.RegisteredStorageProviders[i] === this.context.storageProvider.getType()) {\r\n                        this.providerName = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    _deepExtend: function (o, r) {\r\n        if (o === null || o === undefined) {\r\n            return r;\r\n        }\r\n        for (var i in r) {\r\n            if (o.hasOwnProperty(i)) {\r\n                if (typeof r[i] === 'object') {\r\n                    if (Array.isArray(r[i])) {\r\n                        for (var j = 0; j < r[i].length; j++) {\r\n                            if (o[i].indexOf(r[i][j]) < 0) {\r\n                                o[i].push(r[i][j]);\r\n                            }\r\n                        }\r\n                    } else this._deepExtend(o[i], r[i]);\r\n                }\r\n            } else {\r\n                o[i] = r[i];\r\n            }\r\n        }\r\n        return this._finalize(o);\r\n    },\r\n\r\n    _finalize: function(o){\r\n        if (o instanceof $data.Entity) {\r\n            o.changedProperties = undefined;\r\n            o.storeToken = this.context.storeToken;\r\n        }\r\n        return o;\r\n    },\r\n\r\n    _buildSelector: function (meta, context) {\r\n        if (meta.$selector) {\r\n            if (!(Array.isArray(meta.$selector))) {\r\n                meta.$selector = [meta.$selector];\r\n            }\r\n\r\n            for (var i = 0; i < meta.$selector.length; i++) {\r\n                var selector = meta.$selector[i].replace('json:', '');\r\n                context.src += 'if(';\r\n                var path = selector.split('.');\r\n                for (var j = 0; j < path.length; j++) {\r\n                    context.src += 'di.' + path.slice(0, j + 1).join('.') + (j < path.length - 1 ? ' && ' : ' !== undefined && typeof di.' + selector + ' === \"object\"');\r\n                }\r\n                context.src += '){di = di.' + selector + ';}' + (i < meta.$selector.length - 1 ? 'else ' : '');\r\n            }\r\n\r\n            context.src += 'if (di === null){';\r\n            if (context.iter) context.src += context.iter + ' = null;';\r\n            context.src += 'return null;';\r\n            context.src += '}';\r\n        }\r\n    },\r\n\r\n    _buildKey: function (name, type, keys, context, data) {\r\n        if (keys) {\r\n            var type = Container.resolveType(type);\r\n            var typeIndex = Container.getIndex(type);\r\n            type = type.fullName || type.name;\r\n            context.src += 'var ' + name + 'Fn = function(di){';\r\n            if (!(Array.isArray(keys)) || keys.length == 1) {\r\n                if (typeof keys !== 'string') keys = keys[0];\r\n                context.src += 'if (typeof di.' + keys + ' === \"undefined\") return undefined;';\r\n                context.src += 'if (di.' + keys + ' === null) return null;';\r\n                context.src += 'var key = (\"' + type + '_' + typeIndex + '_' + keys + '#\" + di.' + keys + ');';\r\n            } else {\r\n                context.src += 'var key = \"\";';\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var id = typeof keys[i] !== 'object' ? keys[i] : keys[i].$source;\r\n                    context.src += 'if (typeof di.' + id + ' === \"undefined\") return undefined;';\r\n                    context.src += 'if (di.' + id + ' === null) return null;';\r\n                    context.src += 'key += (\"' + type + '_' + typeIndex + '_' + id + '#\" + di.' + id + ');';\r\n                }\r\n            }\r\n\r\n            context.src += 'return key;};';\r\n        }\r\n\r\n        context.src += 'var ' + name + ' = ' + (keys ? name + 'Fn(' + (data || 'di') + ')' : 'undefined') + ';';\r\n    },\r\n\r\n    build: function (meta, context) {\r\n        if (meta.$selector) {\r\n            if (!(Array.isArray(meta.$selector))) meta.$selector = [meta.$selector];\r\n            for (var i = 0; i < meta.$selector.length; i++) {\r\n                meta.$selector[i] = meta.$selector[i].replace('json:', '');\r\n            }\r\n        }\r\n\r\n        if (meta.$value) {\r\n            if (typeof meta.$value === 'function') {\r\n                context.src += 'var di = di || data;';\r\n                context.src += 'var fn = function(){ return meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + '.$value.call(self, meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + ', di); };';\r\n                if (meta.$type) {\r\n                    var type = Container.resolveName(Container.resolveType(meta.$type));\r\n                    var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n                    var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                    if (converter) {\r\n                        context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](fn())';\r\n                    } else {\r\n                        context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(fn())';\r\n                    }\r\n                } else context.item = 'fn()';\r\n            } else if (meta.$type) {\r\n                var type = Container.resolveName(Container.resolveType(meta.$type));\r\n                var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                if (converter) {\r\n                    context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](' + meta.$value + ')';\r\n                } else {\r\n                    context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(' + meta.$value + ')';\r\n                }\r\n            } else context.item = meta.$value;\r\n        } else if (meta.$source) {\r\n            var type = Container.resolveName(Container.resolveType(meta.$type));\r\n            var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\r\n            if (!context.forEach) context.src += 'var di = data;';\r\n            context.item = item;\r\n            this._buildSelector(meta, context);\r\n            if (converter) {\r\n                context.src += 'var ' + item + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di.' + meta.$source + ');';\r\n            } else {\r\n                context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(di.' + meta.$source + ');';\r\n            }\r\n        } else if (meta.$item) {\r\n            context.meta.push('$item');\r\n            var iter = (context.item && context.current ? context.item + '.' + context.current : (context.item ? context.item : 'result'));\r\n            context.iter = iter;\r\n            if (iter.indexOf('.') < 0) context.src += 'var ' + iter + ';';\r\n            context.src += 'var fn = function(di){';\r\n            if (meta.$selector) {\r\n                context.src += 'if (typeof di !== \"undefined\" && !(Array.isArray(di))){';\r\n                this._buildSelector(meta, context);\r\n                context.src += '}';\r\n            }\r\n            if (this.references && meta.$keys) this._buildKey('forKey', meta.$type, meta.$keys, context);\r\n            context.src += iter + ' = typeof ' + iter + ' == \"undefined\" ? [] : ' + iter + ';';\r\n            if (this.references && meta.$item.$keys) {\r\n                var keycacheName = 'keycache_' + iter.replace(/\\./gi, '_');\r\n                context.src += 'var ' + keycacheName + ';';\r\n                context.src += 'var kci = keycacheIter.indexOf(' + iter + ');';\r\n                context.src += 'if (kci < 0){';\r\n                context.src += keycacheName + ' = [];';\r\n                context.src += 'keycache.push(' + keycacheName + ');';\r\n                context.src += 'keycacheIter.push(' + iter + ');';\r\n                context.src += '}else{';\r\n                context.src += keycacheName + ' = keycache[kci];';\r\n                context.src += '}';\r\n            }\r\n            context.iter = undefined;\r\n            context.forEach = true;\r\n            var itemForKey = 'itemForKey_' + iter.replace(/\\./gi, '_');\r\n            context.src += 'var forEachFn = function(di, i){';\r\n            context.src += 'var diBackup = di;';\r\n            if (this.providerName == \"sqLite\" && this.references && meta.$item.$keys) this._buildKey(itemForKey, meta.$type, meta.$item.$keys, context);\r\n            var item = context.item || 'iter';\r\n            context.item = item;\r\n            if (!meta.$item.$source) {\r\n                this._buildSelector(meta.$item, context);\r\n            }\r\n            this.build(meta.$item, context);\r\n            if (this.references && meta.$keys) {\r\n                context.src += 'if (forKey){';\r\n                context.src += 'if (cache[forKey]){';\r\n                context.src += iter + ' = cache[forKey];';\r\n                context.src += 'if (' + iter + '.indexOf(' + (context.item || item) + ') < 0){';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}}else{';\r\n                context.src += 'cache[forKey] = ' + iter + ';';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}}else{';\r\n                if (this.references && meta.$item.$keys) this._buildKey('cacheKey', meta.$type, meta.$item.$keys, context, 'diBackup');\r\n                context.src += 'if (typeof cacheKey != \"undefined\" && cacheKey !== null){';\r\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + ' && cacheKey){';\r\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(cacheKey) < 0){';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(cacheKey);';\r\n                context.src += '}';\r\n                context.src += '}else{';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}';\r\n                context.src += '}';\r\n                context.src += '}';\r\n            } else {\r\n                if (this.references && meta.$item.$keys) {\r\n                    context.src += 'if (typeof ' + itemForKey + ' !== \"undefined\" && ' + itemForKey + ' !== null){';\r\n                    context.src += 'if (typeof keycache_' + iter.replace(/\\./gi, '_') + ' !== \"undefined\" && ' + itemForKey + '){';\r\n                    context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(' + itemForKey + ') < 0){';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(' + itemForKey + ');'\r\n                    context.src += '}}else{';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += '}}else{';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += '}';\r\n                } else {\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                }\r\n            }\r\n            context.src += '};';\r\n            context.src += 'if (Array.isArray(di)) di.forEach(forEachFn);';\r\n            context.src += 'else forEachFn(di, 0);';\r\n            context.forEach = false;\r\n            context.item = null;\r\n            context.src += '};fn(typeof di === \"undefined\" ? data : di);'\r\n            context.meta.pop();\r\n        } else if (meta.$type) {\r\n            if (!context.forEach) {\r\n                context.src += 'if (typeof di === \"undefined\"){';\r\n                context.src += 'var di = data;';\r\n                this._buildSelector(meta, context);\r\n                context.src += '}';\r\n            }\r\n            var resolvedType = Container.resolveType(meta.$type);\r\n            var type = Container.resolveName(resolvedType);\r\n            var typeIndex = Container.getIndex(resolvedType);\r\n            var isEntityType = resolvedType.isAssignableTo && resolvedType.isAssignableTo($data.Entity);\r\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\r\n            if (context.item == item) item += 'new_';\r\n            context.item = item;\r\n\r\n\r\n            var isPrimitive = false;\r\n            if (!meta.$source && !meta.$value && resolvedType !== $data.Array && resolvedType !== $data.Object && !resolvedType.isAssignableTo)\r\n                isPrimitive = true;\r\n            if (resolvedType === $data.Object || resolvedType === $data.Array) {\r\n                var keys = Object.keys(meta);\r\n                if (keys.length == 1 || (keys.length == 2 && meta.$selector)) isPrimitive = true;\r\n            }\r\n\r\n            if (isPrimitive) {\r\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                if (converter) {\r\n                    context.src += 'var ' + item + ' = di != undefined ? self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di) : di;';\r\n                } else {\r\n                    context.src += 'var ' + item + ' = di;';\r\n                }\r\n            } else {\r\n                if (this.references && meta.$keys) {\r\n                    this._buildKey('itemKey', meta.$type, meta.$keys, context);\r\n                    context.src += 'if (itemKey === null) return null;';\r\n                    context.src += 'var ' + item + ';';\r\n                    context.src += 'if (itemKey && cache[itemKey]){';\r\n                    context.src += item + ' = cache[itemKey];';\r\n                    context.src += '}else{';\r\n                    if (isEntityType) {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\r\n                    } else {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\r\n                    }\r\n                    context.src += 'if (itemKey){';\r\n                    context.src += 'cache[itemKey] = ' + item + ';';\r\n                    context.src += '}';\r\n                    context.src += '}';\r\n                } else {\r\n                    if (isEntityType) {\r\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\r\n                    } else {\r\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\r\n                    }\r\n                }\r\n            }\r\n            var openTypeProperty = null;\r\n            if (this.providerName == \"oData\" && resolvedType && resolvedType.openType){\r\n                openTypeProperty = (resolvedType.openType === true ? $data.defaults.openTypeDefaultPropertyName : resolvedType.openType);\r\n                context.src += item + '.' + openTypeProperty + ' = {};';\r\n                context.src += 'for (var prop in di){ if ([' + resolvedType.memberDefinitions.getPublicMappedPropertyNames().map(function(prop){\r\n                    return '\"' + prop + '\"';\r\n                }).join(',') + '].indexOf(prop) < 0 && prop.indexOf(\"@\") < 0 && prop.indexOf(\"#\") < 0){ ' + item + '.' + openTypeProperty + '[prop] = di[prop]; } };';\r\n            }\r\n            for (var i in meta) {\r\n                if (i.indexOf('$') < 0 && i != openTypeProperty) {\r\n                    context.current = i;\r\n                    if (!meta[i].$item) {\r\n                        if (meta[i].$value) {\r\n                            context.meta.push(i);\r\n                            var item = context.item;\r\n                            this.build(meta[i], context);\r\n                            context.src += item + '.' + i + ' = ' + context.item + ';';\r\n                            context.item = item;\r\n                            context.meta.pop();\r\n                        } else if (meta[i].$source) {\r\n                            context.src += 'var fn = function(di){';\r\n                            this._buildSelector(meta[i], context);\r\n                            if (meta[i].$type) {\r\n                                var type = Container.resolveName(Container.resolveType(meta[i].$type));\r\n                                var typeIndex = Container.getIndex(Container.resolveType(meta[i].$type));\r\n                                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                                if (converter) {\r\n                                    context.src += 'return self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di.' + meta[i].$source + ');';\r\n                                } else {\r\n                                    context.src += 'return new (Container.resolveByIndex(' + typeIndex + '))(di.' + meta[i].$source + ');';\r\n                                }\r\n                            } else {\r\n                                context.src += item + '.' + i + ' = di.' + meta[i].$source + ';';\r\n                            }\r\n                            context.src += '};';\r\n                            if (meta[i].$type) context.src += item + '.' + i + ' = fn(di);';\r\n                            else context.src += 'fn(di);';\r\n                        } else if (meta[i].$type) {\r\n                            context.meta.push(i);\r\n                            context.src += 'var fn = function(di){';\r\n                            this._buildSelector(meta[i], context);\r\n                            this.build(meta[i], context);\r\n                            context.src += 'return ' + context.item + ';};';\r\n                            if (meta[i].$type === $data.Object) context.src += item + '.' + i + ' = self._deepExtend(' + item + '.' + i + ', fn(di));';\r\n                            else context.src += item + '.' + i + ' = fn(di);';\r\n                            context.item = item;\r\n                            context.meta.pop();\r\n                        } else if (meta.$type) {\r\n                            var memDef = Container.resolveType(meta.$type).memberDefinitions.getMember(i);\r\n                            var type = Container.resolveName(memDef.type);\r\n                            var entityType = Container.resolveType(meta.$type);\r\n                            var entityTypeIndex = Container.getIndex(meta.$type);\r\n                            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                            if (this.providerName && memDef && memDef.converter && memDef.converter[this.providerName] && typeof memDef.converter[this.providerName].fromDb == 'function') {\r\n                                context.src += item + '.' + i + ' = Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\").converter.' + this.providerName + '.fromDb(di.' + meta[i] + ', Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\"), self.context, Container.resolveByIndex(\"' + entityTypeIndex + '\"));';\r\n                            } else if (converter) {\r\n                                context.src += item + '.' + i + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di.' + meta[i] + ');';\r\n                            } else {\r\n                                var typeIndex = Container.getIndex(Container.resolveType(type.memberDefinitions.getMember(i).type));\r\n                                context.src += item + '.' + i + ' = new (Container.resolveByIndex(' + typeIndex + '))(di.' + meta[i] + ');';\r\n                            }\r\n                        }\r\n                    } else {\r\n                        context.meta.push(i);\r\n                        this.build(meta[i], context);\r\n                        context.item = item;\r\n                        context.meta.pop();\r\n                    }\r\n                }\r\n            }\r\n            context.src += item + ' = self._finalize(' + item + ');';\r\n        }\r\n    },\r\n\r\n    call: function (data, meta) {\r\n        if (!Object.getOwnPropertyNames(meta).length) {\r\n            return data;\r\n        }\r\n        var context = {\r\n            src: '',\r\n            meta: []\r\n        };\r\n        context.src += 'var self = this;';\r\n        context.src += 'var result;';\r\n        context.src += 'var cache = {};';\r\n        context.src += 'var keycache = [];';\r\n        context.src += 'var keycacheIter = [];';\r\n        this.build(meta, context);\r\n        if (context.item) context.src += 'if (typeof result === \"undefined\") result = ' + context.item + ';';\r\n        context.src += 'return result;';\r\n        \r\n        var fn = new Function('meta', 'data', 'Container', context.src).bind(this);\r\n        var ret = fn(meta, data, Container);\r\n        return ret;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeCollector', $data.Notifications.ChangeCollectorBase, null, {\r\n    buildData: function (entities) {\r\n        var result = [];\r\n        entities.forEach(function (element) {\r\n            var resObj = { entityState: element.data.entityState, typeName: element.data.getType().name };\r\n            var enumerableMemDefCollection = [];\r\n\r\n            switch (element.data.entityState) {\r\n                case $data.EntityState.Added:\r\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getPublicMappedProperties();\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    enumerableMemDefCollection = element.data.changedProperties;\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getKeyProperties();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            enumerableMemDefCollection.forEach(function (memDef) {\r\n                resObj[memDef.name] = element.data[memDef.name];\r\n            });\r\n\r\n            result.push(resObj);\r\n        });\r\n\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeCollectorBase', null, null, {\r\n    buildData: function (entityContextData) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    processChangedData: function (entityData) {\r\n        if (this.Distrbutor && this.Distrbutor.distributeData)\r\n            this.Distrbutor.distributeData(this.buildData(entityData));\r\n    },\r\n    Distrbutor: { enumerable: false, dataType: $data.Notifications.ChangeDistributorBase, storeOnObject: true }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeDistributor', $data.Notifications.ChangeDistributorBase, null, {\r\n    constructor: function (broadcastUrl) {\r\n        this.broadcastUrl = broadcastUrl;\r\n    },\r\n    distributeData: function (data) {\r\n        $data.ajax({\r\n            url: this.broadcastUrl,\r\n            type: \"POST\",\r\n            data: 'data=' + JSON.stringify(data),\r\n            succes: this.success,\r\n            error: this.error\r\n        });\r\n    },\r\n    broadcastUrl: { dataType: \"string\" },\r\n    success: function () { },\r\n    error: function () { }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeDistributorBase', null, null, {\r\n    distributeData: function (collectorData) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Promise', null, null, {\r\n    always: function () { Guard.raise(new Exception('$data.Promise.always', 'Not implemented!')); },\r\n    done: function () { Guard.raise(new Exception('$data.Promise.done', 'Not implemented!')); },\r\n    fail: function () { Guard.raise(new Exception('$data.Promise.fail', 'Not implemented!')); },\r\n    isRejected: function () { Guard.raise(new Exception('$data.Promise.isRejected', 'Not implemented!')); },\r\n    isResolved: function () { Guard.raise(new Exception('$data.Promise.isResolved', 'Not implemented!')); },\r\n    //notify: function () { Guard.raise(new Exception('$data.Promise.notify', 'Not implemented!')); },\r\n    //notifyWith: function () { Guard.raise(new Exception('$data.Promise.notifyWith', 'Not implemented!')); },\r\n    pipe: function () { Guard.raise(new Exception('$data.Promise.pipe', 'Not implemented!')); },\r\n    progress: function () { Guard.raise(new Exception('$data.Promise.progress', 'Not implemented!')); },\r\n    promise: function () { Guard.raise(new Exception('$data.Promise.promise', 'Not implemented!')); },\r\n    //reject: function () { Guard.raise(new Exception('$data.Promise.reject', 'Not implemented!')); },\r\n    //rejectWith: function () { Guard.raise(new Exception('$data.Promise.rejectWith', 'Not implemented!')); },\r\n    //resolve: function () { Guard.raise(new Exception('$data.Promise.resolve', 'Not implemented!')); },\r\n    //resolveWith: function () { Guard.raise(new Exception('$data.Promise.resolveWith', 'Not implemented!')); },\r\n    state: function () { Guard.raise(new Exception('$data.Promise.state', 'Not implemented!')); },\r\n    then: function () { Guard.raise(new Exception('$data.Promise.then', 'Not implemented!')); }\r\n}, null);\r\n\r\n$data.Class.define('$data.PromiseHandlerBase', null, null, {\r\n    constructor: function () { },\r\n    createCallback: function (callBack) {\r\n        callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n\r\n        return {\r\n            success: callBack.success,\r\n            error: callBack.error,\r\n            notify: callBack.notify\r\n        };\r\n    },\r\n    getPromise: function () {\r\n        return new $data.Promise();\r\n    }\r\n}, null);\r\n\r\n$data.PromiseHandler = $data.PromiseHandlerBase;\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$C('$data.Query', null, null,\r\n{\r\n    constructor: function (expression, defaultType, context) {\r\n        ///<param name=\"context\" type=\"$data.EntityContext\" />\r\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///<field name=\"context\" type=\"$data.EntityContext\" />\r\n\r\n        this.expression = expression;\r\n        this.context = context;\r\n\r\n        //TODO: expressions get as JSON string?!\r\n\r\n        this.expressions = expression;\r\n        this.defaultType = defaultType;\r\n        this.result = [];\r\n        this.rawDataList = [];\r\n        this.modelBinderConfig = {};\r\n        this.context = context;\r\n    },\r\n\r\n    rawDataList: { dataType: \"Array\" },\r\n    result: { dataType: \"Array\" },\r\n    resultType: {},\r\n    buildResultSet: function (ctx) {\r\n        var converter = new $data.ModelBinder(this.context);\r\n        this.result = converter.call(this.rawDataList, this.modelBinderConfig);\r\n        return;\r\n    },\r\n    getEntitySets: function(){\r\n        var ret = [];\r\n        var ctx = this.context;\r\n\r\n        var fn = function(expression){\r\n            if (expression instanceof $data.Expressions.EntitySetExpression){\r\n                if (ret.indexOf(ctx._entitySetReferences[expression.elementType.name]) < 0)\r\n                    ret.push(ctx._entitySetReferences[expression.elementType.name]);\r\n            }\r\n            if (expression.source) fn(expression.source);\r\n            if (expression.members) {\r\n                for (var i = 0; i < expression.members.length; i++) {\r\n                    fn(expression.members[i].expression);\r\n                }\r\n            }\r\n        };\r\n\r\n        fn(this.expression);\r\n\r\n        return ret;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$C('$data.queryBuilder', null, null, {\r\n    constructor: function () {\r\n        this._fragments = {};\r\n        this.selectedFragment = null;\r\n        this._binderConfig = {};\r\n        this.modelBinderConfig = this._binderConfig;\r\n        this._binderConfigPropertyStack = [];\r\n    },\r\n    selectTextPart: function (name) {\r\n        if (!this._fragments[name]) {\r\n            this._fragments[name] = { text: '', params: [] };\r\n        }\r\n        this.selectedFragment = this._fragments[name];\r\n    },\r\n    getTextPart: function (name) {\r\n        return this._fragments[name];\r\n    },\r\n    addText: function (textParticle) {\r\n        this.selectedFragment.text += textParticle;\r\n    },\r\n    addParameter: function (param) {\r\n        this.selectedFragment.params.push(param);\r\n    },\r\n    selectModelBinderProperty: function (name) {\r\n        this._binderConfigPropertyStack.push(this.modelBinderConfig);\r\n        if (!(name in this.modelBinderConfig)) {\r\n            this.modelBinderConfig[name] = {};\r\n        }\r\n        this.modelBinderConfig = this.modelBinderConfig[name];\r\n    },\r\n    popModelBinderProperty: function () {\r\n        if (this._binderConfigPropertyStack.length === 0) {\r\n            this.modelBinderConfig = this._binderConfig();\r\n        } else {\r\n            this.modelBinderConfig = this._binderConfigPropertyStack.pop();\r\n        }\r\n    },\r\n    resetModelBinderProperty: function (name) {\r\n        this._binderConfigPropertyStack = [];\r\n        this.modelBinderConfig = this._binderConfig;\r\n    },\r\n    addKeyField: function (name) {\r\n        if(!this.modelBinderConfig['$keys']){\r\n            this.modelBinderConfig['$keys'] = new Array();\r\n        }\r\n        this.modelBinderConfig['$keys'].push(name);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.QueryProvider', null, null,\r\n{\r\n    //TODO: instance member?????\r\n    constructor: function () { this.requiresExpressions= false },\r\n    executeQuery: function (queryable, resultHandler) {\r\n    },\r\n    getTraceString: function (queryable) {\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Queryable', null, null,\r\n{\r\n    constructor: function (source, rootExpression) {\r\n        ///\t<signature>\r\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\r\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\r\n        /// <param name=\"source\" type=\"$data.EntitySet\" />\r\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\r\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\r\n        /// <param name=\"source\" type=\"$data.EntityContext\" />\r\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\r\n        ///\t</signature>\r\n\r\n        var context = source instanceof $data.EntityContext ? source : source.entityContext;\r\n        this.defaultType = source instanceof $data.EntityContext ? null : source.defaultType;\r\n        this.entityContext = context;\r\n        this.expression = rootExpression;\r\n    },\r\n\r\n    filter: function (predicate, thisArg) {\r\n        ///<summary>Filters a set of entities using a boolean expression.</summary>\r\n        ///<param name=\"predicate\" type=\"Function\">A boolean query expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Filters a set of entities using a boolean expression formulated as string.</summary>\r\n        ///<param name=\"predicate\" type=\"string\">\r\n        ///The expression body of the predicate function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: filter(\"it.Title == 'Hello'\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Filters a set of entities using a bool expression formulated as a JavaScript function.</summary>\r\n        ///<param name=\"predicate\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.filter( function( person ) { return person.Gender == 'Male' } );\r\n        ///</example>\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate function and parameters&#10;\r\n        ///var draftables = Persons.filter( function( person ) {\r\n        ///     return person.Gender == this.gender &amp;&amp; person.Age &gt; this.age\r\n        /// }, { gender: 'Male',  age: 21 });\r\n        ///</example>\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate as a string and parameters&#10;\r\n        ///var draftables = Persons.filter(\"it.Gender == this.gender &amp;&amp;  it.Age &gt; this.age\",\r\n        /// { gender: 'Male',  age: 21 });\r\n        ///</example>\r\n        ///</signature>\r\n        if (arguments.length === 3) {\r\n            predicate = \"it.\" + arguments[0] +\r\n                (arguments[1][0] === \".\" ? (arguments[1] + \"(param)\") : (\" \" + arguments[1] + \" param\"));\r\n            thisArg = { param : arguments[2] }\r\n        }\r\n        this._checkOperation('filter');\r\n        var expression = Container.createCodeExpression(predicate, thisArg);\r\n        var expressionSource = this.expression;\r\n        if (this.expression instanceof $data.Expressions.FilterExpression) {\r\n            expressionSource = this.expression.source;\r\n\r\n            var operatorResolution = this.entityContext.storageProvider.resolveBinaryOperator(\"and\");\r\n            expression = Container.createSimpleBinaryExpression(this.expression.selector, expression, \"and\", \"filter\", \"boolean\", operatorResolution);\r\n        }\r\n        var exp = Container.createFilterExpression(expressionSource, expression);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    where: function (predicate, params) {\r\n        ///<summary>Where is a convenience alias for C# developers. Use filter instead.</summary>\r\n\t\t///<returns type=\"$data.Queryable\" />\r\n        return this.filter(predicate, params);\r\n    },\r\n\r\n    map: function (projection, thisArg, mappedTo) {\r\n\t\t///\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t<param name=\"projection\" type=\"Function\">A projection expression</param>\r\n        ///\t<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t\t<param name=\"projection\" type=\"string\">\r\n        ///\t\t\tThe expression body of the projection function in string. &#10;\r\n\t\t///\t\t\tTo reference the lambda parameter use the 'it' context variable. &#10;\r\n\t\t///\t\t\tExample: map(\"{ i: it.Id, t: it.Title }\")\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"thisArg\" type=\"Object\" />\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t\t<param name=\"projection\" type=\"Function\">\r\n        ///\t\t\tProjection function to specify the shape or type of each returned element.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///\t\t\tContains the projection parameters.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tProjection to get an array of the full name property of a set of Person entities&#10;\r\n        ///\t\t\tvar personFullNames = Persons.map( function( person ) { return person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t\t<example>\r\n\t\t///\t\t\tProjection to get an array of the required fields of Person entities in an anonymous type.&#10;\r\n        ///\t\t\tvar custom = Persons.map( function( person ) {\r\n        ///\t\t\t\treturn { FullName: person.FullName, Info: { Address: person.Location.Address, Phone: person.Phone } };\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('map');\r\n        var codeExpression = Container.createCodeExpression(projection, thisArg);\r\n        var exp = Container.createProjectionExpression(this.expression, codeExpression);\r\n\r\n        if (mappedTo === 'default')\r\n            exp.projectionAs = this.defaultType;\r\n        else if (mappedTo)\r\n            exp.projectionAs = Container.resolveType(mappedTo);\r\n        else\r\n            exp.projectionAs = $data.Object;\r\n\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    select: function (projection, thisArg, mappedTo) {\r\n\t\t///<summary>Select is a convenience alias for C# developers. Use map instead.</summary>\r\n\t\t///<returns type=\"$data.Queryable\" />\r\n        return this.map(projection, thisArg, mappedTo);\r\n    },\r\n\r\n    length: function (onResult, transaction) {\r\n\t\t///\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n\t\t///\t\t\tExample: { success: function(cnt) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet the count of Person entities. &#10;\r\n        ///\t\t\tPersons.length( function( cnt ) { alert(\"There are \" + cnt + \" person(s) in the database.\"); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('length');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var countExpression = Container.createCountExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(countExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\tcount: function (onResult, transaction) {\r\n\t\t///<summary>Count is a convenience alias for C# developers. Use length instead.</summary>\r\n\t\t///<returns type=\"$data.Integer\" />\r\n\t    return this.length(onResult, transaction);\r\n    },\r\n\r\n\tforEach: function (iterator, transaction) {\r\n\t\t///\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\r\n        ///\t<param name=\"iterator\" type=\"Function\">Iterator function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\r\n        ///\t\t<param name=\"iterator\" type=\"Function\">\r\n        ///\t\t\tIterator function to handle the result elements.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('forEach');\r\n        var pHandler = new $data.PromiseHandler();\r\n        function iteratorFunc(items) { items.forEach(iterator); }\r\n        var cbWrapper = pHandler.createCallback(iteratorFunc);\r\n\r\n        var forEachExpression = Container.createForEachExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(forEachExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\ttoArray: function (onResult_items, transaction) {\r\n\t\t///\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult_items\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult_items\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n\t\t///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet all Person entities. &#10;\r\n        ///\t\t\tPersons.toArray( function( result ) { console.dir(result); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        if (onResult_items instanceof $data.Array)\r\n        {\r\n            return this.toArray(function (results) {\r\n                onResult_items.length = 0;\r\n                results.forEach(function (item, idx) {\r\n                    onResult_items.push(item);\r\n                });\r\n            });\r\n        }\r\n\r\n        this._checkOperation('toArray');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n        var toArrayExpression = Container.createToArrayExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(toArrayExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n\t},\r\n\ttoLiveArray: function (onResult, transaction) {\r\n\t    var self = this;\r\n\t    var result = [];\r\n\r\n\t    var doAction = function (action) {\r\n\t        return function (onResult) {\r\n\t            var pHandler = new $data.PromiseHandler();\r\n\t            var callback = pHandler.createCallback(onResult);\r\n\r\n\t            var successFunc = function (res) {\r\n\t                result.length = 0;\r\n\r\n\t                var data = res;\r\n\t                $data.typeSystem.extend(result, data);\r\n\r\n\t                result.prev = doAction(function (cb) {\r\n\t                    data.prev(cb);\r\n\t                });\r\n\t                result.next = doAction(function (cb) {\r\n\t                    data.next(cb);\r\n\t                });\r\n\r\n\t                callback.success.apply(this, [result].concat(Array.prototype.slice.call(arguments, 1)));\r\n\t            }\r\n\r\n\t            action({\r\n\t                success: successFunc,\r\n\t                error: callback.error\r\n\t            }, transaction);\r\n\r\n\t            var promise = pHandler.getPromise();\r\n\t            $data.typeSystem.extend(result, promise);\r\n\r\n\t            return result;\r\n\t        }\r\n\t    }\r\n\r\n\t    result.refresh = doAction(function (cb) {\r\n\t        self.toArray(cb);\r\n\t    });\r\n\r\n\t    return result.refresh.apply(result, arguments);\r\n\t},\r\n\r\n\tsingle: function (filterPredicate, thisArg, onResult, transaction) {\r\n\t\t///\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n\t\t///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet \"George\" from the Person entity set. &#10;\r\n        ///\t\t\tPersons.single( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\r\n\t\t///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n\t\t///\t\t\t\terror: function () { ... }\r\n\t\t///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('single');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(2);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var singleExpression = Container.createSingleExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(singleExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\tsome: function (filterPredicate, thisArg, onResult, transaction) {\r\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\r\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///         Is there any person who's first name is \"George\"? &#10;\r\n        ///\t\t\tPersons.some( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\r\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n        ///\t\t\t\terror: function () { ... }\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('some');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var someExpression = Container.createSomeExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(someExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\tevery: function (filterPredicate, thisArg, onResult, transaction) {\r\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if all elements of the EntitySet is in the result set.</summary>\r\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\r\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a </summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///\t\t\tResult is true when all person are married. &#10;\r\n        ///\t\t\tPersons.every( function( person ) { return person.Married == true; }, null, {&#10;\r\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n        ///\t\t\t\terror: function () { ... }\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('every');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var everyExpression = Container.createEveryExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(everyExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\r\n    take: function (amount) {\r\n\t\t///\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\r\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to return.</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\r\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\r\n        ///\t\t\tThe number of elements to skip.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.take(10).forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('take');\r\n        var constExp = Container.createConstantExpression(amount, \"integer\");\r\n        var takeExp = Container.createPagingExpression(this.expression, constExp, $data.Expressions.ExpressionType.Take);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n    skip: function (amount) {\r\n\t\t///\t<summary>Skip a specified number of elements from the start of the result set.</summary>\r\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to skip.</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Skip a specified number of elements from the start of the result set.</summary>\r\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\r\n        ///\t\t\tThe number of elements to skip.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.skip(1).take(5).forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('skip');\r\n        var constExp = Container.createConstantExpression(amount, \"integer\");\r\n        var takeExp = Container.createPagingExpression(this.expression, constExp, $data.Expressions.ExpressionType.Skip);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n\r\n    order: function(selector) {\r\n       if (selector === '' || selector === undefined || selector === null) {\r\n           return this;\r\n       }\r\n       if(selector[0] === \"-\") {\r\n           var orderString = \"it.\" + selector.replace(\"-\",\"\");\r\n           return this.orderByDescending(orderString);\r\n       } else {\r\n           return this.orderBy(\"it.\" + selector);\r\n       }\r\n\r\n    },\r\n\r\n    orderBy: function (selector, thisArg) {\r\n\t\t///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"string\">\r\n        ///The expression body of the order function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: orderBy(\"it.Id\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Ordering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.orderBy( function( person ) { return person.Id; } );\r\n        ///</example>\r\n        ///</signature>\r\n\r\n        this._checkOperation('orderBy');\r\n        var codeExpression = Container.createCodeExpression(selector, thisArg);\r\n        var exp = Container.createOrderExpression(this.expression, codeExpression, $data.Expressions.ExpressionType.OrderBy);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    orderByDescending: function (selector, thisArg) {\r\n\t\t///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"string\">\r\n        ///The expression body of the order function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: orderBy(\"it.Id\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Ordering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.orderByDescending( function( person ) { return person.Id; } );\r\n        ///</example>\r\n        ///</signature>\r\n\r\n        this._checkOperation('orderByDescending');\r\n        var codeExpression = Container.createCodeExpression(selector, thisArg);\r\n        var exp = Container.createOrderExpression(this.expression, codeExpression, $data.Expressions.ExpressionType.OrderByDescending);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n\r\n    first: function (filterPredicate, thisArg, onResult, transaction) {\r\n\t\t///\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n\t\t///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet \"George\" from the Person entity set. &#10;\r\n        ///\t\t\tPersons.first( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, function ( result ){ ... });\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('first');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var firstExpression = Container.createFirstExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(firstExpression);\r\n            q.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    find: function (keyValue, onResult, transaction) {\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var keys = this.defaultType.memberDefinitions.getKeyProperties();\r\n\r\n        try {\r\n\r\n            if (keys.length === 1 && typeof keyValue !== 'object') {\r\n                var keyV = {};\r\n                keyV[keys[0].name] = keyValue;\r\n                keyValue = keyV;\r\n            }\r\n\r\n            if (typeof keyValue !== 'object') {\r\n                throw new Exception('Key parameter is invalid');\r\n            } else {\r\n\r\n\r\n                var parameters = [];\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var keyProp = keys[i];\r\n                    if (!(keyProp.name in keyValue)) {\r\n                        throw new Exception('Key value missing');\r\n                    }\r\n                    parameters.push(Container.createConstantExpression(keyValue[keyProp.name], keyProp.type, keyProp.name));\r\n                }\r\n\r\n                var operation = this.entityContext.storageProvider.supportedSetOperations['find'];\r\n                if (operation) {\r\n\r\n                    var findExpression = Container.createFindExpression(this.expression, parameters);\r\n                    var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n                    try {\r\n                        var expression = preparator.Visit(findExpression);\r\n                        this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n                        this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                } else {\r\n                    var predicate = '';\r\n                    var params = {}\r\n                    for (var i = 0; i < parameters.length; i++) {\r\n                        var param = parameters[i];\r\n                        params[param.name] = param.value;\r\n                        if (i > 0) predicate += ' && ';\r\n                        predicate += \"it.\" + param.name + \" == this.\" + param.name;\r\n                    }\r\n\r\n                    this.single(predicate, params, cbWrapper, transaction);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    include: function (selector) {\r\n\t\t///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\r\n        ///\t\t\tThe name of the entity set you want to include in the query.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tInclude the Category on every Article. &#10;\r\n        ///\t\t\tArticles.include(\"Category\");\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('include');\r\n        var constExp = Container.createConstantExpression(selector, \"string\");\r\n        var takeExp = Container.createIncludeExpression(this.expression, constExp);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n\r\n    withInlineCount: function (selector) {\r\n        this._checkOperation('withInlineCount');\r\n        var constExp = Container.createConstantExpression(selector || 'allpages', \"string\");\r\n        var inlineCountExp = Container.createInlineCountExpression(this.expression, constExp);\r\n        return Container.createQueryable(this, inlineCountExp);\r\n    },\r\n    withCount: function (selector) {\r\n        return this.withInlineCount(selector);\r\n    },\r\n\r\n    removeAll: function (onResult, transaction) {\r\n        ///\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///\t\t\tDelete all People who are younger than 18 years old. &#10;\r\n        ///\t\t\tPersons.filter( function( p ){ return p.Age &#60; 18; } ).removeAll( function( result ) { console.dir(result); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('batchDelete');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var batchDeleteExpression = Container.createBatchDeleteExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(batchDeleteExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\r\n    _runQuery: function (onResult_items, transaction) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(this.expression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    toTraceString: function (name) {\r\n\t\t///\t<summary>Returns the trace string of the query.</summary>\r\n        ///\t<param name=\"name\" type=\"$data.String\">Name of the execution method (toArray, length, etc.).</param>\r\n        ///\t<returns type=\"$data.String\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the trace string of the query.</summary>\r\n        ///\t\t<param name=\"name\" type=\"$data.String\">\r\n        ///\t\t\tName of the execution method (toArray, length, etc.). Optional. Default value is \"toArray\".\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.String\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tGet the trace string for Articles.toArray() &#10;\r\n        ///\t\t\tArticles.toTraceString();\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        var expression = this.expression;\r\n\r\n        if (name) {\r\n            expression = Container['create' + name + 'Expression'](expression);\r\n        } else {\r\n            expression = Container.createToArrayExpression(expression);\r\n        }\r\n\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        expression = preparator.Visit(expression);\r\n\r\n        //this.expression = expression;\r\n        var q = Container.createQueryable(this, expression)\r\n        return q.entityContext.getTraceString(q);\r\n    },\r\n\r\n    _checkOperation: function (name) {\r\n        var operation = this.entityContext.resolveSetOperations(name);\r\n        if (operation.invokable != undefined && !operation.invokable)\r\n            Guard.raise(new Exception(\"Operation '\" + name + \"' is not invokable with the provider\"));\r\n    },\r\n    defaultType: {}\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.RelatedEntityProxy\", null, null, {\r\n    constructor: function (entityKeyObject, navigationProperty, type, parent, context) {\r\n        this._entityKeyObject = entityKeyObject;\r\n        this._navigationProperty = navigationProperty;\r\n        this._type = type;\r\n        this._parent = parent;\r\n        this._context = context;\r\n    },\r\n    _entityKeyObject: { type: $data.Object },\r\n    _ctxFactory: {},\r\n    _type: {},\r\n    _navigationProperty: { type: $data.String },\r\n    _parent: { type: '$data.RelatedEntityProxy' },\r\n    _context: { type: '$data.EntityContext' },\r\n    \r\n    read: function (onResult) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n        \r\n        try {\r\n            var proxyChains = this._chainToArray();\r\n            var firstProxy = proxyChains[0];\r\n            var context = firstProxy._context;\r\n            if (!context) {\r\n                var storeToken = firstProxy._parent instanceof $data.Entity ? firstProxy._parent.storeToken : firstProxy._type.storeToken;\r\n                if (storeToken && typeof storeToken.factory === 'function') {\r\n                    context = storeToken.factory();\r\n                }\r\n            }\r\n            \r\n            if (!context) throw new Exception('ContextNotExists');\r\n            \r\n            \r\n            var entitySet = null;\r\n            var expression = null;\r\n            if (firstProxy._parent instanceof $data.Entity) {\r\n                entitySet = context.getEntitySetFromElementType(firstProxy._parent.getType());\r\n                \r\n                var proxyClass = context._createRelatedEntityProxyClass(entitySet.elementType);\r\n                proxyChains.unshift(new proxyClass(firstProxy._parent, undefined, entitySet.elementType));\r\n            } else {\r\n                entitySet = context.getEntitySetFromElementType(firstProxy._type);\r\n            }\r\n            \r\n            expression = entitySet.expression;\r\n            var returnType = null;\r\n            \r\n            for (var i = 0; i < proxyChains.length; i++) {\r\n                var item = proxyChains[i];\r\n                var keys = item._type.memberDefinitions.getKeyProperties();\r\n                \r\n                var parameters = [];\r\n                for (var j = 0; j < keys.length; j++) {\r\n                    var keyProp = keys[j];\r\n                    if (!(keyProp.name in item._entityKeyObject)) {\r\n                        throw new Exception('Key value missing');\r\n                    }\r\n                    parameters.push(Container.createConstantExpression(item._entityKeyObject[keyProp.name], keyProp.type, keyProp.name));\r\n                }\r\n                \r\n                \r\n                var member = undefined;\r\n                if (item._navigationProperty) {\r\n                    member = Container.createMemberInfoExpression(item._navigationProperty)\r\n                    returnType = item._navigationProperty.elementType;\r\n                }\r\n                expression = Container.createFindExpression(expression, parameters, member);\r\n            }\r\n            \r\n            var preparator = Container.createQueryExpressionCreator(context);\r\n            expression = preparator.Visit(expression);\r\n            //context.log({ event: \"EntityExpression\", data: expression });\r\n            \r\n            var queryable = Container.createQueryable(entitySet , expression);\r\n            queryable.defaultType = returnType || queryable.defaultType;\r\n            context.executeQuery(queryable, cbWrapper);\r\n\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n        \r\n        return pHandler.getPromise();\r\n    },\r\n    _chainToArray: function (result) {\r\n        result = result || [];\r\n        if (this._parent instanceof $data.RelatedEntityProxy) {\r\n            this._parent._chainToArray(result);\r\n        }\r\n        \r\n        result.push(this);\r\n        return result;\r\n    }\r\n}, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ServiceOperation', null, null, {}, {\r\n    translateDefinition: function (propertyDef, name, definedBy) {\r\n        propertyDef.serviceName = name;\r\n        var memDef = new $data.MemberDefinition(this.generateServiceOperation(propertyDef), this);\r\n        memDef.name = name;\r\n        return memDef;\r\n    },\r\n    generateServiceOperation: function (cfg) {\r\n\r\n        var fn;\r\n        if (cfg.serviceMethod) {\r\n            var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : {};\r\n            if (returnType.isAssignableTo && returnType.isAssignableTo($data.Queryable)) {\r\n                fn = cfg.serviceMethod;\r\n            } else {\r\n                fn = function () {\r\n                    var lastParam = arguments[arguments.length - 1];\r\n\r\n                    var pHandler = new $data.PromiseHandler();\r\n                    var cbWrapper;\r\n\r\n                    var args = arguments;\r\n                    if (typeof lastParam === 'function') {\r\n                        cbWrapper = pHandler.createCallback(lastParam);\r\n                        arguments[arguments.length - 1] = cbWrapper;\r\n                    } else {\r\n                        cbWrapper = pHandler.createCallback();\r\n                        arguments.push(cbWrapper);\r\n                    }\r\n\r\n                    try {\r\n                        var result = cfg.serviceMethod.apply(this, arguments);\r\n                        if (result !== undefined)\r\n                            cbWrapper.success(result);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                    return pHandler.getPromise();\r\n                }\r\n            }\r\n\r\n        } else {\r\n            fn = function () {\r\n                var context = this;\r\n                var memberdef;\r\n\r\n                var boundItem;\r\n                if (this instanceof $data.Entity || this instanceof $data.EntitySet) {\r\n                    var entitySet;\r\n                    if (this instanceof $data.Entity) {\r\n                        if (this.context) {\r\n                            context = this.context;\r\n                            entitySet = context.getEntitySetFromElementType(this.getType());\r\n                        } else if (this.storeToken && typeof this.storeToken.factory === 'function') {\r\n                            context = this.storeToken.factory();\r\n                            entitySet = context.getEntitySetFromElementType(this.getType());\r\n                        } else {\r\n                            Guard.raise(new Exception(\"entity can't resolve context\", 'Not Found!', this));\r\n                            return;\r\n                        }\r\n                    } else if (this instanceof $data.EntitySet) {\r\n                        context = this.entityContext;\r\n                        entitySet = this;\r\n\r\n                        var esDef = context.getType().getMemberDefinition(entitySet.name);\r\n                        memberdef = $data.MemberDefinition.translateDefinition(esDef.actions[cfg.serviceName], cfg.serviceName, entitySet.getType());\r\n                    }\r\n\r\n\r\n                    boundItem = {\r\n                        data: this,\r\n                        entitySet: entitySet\r\n                    };\r\n                }\r\n\r\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(Container.resolveType(cfg.elementType)) : null;\r\n\r\n                var paramConstExpression = null;\r\n                if (cfg.params) {\r\n                    paramConstExpression = [];\r\n                    //object as parameter\r\n                    //FIX: object type parameters with the same property name as the name of the first parameter\r\n                    if (arguments[0] && typeof arguments[0] === 'object' && arguments[0].constructor === $data.Object && cfg.params && cfg.params[0] && cfg.params[0].name in arguments[0]) {\r\n                        var argObj = arguments[0];\r\n                        for (var i = 0; i < cfg.params.length; i++) {\r\n                            var paramConfig = cfg.params[i];\r\n                            if (paramConfig.name && paramConfig.type && paramConfig.name in argObj) {\r\n                                paramConstExpression.push(Container.createConstantExpression(argObj[paramConfig.name], Container.resolveType(paramConfig.type), paramConfig.name));\r\n                            }\r\n                        }\r\n                    }\r\n                    //arg params\r\n                    else {\r\n                        for (var i = 0; i < cfg.params.length; i++) {\r\n                            if (typeof arguments[i] == 'function') break;\r\n\r\n                            //TODO: check params type\r\n                            var paramConfig = cfg.params[i];\r\n                            if (paramConfig.name && paramConfig.type && arguments[i] !== undefined) {\r\n                                paramConstExpression.push(Container.createConstantExpression(arguments[i], Container.resolveType(paramConfig.type), paramConfig.name));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var ec = Container.createEntityContextExpression(context);\r\n                if (!memberdef) {\r\n                    if (boundItem && boundItem.data) {\r\n                        memberdef = boundItem.data.getType().getMemberDefinition(cfg.serviceName);\r\n                    } else {\r\n                        memberdef = context.getType().getMemberDefinition(cfg.serviceName);\r\n                    }\r\n                }\r\n                var es = Container.createServiceOperationExpression(ec,\r\n                        Container.createMemberInfoExpression(memberdef),\r\n                        paramConstExpression,\r\n                        cfg,\r\n                        boundItem);\r\n\r\n                //Get callback function\r\n                var clb = arguments[arguments.length - 1];\r\n                if (!(typeof clb === 'function' || (typeof clb === 'object' /*&& clb.constructor === $data.Object*/ && (typeof clb.success === 'function' || typeof clb.error === 'function')))) {\r\n                    clb = undefined;\r\n                }\r\n\r\n                if (virtualEntitySet) {\r\n                    var q = Container.createQueryable(virtualEntitySet, es);\r\n                    if (clb) {\r\n                        es.isTerminated = true;\r\n                        return q._runQuery(clb);\r\n                    }\r\n                    return q;\r\n                }\r\n                else {\r\n                    var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : null;\r\n\r\n                    var q = Container.createQueryable(context, es);\r\n                    q.defaultType = returnType || $data.Object;\r\n\r\n                    if (returnType === $data.Queryable) {\r\n                        q.defaultType = Container.resolveType(cfg.elementType);\r\n                        if (clb) {\r\n                            es.isTerminated = true;\r\n                            return q._runQuery(clb);\r\n                        }\r\n                        return q;\r\n                    }\r\n                    es.isTerminated = true;\r\n                    return q._runQuery(clb);\r\n                }\r\n            };\r\n        };\r\n\r\n        var params = cfg.params || [];\r\n        $data.typeSystem.extend(fn, cfg, { params: params });\r\n\r\n        return fn;\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.ServiceAction', $data.ServiceOperation, null, {}, {\r\n    generateServiceOperation: function (cfg) {\r\n        if (!cfg.method) {\r\n            cfg.method = 'POST'; //default Action method is POST\r\n        }\r\n\r\n        return $data.ServiceOperation.generateServiceOperation.apply(this, arguments);\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.ServiceFunction', $data.ServiceOperation, null, {}, {\r\n    generateServiceOperation: function (cfg) {\r\n        if (!cfg.method) {\r\n            cfg.method = 'GET'; //default Function method is GET\r\n        }\r\n\r\n        return $data.ServiceOperation.generateServiceOperation.apply(this, arguments);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.storageProviders = {\r\n    DbCreationType: {\r\n        Merge: 10,\r\n        DropTableIfChanged: 20,\r\n        DropTableIfChange: 20,\r\n        DropAllExistingTables: 30,\r\n        ErrorIfChange: 40,\r\n        DropDbIfChange: 50\r\n    }\r\n}\r\n\r\n$data.ConcurrencyMode = { Fixed: 'fixed', None: 'none' };\r\n$data.Class.define('$data.StorageProviderBase', null, null,\r\n{\r\n    constructor: function (schemaConfiguration, context) {\r\n        this.providerConfiguration = schemaConfiguration || {};\r\n\r\n        this.name = this.getType().name;\r\n        if ($data.RegisteredStorageProviders) {\r\n            var keys = Object.keys($data.RegisteredStorageProviders);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                if (this instanceof $data.RegisteredStorageProviders[keys[i]]) {\r\n                    this.name = keys[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    providers: {},\r\n    supportedDataTypes: { value: [], writable: false },\r\n    initializeStore: function (callBack) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n\r\n    executeQuery: function (queryable, callBack) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    loadRawData: function (tableName, callBack) {\r\n        callBack = $data.typeSystem.createCallbackSetting(callBack);\r\n        callBack.error(new Exception('loadRawData is not supported', 'Invalid Operation'));\r\n    },\r\n\r\n    buildIndependentBlocks: function (changedItems) {\r\n        /// <summary>\r\n        /// Build and processes a dependency graph from the changed items,\r\n        /// and generates blocks that can be inserted to the database sequentially.\r\n        /// </summary>\r\n        /// <param name=\"changedItems\">Array of changed items to build independent blocks from.</param>\r\n        var edgesTo = [];\r\n        var edgesFrom = [];\r\n\r\n        function hasOwnProperty(obj) {\r\n            /// <summary>\r\n            /// Returns true if object has own property (used for 'hashset'-like objects)\r\n            /// </summary>\r\n            /// <param name=\"obj\">Target object</param>\r\n            /// <returns>True if the object has own property</returns>\r\n            for (var p in obj) {\r\n                if (obj.hasOwnProperty(p))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // Building edgesTo and edgesFrom arrays (containing only indeces of items in changedItems array.\r\n        for (var i = 0; i < changedItems.length; i++) {\r\n            var current = changedItems[i];\r\n            if (!current.dependentOn || current.dependentOn.length == 0) {\r\n                // This item is independent\r\n                continue;\r\n            }\r\n\r\n            var to = null;\r\n            // Iterating over items 'current' depends on\r\n            for (var j = 0; j < current.dependentOn.length; j++) {\r\n                var currentDependency = current.dependentOn[j];\r\n                if (currentDependency.entityState == $data.EntityState.Unchanged) {\r\n                    continue;\r\n                }\r\n                to = to || {};\r\n                // Getting the index of current dependency\r\n                var ixDependendOn = -1;\r\n                for (var k = 0; k < changedItems.length; k++) {\r\n                    if (changedItems[k].data == currentDependency) {\r\n                        ixDependendOn = k;\r\n                        break;\r\n                    }\r\n                }\r\n                // Sanity check\r\n                if (ixDependendOn == -1) {\r\n                    Guard.raise(new Exception('Dependent object not found', 'ObjectNotFound', current.dependentOn[j]));\r\n                }\r\n                // Setting edge in 'to' array\r\n                to[ixDependendOn] = true;\r\n                // Setting edge in 'from' array\r\n                var from = edgesFrom[ixDependendOn] || {};\r\n                from[i] = true;\r\n                edgesFrom[ixDependendOn] = from;\r\n            }\r\n            // Persisting found edges in edgesTo array\r\n            if (to !== null)\r\n                edgesTo[i] = to;\r\n        }\r\n\r\n        // Array of sequentialyl independent blocks (containing objects, not just their id's)\r\n        var independentBlocks = [];\r\n        // Objects getting their dependency resolved in the current cycle.\r\n        var currentBlock = [];\r\n        // Filling currentBlock with initially independent objects.\r\n        for (var x = 0; x < changedItems.length; x++) {\r\n            if (!edgesTo.hasOwnProperty(x)) {\r\n                currentBlock.push(x);\r\n            }\r\n        }\r\n        while (currentBlock.length > 0) {\r\n            // Shifting currentBlock to cbix,\r\n            // and clearing currentBlock for next independent block\r\n            var cbix = [].concat(currentBlock);\r\n            currentBlock = [];\r\n            // Iterating over previous independent block, to generate the new one\r\n            for (var b = 0; b < cbix.length; b++) {\r\n                var dependentNodes = edgesFrom[cbix[b]];\r\n                if (typeof dependentNodes !== 'undefined') {\r\n                    for (var d in dependentNodes) {\r\n                        // Removing edge from 'edgesTo'\r\n                        delete edgesTo[d][cbix[b]];\r\n                        // Check if has any more dependency\r\n                        if (!hasOwnProperty(edgesTo[d])) {\r\n                            // It doesn't, so let's clean up a bit\r\n                            delete edgesTo[d];\r\n                            // and push the item to 'currentBlock'\r\n                            currentBlock.push(d);\r\n                        }\r\n                    }\r\n                }\r\n                // Clearing processed item from 'edgesFrom'\r\n                delete edgesFrom[cbix[b]];\r\n            }\r\n            // Push cbix t to independentBlocks\r\n            var cb = [];\r\n            for (var c = 0; c < cbix.length; c++) {\r\n                var item = changedItems[cbix[c]];\r\n                if (item.data.entityState != $data.EntityState.Unchanged)\r\n                    cb.push(item);\r\n            }\r\n            if (cb.length > 0)\r\n                independentBlocks.push(cb);\r\n        }\r\n        return independentBlocks;\r\n    },\r\n    getTraceString: function (queryable) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    setContext: function (ctx) {\r\n        this.context = ctx;\r\n    },\r\n\r\n    _buildContinuationFunction: function (context, query) {\r\n        if (Array.isArray(query.result)) {\r\n            query.result.next = this._buildPagingMethod(context, query, 'next');\r\n            query.result.prev = this._buildPagingMethod(context, query, 'prev');\r\n        }\r\n    },\r\n    _buildPagingMethod: function (context, query, mode) {\r\n        return function (onResult_items) {\r\n            var pHandler = new $data.PromiseHandler();\r\n            var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n            var continuation = new $data.Expressions.ContinuationExpressionBuilder(mode);\r\n            var continuationResult = continuation.compile(query);\r\n            if (continuationResult.expression) {\r\n                var queryable = Container.createQueryable(context, continuationResult.expression);\r\n                queryable.defaultType = query.defaultType;\r\n                context.executeQuery(queryable, cbWrapper);\r\n            } else {\r\n                cbWrapper.error(new Exception(continuationResult.message, 'Invalid Operation', continuationResult));\r\n            }\r\n\r\n            return pHandler.getPromise();\r\n        }\r\n    },\r\n\r\n    buildDbType_modifyInstanceDefinition: function (instanceDefinition, storageModel) {\r\n        var buildDbType_copyPropertyDefinition = function (propertyDefinition, refProp) {\r\n            var cPropertyDef;\r\n            if (refProp) {\r\n                cPropertyDef = JSON.parse(JSON.stringify(instanceDefinition[refProp]));\r\n                cPropertyDef.kind = propertyDefinition.kind;\r\n                cPropertyDef.name = propertyDefinition.name;\r\n                cPropertyDef.notMapped = false;\r\n            } else {\r\n                cPropertyDef = JSON.parse(JSON.stringify(propertyDefinition));\r\n            }\r\n\r\n            cPropertyDef.dataType = Container.resolveType(propertyDefinition.dataType);\r\n            cPropertyDef.type = cPropertyDef.dataType;\r\n            cPropertyDef.key = false;\r\n            cPropertyDef.computed = false;\r\n            return cPropertyDef;\r\n        };\r\n        var buildDbType_createConstrain = function (foreignType, dataType, propertyName, prefix, keyPropertyName) {\r\n            var constrain = new Object();\r\n            constrain[foreignType.name] = propertyName;\r\n            constrain[dataType.name] = keyPropertyName ? keyPropertyName : prefix + '__' + propertyName;\r\n            return constrain;\r\n        };\r\n\r\n        if (storageModel.Associations) {\r\n            storageModel.Associations.forEach(function (association) {\r\n                var addToEntityDef = false;\r\n                var foreignType = association.FromType;\r\n                var dataType = association.ToType;\r\n                var foreignPropName = association.ToPropertyName;\r\n\r\n                var memDef = association.FromType.getMemberDefinition(association.FromPropertyName);\r\n                var keyProperties = [];\r\n                if (memDef && typeof memDef.keys === \"string\" && memDef.keys) {\r\n                    keyProperties = [memDef.keys];\r\n                } else if (memDef && Array.isArray(memDef.keys)) {\r\n                    keyProperties = [].concat(memDef.keys);\r\n                }\r\n\r\n                association.ReferentialConstraint = association.ReferentialConstraint || [];\r\n\r\n                if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") || (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\")) {\r\n                    foreignType = association.ToType;\r\n                    dataType = association.FromType;\r\n                    foreignPropName = association.FromPropertyName;\r\n                    addToEntityDef = true;\r\n                }\r\n\r\n                foreignType.memberDefinitions.getPublicMappedProperties().filter(function (d) { return d.key }).forEach(function (d, i) {\r\n                    var constraint = buildDbType_createConstrain(foreignType, dataType, d.name, foreignPropName, keyProperties[i]);\r\n                    if (addToEntityDef) {\r\n                        //instanceDefinition[foreignPropName + '__' + d.name] = buildDbType_copyPropertyDefinition(d, foreignPropName);\r\n                        instanceDefinition[constraint[dataType.name]] = buildDbType_copyPropertyDefinition(d, foreignPropName);\r\n\r\n                        var dependentMemDef = dataType.getMemberDefinition(keyProperties[i]);\r\n                        if (dependentMemDef) {\r\n                            dependentMemDef.isDependentProperty = true;\r\n                            dependentMemDef.navigationPropertyName = association.FromPropertyName;\r\n                        }\r\n                    }\r\n                    association.ReferentialConstraint.push(constraint);\r\n                }, this);\r\n            }, this);\r\n        }\r\n        //Copy complex type properties\r\n        if (storageModel.ComplexTypes) {\r\n            storageModel.ComplexTypes.forEach(function (complexType) {\r\n                complexType.ReferentialConstraint = complexType.ReferentialConstraint || [];\r\n\r\n                complexType.ToType.memberDefinitions.getPublicMappedProperties().forEach(function (d) {\r\n                    instanceDefinition[complexType.FromPropertyName + '__' + d.name] = buildDbType_copyPropertyDefinition(d);\r\n                    complexType.ReferentialConstraint.push(buildDbType_createConstrain(complexType.ToType, complexType.FromType, d.name, complexType.FromPropertyName));\r\n                }, this);\r\n            }, this);\r\n        }\r\n    },\r\n    buildDbType_generateConvertToFunction: function (storageModel) {\r\n        return function (logicalEntity) {\r\n            var dbInstance = new storageModel.PhysicalType();\r\n            dbInstance.entityState = logicalEntity.entityState;\r\n\r\n            //logicalEntity.changedProperties.forEach(function(memberDef){\r\n            //}, this);\r\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\r\n                if (logicalEntity[property.name] !== undefined) {\r\n                    dbInstance[property.name] = logicalEntity[property.name];\r\n                }\r\n            }, this);\r\n\r\n            if (storageModel.Associations) {\r\n                storageModel.Associations.forEach(function (association) {\r\n                    if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") || (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\")) {\r\n                        var complexInstance = logicalEntity[association.FromPropertyName];\r\n                        if (complexInstance !== undefined) {\r\n                            association.ReferentialConstraint.forEach(function (constrain) {\r\n                                if (complexInstance !== null) {\r\n                                    dbInstance[constrain[association.From]] = complexInstance[constrain[association.To]];\r\n                                } else {\r\n                                    dbInstance[constrain[association.From]] = null;\r\n                                }\r\n                            }, this);\r\n                        }\r\n                    }\r\n                }, this);\r\n            }\r\n            if (storageModel.ComplexTypes) {\r\n                storageModel.ComplexTypes.forEach(function (cmpType) {\r\n                    var complexInstance = logicalEntity[cmpType.FromPropertyName];\r\n                    if (complexInstance !== undefined) {\r\n                        cmpType.ReferentialConstraint.forEach(function (constrain) {\r\n                            if (complexInstance !== null) {\r\n                                dbInstance[constrain[cmpType.From]] = complexInstance[constrain[cmpType.To]];\r\n                            } else {\r\n                                dbInstance[constrain[cmpType.From]] = null;\r\n                            }\r\n                        }, this);\r\n                    }\r\n                }, this);\r\n            }\r\n            return dbInstance;\r\n        };\r\n    },\r\n\r\n    bulkInsert: function (a, b, c, callback) {\r\n        callback.error(new Exception('Not Implemented'));\r\n    },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            length: { dataType: \"number\", allowedIn: \"filter, map\" },\r\n            substr: { dataType: \"string\", allowedIn: \"filter\", parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }] },\r\n            toLowerCase: { dataType: \"string\" }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    resolveFieldOperation: function (operationName, expression, frameType) {\r\n        ///<summary></summary>\r\n        var result = this.supportedFieldOperations[operationName];\r\n        if (Array.isArray(result)) {\r\n            var i = 0;\r\n            for (; i < result.length; i++) {\r\n                if (result[i].allowedType === 'default' || Container.resolveType(result[i].allowedType) === Container.resolveType(expression.selector.memberDefinition.type) &&\r\n                    (frameType && result[i].allowedIn &&\r\n                        (\r\n                            (Array.isArray(result[i].allowedIn) && result[i].allowedIn.some(function(type){ return frameType === Container.resolveType(type); })) ||\r\n                            (!Array.isArray(result[i].allowedIn) && (frameType === Container.resolveType(result[i].allowedIn)))\r\n                        )\r\n                    )\r\n                    ) {\r\n                    result = result[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (i === result.length) {\r\n                result = undefined;\r\n            }\r\n        }\r\n\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Field operation '\" + operationName + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operationName + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operationName;\r\n        return result;\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: 'eq', dataType: \"boolean\" }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    resolveBinaryOperator: function (operator, expression, frameType) {\r\n        var result = this.supportedBinaryOperators[operator];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Binary operator '\" + operator + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operator + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operator;\r\n        return result;\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    resolveUnaryOperator: function (operator, expression, frameType) {\r\n        var result = this.supportedUnaryOperators[operator];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Unary operator '\" + operator + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operator + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operator;\r\n        return result;\r\n    },\r\n\r\n    supportedSetOperations: {\r\n        value: {\r\n            toArray: { invokable: true, allowedIn: [] }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        var result = this.supportedSetOperations[operation];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Operation '\" + operation + \"' is not supported by the provider\"));\r\n        };\r\n        var allowedIn = result.allowedIn || [];\r\n        if (frameType && allowedIn) {\r\n            if ((allowedIn instanceof Array && !allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(allowedIn instanceof Array) && frameType !== Container.resolveType(allowedIn))) {\r\n                Guard.raise(new Exception(operation + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        Guard.raise(new Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n    },\r\n\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        Guard.raise(new Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n    },\r\n\r\n    makePhysicalTypeDefinition: function (entityDefinition, association) {\r\n    },\r\n\r\n    _beginTran: function (tables, isWrite, callBack) {\r\n        callBack.success(new $data.Transaction());\r\n    },\r\n\r\n    getFieldUrl: function () {\r\n        return '#';\r\n    },\r\n\r\n    supportedAutoincrementKeys: {\r\n        value: { }\r\n    }\r\n},\r\n{\r\n    onRegisterProvider: { value: new $data.Event() },\r\n    registerProvider: function (name, provider) {\r\n        this.onRegisterProvider.fire({ name: name, provider: provider }, this);\r\n        $data.RegisteredStorageProviders = $data.RegisteredStorageProviders || [];\r\n        $data.RegisteredStorageProviders[name] = provider;\r\n    },\r\n    getProvider: function (name) {\r\n        var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            console.warn(\"Provider not found: '\" + name + \"'\");\r\n        return provider;\r\n        /*var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            Guard.raise(new Exception(\"Provider not found: '\" + name + \"'\", \"Not Found\"));\r\n        return provider;*/\r\n    },\r\n    isSupported: {\r\n        get: function () { return true; },\r\n        set: function () { }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.StorageProviderLoaderBase', null, null, {\r\n    isSupported: function (providerName) {\r\n        $data.Trace.log('Detecting ' + providerName + ' provider support');\r\n        var supported = true;\r\n        switch (providerName) {\r\n            case 'indexedDb':\r\n                supported = $data.__global.indexedDB || $data.__global.webkitIndexedDB || $data.__global.mozIndexedDB || ($data.__global.msIndexedDB && !(/^file:/.test($data.__global.location && $data.__global.location.href)));\r\n                break;\r\n            case 'storm':\r\n                supported = 'XMLHttpRequest' in $data.__global;\r\n                break;\r\n            case 'webSql':\r\n            case 'sqLite':\r\n                supported = 'openDatabase' in $data.__global;\r\n                break;\r\n            case 'LocalStore':\r\n                supported = 'localStorage' in $data.__global && $data.__global.localStorage ? true : false;\r\n                break;\r\n            case 'sqLite':\r\n                supported = 'openDatabase' in $data.__global;\r\n                break;\r\n            case 'mongoDB':\r\n                supported = $data.mongoDBDriver;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        $data.Trace.log(providerName + ' provider is ' + (supported ? '' : 'not') + ' supported');\r\n        return supported;\r\n    },\r\n    scriptLoadTimeout: { type: 'int', value: 1000 },\r\n    scriptLoadInterval: { type: 'int', value: 50 },\r\n    npmModules: {\r\n        value: {\r\n            'indexedDb': 'jaydata-indexeddb',\r\n            'InMemory': 'jaydata-inmemory',\r\n            'LocalStore': 'jaydata-inmemory',\r\n            'mongoDB': 'jaydata-mongodb',\r\n            'oData': 'jaydata-odata',\r\n            'webApi': 'jaydata-webapi',\r\n            'sqLite': 'jaydata-sqlite',\r\n            'webSql': 'jaydata-sqlite',\r\n            'storm': 'jaydata-storm'\r\n        }\r\n    },\r\n    ProviderNames: {\r\n        value: {\r\n            'indexedDb': 'IndexedDb',\r\n            'InMemory': 'InMemory',\r\n            'LocalStore': 'InMemory',\r\n            'oData': 'oData',\r\n            'webApi': 'WebApi',\r\n            'sqLite': 'SqLite',\r\n            'webSql': 'SqLite',\r\n            'storm': 'Storm'\r\n        }\r\n    },\r\n    load: function (providerList, callback) {\r\n        $data.RegisteredStorageProviders = $data.RegisteredStorageProviders || {};\r\n\r\n        $data.Trace.log('Loading provider(s): ' + providerList);\r\n        callback = $data.typeSystem.createCallbackSetting(callback);\r\n\r\n        var self = this;\r\n        var cacheKey = providerList.join(',');\r\n        self._fallbackCache = self._fallbackCache || {};\r\n\r\n        if (self._fallbackCache[cacheKey]) {\r\n            callback.success(self._fallbackCache[cacheKey]);\r\n        } else {\r\n            this.find(providerList, {\r\n                success: function (provider, selectedProvider) {\r\n                    self._fallbackCache[cacheKey] = provider;\r\n                    callback.success.call(this, provider);\r\n                },\r\n                error: callback.error\r\n            });\r\n        }\r\n    },\r\n    find: function (providerList, callback) {\r\n        var currentProvider = providerList.shift();\r\n        var currentProvider = this.getVirtual(currentProvider);\r\n        if(Array.isArray(currentProvider)){\r\n            providerList = currentProvider;\r\n            currentProvider = providerList.shift();\r\n        }\r\n\r\n        while (currentProvider && !this.isSupported(currentProvider)) {\r\n            currentProvider = providerList.shift();\r\n        }\r\n\r\n        $data.Trace.log('First supported provider is ' + currentProvider);\r\n\r\n        if (!currentProvider){\r\n            $data.Trace.log('Provider fallback failed');\r\n            callback.error();\r\n        }\r\n\r\n        if ($data.RegisteredStorageProviders) {\r\n            $data.Trace.log('Is the ' + currentProvider + ' provider already registered?');\r\n            var provider = $data.RegisteredStorageProviders[currentProvider];\r\n            if (provider) {\r\n                $data.Trace.log(currentProvider + ' provider registered');\r\n                callback.success(provider)\r\n                return;\r\n            }else{\r\n                $data.Trace.log(currentProvider + ' provider not registered');\r\n            }\r\n        }\r\n\r\n        if (!process.browser) {\r\n            // NodeJS\r\n            $data.Trace.log('node.js detected trying to load NPM module');\r\n            this.loadNpmModule(currentProvider, providerList, callback);\r\n        } else {\r\n            $data.Trace.log('Browser detected trying to load provider');\r\n            this.loadProvider(currentProvider, providerList, callback);\r\n        }\r\n    },\r\n    loadProvider: function (currentProvider, providerList, callback) {\r\n        var self = this;\r\n        var mappedName = $data.StorageProviderLoader.ProviderNames[currentProvider] || currentProvider;\r\n        $data.Trace.log(currentProvider + ' provider is mapped to name ' + mappedName + 'Provider');\r\n        if (mappedName) {\r\n            var url = this.getUrl(mappedName);\r\n            $data.Trace.log(currentProvider + ' provider from URL: ' + url);\r\n\r\n            var loader = this.loadScript;\r\n            if (document && document.createElement) {\r\n                $data.Trace.log('document and document.createElement detected, using script element loader method');\r\n                loader = this.loadScriptElement;\r\n            }\r\n\r\n            loader.call(this, url, currentProvider, function (successful) {\r\n                var provider = $data.RegisteredStorageProviders[currentProvider];\r\n                if (successful && provider) {\r\n                    $data.Trace.log(currentProvider + ' provider successfully registered');\r\n                    callback.success(provider);\r\n                } else if (providerList.length > 0) {\r\n                    $data.Trace.log(currentProvider + ' provider failed to load, trying to fallback to ' + providerList + ' provider(s)');\r\n                    self.find(providerList, callback);\r\n                } else {\r\n                    $data.Trace.log(currentProvider + ' provider failed to load');\r\n                    callback.error();\r\n                }\r\n            });\r\n        }\r\n    },\r\n    getUrl: function (providerName) {\r\n        var jaydataScriptMin = document.querySelector('script[src$=\"jaydata.min.js\"]');\r\n        var jaydataScript = document.querySelector('script[src$=\"jaydata.js\"]');\r\n        if (jaydataScriptMin) return jaydataScriptMin.src.substring(0, jaydataScriptMin.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.min.js';\r\n        else if (jaydataScript) return jaydataScript.src.substring(0, jaydataScript.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.js';\r\n        else return 'jaydataproviders/' + providerName + 'Provider.js';\r\n    },\r\n    loadScript: function (url, currentProvider, callback) {\r\n        if (!url){\r\n            callback(false);\r\n            return;\r\n        }\r\n\r\n        function getHttpRequest() {\r\n            if ($data.__global.XMLHttpRequest)\r\n                return new XMLHttpRequest();\r\n            else if ($data.__global.ActiveXObject !== undefined)\r\n                return new ActiveXObject(\"MsXml2.XmlHttp\");\r\n            else{\r\n                $data.Trace.log('XMLHttpRequest or MsXml2.XmlHttp ActiveXObject not found');\r\n                callback(false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        var oXmlHttp = getHttpRequest();\r\n        oXmlHttp.onreadystatechange = function () {\r\n            $data.Trace.log('HTTP request is in state: ' + oXmlHttp.readyState);\r\n            if (oXmlHttp.readyState == 4) {\r\n                if (oXmlHttp.status == 200 || oXmlHttp.status == 304) {\r\n                    $data.Trace.log('HTTP request succeeded');\r\n                    $data.Trace.log('HTTP request response text: ' + oXmlHttp.responseText);\r\n                    eval.call($data.__global, oXmlHttp.responseText);\r\n                    if (typeof callback === 'function')\r\n                        callback(true);\r\n                    else $data.Trace.log('Callback function is undefined');\r\n                } else {\r\n                    $data.Trace.log('HTTP request status: ', oXmlHttp.status);\r\n                    if (typeof callback === 'function')\r\n                        callback(false);\r\n                    else $data.Trace.log('Callback function is undefined');\r\n                }\r\n            }\r\n        };\r\n        oXmlHttp.open('GET', url, true);\r\n        oXmlHttp.send(null);\r\n    },\r\n    loadScriptElement: function (url, currentProvider, callback) {\r\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\r\n\r\n        var script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = url;\r\n        $data.Trace.log('Appending child ' + script + ' to ' + head);\r\n        head.appendChild(script);\r\n\r\n        var loadInterval = this.scriptLoadInterval || 50;\r\n        var iteration = Math.ceil(this.scriptLoadTimeout / loadInterval);\r\n        $data.Trace.log('Script element watcher iterating ' + iteration + ' times');\r\n        function watcher() {\r\n            $data.Trace.log('Script element watcher iteration ' + iteration);\r\n            var provider = $data.RegisteredStorageProviders[currentProvider];\r\n            if (provider) {\r\n                $data.Trace.log(currentProvider + ' provider registered');\r\n                callback(true);\r\n            } else {\r\n                iteration--;\r\n                if (iteration > 0) {\r\n                    $data.Trace.log('Script element watcher next iteration');\r\n                    setTimeout(watcher, loadInterval);\r\n                } else {\r\n                    $data.Trace.log('Script element loader failed');\r\n                    callback(false);\r\n                }\r\n            }\r\n        }\r\n        setTimeout(watcher, loadInterval);\r\n    },\r\n\r\n    loadNpmModule: function (currentProvider, providerList, callback) {\r\n        var provider = null;\r\n        try {\r\n            require(this.npmModules[currentProvider]);\r\n            provider = $data.RegisteredStorageProviders[currentProvider];\r\n            $data.Trace.log('NPM module loader successfully registered ' + currentProvider + ' provider');\r\n        } catch (e) {\r\n            $data.Trace.log('NPM module loader failed for ' + currentProvider + ' provider');\r\n        }\r\n\r\n        if (provider) {\r\n            callback.success(provider);\r\n        } else if (providerList.length > 0) {\r\n            this.find(providerList, callback);\r\n        } else {\r\n            callback.error();\r\n        }\r\n    },\r\n\r\n    virtualProviders: {\r\n        type: $data.Array,\r\n        value: {\r\n            local: {\r\n                fallbacks: ['webSql', 'indexedDb', 'LocalStore']\r\n            }\r\n        }\r\n    },\r\n    getVirtual: function(name){\r\n        if(this.virtualProviders[name])\r\n            return [].concat(this.virtualProviders[name].fallbacks);\r\n\r\n        return name;\r\n    }\r\n});\r\n\r\n$data.StorageProviderLoader = new $data.StorageProviderLoaderBase();\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.modelBinder.FindProjectionVisitor', $data.Expressions.EntityExpressionVisitor, null, {\r\n    VisitProjectionExpression: function (expression) {\r\n        this.projectionExpression = expression;\r\n    }\r\n});\r\n\r\n$C('$data.modelBinder.ModelBinderConfigCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (query, includes, oDataProvider) {\r\n        this._query = query;\r\n        this._includes = includes;\r\n        this._isoDataProvider = oDataProvider || false;\r\n    },\r\n    VisitSingleExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitSomeExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFindExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitEveryExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitToArrayExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFirstExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitForEachExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitServiceOperationExpression: function (expression) {\r\n        if (expression.cfg.returnType) {\r\n            var returnType = Container.resolveType(expression.cfg.returnType);\r\n            if ((typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo($data.Queryable)) || returnType === $data.Array) {\r\n                this._defaultModelBinder(expression);\r\n            } else {\r\n                var builder = Container.createqueryBuilder();\r\n                builder.modelBinderConfig['$type'] = returnType;\r\n                if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo($data.Entity)) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + expression.cfg.serviceName];\r\n                } else {\r\n                    builder.modelBinderConfig['$type'] = returnType;\r\n                    builder.modelBinderConfig['$value'] = function (a, v) {\r\n                        return (expression.cfg.serviceName in v) ? v[expression.cfg.serviceName] : v.value;\r\n                    }\r\n                }\r\n                this.VisitExpression(expression, builder);\r\n                builder.resetModelBinderProperty();\r\n                this._query.modelBinderConfig = builder.modelBinderConfig;\r\n            }\r\n        }\r\n    },\r\n    VisitCountExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    VisitBatchDeleteExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    VisitConstantExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.type;\r\n        builder.modelBinderConfig['$value'] = expression.value;\r\n    },\r\n\r\n    VisitExpression: function (expression, builder) {\r\n        var projVisitor = Container.createFindProjectionVisitor();\r\n        projVisitor.Visit(expression);\r\n\r\n        if (projVisitor.projectionExpression) {\r\n            this.Visit(projVisitor.projectionExpression, builder);\r\n        } else {\r\n            this.DefaultSelection(builder, this._query.defaultType, this._includes);\r\n        }\r\n    },\r\n    _defaultModelBinder: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        if (this._isoDataProvider) {\r\n            builder.modelBinderConfig['$selector'] = ['json:d.results', 'json:d', 'json:results', 'json:value'];\r\n        }\r\n        builder.modelBinderConfig['$item'] = {};\r\n        builder.selectModelBinderProperty('$item');\r\n\r\n        this.VisitExpression(expression, builder);\r\n\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    _addPropertyToModelBinderConfig: function (elementType, builder) {\r\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\r\n        if (elementType.memberDefinitions) {\r\n            elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\r\n                if ((!storageModel) || (storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name])) {\r\n\r\n                    var type = Container.resolveType(prop.dataType);\r\n                    if (!storageModel && this._query.context.storageProvider.supportedDataTypes.indexOf(type) < 0) {\r\n                        //complex type\r\n                        builder.selectModelBinderProperty(prop.name);\r\n                        builder.modelBinderConfig['$type'] = type;\r\n                        if (this._isoDataProvider) {\r\n                            builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\r\n                        } else {\r\n                            builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\r\n                        }\r\n                        this._addPropertyToModelBinderConfig(type, builder);\r\n                        builder.popModelBinderProperty();\r\n                    } else {\r\n                        if (prop.key) {\r\n                            builder.addKeyField(prop.name);\r\n                        }\r\n                        if (prop.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                            builder.modelBinderConfig[prop.name] = { $selector: 'json:__metadata', $source: 'etag' }\r\n                        } else if (type === $data.Array && prop.elementType) {\r\n                            builder.selectModelBinderProperty(prop.name);\r\n                            builder.modelBinderConfig['$type'] = type;\r\n                            if (this._isoDataProvider) {\r\n                                builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\r\n                            } else {\r\n                                builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\r\n                            }\r\n                            builder.selectModelBinderProperty('$item');\r\n                            var arrayElementType = Container.resolveType(prop.elementType);\r\n                            builder.modelBinderConfig['$type'] = arrayElementType;\r\n                            this._addPropertyToModelBinderConfig(arrayElementType, builder);\r\n                            builder.popModelBinderProperty();\r\n                            builder.popModelBinderProperty();\r\n                        } else {\r\n                            builder.modelBinderConfig[prop.name] = prop.name;\r\n                        }\r\n                    }\r\n                }\r\n            }, this);\r\n        } else {\r\n            /*builder._binderConfig = {\r\n                $selector: ['json:results'],\r\n                $type: $data.Array,\r\n                $item:{\r\n                    $type: elementType,\r\n                    $value: function (meta, data) { return data; }\r\n                }\r\n            }*/\r\n            if (builder._binderConfig.$type === $data.Array) {\r\n                builder._binderConfig.$item = builder._binderConfig.$item || {};\r\n                builder.modelBinderConfig = builder._binderConfig.$item;\r\n            }\r\n\r\n\r\n        }\r\n        if (storageModel) {\r\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\r\n        }\r\n    },\r\n    _addComplexTypeProperties: function (complexTypes, builder) {\r\n        complexTypes.forEach(function (ct) {\r\n            if (ct.ToType !== $data.Array){\r\n                builder.selectModelBinderProperty(ct.FromPropertyName);\r\n                builder.modelBinderConfig['$type'] = ct.ToType;\r\n                if (this._isoDataProvider) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + ct.FromPropertyName + '.results', 'json:' + ct.FromPropertyName];\r\n                } else {\r\n                    builder.modelBinderConfig['$selector'] = 'json:' + ct.FromPropertyName;\r\n                }\r\n                this._addPropertyToModelBinderConfig(ct.ToType, builder);\r\n\r\n                builder.popModelBinderProperty();\r\n            }else{\r\n                var dt = ct.ToType;\r\n                var et = Container.resolveType(ct.FromType.memberDefinitions.getMember(ct.FromPropertyName).elementType);\r\n                if (dt === $data.Array && et && et.isAssignableTo && et.isAssignableTo($data.Entity)){\r\n                    config = {\r\n                        $type: $data.Array,\r\n                        $selector: 'json:' + ct.FromPropertyName,\r\n                        $item: {\r\n                            $type: et\r\n                        }\r\n                    };\r\n                    var md = et.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < md.length; i++){\r\n                        config.$item[md[i].name] = { $type: md[i].type, $source: md[i].name };\r\n                    }\r\n                    builder.modelBinderConfig[ct.FromPropertyName] = config;\r\n                }else{\r\n                    builder.modelBinderConfig[ct.FromPropertyName] = {\r\n                        $type: ct.ToType,\r\n                        $source: ct.FromPropertyName\r\n                    };\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n    DefaultSelection: function (builder, type, allIncludes) {\r\n        //no projection, get all item from entitySet\r\n        builder.modelBinderConfig['$type'] = type;\r\n\r\n        var storageModel = this._query.context._storageModel.getStorageModel(type);\r\n        this._addPropertyToModelBinderConfig(type, builder);\r\n        if (allIncludes) {\r\n            allIncludes.forEach(function (include) {\r\n                var includes = include.name.split('.');\r\n                var association = null;\r\n                var tmpStorageModel = storageModel;\r\n                var itemCount = 0;\r\n                for (var i = 0; i < includes.length; i++) {\r\n                    if (builder.modelBinderConfig.$item) {\r\n                        builder.selectModelBinderProperty('$item');\r\n                        itemCount++;\r\n                    }\r\n                    builder.selectModelBinderProperty(includes[i]);\r\n                    association = tmpStorageModel.Associations[includes[i]];\r\n                    tmpStorageModel = this._query.context._storageModel.getStorageModel(association.ToType);\r\n                }\r\n                if (this._isoDataProvider) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + includes[includes.length - 1] + '.results', 'json:' + includes[includes.length - 1]];\r\n                } else {\r\n                    builder.modelBinderConfig['$selector'] = 'json:' + includes[includes.length - 1];\r\n                }\r\n                if (association.ToMultiplicity === '*') {\r\n                    builder.modelBinderConfig['$type'] = $data.Array;\r\n                    builder.selectModelBinderProperty('$item');\r\n                    builder.modelBinderConfig['$type'] = include.type;\r\n                    this._addPropertyToModelBinderConfig(include.type, builder);\r\n                    builder.popModelBinderProperty();\r\n                } else {\r\n                    builder.modelBinderConfig['$type'] = include.type;\r\n                    this._addPropertyToModelBinderConfig(include.type, builder);\r\n                }\r\n\r\n                for (var i = 0; i < includes.length + itemCount; i++) {\r\n                    builder.popModelBinderProperty();\r\n                }\r\n            }, this);\r\n        }\r\n    },\r\n    VisitProjectionExpression: function (expression, builder) {\r\n        this.hasProjection = true;\r\n        this.Visit(expression.selector, builder);\r\n\r\n        if (expression.selector && expression.selector.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || $data.Object;\r\n        }\r\n    },\r\n    VisitParametricQueryExpression: function (expression, builder) {\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntityAsProjection(expression, builder);\r\n        } else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n\r\n    },\r\n    VisitEntityAsProjection: function (expression, builder) {\r\n        this.mapping = '';\r\n        this.Visit(expression.expression, builder);\r\n        var includes;\r\n        if (this.mapping && this._includes instanceof Array) {\r\n            includes = this._includes.filter(function (inc) {\r\n                return inc.name.indexOf(this.mapping + '.') === 0\r\n            }, this);\r\n            includes = includes.map(function (inc) {\r\n                return { name: inc.name.replace(this.mapping + '.', ''), type: inc.type };\r\n            }, this);\r\n\r\n            if (includes.length > 0){\r\n                this.DefaultSelection(builder, expression.expression.entityType, includes);\r\n                //console.warn('WARN: include for mapped properties is not supported!');\r\n            }\r\n        }\r\n\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            this.DefaultSelection(builder, expression.expression.entityType/*, includes*/)\r\n        } else if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            builder.modelBinderConfig.$type = $data.Array;\r\n            builder.modelBinderConfig.$item = {};\r\n            builder.selectModelBinderProperty('$item');\r\n            this.DefaultSelection(builder, expression.expression.elementType /*, includes*/)\r\n            builder.popModelBinderProperty();\r\n        }\r\n\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\r\n        if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\r\n            this._addPropertyToModelBinderConfig(Container.resolveType(expression.memberDefinition.type), builder);\r\n        } else {\r\n            if (!(builder.modelBinderConfig.$type && Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo && Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo($data.Entity)))\r\n                builder.modelBinderConfig['$source'] = expression.memberName;\r\n        }\r\n    },\r\n    VisitEntitySetExpression: function (expression, builder) {\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, builder);\r\n            this.Visit(expression.selector, builder);\r\n        }\r\n\r\n    },\r\n    VisitComplexTypeExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n\r\n\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            if (builder.modelBinderConfig.$selector instanceof $data.Array) {\r\n                var temp = builder.modelBinderConfig.$selector[1];\r\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.selector.memberName + '.results';\r\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.selector.memberName;\r\n            } else {\r\n                builder.modelBinderConfig.$selector += '.' + expression.selector.memberName;\r\n            }\r\n\r\n        } else {\r\n            if (this._isoDataProvider) {\r\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.selector.memberName + '.results', 'json:' + expression.selector.memberName];\r\n            } else {\r\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.selector.memberName;\r\n            }\r\n        }\r\n    },\r\n    VisitEntityExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, builder) {\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            if (builder.modelBinderConfig.$selector instanceof $data.Array) {\r\n                var temp = builder.modelBinderConfig.$selector[1];\r\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.associationInfo.FromPropertyName + '.results';\r\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.associationInfo.FromPropertyName;\r\n            } else {\r\n                builder.modelBinderConfig.$selector += '.' + expression.associationInfo.FromPropertyName;\r\n            }\r\n\r\n        } else {\r\n            if (this._isoDataProvider) {\r\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.associationInfo.FromPropertyName + '.results', 'json:' + expression.associationInfo.FromPropertyName];\r\n            } else {\r\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.associationInfo.FromPropertyName;\r\n            }\r\n        }\r\n\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = $data.Object;\r\n        expression.members.forEach(function (of) {\r\n            this.Visit(of, builder);\r\n        }, this);\r\n    },\r\n    VisitObjectFieldExpression: function (expression, builder) {\r\n        builder.selectModelBinderProperty(expression.fieldName);\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntityAsProjection(expression, builder);\r\n        } else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n        builder.popModelBinderProperty();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Transaction', null, null, {\r\n    constructor: function () {\r\n        this._objectId = (new Date()).getTime();\r\n        $data.Trace.log(\"create: \", this._objectId);\r\n\r\n        this.oncomplete = new $data.Event(\"oncomplete\", this);\r\n        this.onerror = new $data.Event(\"onerror\", this);\r\n    },\r\n    abort: function () {\r\n        Guard.raise(new Exception('Not Implemented', 'Not Implemented', arguments));\r\n    },\r\n\r\n    _objectId: { type: $data.Integer },\r\n    transaction: { type: $data.Object },\r\n\r\n    oncomplete: { type: $data.Event },\r\n    onerror: { type: $data.Event }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Validation.Defaults', null, null, null, {\r\n    validators: {\r\n        value: {\r\n            required: function (value, definedValue) { return !Object.isNullOrUndefined(value); },\r\n            customValidator: function (value, definedValue) { return Object.isNullOrUndefined(value) || typeof definedValue == \"function\" ? definedValue(value) : true; },\r\n\r\n            minValue: function (value, definedValue) { return Object.isNullOrUndefined(value) || value >= definedValue; },\r\n            maxValue: function (value, definedValue) { return Object.isNullOrUndefined(value) || value <= definedValue; },\r\n\r\n            minLength: function (value, definedValue) { return Object.isNullOrUndefined(value) || value.length >= definedValue; },\r\n            maxLength: function (value, definedValue) { return Object.isNullOrUndefined(value) || value.length <= definedValue; },\r\n            length: function (value, definedValue) { return Object.isNullOrUndefined(value) || value.length == definedValue; },\r\n            regex: function (value, definedValue) {\r\n                return Object.isNullOrUndefined(value) ||\r\n                    value.match(typeof definedValue === 'string'\r\n                        ? new RegExp((definedValue.indexOf('/') === 0 && definedValue.lastIndexOf('/') === (definedValue.length - 1)) ? definedValue.slice(1, -1) : definedValue)\r\n                        : definedValue)\r\n            }\r\n        }\r\n    },\r\n\r\n    _getGroupValidations: function (validations) {\r\n        var validators = {};\r\n        if (Array.isArray(validations)) {\r\n            for (var i = 0; i < validations.length; i++) {\r\n                var validator = validations[i];\r\n                if (typeof this.validators[validator] === 'function') {\r\n                    validators[validator] = this.validators[validator];\r\n                }\r\n            }\r\n        }\r\n\r\n        return validators;\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.Validation.EntityValidation', $data.Validation.EntityValidationBase, null, {\r\n\r\n    ValidateEntity: function (entity) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n\r\n        var errors = [];\r\n        entity.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            errors = errors.concat(this.ValidateEntityField(entity, memDef, undefined, true));\r\n        }, this);\r\n        return errors;\r\n    },\r\n    ValidateEntityField: function (entity, memberDefinition, newValue, valueNotSet) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        var errors = [];\r\n        var resolvedType = Container.resolveType(memberDefinition.dataType);\r\n        var typeName = Container.resolveName(resolvedType);\r\n        var value = !valueNotSet ? newValue : entity[memberDefinition.name];\r\n\r\n        if (!memberDefinition.inverseProperty && resolvedType && typeof resolvedType.isAssignableTo === 'function' && resolvedType.isAssignableTo($data.Entity)) {\r\n            typeName = $data.Entity.fullName;\r\n        }\r\n\r\n        this.fieldValidate(entity, memberDefinition, value, errors, typeName);\r\n        return errors;\r\n    },\r\n\r\n    getValidationValue: function (memberDefinition, validationName) {\r\n        var value;\r\n        if (memberDefinition[validationName] && memberDefinition[validationName].value)\r\n            value = memberDefinition[validationName].value;\r\n        else\r\n            value = memberDefinition[validationName];\r\n\r\n        if (this.convertableValidation[validationName]) {\r\n            var typeToConvert;\r\n            if (this.convertableValidation[validationName] === true) {\r\n                typeToConvert = memberDefinition.type;\r\n            } else {\r\n                typeToConvert = this.convertableValidation[validationName];\r\n            }\r\n\r\n            if (typeToConvert)\r\n                value = Container.convertTo(value, typeToConvert, memberDefinition.elementType);\r\n        }\r\n\r\n        return value;\r\n    },\r\n    getValidationMessage: function (memberDefinition, validationName, defaultMessage) {\r\n        var eMessage = defaultMessage;\r\n        if (typeof memberDefinition[validationName] == \"object\" && memberDefinition[validationName].message)\r\n            eMessage = memberDefinition[validationName].message;\r\n        else if (memberDefinition.errorMessage)\r\n            eMessage = memberDefinition.errorMessage;\r\n\r\n        return eMessage;\r\n    },\r\n    createValidationError: function (memberDefinition, validationName, defaultMessage) {\r\n        return new $data.Validation.ValidationError(this.getValidationMessage(memberDefinition, validationName, defaultMessage), memberDefinition, validationName);\r\n    },\r\n\r\n    convertableValidation: {\r\n        value: {\r\n            required: '$data.Boolean',\r\n            minValue: true,\r\n            maxValue: true,\r\n            minLength: '$data.Integer',\r\n            maxLength: '$data.Integer',\r\n            length: '$data.Integer'\r\n        }\r\n\r\n    },\r\n    supportedValidations: {\r\n        value: {\r\n            //'$data.Entity': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.ObjectID': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Byte': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.SByte': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Decimal': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Float': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Number': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int16': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Integer': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int32': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int64': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.String': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length', 'regex']),\r\n            '$data.Date': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.DateTimeOffset': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Time': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Day': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Duration': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Boolean': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Array': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'length']),\r\n            '$data.Object': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Guid': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Blob': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length']),\r\n            '$data.GeographyPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyCollection': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryCollection': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator'])\r\n        }\r\n    },\r\n\r\n    fieldValidate: function (entity, memberDefinition, value, errors, validationTypeName) {\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        ///<param name=\"value\" type=\"Object\" />\r\n        ///<param name=\"errors\" type=\"Array\" />\r\n        ///<param name=\"validationTypeName\" type=\"string\" />\r\n        if (entity.entityState == $data.EntityState.Modified && entity.changedProperties && entity.changedProperties.indexOf(memberDefinition) < 0)\r\n            return;\r\n\r\n        var validatonGroup = this.supportedValidations[validationTypeName];\r\n        if (validatonGroup) {\r\n            var validations = Object.keys(validatonGroup);\r\n            validations.forEach(function (validation) {\r\n                if (memberDefinition[validation] && validatonGroup[validation] && !validatonGroup[validation].call(entity, value, this.getValidationValue(memberDefinition, validation)))\r\n                    errors.push(this.createValidationError(memberDefinition, validation, 'Validation error!'));\r\n            }, this);\r\n\r\n            if (validationTypeName === $data.Entity.fullName && value instanceof $data.Entity && !value.isValid()) {\r\n                errors.push(this.createValidationError(memberDefinition, 'ComplexProperty', 'Validation error!'));\r\n            }\r\n        }\r\n    }\r\n\r\n}, null);\r\n\r\n$data.Validation.Entity = new $data.Validation.EntityValidation();\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Validation.ValidationError', null, null, {\r\n    constructor: function (message, propertyDefinition, type) {\r\n        ///<param name=\"message\" type=\"string\" />\r\n        ///<param name=\"propertyDefinition\" type=\"$data.MemberDefinition\" />\r\n\r\n        this.Message = message;\r\n        this.PropertyDefinition = propertyDefinition;\r\n        this.Type = type;\r\n    },\r\n    Type: { dataType: 'string' },\r\n    Message: { dataType: \"string\" },\r\n    PropertyDefinition: { dataType: $data.MemberDefinition }\r\n}, null);\r\n\r\n$data.Class.define('$data.Validation.EntityValidationBase', null, null, {\r\n\r\n    ValidateEntity: function (entity) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        return [];\r\n    },\r\n\r\n    ValidateEntityField: function (entity, memberDefinition) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        return [];\r\n    },\r\n\r\n    getValidationValue: function (memberDefinition, validationName) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    getValidationMessage: function (memberDefinition, validationName, defaultMessage) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n\r\n}, null);\r\n\r\n$data.Validation = $data.Validation || {};\r\n$data.Validation.Entity = new $data.Validation.EntityValidationBase();\r\n\r\nexport default $data\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('./Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _EntityValidationBase = require('./Validation/EntityValidationBase.js');\n\nvar _EntityValidationBase2 = _interopRequireDefault(_EntityValidationBase);\n\nvar _EntityValidation = require('./Validation/EntityValidation.js');\n\nvar _EntityValidation2 = _interopRequireDefault(_EntityValidation);\n\nvar _ChangeDistributorBase = require('./Notifications/ChangeDistributorBase.js');\n\nvar _ChangeDistributorBase2 = _interopRequireDefault(_ChangeDistributorBase);\n\nvar _ChangeCollectorBase = require('./Notifications/ChangeCollectorBase.js');\n\nvar _ChangeCollectorBase2 = _interopRequireDefault(_ChangeCollectorBase);\n\nvar _ChangeDistributor = require('./Notifications/ChangeDistributor.js');\n\nvar _ChangeDistributor2 = _interopRequireDefault(_ChangeDistributor);\n\nvar _ChangeCollector = require('./Notifications/ChangeCollector.js');\n\nvar _ChangeCollector2 = _interopRequireDefault(_ChangeCollector);\n\nvar _Transaction = require('./Transaction.js');\n\nvar _Transaction2 = _interopRequireDefault(_Transaction);\n\nvar _Access = require('./Access.js');\n\nvar _Access2 = _interopRequireDefault(_Access);\n\nvar _Promise = require('./Promise.js');\n\nvar _Promise2 = _interopRequireDefault(_Promise);\n\nvar _Entity = require('./Entity.js');\n\nvar _Entity2 = _interopRequireDefault(_Entity);\n\nvar _Enum = require('./Enum.js');\n\nvar _Enum2 = _interopRequireDefault(_Enum);\n\nvar _RelatedEntityProxy = require('./RelatedEntityProxy.js');\n\nvar _RelatedEntityProxy2 = _interopRequireDefault(_RelatedEntityProxy);\n\nvar _EntityContext = require('./EntityContext.js');\n\nvar _EntityContext2 = _interopRequireDefault(_EntityContext);\n\nvar _QueryProvider = require('./QueryProvider.js');\n\nvar _QueryProvider2 = _interopRequireDefault(_QueryProvider);\n\nvar _ModelBinder = require('./ModelBinder.js');\n\nvar _ModelBinder2 = _interopRequireDefault(_ModelBinder);\n\nvar _QueryBuilder = require('./QueryBuilder.js');\n\nvar _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);\n\nvar _Query = require('./Query.js');\n\nvar _Query2 = _interopRequireDefault(_Query);\n\nvar _Queryable = require('./Queryable.js');\n\nvar _Queryable2 = _interopRequireDefault(_Queryable);\n\nvar _EntitySet = require('./EntitySet.js');\n\nvar _EntitySet2 = _interopRequireDefault(_EntitySet);\n\nvar _EntityState = require('./EntityState.js');\n\nvar _EntityState2 = _interopRequireDefault(_EntityState);\n\nvar _EntityAttachModes = require('./EntityAttachModes.js');\n\nvar _EntityAttachModes2 = _interopRequireDefault(_EntityAttachModes);\n\nvar _EntityStateManager = require('./EntityStateManager.js');\n\nvar _EntityStateManager2 = _interopRequireDefault(_EntityStateManager);\n\nvar _ItemStore = require('./ItemStore.js');\n\nvar _ItemStore2 = _interopRequireDefault(_ItemStore);\n\nvar _StorageProviderLoader = require('./StorageProviderLoader.js');\n\nvar _StorageProviderLoader2 = _interopRequireDefault(_StorageProviderLoader);\n\nvar _StorageProviderBase = require('./StorageProviderBase.js');\n\nvar _StorageProviderBase2 = _interopRequireDefault(_StorageProviderBase);\n\nvar _ServiceOperation = require('./ServiceOperation.js');\n\nvar _ServiceOperation2 = _interopRequireDefault(_ServiceOperation);\n\nvar _EntityWrapper = require('./EntityWrapper.js');\n\nvar _EntityWrapper2 = _interopRequireDefault(_EntityWrapper);\n\nvar _jQueryAjaxWrapper = require('./Ajax/jQueryAjaxWrapper.js');\n\nvar _jQueryAjaxWrapper2 = _interopRequireDefault(_jQueryAjaxWrapper);\n\nvar _WinJSAjaxWrapper = require('./Ajax/WinJSAjaxWrapper.js');\n\nvar _WinJSAjaxWrapper2 = _interopRequireDefault(_WinJSAjaxWrapper);\n\nvar _ExtJSAjaxWrapper = require('./Ajax/ExtJSAjaxWrapper.js');\n\nvar _ExtJSAjaxWrapper2 = _interopRequireDefault(_ExtJSAjaxWrapper);\n\nvar _AjaxStub = require('./Ajax/AjaxStub.js');\n\nvar _AjaxStub2 = _interopRequireDefault(_AjaxStub);\n\nvar _modelBinderConfigCompiler = require('./StorageProviders/modelBinderConfigCompiler.js');\n\nvar _modelBinderConfigCompiler2 = _interopRequireDefault(_modelBinderConfigCompiler);\n\nvar _AuthenticationBase = require('./Authentication/AuthenticationBase.js');\n\nvar _AuthenticationBase2 = _interopRequireDefault(_AuthenticationBase);\n\nvar _Anonymous = require('./Authentication/Anonymous.js');\n\nvar _Anonymous2 = _interopRequireDefault(_Anonymous);\n\nvar _FacebookAuth = require('./Authentication/FacebookAuth.js');\n\nvar _FacebookAuth2 = _interopRequireDefault(_FacebookAuth);\n\nvar _BasicAuth = require('./Authentication/BasicAuth.js');\n\nvar _BasicAuth2 = _interopRequireDefault(_BasicAuth);\n\nvar _deferred = require('../JayDataModules/deferred.js');\n\nvar _deferred2 = _interopRequireDefault(_deferred);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import JayStorm from './JayStorm.js';\n\nexports.default = _index2.default;\n//import JaySvcUtil from '../JaySvcUtil/JaySvcUtil.js';\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('./TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('./Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = require('./JaySvcUtil/index.js');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nvar _index7 = require('./Types/index.js');\n\nvar _index8 = _interopRequireDefault(_index7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0="],"sourceRoot":"/source/"}